// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Constraints_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Constraints_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Constraints_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Constraints_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Constraints_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Constraints_5ftest_2eproto;
namespace blox_test {
namespace Constraints {
class AnalogConstraint;
struct AnalogConstraintDefaultTypeInternal;
extern AnalogConstraintDefaultTypeInternal _AnalogConstraint_default_instance_;
class AnalogConstraints;
struct AnalogConstraintsDefaultTypeInternal;
extern AnalogConstraintsDefaultTypeInternal _AnalogConstraints_default_instance_;
class Balanced;
struct BalancedDefaultTypeInternal;
extern BalancedDefaultTypeInternal _Balanced_default_instance_;
class DigitalConstraint;
struct DigitalConstraintDefaultTypeInternal;
extern DigitalConstraintDefaultTypeInternal _DigitalConstraint_default_instance_;
class DigitalConstraints;
struct DigitalConstraintsDefaultTypeInternal;
extern DigitalConstraintsDefaultTypeInternal _DigitalConstraints_default_instance_;
class Mutexed;
struct MutexedDefaultTypeInternal;
extern MutexedDefaultTypeInternal _Mutexed_default_instance_;
}  // namespace Constraints
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::Constraints::AnalogConstraint* Arena::CreateMaybeMessage<::blox_test::Constraints::AnalogConstraint>(Arena*);
template<> ::blox_test::Constraints::AnalogConstraints* Arena::CreateMaybeMessage<::blox_test::Constraints::AnalogConstraints>(Arena*);
template<> ::blox_test::Constraints::Balanced* Arena::CreateMaybeMessage<::blox_test::Constraints::Balanced>(Arena*);
template<> ::blox_test::Constraints::DigitalConstraint* Arena::CreateMaybeMessage<::blox_test::Constraints::DigitalConstraint>(Arena*);
template<> ::blox_test::Constraints::DigitalConstraints* Arena::CreateMaybeMessage<::blox_test::Constraints::DigitalConstraints>(Arena*);
template<> ::blox_test::Constraints::Mutexed* Arena::CreateMaybeMessage<::blox_test::Constraints::Mutexed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace Constraints {

// ===================================================================

class Balanced final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Constraints.Balanced) */ {
 public:
  inline Balanced() : Balanced(nullptr) {}
  ~Balanced() override;
  explicit PROTOBUF_CONSTEXPR Balanced(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balanced(const Balanced& from);
  Balanced(Balanced&& from) noexcept
    : Balanced() {
    *this = ::std::move(from);
  }

  inline Balanced& operator=(const Balanced& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balanced& operator=(Balanced&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balanced& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balanced* internal_default_instance() {
    return reinterpret_cast<const Balanced*>(
               &_Balanced_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Balanced& a, Balanced& b) {
    a.Swap(&b);
  }
  inline void Swap(Balanced* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balanced* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balanced* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balanced>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balanced& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balanced& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balanced* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Constraints.Balanced";
  }
  protected:
  explicit Balanced(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancerIdFieldNumber = 1,
    kGrantedFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // uint32 balancerId = 1 [(.nanopb) = {
  void clear_balancerid();
  uint32_t balancerid() const;
  void set_balancerid(uint32_t value);
  private:
  uint32_t _internal_balancerid() const;
  void _internal_set_balancerid(uint32_t value);
  public:

  // uint32 granted = 2 [(.brewblox.field) = {
  void clear_granted();
  uint32_t granted() const;
  void set_granted(uint32_t value);
  private:
  uint32_t _internal_granted() const;
  void _internal_set_granted(uint32_t value);
  public:

  // uint32 id = 3 [(.nanopb) = {
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Constraints.Balanced)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t balancerid_;
  uint32_t granted_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Constraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Mutexed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Constraints.Mutexed) */ {
 public:
  inline Mutexed() : Mutexed(nullptr) {}
  ~Mutexed() override;
  explicit PROTOBUF_CONSTEXPR Mutexed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mutexed(const Mutexed& from);
  Mutexed(Mutexed&& from) noexcept
    : Mutexed() {
    *this = ::std::move(from);
  }

  inline Mutexed& operator=(const Mutexed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutexed& operator=(Mutexed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mutexed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mutexed* internal_default_instance() {
    return reinterpret_cast<const Mutexed*>(
               &_Mutexed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mutexed& a, Mutexed& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutexed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutexed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mutexed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mutexed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mutexed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mutexed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutexed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Constraints.Mutexed";
  }
  protected:
  explicit Mutexed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutexIdFieldNumber = 1,
    kExtraHoldTimeFieldNumber = 2,
    kHasCustomHoldTimeFieldNumber = 3,
    kHasLockFieldNumber = 4,
  };
  // uint32 mutexId = 1 [(.nanopb) = {
  void clear_mutexid();
  uint32_t mutexid() const;
  void set_mutexid(uint32_t value);
  private:
  uint32_t _internal_mutexid() const;
  void _internal_set_mutexid(uint32_t value);
  public:

  // uint32 extraHoldTime = 2 [(.nanopb) = {
  void clear_extraholdtime();
  uint32_t extraholdtime() const;
  void set_extraholdtime(uint32_t value);
  private:
  uint32_t _internal_extraholdtime() const;
  void _internal_set_extraholdtime(uint32_t value);
  public:

  // bool hasCustomHoldTime = 3;
  void clear_hascustomholdtime();
  bool hascustomholdtime() const;
  void set_hascustomholdtime(bool value);
  private:
  bool _internal_hascustomholdtime() const;
  void _internal_set_hascustomholdtime(bool value);
  public:

  // bool hasLock = 4 [(.brewblox.field) = {
  void clear_haslock();
  bool haslock() const;
  void set_haslock(bool value);
  private:
  bool _internal_haslock() const;
  void _internal_set_haslock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Constraints.Mutexed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t mutexid_;
  uint32_t extraholdtime_;
  bool hascustomholdtime_;
  bool haslock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Constraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class AnalogConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Constraints.AnalogConstraint) */ {
 public:
  inline AnalogConstraint() : AnalogConstraint(nullptr) {}
  ~AnalogConstraint() override;
  explicit PROTOBUF_CONSTEXPR AnalogConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogConstraint(const AnalogConstraint& from);
  AnalogConstraint(AnalogConstraint&& from) noexcept
    : AnalogConstraint() {
    *this = ::std::move(from);
  }

  inline AnalogConstraint& operator=(const AnalogConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogConstraint& operator=(AnalogConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogConstraint& default_instance() {
    return *internal_default_instance();
  }
  enum ConstraintCase {
    kMin = 1,
    kMax = 2,
    kBalanced = 3,
    CONSTRAINT_NOT_SET = 0,
  };

  static inline const AnalogConstraint* internal_default_instance() {
    return reinterpret_cast<const AnalogConstraint*>(
               &_AnalogConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnalogConstraint& a, AnalogConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalogConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalogConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalogConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnalogConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Constraints.AnalogConstraint";
  }
  protected:
  explicit AnalogConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitingFieldNumber = 100,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kBalancedFieldNumber = 3,
  };
  // bool limiting = 100 [(.brewblox.field) = {
  void clear_limiting();
  bool limiting() const;
  void set_limiting(bool value);
  private:
  bool _internal_limiting() const;
  void _internal_set_limiting(bool value);
  public:

  // sint32 min = 1 [(.nanopb) = {
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  int32_t min() const;
  void set_min(int32_t value);
  private:
  int32_t _internal_min() const;
  void _internal_set_min(int32_t value);
  public:

  // sint32 max = 2 [(.nanopb) = {
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  int32_t max() const;
  void set_max(int32_t value);
  private:
  int32_t _internal_max() const;
  void _internal_set_max(int32_t value);
  public:

  // .blox_test.Constraints.Balanced balanced = 3;
  bool has_balanced() const;
  private:
  bool _internal_has_balanced() const;
  public:
  void clear_balanced();
  const ::blox_test::Constraints::Balanced& balanced() const;
  PROTOBUF_NODISCARD ::blox_test::Constraints::Balanced* release_balanced();
  ::blox_test::Constraints::Balanced* mutable_balanced();
  void set_allocated_balanced(::blox_test::Constraints::Balanced* balanced);
  private:
  const ::blox_test::Constraints::Balanced& _internal_balanced() const;
  ::blox_test::Constraints::Balanced* _internal_mutable_balanced();
  public:
  void unsafe_arena_set_allocated_balanced(
      ::blox_test::Constraints::Balanced* balanced);
  ::blox_test::Constraints::Balanced* unsafe_arena_release_balanced();

  void clear_constraint();
  ConstraintCase constraint_case() const;
  // @@protoc_insertion_point(class_scope:blox_test.Constraints.AnalogConstraint)
 private:
  class _Internal;
  void set_has_min();
  void set_has_max();
  void set_has_balanced();

  inline bool has_constraint() const;
  inline void clear_has_constraint();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool limiting_;
  union ConstraintUnion {
    constexpr ConstraintUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t min_;
    int32_t max_;
    ::blox_test::Constraints::Balanced* balanced_;
  } constraint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Constraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class AnalogConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Constraints.AnalogConstraints) */ {
 public:
  inline AnalogConstraints() : AnalogConstraints(nullptr) {}
  ~AnalogConstraints() override;
  explicit PROTOBUF_CONSTEXPR AnalogConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogConstraints(const AnalogConstraints& from);
  AnalogConstraints(AnalogConstraints&& from) noexcept
    : AnalogConstraints() {
    *this = ::std::move(from);
  }

  inline AnalogConstraints& operator=(const AnalogConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogConstraints& operator=(AnalogConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogConstraints* internal_default_instance() {
    return reinterpret_cast<const AnalogConstraints*>(
               &_AnalogConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnalogConstraints& a, AnalogConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalogConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalogConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalogConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnalogConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Constraints.AnalogConstraints";
  }
  protected:
  explicit AnalogConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 1,
  };
  // repeated .blox_test.Constraints.AnalogConstraint constraints = 1 [(.nanopb) = {
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::blox_test::Constraints::AnalogConstraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::AnalogConstraint >*
      mutable_constraints();
  private:
  const ::blox_test::Constraints::AnalogConstraint& _internal_constraints(int index) const;
  ::blox_test::Constraints::AnalogConstraint* _internal_add_constraints();
  public:
  const ::blox_test::Constraints::AnalogConstraint& constraints(int index) const;
  ::blox_test::Constraints::AnalogConstraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::AnalogConstraint >&
      constraints() const;

  // @@protoc_insertion_point(class_scope:blox_test.Constraints.AnalogConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::AnalogConstraint > constraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Constraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DigitalConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Constraints.DigitalConstraint) */ {
 public:
  inline DigitalConstraint() : DigitalConstraint(nullptr) {}
  ~DigitalConstraint() override;
  explicit PROTOBUF_CONSTEXPR DigitalConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalConstraint(const DigitalConstraint& from);
  DigitalConstraint(DigitalConstraint&& from) noexcept
    : DigitalConstraint() {
    *this = ::std::move(from);
  }

  inline DigitalConstraint& operator=(const DigitalConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalConstraint& operator=(DigitalConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalConstraint& default_instance() {
    return *internal_default_instance();
  }
  enum ConstraintCase {
    kMinOff = 1,
    kMinOn = 2,
    kMutexed = 4,
    kDelayedOff = 5,
    kDelayedOn = 6,
    kMutex = 3,
    CONSTRAINT_NOT_SET = 0,
  };

  static inline const DigitalConstraint* internal_default_instance() {
    return reinterpret_cast<const DigitalConstraint*>(
               &_DigitalConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DigitalConstraint& a, DigitalConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DigitalConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Constraints.DigitalConstraint";
  }
  protected:
  explicit DigitalConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitingFieldNumber = 100,
    kRemainingFieldNumber = 101,
    kMinOffFieldNumber = 1,
    kMinOnFieldNumber = 2,
    kMutexedFieldNumber = 4,
    kDelayedOffFieldNumber = 5,
    kDelayedOnFieldNumber = 6,
    kMutexFieldNumber = 3,
  };
  // uint32 limiting = 100 [(.nanopb) = {
  void clear_limiting();
  uint32_t limiting() const;
  void set_limiting(uint32_t value);
  private:
  uint32_t _internal_limiting() const;
  void _internal_set_limiting(uint32_t value);
  public:

  // uint32 remaining = 101 [(.nanopb) = {
  void clear_remaining();
  uint32_t remaining() const;
  void set_remaining(uint32_t value);
  private:
  uint32_t _internal_remaining() const;
  void _internal_set_remaining(uint32_t value);
  public:

  // uint32 minOff = 1 [(.nanopb) = {
  bool has_minoff() const;
  private:
  bool _internal_has_minoff() const;
  public:
  void clear_minoff();
  uint32_t minoff() const;
  void set_minoff(uint32_t value);
  private:
  uint32_t _internal_minoff() const;
  void _internal_set_minoff(uint32_t value);
  public:

  // uint32 minOn = 2 [(.nanopb) = {
  bool has_minon() const;
  private:
  bool _internal_has_minon() const;
  public:
  void clear_minon();
  uint32_t minon() const;
  void set_minon(uint32_t value);
  private:
  uint32_t _internal_minon() const;
  void _internal_set_minon(uint32_t value);
  public:

  // .blox_test.Constraints.Mutexed mutexed = 4;
  bool has_mutexed() const;
  private:
  bool _internal_has_mutexed() const;
  public:
  void clear_mutexed();
  const ::blox_test::Constraints::Mutexed& mutexed() const;
  PROTOBUF_NODISCARD ::blox_test::Constraints::Mutexed* release_mutexed();
  ::blox_test::Constraints::Mutexed* mutable_mutexed();
  void set_allocated_mutexed(::blox_test::Constraints::Mutexed* mutexed);
  private:
  const ::blox_test::Constraints::Mutexed& _internal_mutexed() const;
  ::blox_test::Constraints::Mutexed* _internal_mutable_mutexed();
  public:
  void unsafe_arena_set_allocated_mutexed(
      ::blox_test::Constraints::Mutexed* mutexed);
  ::blox_test::Constraints::Mutexed* unsafe_arena_release_mutexed();

  // uint32 delayedOff = 5 [(.nanopb) = {
  bool has_delayedoff() const;
  private:
  bool _internal_has_delayedoff() const;
  public:
  void clear_delayedoff();
  uint32_t delayedoff() const;
  void set_delayedoff(uint32_t value);
  private:
  uint32_t _internal_delayedoff() const;
  void _internal_set_delayedoff(uint32_t value);
  public:

  // uint32 delayedOn = 6 [(.nanopb) = {
  bool has_delayedon() const;
  private:
  bool _internal_has_delayedon() const;
  public:
  void clear_delayedon();
  uint32_t delayedon() const;
  void set_delayedon(uint32_t value);
  private:
  uint32_t _internal_delayedon() const;
  void _internal_set_delayedon(uint32_t value);
  public:

  // uint32 mutex = 3 [(.nanopb) = {
  bool has_mutex() const;
  private:
  bool _internal_has_mutex() const;
  public:
  void clear_mutex();
  uint32_t mutex() const;
  void set_mutex(uint32_t value);
  private:
  uint32_t _internal_mutex() const;
  void _internal_set_mutex(uint32_t value);
  public:

  void clear_constraint();
  ConstraintCase constraint_case() const;
  // @@protoc_insertion_point(class_scope:blox_test.Constraints.DigitalConstraint)
 private:
  class _Internal;
  void set_has_minoff();
  void set_has_minon();
  void set_has_mutexed();
  void set_has_delayedoff();
  void set_has_delayedon();
  void set_has_mutex();

  inline bool has_constraint() const;
  inline void clear_has_constraint();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t limiting_;
  uint32_t remaining_;
  union ConstraintUnion {
    constexpr ConstraintUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t minoff_;
    uint32_t minon_;
    ::blox_test::Constraints::Mutexed* mutexed_;
    uint32_t delayedoff_;
    uint32_t delayedon_;
    uint32_t mutex_;
  } constraint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Constraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DigitalConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Constraints.DigitalConstraints) */ {
 public:
  inline DigitalConstraints() : DigitalConstraints(nullptr) {}
  ~DigitalConstraints() override;
  explicit PROTOBUF_CONSTEXPR DigitalConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalConstraints(const DigitalConstraints& from);
  DigitalConstraints(DigitalConstraints&& from) noexcept
    : DigitalConstraints() {
    *this = ::std::move(from);
  }

  inline DigitalConstraints& operator=(const DigitalConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalConstraints& operator=(DigitalConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalConstraints* internal_default_instance() {
    return reinterpret_cast<const DigitalConstraints*>(
               &_DigitalConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DigitalConstraints& a, DigitalConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DigitalConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Constraints.DigitalConstraints";
  }
  protected:
  explicit DigitalConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 1,
  };
  // repeated .blox_test.Constraints.DigitalConstraint constraints = 1 [(.nanopb) = {
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::blox_test::Constraints::DigitalConstraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::DigitalConstraint >*
      mutable_constraints();
  private:
  const ::blox_test::Constraints::DigitalConstraint& _internal_constraints(int index) const;
  ::blox_test::Constraints::DigitalConstraint* _internal_add_constraints();
  public:
  const ::blox_test::Constraints::DigitalConstraint& constraints(int index) const;
  ::blox_test::Constraints::DigitalConstraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::DigitalConstraint >&
      constraints() const;

  // @@protoc_insertion_point(class_scope:blox_test.Constraints.DigitalConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::DigitalConstraint > constraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Constraints_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Balanced

// uint32 balancerId = 1 [(.nanopb) = {
inline void Balanced::clear_balancerid() {
  balancerid_ = 0u;
}
inline uint32_t Balanced::_internal_balancerid() const {
  return balancerid_;
}
inline uint32_t Balanced::balancerid() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.Balanced.balancerId)
  return _internal_balancerid();
}
inline void Balanced::_internal_set_balancerid(uint32_t value) {
  
  balancerid_ = value;
}
inline void Balanced::set_balancerid(uint32_t value) {
  _internal_set_balancerid(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.Balanced.balancerId)
}

// uint32 granted = 2 [(.brewblox.field) = {
inline void Balanced::clear_granted() {
  granted_ = 0u;
}
inline uint32_t Balanced::_internal_granted() const {
  return granted_;
}
inline uint32_t Balanced::granted() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.Balanced.granted)
  return _internal_granted();
}
inline void Balanced::_internal_set_granted(uint32_t value) {
  
  granted_ = value;
}
inline void Balanced::set_granted(uint32_t value) {
  _internal_set_granted(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.Balanced.granted)
}

// uint32 id = 3 [(.nanopb) = {
inline void Balanced::clear_id() {
  id_ = 0u;
}
inline uint32_t Balanced::_internal_id() const {
  return id_;
}
inline uint32_t Balanced::id() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.Balanced.id)
  return _internal_id();
}
inline void Balanced::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Balanced::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.Balanced.id)
}

// -------------------------------------------------------------------

// Mutexed

// uint32 mutexId = 1 [(.nanopb) = {
inline void Mutexed::clear_mutexid() {
  mutexid_ = 0u;
}
inline uint32_t Mutexed::_internal_mutexid() const {
  return mutexid_;
}
inline uint32_t Mutexed::mutexid() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.Mutexed.mutexId)
  return _internal_mutexid();
}
inline void Mutexed::_internal_set_mutexid(uint32_t value) {
  
  mutexid_ = value;
}
inline void Mutexed::set_mutexid(uint32_t value) {
  _internal_set_mutexid(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.Mutexed.mutexId)
}

// uint32 extraHoldTime = 2 [(.nanopb) = {
inline void Mutexed::clear_extraholdtime() {
  extraholdtime_ = 0u;
}
inline uint32_t Mutexed::_internal_extraholdtime() const {
  return extraholdtime_;
}
inline uint32_t Mutexed::extraholdtime() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.Mutexed.extraHoldTime)
  return _internal_extraholdtime();
}
inline void Mutexed::_internal_set_extraholdtime(uint32_t value) {
  
  extraholdtime_ = value;
}
inline void Mutexed::set_extraholdtime(uint32_t value) {
  _internal_set_extraholdtime(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.Mutexed.extraHoldTime)
}

// bool hasCustomHoldTime = 3;
inline void Mutexed::clear_hascustomholdtime() {
  hascustomholdtime_ = false;
}
inline bool Mutexed::_internal_hascustomholdtime() const {
  return hascustomholdtime_;
}
inline bool Mutexed::hascustomholdtime() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.Mutexed.hasCustomHoldTime)
  return _internal_hascustomholdtime();
}
inline void Mutexed::_internal_set_hascustomholdtime(bool value) {
  
  hascustomholdtime_ = value;
}
inline void Mutexed::set_hascustomholdtime(bool value) {
  _internal_set_hascustomholdtime(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.Mutexed.hasCustomHoldTime)
}

// bool hasLock = 4 [(.brewblox.field) = {
inline void Mutexed::clear_haslock() {
  haslock_ = false;
}
inline bool Mutexed::_internal_haslock() const {
  return haslock_;
}
inline bool Mutexed::haslock() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.Mutexed.hasLock)
  return _internal_haslock();
}
inline void Mutexed::_internal_set_haslock(bool value) {
  
  haslock_ = value;
}
inline void Mutexed::set_haslock(bool value) {
  _internal_set_haslock(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.Mutexed.hasLock)
}

// -------------------------------------------------------------------

// AnalogConstraint

// sint32 min = 1 [(.nanopb) = {
inline bool AnalogConstraint::_internal_has_min() const {
  return constraint_case() == kMin;
}
inline bool AnalogConstraint::has_min() const {
  return _internal_has_min();
}
inline void AnalogConstraint::set_has_min() {
  _oneof_case_[0] = kMin;
}
inline void AnalogConstraint::clear_min() {
  if (_internal_has_min()) {
    constraint_.min_ = 0;
    clear_has_constraint();
  }
}
inline int32_t AnalogConstraint::_internal_min() const {
  if (_internal_has_min()) {
    return constraint_.min_;
  }
  return 0;
}
inline void AnalogConstraint::_internal_set_min(int32_t value) {
  if (!_internal_has_min()) {
    clear_constraint();
    set_has_min();
  }
  constraint_.min_ = value;
}
inline int32_t AnalogConstraint::min() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.AnalogConstraint.min)
  return _internal_min();
}
inline void AnalogConstraint::set_min(int32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.AnalogConstraint.min)
}

// sint32 max = 2 [(.nanopb) = {
inline bool AnalogConstraint::_internal_has_max() const {
  return constraint_case() == kMax;
}
inline bool AnalogConstraint::has_max() const {
  return _internal_has_max();
}
inline void AnalogConstraint::set_has_max() {
  _oneof_case_[0] = kMax;
}
inline void AnalogConstraint::clear_max() {
  if (_internal_has_max()) {
    constraint_.max_ = 0;
    clear_has_constraint();
  }
}
inline int32_t AnalogConstraint::_internal_max() const {
  if (_internal_has_max()) {
    return constraint_.max_;
  }
  return 0;
}
inline void AnalogConstraint::_internal_set_max(int32_t value) {
  if (!_internal_has_max()) {
    clear_constraint();
    set_has_max();
  }
  constraint_.max_ = value;
}
inline int32_t AnalogConstraint::max() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.AnalogConstraint.max)
  return _internal_max();
}
inline void AnalogConstraint::set_max(int32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.AnalogConstraint.max)
}

// .blox_test.Constraints.Balanced balanced = 3;
inline bool AnalogConstraint::_internal_has_balanced() const {
  return constraint_case() == kBalanced;
}
inline bool AnalogConstraint::has_balanced() const {
  return _internal_has_balanced();
}
inline void AnalogConstraint::set_has_balanced() {
  _oneof_case_[0] = kBalanced;
}
inline void AnalogConstraint::clear_balanced() {
  if (_internal_has_balanced()) {
    if (GetArenaForAllocation() == nullptr) {
      delete constraint_.balanced_;
    }
    clear_has_constraint();
  }
}
inline ::blox_test::Constraints::Balanced* AnalogConstraint::release_balanced() {
  // @@protoc_insertion_point(field_release:blox_test.Constraints.AnalogConstraint.balanced)
  if (_internal_has_balanced()) {
    clear_has_constraint();
    ::blox_test::Constraints::Balanced* temp = constraint_.balanced_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.balanced_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Constraints::Balanced& AnalogConstraint::_internal_balanced() const {
  return _internal_has_balanced()
      ? *constraint_.balanced_
      : reinterpret_cast< ::blox_test::Constraints::Balanced&>(::blox_test::Constraints::_Balanced_default_instance_);
}
inline const ::blox_test::Constraints::Balanced& AnalogConstraint::balanced() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.AnalogConstraint.balanced)
  return _internal_balanced();
}
inline ::blox_test::Constraints::Balanced* AnalogConstraint::unsafe_arena_release_balanced() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Constraints.AnalogConstraint.balanced)
  if (_internal_has_balanced()) {
    clear_has_constraint();
    ::blox_test::Constraints::Balanced* temp = constraint_.balanced_;
    constraint_.balanced_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnalogConstraint::unsafe_arena_set_allocated_balanced(::blox_test::Constraints::Balanced* balanced) {
  clear_constraint();
  if (balanced) {
    set_has_balanced();
    constraint_.balanced_ = balanced;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Constraints.AnalogConstraint.balanced)
}
inline ::blox_test::Constraints::Balanced* AnalogConstraint::_internal_mutable_balanced() {
  if (!_internal_has_balanced()) {
    clear_constraint();
    set_has_balanced();
    constraint_.balanced_ = CreateMaybeMessage< ::blox_test::Constraints::Balanced >(GetArenaForAllocation());
  }
  return constraint_.balanced_;
}
inline ::blox_test::Constraints::Balanced* AnalogConstraint::mutable_balanced() {
  ::blox_test::Constraints::Balanced* _msg = _internal_mutable_balanced();
  // @@protoc_insertion_point(field_mutable:blox_test.Constraints.AnalogConstraint.balanced)
  return _msg;
}

// bool limiting = 100 [(.brewblox.field) = {
inline void AnalogConstraint::clear_limiting() {
  limiting_ = false;
}
inline bool AnalogConstraint::_internal_limiting() const {
  return limiting_;
}
inline bool AnalogConstraint::limiting() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.AnalogConstraint.limiting)
  return _internal_limiting();
}
inline void AnalogConstraint::_internal_set_limiting(bool value) {
  
  limiting_ = value;
}
inline void AnalogConstraint::set_limiting(bool value) {
  _internal_set_limiting(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.AnalogConstraint.limiting)
}

inline bool AnalogConstraint::has_constraint() const {
  return constraint_case() != CONSTRAINT_NOT_SET;
}
inline void AnalogConstraint::clear_has_constraint() {
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}
inline AnalogConstraint::ConstraintCase AnalogConstraint::constraint_case() const {
  return AnalogConstraint::ConstraintCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AnalogConstraints

// repeated .blox_test.Constraints.AnalogConstraint constraints = 1 [(.nanopb) = {
inline int AnalogConstraints::_internal_constraints_size() const {
  return constraints_.size();
}
inline int AnalogConstraints::constraints_size() const {
  return _internal_constraints_size();
}
inline void AnalogConstraints::clear_constraints() {
  constraints_.Clear();
}
inline ::blox_test::Constraints::AnalogConstraint* AnalogConstraints::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.Constraints.AnalogConstraints.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::AnalogConstraint >*
AnalogConstraints::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.Constraints.AnalogConstraints.constraints)
  return &constraints_;
}
inline const ::blox_test::Constraints::AnalogConstraint& AnalogConstraints::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::blox_test::Constraints::AnalogConstraint& AnalogConstraints::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.AnalogConstraints.constraints)
  return _internal_constraints(index);
}
inline ::blox_test::Constraints::AnalogConstraint* AnalogConstraints::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::blox_test::Constraints::AnalogConstraint* AnalogConstraints::add_constraints() {
  ::blox_test::Constraints::AnalogConstraint* _add = _internal_add_constraints();
  // @@protoc_insertion_point(field_add:blox_test.Constraints.AnalogConstraints.constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::AnalogConstraint >&
AnalogConstraints::constraints() const {
  // @@protoc_insertion_point(field_list:blox_test.Constraints.AnalogConstraints.constraints)
  return constraints_;
}

// -------------------------------------------------------------------

// DigitalConstraint

// uint32 minOff = 1 [(.nanopb) = {
inline bool DigitalConstraint::_internal_has_minoff() const {
  return constraint_case() == kMinOff;
}
inline bool DigitalConstraint::has_minoff() const {
  return _internal_has_minoff();
}
inline void DigitalConstraint::set_has_minoff() {
  _oneof_case_[0] = kMinOff;
}
inline void DigitalConstraint::clear_minoff() {
  if (_internal_has_minoff()) {
    constraint_.minoff_ = 0u;
    clear_has_constraint();
  }
}
inline uint32_t DigitalConstraint::_internal_minoff() const {
  if (_internal_has_minoff()) {
    return constraint_.minoff_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_minoff(uint32_t value) {
  if (!_internal_has_minoff()) {
    clear_constraint();
    set_has_minoff();
  }
  constraint_.minoff_ = value;
}
inline uint32_t DigitalConstraint::minoff() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.minOff)
  return _internal_minoff();
}
inline void DigitalConstraint::set_minoff(uint32_t value) {
  _internal_set_minoff(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.DigitalConstraint.minOff)
}

// uint32 minOn = 2 [(.nanopb) = {
inline bool DigitalConstraint::_internal_has_minon() const {
  return constraint_case() == kMinOn;
}
inline bool DigitalConstraint::has_minon() const {
  return _internal_has_minon();
}
inline void DigitalConstraint::set_has_minon() {
  _oneof_case_[0] = kMinOn;
}
inline void DigitalConstraint::clear_minon() {
  if (_internal_has_minon()) {
    constraint_.minon_ = 0u;
    clear_has_constraint();
  }
}
inline uint32_t DigitalConstraint::_internal_minon() const {
  if (_internal_has_minon()) {
    return constraint_.minon_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_minon(uint32_t value) {
  if (!_internal_has_minon()) {
    clear_constraint();
    set_has_minon();
  }
  constraint_.minon_ = value;
}
inline uint32_t DigitalConstraint::minon() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.minOn)
  return _internal_minon();
}
inline void DigitalConstraint::set_minon(uint32_t value) {
  _internal_set_minon(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.DigitalConstraint.minOn)
}

// .blox_test.Constraints.Mutexed mutexed = 4;
inline bool DigitalConstraint::_internal_has_mutexed() const {
  return constraint_case() == kMutexed;
}
inline bool DigitalConstraint::has_mutexed() const {
  return _internal_has_mutexed();
}
inline void DigitalConstraint::set_has_mutexed() {
  _oneof_case_[0] = kMutexed;
}
inline void DigitalConstraint::clear_mutexed() {
  if (_internal_has_mutexed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete constraint_.mutexed_;
    }
    clear_has_constraint();
  }
}
inline ::blox_test::Constraints::Mutexed* DigitalConstraint::release_mutexed() {
  // @@protoc_insertion_point(field_release:blox_test.Constraints.DigitalConstraint.mutexed)
  if (_internal_has_mutexed()) {
    clear_has_constraint();
    ::blox_test::Constraints::Mutexed* temp = constraint_.mutexed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.mutexed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Constraints::Mutexed& DigitalConstraint::_internal_mutexed() const {
  return _internal_has_mutexed()
      ? *constraint_.mutexed_
      : reinterpret_cast< ::blox_test::Constraints::Mutexed&>(::blox_test::Constraints::_Mutexed_default_instance_);
}
inline const ::blox_test::Constraints::Mutexed& DigitalConstraint::mutexed() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.mutexed)
  return _internal_mutexed();
}
inline ::blox_test::Constraints::Mutexed* DigitalConstraint::unsafe_arena_release_mutexed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Constraints.DigitalConstraint.mutexed)
  if (_internal_has_mutexed()) {
    clear_has_constraint();
    ::blox_test::Constraints::Mutexed* temp = constraint_.mutexed_;
    constraint_.mutexed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DigitalConstraint::unsafe_arena_set_allocated_mutexed(::blox_test::Constraints::Mutexed* mutexed) {
  clear_constraint();
  if (mutexed) {
    set_has_mutexed();
    constraint_.mutexed_ = mutexed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Constraints.DigitalConstraint.mutexed)
}
inline ::blox_test::Constraints::Mutexed* DigitalConstraint::_internal_mutable_mutexed() {
  if (!_internal_has_mutexed()) {
    clear_constraint();
    set_has_mutexed();
    constraint_.mutexed_ = CreateMaybeMessage< ::blox_test::Constraints::Mutexed >(GetArenaForAllocation());
  }
  return constraint_.mutexed_;
}
inline ::blox_test::Constraints::Mutexed* DigitalConstraint::mutable_mutexed() {
  ::blox_test::Constraints::Mutexed* _msg = _internal_mutable_mutexed();
  // @@protoc_insertion_point(field_mutable:blox_test.Constraints.DigitalConstraint.mutexed)
  return _msg;
}

// uint32 delayedOff = 5 [(.nanopb) = {
inline bool DigitalConstraint::_internal_has_delayedoff() const {
  return constraint_case() == kDelayedOff;
}
inline bool DigitalConstraint::has_delayedoff() const {
  return _internal_has_delayedoff();
}
inline void DigitalConstraint::set_has_delayedoff() {
  _oneof_case_[0] = kDelayedOff;
}
inline void DigitalConstraint::clear_delayedoff() {
  if (_internal_has_delayedoff()) {
    constraint_.delayedoff_ = 0u;
    clear_has_constraint();
  }
}
inline uint32_t DigitalConstraint::_internal_delayedoff() const {
  if (_internal_has_delayedoff()) {
    return constraint_.delayedoff_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_delayedoff(uint32_t value) {
  if (!_internal_has_delayedoff()) {
    clear_constraint();
    set_has_delayedoff();
  }
  constraint_.delayedoff_ = value;
}
inline uint32_t DigitalConstraint::delayedoff() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.delayedOff)
  return _internal_delayedoff();
}
inline void DigitalConstraint::set_delayedoff(uint32_t value) {
  _internal_set_delayedoff(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.DigitalConstraint.delayedOff)
}

// uint32 delayedOn = 6 [(.nanopb) = {
inline bool DigitalConstraint::_internal_has_delayedon() const {
  return constraint_case() == kDelayedOn;
}
inline bool DigitalConstraint::has_delayedon() const {
  return _internal_has_delayedon();
}
inline void DigitalConstraint::set_has_delayedon() {
  _oneof_case_[0] = kDelayedOn;
}
inline void DigitalConstraint::clear_delayedon() {
  if (_internal_has_delayedon()) {
    constraint_.delayedon_ = 0u;
    clear_has_constraint();
  }
}
inline uint32_t DigitalConstraint::_internal_delayedon() const {
  if (_internal_has_delayedon()) {
    return constraint_.delayedon_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_delayedon(uint32_t value) {
  if (!_internal_has_delayedon()) {
    clear_constraint();
    set_has_delayedon();
  }
  constraint_.delayedon_ = value;
}
inline uint32_t DigitalConstraint::delayedon() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.delayedOn)
  return _internal_delayedon();
}
inline void DigitalConstraint::set_delayedon(uint32_t value) {
  _internal_set_delayedon(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.DigitalConstraint.delayedOn)
}

// uint32 mutex = 3 [(.nanopb) = {
inline bool DigitalConstraint::_internal_has_mutex() const {
  return constraint_case() == kMutex;
}
inline bool DigitalConstraint::has_mutex() const {
  return _internal_has_mutex();
}
inline void DigitalConstraint::set_has_mutex() {
  _oneof_case_[0] = kMutex;
}
inline void DigitalConstraint::clear_mutex() {
  if (_internal_has_mutex()) {
    constraint_.mutex_ = 0u;
    clear_has_constraint();
  }
}
inline uint32_t DigitalConstraint::_internal_mutex() const {
  if (_internal_has_mutex()) {
    return constraint_.mutex_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_mutex(uint32_t value) {
  if (!_internal_has_mutex()) {
    clear_constraint();
    set_has_mutex();
  }
  constraint_.mutex_ = value;
}
inline uint32_t DigitalConstraint::mutex() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.mutex)
  return _internal_mutex();
}
inline void DigitalConstraint::set_mutex(uint32_t value) {
  _internal_set_mutex(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.DigitalConstraint.mutex)
}

// uint32 limiting = 100 [(.nanopb) = {
inline void DigitalConstraint::clear_limiting() {
  limiting_ = 0u;
}
inline uint32_t DigitalConstraint::_internal_limiting() const {
  return limiting_;
}
inline uint32_t DigitalConstraint::limiting() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.limiting)
  return _internal_limiting();
}
inline void DigitalConstraint::_internal_set_limiting(uint32_t value) {
  
  limiting_ = value;
}
inline void DigitalConstraint::set_limiting(uint32_t value) {
  _internal_set_limiting(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.DigitalConstraint.limiting)
}

// uint32 remaining = 101 [(.nanopb) = {
inline void DigitalConstraint::clear_remaining() {
  remaining_ = 0u;
}
inline uint32_t DigitalConstraint::_internal_remaining() const {
  return remaining_;
}
inline uint32_t DigitalConstraint::remaining() const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraint.remaining)
  return _internal_remaining();
}
inline void DigitalConstraint::_internal_set_remaining(uint32_t value) {
  
  remaining_ = value;
}
inline void DigitalConstraint::set_remaining(uint32_t value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:blox_test.Constraints.DigitalConstraint.remaining)
}

inline bool DigitalConstraint::has_constraint() const {
  return constraint_case() != CONSTRAINT_NOT_SET;
}
inline void DigitalConstraint::clear_has_constraint() {
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}
inline DigitalConstraint::ConstraintCase DigitalConstraint::constraint_case() const {
  return DigitalConstraint::ConstraintCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DigitalConstraints

// repeated .blox_test.Constraints.DigitalConstraint constraints = 1 [(.nanopb) = {
inline int DigitalConstraints::_internal_constraints_size() const {
  return constraints_.size();
}
inline int DigitalConstraints::constraints_size() const {
  return _internal_constraints_size();
}
inline void DigitalConstraints::clear_constraints() {
  constraints_.Clear();
}
inline ::blox_test::Constraints::DigitalConstraint* DigitalConstraints::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.Constraints.DigitalConstraints.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::DigitalConstraint >*
DigitalConstraints::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.Constraints.DigitalConstraints.constraints)
  return &constraints_;
}
inline const ::blox_test::Constraints::DigitalConstraint& DigitalConstraints::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::blox_test::Constraints::DigitalConstraint& DigitalConstraints::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.Constraints.DigitalConstraints.constraints)
  return _internal_constraints(index);
}
inline ::blox_test::Constraints::DigitalConstraint* DigitalConstraints::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::blox_test::Constraints::DigitalConstraint* DigitalConstraints::add_constraints() {
  ::blox_test::Constraints::DigitalConstraint* _add = _internal_add_constraints();
  // @@protoc_insertion_point(field_add:blox_test.Constraints.DigitalConstraints.constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Constraints::DigitalConstraint >&
DigitalConstraints::constraints() const {
  // @@protoc_insertion_point(field_list:blox_test.Constraints.DigitalConstraints.constraints)
  return constraints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Constraints
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Constraints_5ftest_2eproto
