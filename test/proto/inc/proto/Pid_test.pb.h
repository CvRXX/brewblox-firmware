// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pid_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Pid_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Pid_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "SetpointSensorPair_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Pid_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Pid_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Pid_5ftest_2eproto;
namespace blox_test {
namespace Pid {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace Pid
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::Pid::Block* Arena::CreateMaybeMessage<::blox_test::Pid::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace Pid {

// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Pid.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Pid.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrippedFieldsFieldNumber = 99,
    kInputIdFieldNumber = 1,
    kOutputIdFieldNumber = 2,
    kInputValueFieldNumber = 5,
    kInputSettingFieldNumber = 6,
    kOutputValueFieldNumber = 7,
    kOutputSettingFieldNumber = 8,
    kKpFieldNumber = 13,
    kTiFieldNumber = 14,
    kTdFieldNumber = 15,
    kPFieldNumber = 16,
    kEnabledFieldNumber = 11,
    kActiveFieldNumber = 12,
    kBoilModeActiveFieldNumber = 26,
    kIFieldNumber = 17,
    kDFieldNumber = 18,
    kErrorFieldNumber = 19,
    kIntegralFieldNumber = 20,
    kDerivativeFieldNumber = 21,
    kDrivenOutputIdFieldNumber = 22,
    kIntegralResetFieldNumber = 23,
    kBoilPointAdjustFieldNumber = 24,
    kBoilMinOutputFieldNumber = 25,
    kDerivativeFilterFieldNumber = 27,
  };
  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  uint32_t _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_strippedfields();
  public:
  uint32_t strippedfields(int index) const;
  void set_strippedfields(int index, uint32_t value);
  void add_strippedfields(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_strippedfields();

  // uint32 inputId = 1 [(.nanopb) = {
  void clear_inputid();
  uint32_t inputid() const;
  void set_inputid(uint32_t value);
  private:
  uint32_t _internal_inputid() const;
  void _internal_set_inputid(uint32_t value);
  public:

  // uint32 outputId = 2 [(.nanopb) = {
  void clear_outputid();
  uint32_t outputid() const;
  void set_outputid(uint32_t value);
  private:
  uint32_t _internal_outputid() const;
  void _internal_set_outputid(uint32_t value);
  public:

  // sint32 inputValue = 5 [(.nanopb) = {
  void clear_inputvalue();
  int32_t inputvalue() const;
  void set_inputvalue(int32_t value);
  private:
  int32_t _internal_inputvalue() const;
  void _internal_set_inputvalue(int32_t value);
  public:

  // sint32 inputSetting = 6 [(.nanopb) = {
  void clear_inputsetting();
  int32_t inputsetting() const;
  void set_inputsetting(int32_t value);
  private:
  int32_t _internal_inputsetting() const;
  void _internal_set_inputsetting(int32_t value);
  public:

  // sint32 outputValue = 7 [(.nanopb) = {
  void clear_outputvalue();
  int32_t outputvalue() const;
  void set_outputvalue(int32_t value);
  private:
  int32_t _internal_outputvalue() const;
  void _internal_set_outputvalue(int32_t value);
  public:

  // sint32 outputSetting = 8 [(.nanopb) = {
  void clear_outputsetting();
  int32_t outputsetting() const;
  void set_outputsetting(int32_t value);
  private:
  int32_t _internal_outputsetting() const;
  void _internal_set_outputsetting(int32_t value);
  public:

  // sint32 kp = 13 [(.nanopb) = {
  void clear_kp();
  int32_t kp() const;
  void set_kp(int32_t value);
  private:
  int32_t _internal_kp() const;
  void _internal_set_kp(int32_t value);
  public:

  // uint32 ti = 14 [(.nanopb) = {
  void clear_ti();
  uint32_t ti() const;
  void set_ti(uint32_t value);
  private:
  uint32_t _internal_ti() const;
  void _internal_set_ti(uint32_t value);
  public:

  // uint32 td = 15 [(.nanopb) = {
  void clear_td();
  uint32_t td() const;
  void set_td(uint32_t value);
  private:
  uint32_t _internal_td() const;
  void _internal_set_td(uint32_t value);
  public:

  // sint32 p = 16 [(.nanopb) = {
  void clear_p();
  int32_t p() const;
  void set_p(int32_t value);
  private:
  int32_t _internal_p() const;
  void _internal_set_p(int32_t value);
  public:

  // bool enabled = 11 [(.brewblox.field) = {
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool active = 12 [(.brewblox.field) = {
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // bool boilModeActive = 26 [(.brewblox.field) = {
  void clear_boilmodeactive();
  bool boilmodeactive() const;
  void set_boilmodeactive(bool value);
  private:
  bool _internal_boilmodeactive() const;
  void _internal_set_boilmodeactive(bool value);
  public:

  // sint32 i = 17 [(.nanopb) = {
  void clear_i();
  int32_t i() const;
  void set_i(int32_t value);
  private:
  int32_t _internal_i() const;
  void _internal_set_i(int32_t value);
  public:

  // sint32 d = 18 [(.nanopb) = {
  void clear_d();
  int32_t d() const;
  void set_d(int32_t value);
  private:
  int32_t _internal_d() const;
  void _internal_set_d(int32_t value);
  public:

  // sint32 error = 19 [(.nanopb) = {
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // sint32 integral = 20 [(.nanopb) = {
  void clear_integral();
  int32_t integral() const;
  void set_integral(int32_t value);
  private:
  int32_t _internal_integral() const;
  void _internal_set_integral(int32_t value);
  public:

  // sint32 derivative = 21 [(.nanopb) = {
  void clear_derivative();
  int32_t derivative() const;
  void set_derivative(int32_t value);
  private:
  int32_t _internal_derivative() const;
  void _internal_set_derivative(int32_t value);
  public:

  // uint32 drivenOutputId = 22 [(.nanopb) = {
  void clear_drivenoutputid();
  uint32_t drivenoutputid() const;
  void set_drivenoutputid(uint32_t value);
  private:
  uint32_t _internal_drivenoutputid() const;
  void _internal_set_drivenoutputid(uint32_t value);
  public:

  // sint32 integralReset = 23 [(.nanopb) = {
  void clear_integralreset();
  int32_t integralreset() const;
  void set_integralreset(int32_t value);
  private:
  int32_t _internal_integralreset() const;
  void _internal_set_integralreset(int32_t value);
  public:

  // sint32 boilPointAdjust = 24 [(.nanopb) = {
  void clear_boilpointadjust();
  int32_t boilpointadjust() const;
  void set_boilpointadjust(int32_t value);
  private:
  int32_t _internal_boilpointadjust() const;
  void _internal_set_boilpointadjust(int32_t value);
  public:

  // sint32 boilMinOutput = 25 [(.nanopb) = {
  void clear_boilminoutput();
  int32_t boilminoutput() const;
  void set_boilminoutput(int32_t value);
  private:
  int32_t _internal_boilminoutput() const;
  void _internal_set_boilminoutput(int32_t value);
  public:

  // .blox_test.SetpointSensorPair.FilterChoice derivativeFilter = 27 [(.brewblox.field) = {
  void clear_derivativefilter();
  ::blox_test::SetpointSensorPair::FilterChoice derivativefilter() const;
  void set_derivativefilter(::blox_test::SetpointSensorPair::FilterChoice value);
  private:
  ::blox_test::SetpointSensorPair::FilterChoice _internal_derivativefilter() const;
  void _internal_set_derivativefilter(::blox_test::SetpointSensorPair::FilterChoice value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Pid.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  uint32_t inputid_;
  uint32_t outputid_;
  int32_t inputvalue_;
  int32_t inputsetting_;
  int32_t outputvalue_;
  int32_t outputsetting_;
  int32_t kp_;
  uint32_t ti_;
  uint32_t td_;
  int32_t p_;
  bool enabled_;
  bool active_;
  bool boilmodeactive_;
  int32_t i_;
  int32_t d_;
  int32_t error_;
  int32_t integral_;
  int32_t derivative_;
  uint32_t drivenoutputid_;
  int32_t integralreset_;
  int32_t boilpointadjust_;
  int32_t boilminoutput_;
  int derivativefilter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Pid_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// uint32 inputId = 1 [(.nanopb) = {
inline void Block::clear_inputid() {
  inputid_ = 0u;
}
inline uint32_t Block::_internal_inputid() const {
  return inputid_;
}
inline uint32_t Block::inputid() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.inputId)
  return _internal_inputid();
}
inline void Block::_internal_set_inputid(uint32_t value) {
  
  inputid_ = value;
}
inline void Block::set_inputid(uint32_t value) {
  _internal_set_inputid(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.inputId)
}

// uint32 outputId = 2 [(.nanopb) = {
inline void Block::clear_outputid() {
  outputid_ = 0u;
}
inline uint32_t Block::_internal_outputid() const {
  return outputid_;
}
inline uint32_t Block::outputid() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.outputId)
  return _internal_outputid();
}
inline void Block::_internal_set_outputid(uint32_t value) {
  
  outputid_ = value;
}
inline void Block::set_outputid(uint32_t value) {
  _internal_set_outputid(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.outputId)
}

// sint32 inputValue = 5 [(.nanopb) = {
inline void Block::clear_inputvalue() {
  inputvalue_ = 0;
}
inline int32_t Block::_internal_inputvalue() const {
  return inputvalue_;
}
inline int32_t Block::inputvalue() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.inputValue)
  return _internal_inputvalue();
}
inline void Block::_internal_set_inputvalue(int32_t value) {
  
  inputvalue_ = value;
}
inline void Block::set_inputvalue(int32_t value) {
  _internal_set_inputvalue(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.inputValue)
}

// sint32 inputSetting = 6 [(.nanopb) = {
inline void Block::clear_inputsetting() {
  inputsetting_ = 0;
}
inline int32_t Block::_internal_inputsetting() const {
  return inputsetting_;
}
inline int32_t Block::inputsetting() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.inputSetting)
  return _internal_inputsetting();
}
inline void Block::_internal_set_inputsetting(int32_t value) {
  
  inputsetting_ = value;
}
inline void Block::set_inputsetting(int32_t value) {
  _internal_set_inputsetting(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.inputSetting)
}

// sint32 outputValue = 7 [(.nanopb) = {
inline void Block::clear_outputvalue() {
  outputvalue_ = 0;
}
inline int32_t Block::_internal_outputvalue() const {
  return outputvalue_;
}
inline int32_t Block::outputvalue() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.outputValue)
  return _internal_outputvalue();
}
inline void Block::_internal_set_outputvalue(int32_t value) {
  
  outputvalue_ = value;
}
inline void Block::set_outputvalue(int32_t value) {
  _internal_set_outputvalue(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.outputValue)
}

// sint32 outputSetting = 8 [(.nanopb) = {
inline void Block::clear_outputsetting() {
  outputsetting_ = 0;
}
inline int32_t Block::_internal_outputsetting() const {
  return outputsetting_;
}
inline int32_t Block::outputsetting() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.outputSetting)
  return _internal_outputsetting();
}
inline void Block::_internal_set_outputsetting(int32_t value) {
  
  outputsetting_ = value;
}
inline void Block::set_outputsetting(int32_t value) {
  _internal_set_outputsetting(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.outputSetting)
}

// bool enabled = 11 [(.brewblox.field) = {
inline void Block::clear_enabled() {
  enabled_ = false;
}
inline bool Block::_internal_enabled() const {
  return enabled_;
}
inline bool Block::enabled() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.enabled)
  return _internal_enabled();
}
inline void Block::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Block::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.enabled)
}

// bool active = 12 [(.brewblox.field) = {
inline void Block::clear_active() {
  active_ = false;
}
inline bool Block::_internal_active() const {
  return active_;
}
inline bool Block::active() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.active)
  return _internal_active();
}
inline void Block::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Block::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.active)
}

// sint32 kp = 13 [(.nanopb) = {
inline void Block::clear_kp() {
  kp_ = 0;
}
inline int32_t Block::_internal_kp() const {
  return kp_;
}
inline int32_t Block::kp() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.kp)
  return _internal_kp();
}
inline void Block::_internal_set_kp(int32_t value) {
  
  kp_ = value;
}
inline void Block::set_kp(int32_t value) {
  _internal_set_kp(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.kp)
}

// uint32 ti = 14 [(.nanopb) = {
inline void Block::clear_ti() {
  ti_ = 0u;
}
inline uint32_t Block::_internal_ti() const {
  return ti_;
}
inline uint32_t Block::ti() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.ti)
  return _internal_ti();
}
inline void Block::_internal_set_ti(uint32_t value) {
  
  ti_ = value;
}
inline void Block::set_ti(uint32_t value) {
  _internal_set_ti(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.ti)
}

// uint32 td = 15 [(.nanopb) = {
inline void Block::clear_td() {
  td_ = 0u;
}
inline uint32_t Block::_internal_td() const {
  return td_;
}
inline uint32_t Block::td() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.td)
  return _internal_td();
}
inline void Block::_internal_set_td(uint32_t value) {
  
  td_ = value;
}
inline void Block::set_td(uint32_t value) {
  _internal_set_td(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.td)
}

// sint32 p = 16 [(.nanopb) = {
inline void Block::clear_p() {
  p_ = 0;
}
inline int32_t Block::_internal_p() const {
  return p_;
}
inline int32_t Block::p() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.p)
  return _internal_p();
}
inline void Block::_internal_set_p(int32_t value) {
  
  p_ = value;
}
inline void Block::set_p(int32_t value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.p)
}

// sint32 i = 17 [(.nanopb) = {
inline void Block::clear_i() {
  i_ = 0;
}
inline int32_t Block::_internal_i() const {
  return i_;
}
inline int32_t Block::i() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.i)
  return _internal_i();
}
inline void Block::_internal_set_i(int32_t value) {
  
  i_ = value;
}
inline void Block::set_i(int32_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.i)
}

// sint32 d = 18 [(.nanopb) = {
inline void Block::clear_d() {
  d_ = 0;
}
inline int32_t Block::_internal_d() const {
  return d_;
}
inline int32_t Block::d() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.d)
  return _internal_d();
}
inline void Block::_internal_set_d(int32_t value) {
  
  d_ = value;
}
inline void Block::set_d(int32_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.d)
}

// sint32 error = 19 [(.nanopb) = {
inline void Block::clear_error() {
  error_ = 0;
}
inline int32_t Block::_internal_error() const {
  return error_;
}
inline int32_t Block::error() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.error)
  return _internal_error();
}
inline void Block::_internal_set_error(int32_t value) {
  
  error_ = value;
}
inline void Block::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.error)
}

// sint32 integral = 20 [(.nanopb) = {
inline void Block::clear_integral() {
  integral_ = 0;
}
inline int32_t Block::_internal_integral() const {
  return integral_;
}
inline int32_t Block::integral() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.integral)
  return _internal_integral();
}
inline void Block::_internal_set_integral(int32_t value) {
  
  integral_ = value;
}
inline void Block::set_integral(int32_t value) {
  _internal_set_integral(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.integral)
}

// sint32 derivative = 21 [(.nanopb) = {
inline void Block::clear_derivative() {
  derivative_ = 0;
}
inline int32_t Block::_internal_derivative() const {
  return derivative_;
}
inline int32_t Block::derivative() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.derivative)
  return _internal_derivative();
}
inline void Block::_internal_set_derivative(int32_t value) {
  
  derivative_ = value;
}
inline void Block::set_derivative(int32_t value) {
  _internal_set_derivative(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.derivative)
}

// uint32 drivenOutputId = 22 [(.nanopb) = {
inline void Block::clear_drivenoutputid() {
  drivenoutputid_ = 0u;
}
inline uint32_t Block::_internal_drivenoutputid() const {
  return drivenoutputid_;
}
inline uint32_t Block::drivenoutputid() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.drivenOutputId)
  return _internal_drivenoutputid();
}
inline void Block::_internal_set_drivenoutputid(uint32_t value) {
  
  drivenoutputid_ = value;
}
inline void Block::set_drivenoutputid(uint32_t value) {
  _internal_set_drivenoutputid(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.drivenOutputId)
}

// sint32 integralReset = 23 [(.nanopb) = {
inline void Block::clear_integralreset() {
  integralreset_ = 0;
}
inline int32_t Block::_internal_integralreset() const {
  return integralreset_;
}
inline int32_t Block::integralreset() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.integralReset)
  return _internal_integralreset();
}
inline void Block::_internal_set_integralreset(int32_t value) {
  
  integralreset_ = value;
}
inline void Block::set_integralreset(int32_t value) {
  _internal_set_integralreset(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.integralReset)
}

// sint32 boilPointAdjust = 24 [(.nanopb) = {
inline void Block::clear_boilpointadjust() {
  boilpointadjust_ = 0;
}
inline int32_t Block::_internal_boilpointadjust() const {
  return boilpointadjust_;
}
inline int32_t Block::boilpointadjust() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.boilPointAdjust)
  return _internal_boilpointadjust();
}
inline void Block::_internal_set_boilpointadjust(int32_t value) {
  
  boilpointadjust_ = value;
}
inline void Block::set_boilpointadjust(int32_t value) {
  _internal_set_boilpointadjust(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.boilPointAdjust)
}

// sint32 boilMinOutput = 25 [(.nanopb) = {
inline void Block::clear_boilminoutput() {
  boilminoutput_ = 0;
}
inline int32_t Block::_internal_boilminoutput() const {
  return boilminoutput_;
}
inline int32_t Block::boilminoutput() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.boilMinOutput)
  return _internal_boilminoutput();
}
inline void Block::_internal_set_boilminoutput(int32_t value) {
  
  boilminoutput_ = value;
}
inline void Block::set_boilminoutput(int32_t value) {
  _internal_set_boilminoutput(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.boilMinOutput)
}

// bool boilModeActive = 26 [(.brewblox.field) = {
inline void Block::clear_boilmodeactive() {
  boilmodeactive_ = false;
}
inline bool Block::_internal_boilmodeactive() const {
  return boilmodeactive_;
}
inline bool Block::boilmodeactive() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.boilModeActive)
  return _internal_boilmodeactive();
}
inline void Block::_internal_set_boilmodeactive(bool value) {
  
  boilmodeactive_ = value;
}
inline void Block::set_boilmodeactive(bool value) {
  _internal_set_boilmodeactive(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.boilModeActive)
}

// .blox_test.SetpointSensorPair.FilterChoice derivativeFilter = 27 [(.brewblox.field) = {
inline void Block::clear_derivativefilter() {
  derivativefilter_ = 0;
}
inline ::blox_test::SetpointSensorPair::FilterChoice Block::_internal_derivativefilter() const {
  return static_cast< ::blox_test::SetpointSensorPair::FilterChoice >(derivativefilter_);
}
inline ::blox_test::SetpointSensorPair::FilterChoice Block::derivativefilter() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.derivativeFilter)
  return _internal_derivativefilter();
}
inline void Block::_internal_set_derivativefilter(::blox_test::SetpointSensorPair::FilterChoice value) {
  
  derivativefilter_ = value;
}
inline void Block::set_derivativefilter(::blox_test::SetpointSensorPair::FilterChoice value) {
  _internal_set_derivativefilter(value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.derivativeFilter)
}

// repeated uint32 strippedFields = 99 [(.nanopb) = {
inline int Block::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int Block::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void Block::clear_strippedfields() {
  strippedfields_.Clear();
}
inline uint32_t Block::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline uint32_t Block::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.strippedFields)
  return _internal_strippedfields(index);
}
inline void Block::set_strippedfields(int index, uint32_t value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.strippedFields)
}
inline void Block::_internal_add_strippedfields(uint32_t value) {
  strippedfields_.Add(value);
}
inline void Block::add_strippedfields(uint32_t value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox_test.Pid.Block.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox_test.Pid.Block.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.Pid.Block.strippedFields)
  return _internal_mutable_strippedfields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pid
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Pid_5ftest_2eproto
