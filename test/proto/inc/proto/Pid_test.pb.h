// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pid_test.proto

#ifndef PROTOBUF_INCLUDED_Pid_5ftest_2eproto
#define PROTOBUF_INCLUDED_Pid_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "SetpointSensorPair_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Pid_5ftest_2eproto 

namespace protobuf_Pid_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Pid_5ftest_2eproto
namespace blox_test {
namespace Pid {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace Pid
}  // namespace blox_test
namespace google {
namespace protobuf {
template<> ::blox_test::Pid::Block* Arena::CreateMaybeMessage<::blox_test::Pid::Block>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox_test {
namespace Pid {

// ===================================================================

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox_test.Pid.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 inputId = 1 [(.nanopb) = {
  void clear_inputid();
  static const int kInputIdFieldNumber = 1;
  ::google::protobuf::uint32 inputid() const;
  void set_inputid(::google::protobuf::uint32 value);

  // uint32 outputId = 2 [(.nanopb) = {
  void clear_outputid();
  static const int kOutputIdFieldNumber = 2;
  ::google::protobuf::uint32 outputid() const;
  void set_outputid(::google::protobuf::uint32 value);

  // sint32 inputValue = 5 [(.nanopb) = {
  void clear_inputvalue();
  static const int kInputValueFieldNumber = 5;
  ::google::protobuf::int32 inputvalue() const;
  void set_inputvalue(::google::protobuf::int32 value);

  // sint32 inputSetting = 6 [(.nanopb) = {
  void clear_inputsetting();
  static const int kInputSettingFieldNumber = 6;
  ::google::protobuf::int32 inputsetting() const;
  void set_inputsetting(::google::protobuf::int32 value);

  // sint32 outputValue = 7 [(.nanopb) = {
  void clear_outputvalue();
  static const int kOutputValueFieldNumber = 7;
  ::google::protobuf::int32 outputvalue() const;
  void set_outputvalue(::google::protobuf::int32 value);

  // sint32 outputSetting = 8 [(.nanopb) = {
  void clear_outputsetting();
  static const int kOutputSettingFieldNumber = 8;
  ::google::protobuf::int32 outputsetting() const;
  void set_outputsetting(::google::protobuf::int32 value);

  // sint32 kp = 13 [(.nanopb) = {
  void clear_kp();
  static const int kKpFieldNumber = 13;
  ::google::protobuf::int32 kp() const;
  void set_kp(::google::protobuf::int32 value);

  // uint32 ti = 14 [(.nanopb) = {
  void clear_ti();
  static const int kTiFieldNumber = 14;
  ::google::protobuf::uint32 ti() const;
  void set_ti(::google::protobuf::uint32 value);

  // uint32 td = 15 [(.nanopb) = {
  void clear_td();
  static const int kTdFieldNumber = 15;
  ::google::protobuf::uint32 td() const;
  void set_td(::google::protobuf::uint32 value);

  // sint32 p = 16 [(.nanopb) = {
  void clear_p();
  static const int kPFieldNumber = 16;
  ::google::protobuf::int32 p() const;
  void set_p(::google::protobuf::int32 value);

  // sint32 i = 17 [(.nanopb) = {
  void clear_i();
  static const int kIFieldNumber = 17;
  ::google::protobuf::int32 i() const;
  void set_i(::google::protobuf::int32 value);

  // sint32 d = 18 [(.nanopb) = {
  void clear_d();
  static const int kDFieldNumber = 18;
  ::google::protobuf::int32 d() const;
  void set_d(::google::protobuf::int32 value);

  // sint32 error = 19 [(.nanopb) = {
  void clear_error();
  static const int kErrorFieldNumber = 19;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // sint32 integral = 20 [(.nanopb) = {
  void clear_integral();
  static const int kIntegralFieldNumber = 20;
  ::google::protobuf::int32 integral() const;
  void set_integral(::google::protobuf::int32 value);

  // sint32 derivative = 21 [(.nanopb) = {
  void clear_derivative();
  static const int kDerivativeFieldNumber = 21;
  ::google::protobuf::int32 derivative() const;
  void set_derivative(::google::protobuf::int32 value);

  // sint32 integralReset = 23 [(.nanopb) = {
  void clear_integralreset();
  static const int kIntegralResetFieldNumber = 23;
  ::google::protobuf::int32 integralreset() const;
  void set_integralreset(::google::protobuf::int32 value);

  // sint32 boilPointAdjust = 24 [(.nanopb) = {
  void clear_boilpointadjust();
  static const int kBoilPointAdjustFieldNumber = 24;
  ::google::protobuf::int32 boilpointadjust() const;
  void set_boilpointadjust(::google::protobuf::int32 value);

  // sint32 boilMinOutput = 25 [(.nanopb) = {
  void clear_boilminoutput();
  static const int kBoilMinOutputFieldNumber = 25;
  ::google::protobuf::int32 boilminoutput() const;
  void set_boilminoutput(::google::protobuf::int32 value);

  // .blox_test.SetpointSensorPair.FilterChoice derivativeFilter = 27 [(.brewblox.field) = {
  void clear_derivativefilter();
  static const int kDerivativeFilterFieldNumber = 27;
  ::blox_test::SetpointSensorPair::FilterChoice derivativefilter() const;
  void set_derivativefilter(::blox_test::SetpointSensorPair::FilterChoice value);

  // bool enabled = 11 [(.brewblox.field) = {
  void clear_enabled();
  static const int kEnabledFieldNumber = 11;
  bool enabled() const;
  void set_enabled(bool value);

  // bool active = 12 [(.brewblox.field) = {
  void clear_active();
  static const int kActiveFieldNumber = 12;
  bool active() const;
  void set_active(bool value);

  // bool boilModeActive = 26 [(.brewblox.field) = {
  void clear_boilmodeactive();
  static const int kBoilModeActiveFieldNumber = 26;
  bool boilmodeactive() const;
  void set_boilmodeactive(bool value);

  // bool drivenOutputId = 90 [(.nanopb) = {
  void clear_drivenoutputid();
  static const int kDrivenOutputIdFieldNumber = 90;
  bool drivenoutputid() const;
  void set_drivenoutputid(bool value);

  // @@protoc_insertion_point(class_scope:blox_test.Pid.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 inputid_;
  ::google::protobuf::uint32 outputid_;
  ::google::protobuf::int32 inputvalue_;
  ::google::protobuf::int32 inputsetting_;
  ::google::protobuf::int32 outputvalue_;
  ::google::protobuf::int32 outputsetting_;
  ::google::protobuf::int32 kp_;
  ::google::protobuf::uint32 ti_;
  ::google::protobuf::uint32 td_;
  ::google::protobuf::int32 p_;
  ::google::protobuf::int32 i_;
  ::google::protobuf::int32 d_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 derivative_;
  ::google::protobuf::int32 integralreset_;
  ::google::protobuf::int32 boilpointadjust_;
  ::google::protobuf::int32 boilminoutput_;
  int derivativefilter_;
  bool enabled_;
  bool active_;
  bool boilmodeactive_;
  bool drivenoutputid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Pid_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// uint32 inputId = 1 [(.nanopb) = {
inline void Block::clear_inputid() {
  inputid_ = 0u;
}
inline ::google::protobuf::uint32 Block::inputid() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.inputId)
  return inputid_;
}
inline void Block::set_inputid(::google::protobuf::uint32 value) {
  
  inputid_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.inputId)
}

// uint32 outputId = 2 [(.nanopb) = {
inline void Block::clear_outputid() {
  outputid_ = 0u;
}
inline ::google::protobuf::uint32 Block::outputid() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.outputId)
  return outputid_;
}
inline void Block::set_outputid(::google::protobuf::uint32 value) {
  
  outputid_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.outputId)
}

// sint32 inputValue = 5 [(.nanopb) = {
inline void Block::clear_inputvalue() {
  inputvalue_ = 0;
}
inline ::google::protobuf::int32 Block::inputvalue() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.inputValue)
  return inputvalue_;
}
inline void Block::set_inputvalue(::google::protobuf::int32 value) {
  
  inputvalue_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.inputValue)
}

// sint32 inputSetting = 6 [(.nanopb) = {
inline void Block::clear_inputsetting() {
  inputsetting_ = 0;
}
inline ::google::protobuf::int32 Block::inputsetting() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.inputSetting)
  return inputsetting_;
}
inline void Block::set_inputsetting(::google::protobuf::int32 value) {
  
  inputsetting_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.inputSetting)
}

// sint32 outputValue = 7 [(.nanopb) = {
inline void Block::clear_outputvalue() {
  outputvalue_ = 0;
}
inline ::google::protobuf::int32 Block::outputvalue() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.outputValue)
  return outputvalue_;
}
inline void Block::set_outputvalue(::google::protobuf::int32 value) {
  
  outputvalue_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.outputValue)
}

// sint32 outputSetting = 8 [(.nanopb) = {
inline void Block::clear_outputsetting() {
  outputsetting_ = 0;
}
inline ::google::protobuf::int32 Block::outputsetting() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.outputSetting)
  return outputsetting_;
}
inline void Block::set_outputsetting(::google::protobuf::int32 value) {
  
  outputsetting_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.outputSetting)
}

// bool enabled = 11 [(.brewblox.field) = {
inline void Block::clear_enabled() {
  enabled_ = false;
}
inline bool Block::enabled() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.enabled)
  return enabled_;
}
inline void Block::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.enabled)
}

// bool active = 12 [(.brewblox.field) = {
inline void Block::clear_active() {
  active_ = false;
}
inline bool Block::active() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.active)
  return active_;
}
inline void Block::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.active)
}

// sint32 kp = 13 [(.nanopb) = {
inline void Block::clear_kp() {
  kp_ = 0;
}
inline ::google::protobuf::int32 Block::kp() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.kp)
  return kp_;
}
inline void Block::set_kp(::google::protobuf::int32 value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.kp)
}

// uint32 ti = 14 [(.nanopb) = {
inline void Block::clear_ti() {
  ti_ = 0u;
}
inline ::google::protobuf::uint32 Block::ti() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.ti)
  return ti_;
}
inline void Block::set_ti(::google::protobuf::uint32 value) {
  
  ti_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.ti)
}

// uint32 td = 15 [(.nanopb) = {
inline void Block::clear_td() {
  td_ = 0u;
}
inline ::google::protobuf::uint32 Block::td() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.td)
  return td_;
}
inline void Block::set_td(::google::protobuf::uint32 value) {
  
  td_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.td)
}

// sint32 p = 16 [(.nanopb) = {
inline void Block::clear_p() {
  p_ = 0;
}
inline ::google::protobuf::int32 Block::p() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.p)
  return p_;
}
inline void Block::set_p(::google::protobuf::int32 value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.p)
}

// sint32 i = 17 [(.nanopb) = {
inline void Block::clear_i() {
  i_ = 0;
}
inline ::google::protobuf::int32 Block::i() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.i)
  return i_;
}
inline void Block::set_i(::google::protobuf::int32 value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.i)
}

// sint32 d = 18 [(.nanopb) = {
inline void Block::clear_d() {
  d_ = 0;
}
inline ::google::protobuf::int32 Block::d() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.d)
  return d_;
}
inline void Block::set_d(::google::protobuf::int32 value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.d)
}

// sint32 error = 19 [(.nanopb) = {
inline void Block::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 Block::error() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.error)
  return error_;
}
inline void Block::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.error)
}

// sint32 integral = 20 [(.nanopb) = {
inline void Block::clear_integral() {
  integral_ = 0;
}
inline ::google::protobuf::int32 Block::integral() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.integral)
  return integral_;
}
inline void Block::set_integral(::google::protobuf::int32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.integral)
}

// sint32 derivative = 21 [(.nanopb) = {
inline void Block::clear_derivative() {
  derivative_ = 0;
}
inline ::google::protobuf::int32 Block::derivative() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.derivative)
  return derivative_;
}
inline void Block::set_derivative(::google::protobuf::int32 value) {
  
  derivative_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.derivative)
}

// sint32 integralReset = 23 [(.nanopb) = {
inline void Block::clear_integralreset() {
  integralreset_ = 0;
}
inline ::google::protobuf::int32 Block::integralreset() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.integralReset)
  return integralreset_;
}
inline void Block::set_integralreset(::google::protobuf::int32 value) {
  
  integralreset_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.integralReset)
}

// sint32 boilPointAdjust = 24 [(.nanopb) = {
inline void Block::clear_boilpointadjust() {
  boilpointadjust_ = 0;
}
inline ::google::protobuf::int32 Block::boilpointadjust() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.boilPointAdjust)
  return boilpointadjust_;
}
inline void Block::set_boilpointadjust(::google::protobuf::int32 value) {
  
  boilpointadjust_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.boilPointAdjust)
}

// sint32 boilMinOutput = 25 [(.nanopb) = {
inline void Block::clear_boilminoutput() {
  boilminoutput_ = 0;
}
inline ::google::protobuf::int32 Block::boilminoutput() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.boilMinOutput)
  return boilminoutput_;
}
inline void Block::set_boilminoutput(::google::protobuf::int32 value) {
  
  boilminoutput_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.boilMinOutput)
}

// bool boilModeActive = 26 [(.brewblox.field) = {
inline void Block::clear_boilmodeactive() {
  boilmodeactive_ = false;
}
inline bool Block::boilmodeactive() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.boilModeActive)
  return boilmodeactive_;
}
inline void Block::set_boilmodeactive(bool value) {
  
  boilmodeactive_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.boilModeActive)
}

// .blox_test.SetpointSensorPair.FilterChoice derivativeFilter = 27 [(.brewblox.field) = {
inline void Block::clear_derivativefilter() {
  derivativefilter_ = 0;
}
inline ::blox_test::SetpointSensorPair::FilterChoice Block::derivativefilter() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.derivativeFilter)
  return static_cast< ::blox_test::SetpointSensorPair::FilterChoice >(derivativefilter_);
}
inline void Block::set_derivativefilter(::blox_test::SetpointSensorPair::FilterChoice value) {
  
  derivativefilter_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.derivativeFilter)
}

// bool drivenOutputId = 90 [(.nanopb) = {
inline void Block::clear_drivenoutputid() {
  drivenoutputid_ = false;
}
inline bool Block::drivenoutputid() const {
  // @@protoc_insertion_point(field_get:blox_test.Pid.Block.drivenOutputId)
  return drivenoutputid_;
}
inline void Block::set_drivenoutputid(bool value) {
  
  drivenoutputid_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Pid.Block.drivenOutputId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pid
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Pid_5ftest_2eproto
