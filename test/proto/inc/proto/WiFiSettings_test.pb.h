// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WiFiSettings_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WiFiSettings_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WiFiSettings_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WiFiSettings_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WiFiSettings_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WiFiSettings_5ftest_2eproto;
namespace blox_test {
namespace WiFiSettings {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace WiFiSettings
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::WiFiSettings::Block* Arena::CreateMaybeMessage<::blox_test::WiFiSettings::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace WiFiSettings {

enum Security : int {
  WLAN_SEC_UNSEC = 0,
  WLAN_SEC_WEP = 1,
  WLAN_SEC_WPA = 2,
  WLAN_SEC_WPA2 = 3,
  WLAN_SEC_WPA_ENTERPRISE = 4,
  WLAN_SEC_WPA2_ENTERPRISE = 5,
  WLAN_SEC_NOT_SET = 255,
  Security_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Security_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Security_IsValid(int value);
constexpr Security Security_MIN = WLAN_SEC_UNSEC;
constexpr Security Security_MAX = WLAN_SEC_NOT_SET;
constexpr int Security_ARRAYSIZE = Security_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Security_descriptor();
template<typename T>
inline const std::string& Security_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Security>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Security_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Security_descriptor(), enum_t_value);
}
inline bool Security_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Security* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Security>(
    Security_descriptor(), name, value);
}
enum Cipher : int {
  WLAN_CIPHER_NOT_SET = 0,
  WLAN_CIPHER_AES = 1,
  WLAN_CIPHER_TKIP = 2,
  WLAN_CIPHER_AES_OR_TKIP = 3,
  Cipher_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Cipher_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Cipher_IsValid(int value);
constexpr Cipher Cipher_MIN = WLAN_CIPHER_NOT_SET;
constexpr Cipher Cipher_MAX = WLAN_CIPHER_AES_OR_TKIP;
constexpr int Cipher_ARRAYSIZE = Cipher_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cipher_descriptor();
template<typename T>
inline const std::string& Cipher_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cipher>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cipher_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cipher_descriptor(), enum_t_value);
}
inline bool Cipher_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cipher* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cipher>(
    Cipher_descriptor(), name, value);
}
// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.WiFiSettings.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.WiFiSettings.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kIpFieldNumber = 6,
    kSecurityFieldNumber = 3,
    kCipherFieldNumber = 4,
    kSignalFieldNumber = 5,
  };
  // string ssid = 1 [(.nanopb) = {
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string password = 2 [(.nanopb) = {
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string ip = 6 [(.nanopb) = {
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .blox_test.WiFiSettings.Security security = 3;
  void clear_security();
  ::blox_test::WiFiSettings::Security security() const;
  void set_security(::blox_test::WiFiSettings::Security value);
  private:
  ::blox_test::WiFiSettings::Security _internal_security() const;
  void _internal_set_security(::blox_test::WiFiSettings::Security value);
  public:

  // .blox_test.WiFiSettings.Cipher cipher = 4;
  void clear_cipher();
  ::blox_test::WiFiSettings::Cipher cipher() const;
  void set_cipher(::blox_test::WiFiSettings::Cipher value);
  private:
  ::blox_test::WiFiSettings::Cipher _internal_cipher() const;
  void _internal_set_cipher(::blox_test::WiFiSettings::Cipher value);
  public:

  // int32 signal = 5 [(.nanopb) = {
  void clear_signal();
  int32_t signal() const;
  void set_signal(int32_t value);
  private:
  int32_t _internal_signal() const;
  void _internal_set_signal(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.WiFiSettings.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int security_;
  int cipher_;
  int32_t signal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WiFiSettings_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// string ssid = 1 [(.nanopb) = {
inline void Block::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Block::ssid() const {
  // @@protoc_insertion_point(field_get:blox_test.WiFiSettings.Block.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_ssid(ArgT0&& arg0, ArgT... args) {
 
 ssid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox_test.WiFiSettings.Block.ssid)
}
inline std::string* Block::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:blox_test.WiFiSettings.Block.ssid)
  return _s;
}
inline const std::string& Block::_internal_ssid() const {
  return ssid_.Get();
}
inline void Block::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_ssid() {
  
  return ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_ssid() {
  // @@protoc_insertion_point(field_release:blox_test.WiFiSettings.Block.ssid)
  return ssid_.Release();
}
inline void Block::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault()) {
    ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blox_test.WiFiSettings.Block.ssid)
}

// string password = 2 [(.nanopb) = {
inline void Block::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& Block::password() const {
  // @@protoc_insertion_point(field_get:blox_test.WiFiSettings.Block.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox_test.WiFiSettings.Block.password)
}
inline std::string* Block::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:blox_test.WiFiSettings.Block.password)
  return _s;
}
inline const std::string& Block::_internal_password() const {
  return password_.Get();
}
inline void Block::_internal_set_password(const std::string& value) {
  
  password_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_password() {
  
  return password_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_password() {
  // @@protoc_insertion_point(field_release:blox_test.WiFiSettings.Block.password)
  return password_.Release();
}
inline void Block::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault()) {
    password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blox_test.WiFiSettings.Block.password)
}

// .blox_test.WiFiSettings.Security security = 3;
inline void Block::clear_security() {
  security_ = 0;
}
inline ::blox_test::WiFiSettings::Security Block::_internal_security() const {
  return static_cast< ::blox_test::WiFiSettings::Security >(security_);
}
inline ::blox_test::WiFiSettings::Security Block::security() const {
  // @@protoc_insertion_point(field_get:blox_test.WiFiSettings.Block.security)
  return _internal_security();
}
inline void Block::_internal_set_security(::blox_test::WiFiSettings::Security value) {
  
  security_ = value;
}
inline void Block::set_security(::blox_test::WiFiSettings::Security value) {
  _internal_set_security(value);
  // @@protoc_insertion_point(field_set:blox_test.WiFiSettings.Block.security)
}

// .blox_test.WiFiSettings.Cipher cipher = 4;
inline void Block::clear_cipher() {
  cipher_ = 0;
}
inline ::blox_test::WiFiSettings::Cipher Block::_internal_cipher() const {
  return static_cast< ::blox_test::WiFiSettings::Cipher >(cipher_);
}
inline ::blox_test::WiFiSettings::Cipher Block::cipher() const {
  // @@protoc_insertion_point(field_get:blox_test.WiFiSettings.Block.cipher)
  return _internal_cipher();
}
inline void Block::_internal_set_cipher(::blox_test::WiFiSettings::Cipher value) {
  
  cipher_ = value;
}
inline void Block::set_cipher(::blox_test::WiFiSettings::Cipher value) {
  _internal_set_cipher(value);
  // @@protoc_insertion_point(field_set:blox_test.WiFiSettings.Block.cipher)
}

// int32 signal = 5 [(.nanopb) = {
inline void Block::clear_signal() {
  signal_ = 0;
}
inline int32_t Block::_internal_signal() const {
  return signal_;
}
inline int32_t Block::signal() const {
  // @@protoc_insertion_point(field_get:blox_test.WiFiSettings.Block.signal)
  return _internal_signal();
}
inline void Block::_internal_set_signal(int32_t value) {
  
  signal_ = value;
}
inline void Block::set_signal(int32_t value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:blox_test.WiFiSettings.Block.signal)
}

// string ip = 6 [(.nanopb) = {
inline void Block::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Block::ip() const {
  // @@protoc_insertion_point(field_get:blox_test.WiFiSettings.Block.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox_test.WiFiSettings.Block.ip)
}
inline std::string* Block::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:blox_test.WiFiSettings.Block.ip)
  return _s;
}
inline const std::string& Block::_internal_ip() const {
  return ip_.Get();
}
inline void Block::_internal_set_ip(const std::string& value) {
  
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_ip() {
  
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_ip() {
  // @@protoc_insertion_point(field_release:blox_test.WiFiSettings.Block.ip)
  return ip_.Release();
}
inline void Block::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blox_test.WiFiSettings.Block.ip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace WiFiSettings
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::WiFiSettings::Security> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::WiFiSettings::Security>() {
  return ::blox_test::WiFiSettings::Security_descriptor();
}
template <> struct is_proto_enum< ::blox_test::WiFiSettings::Cipher> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::WiFiSettings::Cipher>() {
  return ::blox_test::WiFiSettings::Cipher_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WiFiSettings_5ftest_2eproto
