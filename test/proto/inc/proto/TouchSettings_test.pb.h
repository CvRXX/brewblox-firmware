// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TouchSettings_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TouchSettings_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TouchSettings_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TouchSettings_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TouchSettings_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TouchSettings_5ftest_2eproto;
namespace blox_test {
namespace TouchSettings {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace TouchSettings
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::TouchSettings::Block* Arena::CreateMaybeMessage<::blox_test::TouchSettings::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace TouchSettings {

enum Calibrated : int {
  CALIBRATED_NO = 0,
  CALIBRATED_YES = 1,
  CALIBRATED_NEW = 2,
  Calibrated_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Calibrated_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Calibrated_IsValid(int value);
constexpr Calibrated Calibrated_MIN = CALIBRATED_NO;
constexpr Calibrated Calibrated_MAX = CALIBRATED_NEW;
constexpr int Calibrated_ARRAYSIZE = Calibrated_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Calibrated_descriptor();
template<typename T>
inline const std::string& Calibrated_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Calibrated>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Calibrated_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Calibrated_descriptor(), enum_t_value);
}
inline bool Calibrated_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Calibrated* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Calibrated>(
    Calibrated_descriptor(), name, value);
}
// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.TouchSettings.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.TouchSettings.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibratedFieldNumber = 1,
    kXOffsetFieldNumber = 2,
    kYOffsetFieldNumber = 3,
    kXBitsPerPixelX16FieldNumber = 4,
    kYBitsPerPixelX16FieldNumber = 5,
  };
  // .blox_test.TouchSettings.Calibrated calibrated = 1;
  void clear_calibrated();
  ::blox_test::TouchSettings::Calibrated calibrated() const;
  void set_calibrated(::blox_test::TouchSettings::Calibrated value);
  private:
  ::blox_test::TouchSettings::Calibrated _internal_calibrated() const;
  void _internal_set_calibrated(::blox_test::TouchSettings::Calibrated value);
  public:

  // int32 xOffset = 2 [(.nanopb) = {
  void clear_xoffset();
  int32_t xoffset() const;
  void set_xoffset(int32_t value);
  private:
  int32_t _internal_xoffset() const;
  void _internal_set_xoffset(int32_t value);
  public:

  // int32 yOffset = 3 [(.nanopb) = {
  void clear_yoffset();
  int32_t yoffset() const;
  void set_yoffset(int32_t value);
  private:
  int32_t _internal_yoffset() const;
  void _internal_set_yoffset(int32_t value);
  public:

  // uint32 xBitsPerPixelX16 = 4 [(.nanopb) = {
  void clear_xbitsperpixelx16();
  uint32_t xbitsperpixelx16() const;
  void set_xbitsperpixelx16(uint32_t value);
  private:
  uint32_t _internal_xbitsperpixelx16() const;
  void _internal_set_xbitsperpixelx16(uint32_t value);
  public:

  // uint32 yBitsPerPixelX16 = 5 [(.nanopb) = {
  void clear_ybitsperpixelx16();
  uint32_t ybitsperpixelx16() const;
  void set_ybitsperpixelx16(uint32_t value);
  private:
  uint32_t _internal_ybitsperpixelx16() const;
  void _internal_set_ybitsperpixelx16(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.TouchSettings.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int calibrated_;
  int32_t xoffset_;
  int32_t yoffset_;
  uint32_t xbitsperpixelx16_;
  uint32_t ybitsperpixelx16_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TouchSettings_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// .blox_test.TouchSettings.Calibrated calibrated = 1;
inline void Block::clear_calibrated() {
  calibrated_ = 0;
}
inline ::blox_test::TouchSettings::Calibrated Block::_internal_calibrated() const {
  return static_cast< ::blox_test::TouchSettings::Calibrated >(calibrated_);
}
inline ::blox_test::TouchSettings::Calibrated Block::calibrated() const {
  // @@protoc_insertion_point(field_get:blox_test.TouchSettings.Block.calibrated)
  return _internal_calibrated();
}
inline void Block::_internal_set_calibrated(::blox_test::TouchSettings::Calibrated value) {
  
  calibrated_ = value;
}
inline void Block::set_calibrated(::blox_test::TouchSettings::Calibrated value) {
  _internal_set_calibrated(value);
  // @@protoc_insertion_point(field_set:blox_test.TouchSettings.Block.calibrated)
}

// int32 xOffset = 2 [(.nanopb) = {
inline void Block::clear_xoffset() {
  xoffset_ = 0;
}
inline int32_t Block::_internal_xoffset() const {
  return xoffset_;
}
inline int32_t Block::xoffset() const {
  // @@protoc_insertion_point(field_get:blox_test.TouchSettings.Block.xOffset)
  return _internal_xoffset();
}
inline void Block::_internal_set_xoffset(int32_t value) {
  
  xoffset_ = value;
}
inline void Block::set_xoffset(int32_t value) {
  _internal_set_xoffset(value);
  // @@protoc_insertion_point(field_set:blox_test.TouchSettings.Block.xOffset)
}

// int32 yOffset = 3 [(.nanopb) = {
inline void Block::clear_yoffset() {
  yoffset_ = 0;
}
inline int32_t Block::_internal_yoffset() const {
  return yoffset_;
}
inline int32_t Block::yoffset() const {
  // @@protoc_insertion_point(field_get:blox_test.TouchSettings.Block.yOffset)
  return _internal_yoffset();
}
inline void Block::_internal_set_yoffset(int32_t value) {
  
  yoffset_ = value;
}
inline void Block::set_yoffset(int32_t value) {
  _internal_set_yoffset(value);
  // @@protoc_insertion_point(field_set:blox_test.TouchSettings.Block.yOffset)
}

// uint32 xBitsPerPixelX16 = 4 [(.nanopb) = {
inline void Block::clear_xbitsperpixelx16() {
  xbitsperpixelx16_ = 0u;
}
inline uint32_t Block::_internal_xbitsperpixelx16() const {
  return xbitsperpixelx16_;
}
inline uint32_t Block::xbitsperpixelx16() const {
  // @@protoc_insertion_point(field_get:blox_test.TouchSettings.Block.xBitsPerPixelX16)
  return _internal_xbitsperpixelx16();
}
inline void Block::_internal_set_xbitsperpixelx16(uint32_t value) {
  
  xbitsperpixelx16_ = value;
}
inline void Block::set_xbitsperpixelx16(uint32_t value) {
  _internal_set_xbitsperpixelx16(value);
  // @@protoc_insertion_point(field_set:blox_test.TouchSettings.Block.xBitsPerPixelX16)
}

// uint32 yBitsPerPixelX16 = 5 [(.nanopb) = {
inline void Block::clear_ybitsperpixelx16() {
  ybitsperpixelx16_ = 0u;
}
inline uint32_t Block::_internal_ybitsperpixelx16() const {
  return ybitsperpixelx16_;
}
inline uint32_t Block::ybitsperpixelx16() const {
  // @@protoc_insertion_point(field_get:blox_test.TouchSettings.Block.yBitsPerPixelX16)
  return _internal_ybitsperpixelx16();
}
inline void Block::_internal_set_ybitsperpixelx16(uint32_t value) {
  
  ybitsperpixelx16_ = value;
}
inline void Block::set_ybitsperpixelx16(uint32_t value) {
  _internal_set_ybitsperpixelx16(value);
  // @@protoc_insertion_point(field_set:blox_test.TouchSettings.Block.yBitsPerPixelX16)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace TouchSettings
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::TouchSettings::Calibrated> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::TouchSettings::Calibrated>() {
  return ::blox_test::TouchSettings::Calibrated_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TouchSettings_5ftest_2eproto
