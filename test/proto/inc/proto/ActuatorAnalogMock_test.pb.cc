// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorAnalogMock_test.proto

#include "ActuatorAnalogMock_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Constraints_5ftest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Constraints_5ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalogConstraints;
}  // namespace protobuf_Constraints_5ftest_2eproto
namespace blox_test {
namespace ActuatorAnalogMock {
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block>
      _instance;
} _Block_default_instance_;
}  // namespace ActuatorAnalogMock
}  // namespace blox_test
namespace protobuf_ActuatorAnalogMock_5ftest_2eproto {
static void InitDefaultsBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::ActuatorAnalogMock::_Block_default_instance_;
    new (ptr) ::blox_test::ActuatorAnalogMock::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::ActuatorAnalogMock::Block::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Block =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlock}, {
      &protobuf_Constraints_5ftest_2eproto::scc_info_AnalogConstraints.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Block.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, setting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, minsetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, maxsetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, minvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, maxvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, constrainedby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::ActuatorAnalogMock::Block, desiredsetting_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox_test::ActuatorAnalogMock::Block)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox_test::ActuatorAnalogMock::_Block_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ActuatorAnalogMock_test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035ActuatorAnalogMock_test.proto\022\034blox_te"
      "st.ActuatorAnalogMock\032\023brewblox_test.pro"
      "to\032\021nanopb_test.proto\032\026Constraints_test."
      "proto\"\341\002\n\005Block\022)\n\007setting\030\001 \001(\021B\030\212\265\030\0020\001"
      "\212\265\030\002(\001\212\265\030\003\020\200 \222\?\0028 \022\'\n\005value\030\002 \001(\021B\030\212\265\030\0020"
      "\001\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\022 \n\nminSetting\030\004 \001(\021B"
      "\014\212\265\030\003\020\200 \222\?\0028 \022 \n\nmaxSetting\030\005 \001(\021B\014\212\265\030\003\020"
      "\200 \222\?\0028 \022\036\n\010minValue\030\006 \001(\021B\014\212\265\030\003\020\200 \222\?\0028 \022"
      "\036\n\010maxValue\030\007 \001(\021B\014\212\265\030\003\020\200 \222\?\0028 \022\?\n\rconst"
      "rainedBy\030\010 \001(\0132(.blox_test.Constraints.A"
      "nalogConstraints\022*\n\016desiredSetting\030\t \001(\021"
      "B\022\212\265\030\0020\001\212\265\030\003\020\200 \222\?\0028 :\023\212\265\030\003\030\261\002\212\265\030\002H\005\212\265\030\002H"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActuatorAnalogMock_test.proto", &protobuf_RegisterTypes);
  ::protobuf_brewblox_5ftest_2eproto::AddDescriptors();
  ::protobuf_nanopb_5ftest_2eproto::AddDescriptors();
  ::protobuf_Constraints_5ftest_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ActuatorAnalogMock_5ftest_2eproto
namespace blox_test {
namespace ActuatorAnalogMock {

// ===================================================================

void Block::InitAsDefaultInstance() {
  ::blox_test::ActuatorAnalogMock::_Block_default_instance_._instance.get_mutable()->constrainedby_ = const_cast< ::blox_test::Constraints::AnalogConstraints*>(
      ::blox_test::Constraints::AnalogConstraints::internal_default_instance());
}
void Block::clear_constrainedby() {
  if (GetArenaNoVirtual() == NULL && constrainedby_ != NULL) {
    delete constrainedby_;
  }
  constrainedby_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kSettingFieldNumber;
const int Block::kValueFieldNumber;
const int Block::kMinSettingFieldNumber;
const int Block::kMaxSettingFieldNumber;
const int Block::kMinValueFieldNumber;
const int Block::kMaxValueFieldNumber;
const int Block::kConstrainedByFieldNumber;
const int Block::kDesiredSettingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorAnalogMock_5ftest_2eproto::scc_info_Block.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox_test.ActuatorAnalogMock.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_constrainedby()) {
    constrainedby_ = new ::blox_test::Constraints::AnalogConstraints(*from.constrainedby_);
  } else {
    constrainedby_ = NULL;
  }
  ::memcpy(&setting_, &from.setting_,
    static_cast<size_t>(reinterpret_cast<char*>(&desiredsetting_) -
    reinterpret_cast<char*>(&setting_)) + sizeof(desiredsetting_));
  // @@protoc_insertion_point(copy_constructor:blox_test.ActuatorAnalogMock.Block)
}

void Block::SharedCtor() {
  ::memset(&constrainedby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desiredsetting_) -
      reinterpret_cast<char*>(&constrainedby_)) + sizeof(desiredsetting_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.ActuatorAnalogMock.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != internal_default_instance()) delete constrainedby_;
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  ::protobuf_ActuatorAnalogMock_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorAnalogMock_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Block& Block::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorAnalogMock_5ftest_2eproto::scc_info_Block.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.ActuatorAnalogMock.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && constrainedby_ != NULL) {
    delete constrainedby_;
  }
  constrainedby_ = NULL;
  ::memset(&setting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desiredsetting_) -
      reinterpret_cast<char*>(&setting_)) + sizeof(desiredsetting_));
  _internal_metadata_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox_test.ActuatorAnalogMock.Block)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 setting = 1 [(.nanopb) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 value = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 minSetting = 4 [(.nanopb) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &minsetting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 maxSetting = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxsetting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 minValue = 6 [(.nanopb) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &minvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 maxValue = 7 [(.nanopb) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox_test.Constraints.AnalogConstraints constrainedBy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constrainedby()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 desiredSetting = 9 [(.nanopb) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &desiredsetting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox_test.ActuatorAnalogMock.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox_test.ActuatorAnalogMock.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox_test.ActuatorAnalogMock.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 setting = 1 [(.nanopb) = {
  if (this->setting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->setting(), output);
  }

  // sint32 value = 2 [(.nanopb) = {
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->value(), output);
  }

  // sint32 minSetting = 4 [(.nanopb) = {
  if (this->minsetting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->minsetting(), output);
  }

  // sint32 maxSetting = 5 [(.nanopb) = {
  if (this->maxsetting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->maxsetting(), output);
  }

  // sint32 minValue = 6 [(.nanopb) = {
  if (this->minvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->minvalue(), output);
  }

  // sint32 maxValue = 7 [(.nanopb) = {
  if (this->maxvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->maxvalue(), output);
  }

  // .blox_test.Constraints.AnalogConstraints constrainedBy = 8;
  if (this->has_constrainedby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_constrainedby(), output);
  }

  // sint32 desiredSetting = 9 [(.nanopb) = {
  if (this->desiredsetting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->desiredsetting(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox_test.ActuatorAnalogMock.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.ActuatorAnalogMock.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 setting = 1 [(.nanopb) = {
  if (this->setting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->setting(), target);
  }

  // sint32 value = 2 [(.nanopb) = {
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->value(), target);
  }

  // sint32 minSetting = 4 [(.nanopb) = {
  if (this->minsetting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->minsetting(), target);
  }

  // sint32 maxSetting = 5 [(.nanopb) = {
  if (this->maxsetting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->maxsetting(), target);
  }

  // sint32 minValue = 6 [(.nanopb) = {
  if (this->minvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->minvalue(), target);
  }

  // sint32 maxValue = 7 [(.nanopb) = {
  if (this->maxvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->maxvalue(), target);
  }

  // .blox_test.Constraints.AnalogConstraints constrainedBy = 8;
  if (this->has_constrainedby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_constrainedby(), deterministic, target);
  }

  // sint32 desiredSetting = 9 [(.nanopb) = {
  if (this->desiredsetting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->desiredsetting(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.ActuatorAnalogMock.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.ActuatorAnalogMock.Block)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blox_test.Constraints.AnalogConstraints constrainedBy = 8;
  if (this->has_constrainedby()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constrainedby_);
  }

  // sint32 setting = 1 [(.nanopb) = {
  if (this->setting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->setting());
  }

  // sint32 value = 2 [(.nanopb) = {
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->value());
  }

  // sint32 minSetting = 4 [(.nanopb) = {
  if (this->minsetting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->minsetting());
  }

  // sint32 maxSetting = 5 [(.nanopb) = {
  if (this->maxsetting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->maxsetting());
  }

  // sint32 minValue = 6 [(.nanopb) = {
  if (this->minvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->minvalue());
  }

  // sint32 maxValue = 7 [(.nanopb) = {
  if (this->maxvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->maxvalue());
  }

  // sint32 desiredSetting = 9 [(.nanopb) = {
  if (this->desiredsetting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->desiredsetting());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.ActuatorAnalogMock.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.ActuatorAnalogMock.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.ActuatorAnalogMock.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.ActuatorAnalogMock.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_constrainedby()) {
    mutable_constrainedby()->::blox_test::Constraints::AnalogConstraints::MergeFrom(from.constrainedby());
  }
  if (from.setting() != 0) {
    set_setting(from.setting());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.minsetting() != 0) {
    set_minsetting(from.minsetting());
  }
  if (from.maxsetting() != 0) {
    set_maxsetting(from.maxsetting());
  }
  if (from.minvalue() != 0) {
    set_minvalue(from.minvalue());
  }
  if (from.maxvalue() != 0) {
    set_maxvalue(from.maxvalue());
  }
  if (from.desiredsetting() != 0) {
    set_desiredsetting(from.desiredsetting());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.ActuatorAnalogMock.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.ActuatorAnalogMock.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  swap(constrainedby_, other->constrainedby_);
  swap(setting_, other->setting_);
  swap(value_, other->value_);
  swap(minsetting_, other->minsetting_);
  swap(maxsetting_, other->maxsetting_);
  swap(minvalue_, other->minvalue_);
  swap(maxvalue_, other->maxvalue_);
  swap(desiredsetting_, other->desiredsetting_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_ActuatorAnalogMock_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorAnalogMock_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ActuatorAnalogMock
}  // namespace blox_test
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox_test::ActuatorAnalogMock::Block* Arena::CreateMaybeMessage< ::blox_test::ActuatorAnalogMock::Block >(Arena* arena) {
  return Arena::CreateInternal< ::blox_test::ActuatorAnalogMock::Block >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
