// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneWireGpioModule_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OneWireGpioModule_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OneWireGpioModule_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OneWireGpioModule_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OneWireGpioModule_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OneWireGpioModule_5ftest_2eproto;
namespace blox_test {
namespace OneWireGpioModule {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class GpioModuleChannel;
struct GpioModuleChannelDefaultTypeInternal;
extern GpioModuleChannelDefaultTypeInternal _GpioModuleChannel_default_instance_;
}  // namespace OneWireGpioModule
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::OneWireGpioModule::Block* Arena::CreateMaybeMessage<::blox_test::OneWireGpioModule::Block>(Arena*);
template<> ::blox_test::OneWireGpioModule::GpioModuleChannel* Arena::CreateMaybeMessage<::blox_test::OneWireGpioModule::GpioModuleChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace OneWireGpioModule {

enum GpioDeviceType : int {
  GPIO_DEV_NONE = 0,
  GPIO_DEV_SSR_2P = 1,
  GPIO_DEV_SSR_1P = 2,
  GPIO_DEV_MECHANICAL_RELAY_2P = 3,
  GPIO_DEV_MECHANICAL_RELAY_1P_HIGH_SIDE = 4,
  GPIO_DEV_MECHANICAL_RELAY_1P_LOW_SIDE = 5,
  GPIO_DEV_COIL_2P = 6,
  GPIO_DEV_COIL_2P_BIDIRECTIONAL = 7,
  GPIO_DEV_COIL_1P_HIGH_SIDE = 8,
  GPIO_DEV_COIL_1P_LOW_SIDE = 9,
  GPIO_DEV_MOTOR_2P = 10,
  GPIO_DEV_MOTOR_2P_BIDIRECTIONAL = 11,
  GPIO_DEV_MOTOR_1P_HIGH_SIDE = 12,
  GPIO_DEV_MOTOR_1P_LOW_SIDE = 13,
  GPIO_DEV_LOAD_DETECT_2P = 14,
  GPIO_DEV_LOAD_DETECT_1P_PULL_DOWN = 15,
  GPIO_DEV_LOAD_DETECT_1P_PULL_UP = 16,
  GPIO_DEV_POWER_1P = 17,
  GPIO_DEV_POWER_1P_LOAD_DETECT = 18,
  GPIO_DEV_GND_1P = 19,
  GPIO_DEV_GND_1P_LOAD_DETECT = 20,
  GpioDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GpioDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GpioDeviceType_IsValid(int value);
constexpr GpioDeviceType GpioDeviceType_MIN = GPIO_DEV_NONE;
constexpr GpioDeviceType GpioDeviceType_MAX = GPIO_DEV_GND_1P_LOAD_DETECT;
constexpr int GpioDeviceType_ARRAYSIZE = GpioDeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioDeviceType_descriptor();
template<typename T>
inline const std::string& GpioDeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpioDeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpioDeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpioDeviceType_descriptor(), enum_t_value);
}
inline bool GpioDeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpioDeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpioDeviceType>(
    GpioDeviceType_descriptor(), name, value);
}
enum GpioErrorFlags : int {
  GPIO_ERR_NONE = 0,
  GPIO_ERR_POWER_ON_RESET = 1,
  GPIO_ERR_OVERVOLTAGE = 2,
  GPIO_ERR_UNDERVOLTAGE = 4,
  GPIO_ERR_OVERCURRENT = 8,
  GPIO_ERR_OPEN_LOAD = 16,
  GPIO_ERR_OVERTEMPERATURE_WARNING = 32,
  GPIO_ERR_OVERTEMPERATURE_ERROR = 64,
  GPIO_ERR_SPI_ERROR = 128,
  GpioErrorFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GpioErrorFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GpioErrorFlags_IsValid(int value);
constexpr GpioErrorFlags GpioErrorFlags_MIN = GPIO_ERR_NONE;
constexpr GpioErrorFlags GpioErrorFlags_MAX = GPIO_ERR_SPI_ERROR;
constexpr int GpioErrorFlags_ARRAYSIZE = GpioErrorFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioErrorFlags_descriptor();
template<typename T>
inline const std::string& GpioErrorFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpioErrorFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpioErrorFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpioErrorFlags_descriptor(), enum_t_value);
}
inline bool GpioErrorFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpioErrorFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpioErrorFlags>(
    GpioErrorFlags_descriptor(), name, value);
}
// ===================================================================

class GpioModuleChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.OneWireGpioModule.GpioModuleChannel) */ {
 public:
  inline GpioModuleChannel() : GpioModuleChannel(nullptr) {}
  ~GpioModuleChannel() override;
  explicit PROTOBUF_CONSTEXPR GpioModuleChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpioModuleChannel(const GpioModuleChannel& from);
  GpioModuleChannel(GpioModuleChannel&& from) noexcept
    : GpioModuleChannel() {
    *this = ::std::move(from);
  }

  inline GpioModuleChannel& operator=(const GpioModuleChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpioModuleChannel& operator=(GpioModuleChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpioModuleChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpioModuleChannel* internal_default_instance() {
    return reinterpret_cast<const GpioModuleChannel*>(
               &_GpioModuleChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpioModuleChannel& a, GpioModuleChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(GpioModuleChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpioModuleChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpioModuleChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpioModuleChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpioModuleChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpioModuleChannel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioModuleChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.OneWireGpioModule.GpioModuleChannel";
  }
  protected:
  explicit GpioModuleChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kPinsMaskFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // string name = 5 [(.nanopb) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1 [(.nanopb) = {
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .blox_test.OneWireGpioModule.GpioDeviceType deviceType = 2;
  void clear_devicetype();
  ::blox_test::OneWireGpioModule::GpioDeviceType devicetype() const;
  void set_devicetype(::blox_test::OneWireGpioModule::GpioDeviceType value);
  private:
  ::blox_test::OneWireGpioModule::GpioDeviceType _internal_devicetype() const;
  void _internal_set_devicetype(::blox_test::OneWireGpioModule::GpioDeviceType value);
  public:

  // uint32 pinsMask = 3 [(.nanopb) = {
  void clear_pinsmask();
  uint32_t pinsmask() const;
  void set_pinsmask(uint32_t value);
  private:
  uint32_t _internal_pinsmask() const;
  void _internal_set_pinsmask(uint32_t value);
  public:

  // uint32 width = 4 [(.nanopb) = {
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.OneWireGpioModule.GpioModuleChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t id_;
  int devicetype_;
  uint32_t pinsmask_;
  uint32_t width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OneWireGpioModule_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.OneWireGpioModule.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.OneWireGpioModule.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kModulePositionFieldNumber = 2,
    kModuleStatusFieldNumber = 3,
    kPullUpDesiredFieldNumber = 4,
    kPullUpStatusFieldNumber = 5,
    kPullUpWhenActiveFieldNumber = 6,
    kPullUpWhenInactiveFieldNumber = 7,
    kPullDownDesiredFieldNumber = 8,
    kPullDownStatusFieldNumber = 9,
    kPullDownWhenActiveFieldNumber = 10,
    kPullDownWhenInactiveFieldNumber = 11,
    kOverCurrentFieldNumber = 12,
    kOpenLoadFieldNumber = 13,
    kUseExternalPowerFieldNumber = 14,
    kModuleStatusClearFieldNumber = 32,
  };
  // repeated .blox_test.OneWireGpioModule.GpioModuleChannel channels = 1 [(.nanopb) = {
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::blox_test::OneWireGpioModule::GpioModuleChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::OneWireGpioModule::GpioModuleChannel >*
      mutable_channels();
  private:
  const ::blox_test::OneWireGpioModule::GpioModuleChannel& _internal_channels(int index) const;
  ::blox_test::OneWireGpioModule::GpioModuleChannel* _internal_add_channels();
  public:
  const ::blox_test::OneWireGpioModule::GpioModuleChannel& channels(int index) const;
  ::blox_test::OneWireGpioModule::GpioModuleChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::OneWireGpioModule::GpioModuleChannel >&
      channels() const;

  // uint32 modulePosition = 2 [(.nanopb) = {
  void clear_moduleposition();
  uint32_t moduleposition() const;
  void set_moduleposition(uint32_t value);
  private:
  uint32_t _internal_moduleposition() const;
  void _internal_set_moduleposition(uint32_t value);
  public:

  // uint32 moduleStatus = 3 [(.nanopb) = {
  void clear_modulestatus();
  uint32_t modulestatus() const;
  void set_modulestatus(uint32_t value);
  private:
  uint32_t _internal_modulestatus() const;
  void _internal_set_modulestatus(uint32_t value);
  public:

  // uint32 pullUpDesired = 4 [(.nanopb) = {
  void clear_pullupdesired();
  uint32_t pullupdesired() const;
  void set_pullupdesired(uint32_t value);
  private:
  uint32_t _internal_pullupdesired() const;
  void _internal_set_pullupdesired(uint32_t value);
  public:

  // uint32 pullUpStatus = 5 [(.nanopb) = {
  void clear_pullupstatus();
  uint32_t pullupstatus() const;
  void set_pullupstatus(uint32_t value);
  private:
  uint32_t _internal_pullupstatus() const;
  void _internal_set_pullupstatus(uint32_t value);
  public:

  // uint32 pullUpWhenActive = 6 [(.nanopb) = {
  void clear_pullupwhenactive();
  uint32_t pullupwhenactive() const;
  void set_pullupwhenactive(uint32_t value);
  private:
  uint32_t _internal_pullupwhenactive() const;
  void _internal_set_pullupwhenactive(uint32_t value);
  public:

  // uint32 pullUpWhenInactive = 7 [(.nanopb) = {
  void clear_pullupwheninactive();
  uint32_t pullupwheninactive() const;
  void set_pullupwheninactive(uint32_t value);
  private:
  uint32_t _internal_pullupwheninactive() const;
  void _internal_set_pullupwheninactive(uint32_t value);
  public:

  // uint32 pullDownDesired = 8 [(.nanopb) = {
  void clear_pulldowndesired();
  uint32_t pulldowndesired() const;
  void set_pulldowndesired(uint32_t value);
  private:
  uint32_t _internal_pulldowndesired() const;
  void _internal_set_pulldowndesired(uint32_t value);
  public:

  // uint32 pullDownStatus = 9 [(.nanopb) = {
  void clear_pulldownstatus();
  uint32_t pulldownstatus() const;
  void set_pulldownstatus(uint32_t value);
  private:
  uint32_t _internal_pulldownstatus() const;
  void _internal_set_pulldownstatus(uint32_t value);
  public:

  // uint32 pullDownWhenActive = 10 [(.nanopb) = {
  void clear_pulldownwhenactive();
  uint32_t pulldownwhenactive() const;
  void set_pulldownwhenactive(uint32_t value);
  private:
  uint32_t _internal_pulldownwhenactive() const;
  void _internal_set_pulldownwhenactive(uint32_t value);
  public:

  // uint32 pullDownWhenInactive = 11 [(.nanopb) = {
  void clear_pulldownwheninactive();
  uint32_t pulldownwheninactive() const;
  void set_pulldownwheninactive(uint32_t value);
  private:
  uint32_t _internal_pulldownwheninactive() const;
  void _internal_set_pulldownwheninactive(uint32_t value);
  public:

  // uint32 overCurrent = 12 [(.nanopb) = {
  void clear_overcurrent();
  uint32_t overcurrent() const;
  void set_overcurrent(uint32_t value);
  private:
  uint32_t _internal_overcurrent() const;
  void _internal_set_overcurrent(uint32_t value);
  public:

  // uint32 openLoad = 13 [(.nanopb) = {
  void clear_openload();
  uint32_t openload() const;
  void set_openload(uint32_t value);
  private:
  uint32_t _internal_openload() const;
  void _internal_set_openload(uint32_t value);
  public:

  // bool useExternalPower = 14;
  void clear_useexternalpower();
  bool useexternalpower() const;
  void set_useexternalpower(bool value);
  private:
  bool _internal_useexternalpower() const;
  void _internal_set_useexternalpower(bool value);
  public:

  // uint32 moduleStatusClear = 32 [(.nanopb) = {
  void clear_modulestatusclear();
  uint32_t modulestatusclear() const;
  void set_modulestatusclear(uint32_t value);
  private:
  uint32_t _internal_modulestatusclear() const;
  void _internal_set_modulestatusclear(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.OneWireGpioModule.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::OneWireGpioModule::GpioModuleChannel > channels_;
  uint32_t moduleposition_;
  uint32_t modulestatus_;
  uint32_t pullupdesired_;
  uint32_t pullupstatus_;
  uint32_t pullupwhenactive_;
  uint32_t pullupwheninactive_;
  uint32_t pulldowndesired_;
  uint32_t pulldownstatus_;
  uint32_t pulldownwhenactive_;
  uint32_t pulldownwheninactive_;
  uint32_t overcurrent_;
  uint32_t openload_;
  bool useexternalpower_;
  uint32_t modulestatusclear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OneWireGpioModule_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpioModuleChannel

// uint32 id = 1 [(.nanopb) = {
inline void GpioModuleChannel::clear_id() {
  id_ = 0u;
}
inline uint32_t GpioModuleChannel::_internal_id() const {
  return id_;
}
inline uint32_t GpioModuleChannel::id() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.GpioModuleChannel.id)
  return _internal_id();
}
inline void GpioModuleChannel::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void GpioModuleChannel::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.GpioModuleChannel.id)
}

// .blox_test.OneWireGpioModule.GpioDeviceType deviceType = 2;
inline void GpioModuleChannel::clear_devicetype() {
  devicetype_ = 0;
}
inline ::blox_test::OneWireGpioModule::GpioDeviceType GpioModuleChannel::_internal_devicetype() const {
  return static_cast< ::blox_test::OneWireGpioModule::GpioDeviceType >(devicetype_);
}
inline ::blox_test::OneWireGpioModule::GpioDeviceType GpioModuleChannel::devicetype() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.GpioModuleChannel.deviceType)
  return _internal_devicetype();
}
inline void GpioModuleChannel::_internal_set_devicetype(::blox_test::OneWireGpioModule::GpioDeviceType value) {
  
  devicetype_ = value;
}
inline void GpioModuleChannel::set_devicetype(::blox_test::OneWireGpioModule::GpioDeviceType value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.GpioModuleChannel.deviceType)
}

// uint32 pinsMask = 3 [(.nanopb) = {
inline void GpioModuleChannel::clear_pinsmask() {
  pinsmask_ = 0u;
}
inline uint32_t GpioModuleChannel::_internal_pinsmask() const {
  return pinsmask_;
}
inline uint32_t GpioModuleChannel::pinsmask() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.GpioModuleChannel.pinsMask)
  return _internal_pinsmask();
}
inline void GpioModuleChannel::_internal_set_pinsmask(uint32_t value) {
  
  pinsmask_ = value;
}
inline void GpioModuleChannel::set_pinsmask(uint32_t value) {
  _internal_set_pinsmask(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.GpioModuleChannel.pinsMask)
}

// uint32 width = 4 [(.nanopb) = {
inline void GpioModuleChannel::clear_width() {
  width_ = 0u;
}
inline uint32_t GpioModuleChannel::_internal_width() const {
  return width_;
}
inline uint32_t GpioModuleChannel::width() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.GpioModuleChannel.width)
  return _internal_width();
}
inline void GpioModuleChannel::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void GpioModuleChannel::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.GpioModuleChannel.width)
}

// string name = 5 [(.nanopb) = {
inline void GpioModuleChannel::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GpioModuleChannel::name() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.GpioModuleChannel.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GpioModuleChannel::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.GpioModuleChannel.name)
}
inline std::string* GpioModuleChannel::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blox_test.OneWireGpioModule.GpioModuleChannel.name)
  return _s;
}
inline const std::string& GpioModuleChannel::_internal_name() const {
  return name_.Get();
}
inline void GpioModuleChannel::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GpioModuleChannel::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GpioModuleChannel::release_name() {
  // @@protoc_insertion_point(field_release:blox_test.OneWireGpioModule.GpioModuleChannel.name)
  return name_.Release();
}
inline void GpioModuleChannel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blox_test.OneWireGpioModule.GpioModuleChannel.name)
}

// -------------------------------------------------------------------

// Block

// repeated .blox_test.OneWireGpioModule.GpioModuleChannel channels = 1 [(.nanopb) = {
inline int Block::_internal_channels_size() const {
  return channels_.size();
}
inline int Block::channels_size() const {
  return _internal_channels_size();
}
inline void Block::clear_channels() {
  channels_.Clear();
}
inline ::blox_test::OneWireGpioModule::GpioModuleChannel* Block::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.OneWireGpioModule.Block.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::OneWireGpioModule::GpioModuleChannel >*
Block::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.OneWireGpioModule.Block.channels)
  return &channels_;
}
inline const ::blox_test::OneWireGpioModule::GpioModuleChannel& Block::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::blox_test::OneWireGpioModule::GpioModuleChannel& Block::channels(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.channels)
  return _internal_channels(index);
}
inline ::blox_test::OneWireGpioModule::GpioModuleChannel* Block::_internal_add_channels() {
  return channels_.Add();
}
inline ::blox_test::OneWireGpioModule::GpioModuleChannel* Block::add_channels() {
  ::blox_test::OneWireGpioModule::GpioModuleChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:blox_test.OneWireGpioModule.Block.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::OneWireGpioModule::GpioModuleChannel >&
Block::channels() const {
  // @@protoc_insertion_point(field_list:blox_test.OneWireGpioModule.Block.channels)
  return channels_;
}

// uint32 modulePosition = 2 [(.nanopb) = {
inline void Block::clear_moduleposition() {
  moduleposition_ = 0u;
}
inline uint32_t Block::_internal_moduleposition() const {
  return moduleposition_;
}
inline uint32_t Block::moduleposition() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.modulePosition)
  return _internal_moduleposition();
}
inline void Block::_internal_set_moduleposition(uint32_t value) {
  
  moduleposition_ = value;
}
inline void Block::set_moduleposition(uint32_t value) {
  _internal_set_moduleposition(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.modulePosition)
}

// uint32 moduleStatus = 3 [(.nanopb) = {
inline void Block::clear_modulestatus() {
  modulestatus_ = 0u;
}
inline uint32_t Block::_internal_modulestatus() const {
  return modulestatus_;
}
inline uint32_t Block::modulestatus() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.moduleStatus)
  return _internal_modulestatus();
}
inline void Block::_internal_set_modulestatus(uint32_t value) {
  
  modulestatus_ = value;
}
inline void Block::set_modulestatus(uint32_t value) {
  _internal_set_modulestatus(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.moduleStatus)
}

// uint32 pullUpDesired = 4 [(.nanopb) = {
inline void Block::clear_pullupdesired() {
  pullupdesired_ = 0u;
}
inline uint32_t Block::_internal_pullupdesired() const {
  return pullupdesired_;
}
inline uint32_t Block::pullupdesired() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullUpDesired)
  return _internal_pullupdesired();
}
inline void Block::_internal_set_pullupdesired(uint32_t value) {
  
  pullupdesired_ = value;
}
inline void Block::set_pullupdesired(uint32_t value) {
  _internal_set_pullupdesired(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullUpDesired)
}

// uint32 pullUpStatus = 5 [(.nanopb) = {
inline void Block::clear_pullupstatus() {
  pullupstatus_ = 0u;
}
inline uint32_t Block::_internal_pullupstatus() const {
  return pullupstatus_;
}
inline uint32_t Block::pullupstatus() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullUpStatus)
  return _internal_pullupstatus();
}
inline void Block::_internal_set_pullupstatus(uint32_t value) {
  
  pullupstatus_ = value;
}
inline void Block::set_pullupstatus(uint32_t value) {
  _internal_set_pullupstatus(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullUpStatus)
}

// uint32 pullUpWhenActive = 6 [(.nanopb) = {
inline void Block::clear_pullupwhenactive() {
  pullupwhenactive_ = 0u;
}
inline uint32_t Block::_internal_pullupwhenactive() const {
  return pullupwhenactive_;
}
inline uint32_t Block::pullupwhenactive() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullUpWhenActive)
  return _internal_pullupwhenactive();
}
inline void Block::_internal_set_pullupwhenactive(uint32_t value) {
  
  pullupwhenactive_ = value;
}
inline void Block::set_pullupwhenactive(uint32_t value) {
  _internal_set_pullupwhenactive(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullUpWhenActive)
}

// uint32 pullUpWhenInactive = 7 [(.nanopb) = {
inline void Block::clear_pullupwheninactive() {
  pullupwheninactive_ = 0u;
}
inline uint32_t Block::_internal_pullupwheninactive() const {
  return pullupwheninactive_;
}
inline uint32_t Block::pullupwheninactive() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullUpWhenInactive)
  return _internal_pullupwheninactive();
}
inline void Block::_internal_set_pullupwheninactive(uint32_t value) {
  
  pullupwheninactive_ = value;
}
inline void Block::set_pullupwheninactive(uint32_t value) {
  _internal_set_pullupwheninactive(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullUpWhenInactive)
}

// uint32 pullDownDesired = 8 [(.nanopb) = {
inline void Block::clear_pulldowndesired() {
  pulldowndesired_ = 0u;
}
inline uint32_t Block::_internal_pulldowndesired() const {
  return pulldowndesired_;
}
inline uint32_t Block::pulldowndesired() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullDownDesired)
  return _internal_pulldowndesired();
}
inline void Block::_internal_set_pulldowndesired(uint32_t value) {
  
  pulldowndesired_ = value;
}
inline void Block::set_pulldowndesired(uint32_t value) {
  _internal_set_pulldowndesired(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullDownDesired)
}

// uint32 pullDownStatus = 9 [(.nanopb) = {
inline void Block::clear_pulldownstatus() {
  pulldownstatus_ = 0u;
}
inline uint32_t Block::_internal_pulldownstatus() const {
  return pulldownstatus_;
}
inline uint32_t Block::pulldownstatus() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullDownStatus)
  return _internal_pulldownstatus();
}
inline void Block::_internal_set_pulldownstatus(uint32_t value) {
  
  pulldownstatus_ = value;
}
inline void Block::set_pulldownstatus(uint32_t value) {
  _internal_set_pulldownstatus(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullDownStatus)
}

// uint32 pullDownWhenActive = 10 [(.nanopb) = {
inline void Block::clear_pulldownwhenactive() {
  pulldownwhenactive_ = 0u;
}
inline uint32_t Block::_internal_pulldownwhenactive() const {
  return pulldownwhenactive_;
}
inline uint32_t Block::pulldownwhenactive() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullDownWhenActive)
  return _internal_pulldownwhenactive();
}
inline void Block::_internal_set_pulldownwhenactive(uint32_t value) {
  
  pulldownwhenactive_ = value;
}
inline void Block::set_pulldownwhenactive(uint32_t value) {
  _internal_set_pulldownwhenactive(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullDownWhenActive)
}

// uint32 pullDownWhenInactive = 11 [(.nanopb) = {
inline void Block::clear_pulldownwheninactive() {
  pulldownwheninactive_ = 0u;
}
inline uint32_t Block::_internal_pulldownwheninactive() const {
  return pulldownwheninactive_;
}
inline uint32_t Block::pulldownwheninactive() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.pullDownWhenInactive)
  return _internal_pulldownwheninactive();
}
inline void Block::_internal_set_pulldownwheninactive(uint32_t value) {
  
  pulldownwheninactive_ = value;
}
inline void Block::set_pulldownwheninactive(uint32_t value) {
  _internal_set_pulldownwheninactive(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.pullDownWhenInactive)
}

// uint32 overCurrent = 12 [(.nanopb) = {
inline void Block::clear_overcurrent() {
  overcurrent_ = 0u;
}
inline uint32_t Block::_internal_overcurrent() const {
  return overcurrent_;
}
inline uint32_t Block::overcurrent() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.overCurrent)
  return _internal_overcurrent();
}
inline void Block::_internal_set_overcurrent(uint32_t value) {
  
  overcurrent_ = value;
}
inline void Block::set_overcurrent(uint32_t value) {
  _internal_set_overcurrent(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.overCurrent)
}

// uint32 openLoad = 13 [(.nanopb) = {
inline void Block::clear_openload() {
  openload_ = 0u;
}
inline uint32_t Block::_internal_openload() const {
  return openload_;
}
inline uint32_t Block::openload() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.openLoad)
  return _internal_openload();
}
inline void Block::_internal_set_openload(uint32_t value) {
  
  openload_ = value;
}
inline void Block::set_openload(uint32_t value) {
  _internal_set_openload(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.openLoad)
}

// bool useExternalPower = 14;
inline void Block::clear_useexternalpower() {
  useexternalpower_ = false;
}
inline bool Block::_internal_useexternalpower() const {
  return useexternalpower_;
}
inline bool Block::useexternalpower() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.useExternalPower)
  return _internal_useexternalpower();
}
inline void Block::_internal_set_useexternalpower(bool value) {
  
  useexternalpower_ = value;
}
inline void Block::set_useexternalpower(bool value) {
  _internal_set_useexternalpower(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.useExternalPower)
}

// uint32 moduleStatusClear = 32 [(.nanopb) = {
inline void Block::clear_modulestatusclear() {
  modulestatusclear_ = 0u;
}
inline uint32_t Block::_internal_modulestatusclear() const {
  return modulestatusclear_;
}
inline uint32_t Block::modulestatusclear() const {
  // @@protoc_insertion_point(field_get:blox_test.OneWireGpioModule.Block.moduleStatusClear)
  return _internal_modulestatusclear();
}
inline void Block::_internal_set_modulestatusclear(uint32_t value) {
  
  modulestatusclear_ = value;
}
inline void Block::set_modulestatusclear(uint32_t value) {
  _internal_set_modulestatusclear(value);
  // @@protoc_insertion_point(field_set:blox_test.OneWireGpioModule.Block.moduleStatusClear)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OneWireGpioModule
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::OneWireGpioModule::GpioDeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::OneWireGpioModule::GpioDeviceType>() {
  return ::blox_test::OneWireGpioModule::GpioDeviceType_descriptor();
}
template <> struct is_proto_enum< ::blox_test::OneWireGpioModule::GpioErrorFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::OneWireGpioModule::GpioErrorFlags>() {
  return ::blox_test::OneWireGpioModule::GpioErrorFlags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OneWireGpioModule_5ftest_2eproto
