// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EdgeCase_test.proto

#include "EdgeCase_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blox_test {
namespace EdgeCase {
PROTOBUF_CONSTEXPR Settings::Settings(
    ::_pbi::ConstantInitialized)
  : address_(uint64_t{0u})
  , offset_(0){}
struct SettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsDefaultTypeInternal() {}
  union {
    Settings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsDefaultTypeInternal _Settings_default_instance_;
PROTOBUF_CONSTEXPR State::State(
    ::_pbi::ConstantInitialized)
  : value_(0)
  , connected_(false){}
struct StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateDefaultTypeInternal _State_default_instance_;
PROTOBUF_CONSTEXPR NestedLink::NestedLink(
    ::_pbi::ConstantInitialized)
  : connection_(0u){}
struct NestedLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedLinkDefaultTypeInternal() {}
  union {
    NestedLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedLinkDefaultTypeInternal _NestedLink_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : additionallinks_()
  , listvalues_()
  , strippedfields_()
  , _strippedfields_cached_byte_size_(0)
  , settings_(nullptr)
  , state_(nullptr)
  , link_(0u)
  , deltav_(0u)
  , logged_(0u)
  , unlogged_(0u)
  , drivendevice_(0u){}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR SubCase::SubCase(
    ::_pbi::ConstantInitialized)
  : subvalue_(0u){}
struct SubCaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubCaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubCaseDefaultTypeInternal() {}
  union {
    SubCase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubCaseDefaultTypeInternal _SubCase_default_instance_;
}  // namespace EdgeCase
}  // namespace blox_test
static ::_pb::Metadata file_level_metadata_EdgeCase_5ftest_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_EdgeCase_5ftest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_EdgeCase_5ftest_2eproto = nullptr;

const uint32_t TableStruct_EdgeCase_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Settings, address_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Settings, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::State, value_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::State, connected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::NestedLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::NestedLink, connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, settings_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, state_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, link_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, additionallinks_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, listvalues_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, deltav_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, logged_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, unlogged_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, drivendevice_),
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::Block, strippedfields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::SubCase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::EdgeCase::SubCase, subvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::blox_test::EdgeCase::Settings)},
  { 8, -1, -1, sizeof(::blox_test::EdgeCase::State)},
  { 16, -1, -1, sizeof(::blox_test::EdgeCase::NestedLink)},
  { 23, -1, -1, sizeof(::blox_test::EdgeCase::Block)},
  { 39, -1, -1, sizeof(::blox_test::EdgeCase::SubCase)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::blox_test::EdgeCase::_Settings_default_instance_._instance,
  &::blox_test::EdgeCase::_State_default_instance_._instance,
  &::blox_test::EdgeCase::_NestedLink_default_instance_._instance,
  &::blox_test::EdgeCase::_Block_default_instance_._instance,
  &::blox_test::EdgeCase::_SubCase_default_instance_._instance,
};

const char descriptor_table_protodef_EdgeCase_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023EdgeCase_test.proto\022\022blox_test.EdgeCas"
  "e\032\023brewblox_test.proto\032\021nanopb_test.prot"
  "o\"B\n\010Settings\022\027\n\007address\030\001 \001(\006B\006\212\265\030\002 \001\022\035"
  "\n\006offset\030\002 \001(\021B\r\212\265\030\002\010\006\212\265\030\003\020\200\002\"@\n\005State\022\034"
  "\n\005value\030\001 \001(\021B\r\212\265\030\002\010\001\212\265\030\003\020\200\002\022\031\n\tconnecte"
  "d\030\002 \001(\010B\006\212\265\030\002(\001\"(\n\nNestedLink\022\032\n\nconnect"
  "ion\030\001 \001(\rB\006\212\265\030\002\030\002\"\360\002\n\005Block\022.\n\010settings\030"
  "\001 \001(\0132\034.blox_test.EdgeCase.Settings\022(\n\005s"
  "tate\030\002 \001(\0132\031.blox_test.EdgeCase.State\022\024\n"
  "\004link\030\003 \001(\rB\006\212\265\030\002\030\005\0227\n\017additionalLinks\030\004"
  " \003(\0132\036.blox_test.EdgeCase.NestedLink\022!\n\n"
  "listValues\030\005 \003(\002B\r\212\265\030\002\010\001\212\265\030\003\020\200\002\022\035\n\006delta"
  "V\030\006 \001(\rB\r\212\265\030\002\010\007\212\265\030\003\020\200\002\022\026\n\006logged\030\007 \001(\rB\006"
  "\212\265\030\0020\001\022\020\n\010unLogged\030\010 \001(\r\022(\n\014drivenDevice"
  "\030\t \001(\rB\022\212\265\030\003\030\273\002\212\265\030\002@\001\222\?\0028\020\022(\n\016strippedFi"
  "elds\030c \003(\rB\020\212\265\030\002(\001\222\?\0028\020\222\?\002\020\002\"#\n\007SubCase\022"
  "\020\n\010subvalue\030\001 \001(\r:\006\212\265\030\002X\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_EdgeCase_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::_pbi::once_flag descriptor_table_EdgeCase_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_EdgeCase_5ftest_2eproto = {
    false, false, 673, descriptor_table_protodef_EdgeCase_5ftest_2eproto,
    "EdgeCase_test.proto",
    &descriptor_table_EdgeCase_5ftest_2eproto_once, descriptor_table_EdgeCase_5ftest_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_EdgeCase_5ftest_2eproto::offsets,
    file_level_metadata_EdgeCase_5ftest_2eproto, file_level_enum_descriptors_EdgeCase_5ftest_2eproto,
    file_level_service_descriptors_EdgeCase_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_EdgeCase_5ftest_2eproto_getter() {
  return &descriptor_table_EdgeCase_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_EdgeCase_5ftest_2eproto(&descriptor_table_EdgeCase_5ftest_2eproto);
namespace blox_test {
namespace EdgeCase {

// ===================================================================

class Settings::_Internal {
 public:
};

Settings::Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.EdgeCase.Settings)
}
Settings::Settings(const Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&address_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:blox_test.EdgeCase.Settings)
}

inline void Settings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&address_)) + sizeof(offset_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:blox_test.EdgeCase.Settings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.EdgeCase.Settings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&address_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Settings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 address = 1 [(.brewblox.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // sint32 offset = 2 [(.brewblox.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Settings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.EdgeCase.Settings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 address = 1 [(.brewblox.field) = {
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_address(), target);
  }

  // sint32 offset = 2 [(.brewblox.field) = {
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.EdgeCase.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.EdgeCase.Settings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 address = 1 [(.brewblox.field) = {
  if (this->_internal_address() != 0) {
    total_size += 1 + 8;
  }

  // sint32 offset = 2 [(.brewblox.field) = {
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Settings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Settings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Settings::GetClassData() const { return &_class_data_; }

void Settings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Settings *>(to)->MergeFrom(
      static_cast<const Settings &>(from));
}


void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.EdgeCase.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.EdgeCase.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::InternalSwap(Settings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Settings, offset_)
      + sizeof(Settings::offset_)
      - PROTOBUF_FIELD_OFFSET(Settings, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Settings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EdgeCase_5ftest_2eproto_getter, &descriptor_table_EdgeCase_5ftest_2eproto_once,
      file_level_metadata_EdgeCase_5ftest_2eproto[0]);
}

// ===================================================================

class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.EdgeCase.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&value_)) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:blox_test.EdgeCase.State)
}

inline void State::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&value_)) + sizeof(connected_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:blox_test.EdgeCase.State)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.EdgeCase.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&value_)) + sizeof(connected_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 value = 1 [(.brewblox.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool connected = 2 [(.brewblox.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.EdgeCase.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 value = 1 [(.brewblox.field) = {
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_value(), target);
  }

  // bool connected = 2 [(.brewblox.field) = {
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.EdgeCase.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.EdgeCase.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 value = 1 [(.brewblox.field) = {
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_value());
  }

  // bool connected = 2 [(.brewblox.field) = {
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }

void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<State *>(to)->MergeFrom(
      static_cast<const State &>(from));
}


void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.EdgeCase.State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.EdgeCase.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, connected_)
      + sizeof(State::connected_)
      - PROTOBUF_FIELD_OFFSET(State, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EdgeCase_5ftest_2eproto_getter, &descriptor_table_EdgeCase_5ftest_2eproto_once,
      file_level_metadata_EdgeCase_5ftest_2eproto[1]);
}

// ===================================================================

class NestedLink::_Internal {
 public:
};

NestedLink::NestedLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.EdgeCase.NestedLink)
}
NestedLink::NestedLink(const NestedLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_ = from.connection_;
  // @@protoc_insertion_point(copy_constructor:blox_test.EdgeCase.NestedLink)
}

inline void NestedLink::SharedCtor() {
connection_ = 0u;
}

NestedLink::~NestedLink() {
  // @@protoc_insertion_point(destructor:blox_test.EdgeCase.NestedLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NestedLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NestedLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedLink::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.EdgeCase.NestedLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connection = 1 [(.brewblox.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          connection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NestedLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.EdgeCase.NestedLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connection = 1 [(.brewblox.field) = {
  if (this->_internal_connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.EdgeCase.NestedLink)
  return target;
}

size_t NestedLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.EdgeCase.NestedLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 connection = 1 [(.brewblox.field) = {
  if (this->_internal_connection() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NestedLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NestedLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NestedLink::GetClassData() const { return &_class_data_; }

void NestedLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NestedLink *>(to)->MergeFrom(
      static_cast<const NestedLink &>(from));
}


void NestedLink::MergeFrom(const NestedLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.EdgeCase.NestedLink)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connection() != 0) {
    _internal_set_connection(from._internal_connection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NestedLink::CopyFrom(const NestedLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.EdgeCase.NestedLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedLink::IsInitialized() const {
  return true;
}

void NestedLink::InternalSwap(NestedLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(connection_, other->connection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EdgeCase_5ftest_2eproto_getter, &descriptor_table_EdgeCase_5ftest_2eproto_once,
      file_level_metadata_EdgeCase_5ftest_2eproto[2]);
}

// ===================================================================

class Block::_Internal {
 public:
  static const ::blox_test::EdgeCase::Settings& settings(const Block* msg);
  static const ::blox_test::EdgeCase::State& state(const Block* msg);
};

const ::blox_test::EdgeCase::Settings&
Block::_Internal::settings(const Block* msg) {
  return *msg->settings_;
}
const ::blox_test::EdgeCase::State&
Block::_Internal::state(const Block* msg) {
  return *msg->state_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additionallinks_(arena),
  listvalues_(arena),
  strippedfields_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.EdgeCase.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additionallinks_(from.additionallinks_),
      listvalues_(from.listvalues_),
      strippedfields_(from.strippedfields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::blox_test::EdgeCase::Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::blox_test::EdgeCase::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&link_, &from.link_,
    static_cast<size_t>(reinterpret_cast<char*>(&drivendevice_) -
    reinterpret_cast<char*>(&link_)) + sizeof(drivendevice_));
  // @@protoc_insertion_point(copy_constructor:blox_test.EdgeCase.Block)
}

inline void Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drivendevice_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(drivendevice_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.EdgeCase.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete state_;
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.EdgeCase.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additionallinks_.Clear();
  listvalues_.Clear();
  strippedfields_.Clear();
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&link_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drivendevice_) -
      reinterpret_cast<char*>(&link_)) + sizeof(drivendevice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox_test.EdgeCase.Settings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.EdgeCase.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 link = 3 [(.brewblox.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          link_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .blox_test.EdgeCase.NestedLink additionalLinks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additionallinks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float listValues = 5 [(.brewblox.field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_listvalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_listvalues(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 deltaV = 6 [(.brewblox.field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          deltav_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logged = 7 [(.brewblox.field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 unLogged = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          unlogged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drivenDevice = 9 [(.nanopb) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          drivendevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 strippedFields = 99 [(.nanopb) = {
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_strippedfields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.EdgeCase.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox_test.EdgeCase.Settings settings = 1;
  if (this->_internal_has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  // .blox_test.EdgeCase.State state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // uint32 link = 3 [(.brewblox.field) = {
  if (this->_internal_link() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_link(), target);
  }

  // repeated .blox_test.EdgeCase.NestedLink additionalLinks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additionallinks_size()); i < n; i++) {
    const auto& repfield = this->_internal_additionallinks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float listValues = 5 [(.brewblox.field) = {
  if (this->_internal_listvalues_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_listvalues(), target);
  }

  // uint32 deltaV = 6 [(.brewblox.field) = {
  if (this->_internal_deltav() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_deltav(), target);
  }

  // uint32 logged = 7 [(.brewblox.field) = {
  if (this->_internal_logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_logged(), target);
  }

  // uint32 unLogged = 8;
  if (this->_internal_unlogged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_unlogged(), target);
  }

  // uint32 drivenDevice = 9 [(.nanopb) = {
  if (this->_internal_drivendevice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_drivendevice(), target);
  }

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  {
    int byte_size = _strippedfields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          99, _internal_strippedfields(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.EdgeCase.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.EdgeCase.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox_test.EdgeCase.NestedLink additionalLinks = 4;
  total_size += 1UL * this->_internal_additionallinks_size();
  for (const auto& msg : this->additionallinks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float listValues = 5 [(.brewblox.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_listvalues_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->strippedfields_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _strippedfields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .blox_test.EdgeCase.Settings settings = 1;
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .blox_test.EdgeCase.State state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // uint32 link = 3 [(.brewblox.field) = {
  if (this->_internal_link() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_link());
  }

  // uint32 deltaV = 6 [(.brewblox.field) = {
  if (this->_internal_deltav() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deltav());
  }

  // uint32 logged = 7 [(.brewblox.field) = {
  if (this->_internal_logged() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logged());
  }

  // uint32 unLogged = 8;
  if (this->_internal_unlogged() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unlogged());
  }

  // uint32 drivenDevice = 9 [(.nanopb) = {
  if (this->_internal_drivendevice() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drivendevice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.EdgeCase.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additionallinks_.MergeFrom(from.additionallinks_);
  listvalues_.MergeFrom(from.listvalues_);
  strippedfields_.MergeFrom(from.strippedfields_);
  if (from._internal_has_settings()) {
    _internal_mutable_settings()->::blox_test::EdgeCase::Settings::MergeFrom(from._internal_settings());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::blox_test::EdgeCase::State::MergeFrom(from._internal_state());
  }
  if (from._internal_link() != 0) {
    _internal_set_link(from._internal_link());
  }
  if (from._internal_deltav() != 0) {
    _internal_set_deltav(from._internal_deltav());
  }
  if (from._internal_logged() != 0) {
    _internal_set_logged(from._internal_logged());
  }
  if (from._internal_unlogged() != 0) {
    _internal_set_unlogged(from._internal_unlogged());
  }
  if (from._internal_drivendevice() != 0) {
    _internal_set_drivendevice(from._internal_drivendevice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.EdgeCase.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additionallinks_.InternalSwap(&other->additionallinks_);
  listvalues_.InternalSwap(&other->listvalues_);
  strippedfields_.InternalSwap(&other->strippedfields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, drivendevice_)
      + sizeof(Block::drivendevice_)
      - PROTOBUF_FIELD_OFFSET(Block, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EdgeCase_5ftest_2eproto_getter, &descriptor_table_EdgeCase_5ftest_2eproto_once,
      file_level_metadata_EdgeCase_5ftest_2eproto[3]);
}

// ===================================================================

class SubCase::_Internal {
 public:
};

SubCase::SubCase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.EdgeCase.SubCase)
}
SubCase::SubCase(const SubCase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subvalue_ = from.subvalue_;
  // @@protoc_insertion_point(copy_constructor:blox_test.EdgeCase.SubCase)
}

inline void SubCase::SharedCtor() {
subvalue_ = 0u;
}

SubCase::~SubCase() {
  // @@protoc_insertion_point(destructor:blox_test.EdgeCase.SubCase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubCase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubCase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubCase::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.EdgeCase.SubCase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subvalue_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubCase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 subvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          subvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubCase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.EdgeCase.SubCase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 subvalue = 1;
  if (this->_internal_subvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_subvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.EdgeCase.SubCase)
  return target;
}

size_t SubCase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.EdgeCase.SubCase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 subvalue = 1;
  if (this->_internal_subvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_subvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubCase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubCase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubCase::GetClassData() const { return &_class_data_; }

void SubCase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubCase *>(to)->MergeFrom(
      static_cast<const SubCase &>(from));
}


void SubCase::MergeFrom(const SubCase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.EdgeCase.SubCase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_subvalue() != 0) {
    _internal_set_subvalue(from._internal_subvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubCase::CopyFrom(const SubCase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.EdgeCase.SubCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubCase::IsInitialized() const {
  return true;
}

void SubCase::InternalSwap(SubCase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(subvalue_, other->subvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubCase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EdgeCase_5ftest_2eproto_getter, &descriptor_table_EdgeCase_5ftest_2eproto_once,
      file_level_metadata_EdgeCase_5ftest_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace EdgeCase
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::EdgeCase::Settings*
Arena::CreateMaybeMessage< ::blox_test::EdgeCase::Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::EdgeCase::Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::EdgeCase::State*
Arena::CreateMaybeMessage< ::blox_test::EdgeCase::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::EdgeCase::State >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::EdgeCase::NestedLink*
Arena::CreateMaybeMessage< ::blox_test::EdgeCase::NestedLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::EdgeCase::NestedLink >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::EdgeCase::Block*
Arena::CreateMaybeMessage< ::blox_test::EdgeCase::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::EdgeCase::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::EdgeCase::SubCase*
Arena::CreateMaybeMessage< ::blox_test::EdgeCase::SubCase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::EdgeCase::SubCase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
