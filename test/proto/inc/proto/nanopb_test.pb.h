// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanopb_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nanopb_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nanopb_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nanopb_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nanopb_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nanopb_5ftest_2eproto;
class NanoPBOptions;
struct NanoPBOptionsDefaultTypeInternal;
extern NanoPBOptionsDefaultTypeInternal _NanoPBOptions_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NanoPBOptions* Arena::CreateMaybeMessage<::NanoPBOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum FieldType : int {
  FT_DEFAULT = 0,
  FT_CALLBACK = 1,
  FT_POINTER = 4,
  FT_STATIC = 2,
  FT_IGNORE = 3,
  FT_INLINE = 5
};
bool FieldType_IsValid(int value);
constexpr FieldType FieldType_MIN = FT_DEFAULT;
constexpr FieldType FieldType_MAX = FT_INLINE;
constexpr int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor();
template<typename T>
inline const std::string& FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldType_descriptor(), enum_t_value);
}
inline bool FieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
enum IntSize : int {
  IS_DEFAULT = 0,
  IS_8 = 8,
  IS_16 = 16,
  IS_32 = 32,
  IS_64 = 64
};
bool IntSize_IsValid(int value);
constexpr IntSize IntSize_MIN = IS_DEFAULT;
constexpr IntSize IntSize_MAX = IS_64;
constexpr int IntSize_ARRAYSIZE = IntSize_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntSize_descriptor();
template<typename T>
inline const std::string& IntSize_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntSize>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntSize_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntSize_descriptor(), enum_t_value);
}
inline bool IntSize_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntSize* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntSize>(
    IntSize_descriptor(), name, value);
}
// ===================================================================

class NanoPBOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NanoPBOptions) */ {
 public:
  inline NanoPBOptions() : NanoPBOptions(nullptr) {}
  ~NanoPBOptions() override;
  explicit PROTOBUF_CONSTEXPR NanoPBOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NanoPBOptions(const NanoPBOptions& from);
  NanoPBOptions(NanoPBOptions&& from) noexcept
    : NanoPBOptions() {
    *this = ::std::move(from);
  }

  inline NanoPBOptions& operator=(const NanoPBOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline NanoPBOptions& operator=(NanoPBOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NanoPBOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const NanoPBOptions* internal_default_instance() {
    return reinterpret_cast<const NanoPBOptions*>(
               &_NanoPBOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NanoPBOptions& a, NanoPBOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(NanoPBOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NanoPBOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NanoPBOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NanoPBOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NanoPBOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NanoPBOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NanoPBOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NanoPBOptions";
  }
  protected:
  explicit NanoPBOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxSizeFieldNumber = 1,
    kMaxCountFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIntSizeFieldNumber = 7,
    kPackedStructFieldNumber = 5,
    kPackedEnumFieldNumber = 10,
    kSkipMessageFieldNumber = 6,
    kNoUnionsFieldNumber = 8,
    kMsgidFieldNumber = 9,
    kAnonymousOneofFieldNumber = 11,
    kProto3FieldNumber = 12,
    kEnumToStringFieldNumber = 13,
    kFixedLengthFieldNumber = 15,
    kMaxLengthFieldNumber = 14,
    kLongNamesFieldNumber = 4,
  };
  // optional int32 max_size = 1;
  bool has_max_size() const;
  private:
  bool _internal_has_max_size() const;
  public:
  void clear_max_size();
  int32_t max_size() const;
  void set_max_size(int32_t value);
  private:
  int32_t _internal_max_size() const;
  void _internal_set_max_size(int32_t value);
  public:

  // optional int32 max_count = 2;
  bool has_max_count() const;
  private:
  bool _internal_has_max_count() const;
  public:
  void clear_max_count();
  int32_t max_count() const;
  void set_max_count(int32_t value);
  private:
  int32_t _internal_max_count() const;
  void _internal_set_max_count(int32_t value);
  public:

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::FieldType type() const;
  void set_type(::FieldType value);
  private:
  ::FieldType _internal_type() const;
  void _internal_set_type(::FieldType value);
  public:

  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  bool has_int_size() const;
  private:
  bool _internal_has_int_size() const;
  public:
  void clear_int_size();
  ::IntSize int_size() const;
  void set_int_size(::IntSize value);
  private:
  ::IntSize _internal_int_size() const;
  void _internal_set_int_size(::IntSize value);
  public:

  // optional bool packed_struct = 5 [default = false];
  bool has_packed_struct() const;
  private:
  bool _internal_has_packed_struct() const;
  public:
  void clear_packed_struct();
  bool packed_struct() const;
  void set_packed_struct(bool value);
  private:
  bool _internal_packed_struct() const;
  void _internal_set_packed_struct(bool value);
  public:

  // optional bool packed_enum = 10 [default = false];
  bool has_packed_enum() const;
  private:
  bool _internal_has_packed_enum() const;
  public:
  void clear_packed_enum();
  bool packed_enum() const;
  void set_packed_enum(bool value);
  private:
  bool _internal_packed_enum() const;
  void _internal_set_packed_enum(bool value);
  public:

  // optional bool skip_message = 6 [default = false];
  bool has_skip_message() const;
  private:
  bool _internal_has_skip_message() const;
  public:
  void clear_skip_message();
  bool skip_message() const;
  void set_skip_message(bool value);
  private:
  bool _internal_skip_message() const;
  void _internal_set_skip_message(bool value);
  public:

  // optional bool no_unions = 8 [default = false];
  bool has_no_unions() const;
  private:
  bool _internal_has_no_unions() const;
  public:
  void clear_no_unions();
  bool no_unions() const;
  void set_no_unions(bool value);
  private:
  bool _internal_no_unions() const;
  void _internal_set_no_unions(bool value);
  public:

  // optional uint32 msgid = 9;
  bool has_msgid() const;
  private:
  bool _internal_has_msgid() const;
  public:
  void clear_msgid();
  uint32_t msgid() const;
  void set_msgid(uint32_t value);
  private:
  uint32_t _internal_msgid() const;
  void _internal_set_msgid(uint32_t value);
  public:

  // optional bool anonymous_oneof = 11 [default = false];
  bool has_anonymous_oneof() const;
  private:
  bool _internal_has_anonymous_oneof() const;
  public:
  void clear_anonymous_oneof();
  bool anonymous_oneof() const;
  void set_anonymous_oneof(bool value);
  private:
  bool _internal_anonymous_oneof() const;
  void _internal_set_anonymous_oneof(bool value);
  public:

  // optional bool proto3 = 12 [default = false];
  bool has_proto3() const;
  private:
  bool _internal_has_proto3() const;
  public:
  void clear_proto3();
  bool proto3() const;
  void set_proto3(bool value);
  private:
  bool _internal_proto3() const;
  void _internal_set_proto3(bool value);
  public:

  // optional bool enum_to_string = 13 [default = false];
  bool has_enum_to_string() const;
  private:
  bool _internal_has_enum_to_string() const;
  public:
  void clear_enum_to_string();
  bool enum_to_string() const;
  void set_enum_to_string(bool value);
  private:
  bool _internal_enum_to_string() const;
  void _internal_set_enum_to_string(bool value);
  public:

  // optional bool fixed_length = 15 [default = false];
  bool has_fixed_length() const;
  private:
  bool _internal_has_fixed_length() const;
  public:
  void clear_fixed_length();
  bool fixed_length() const;
  void set_fixed_length(bool value);
  private:
  bool _internal_fixed_length() const;
  void _internal_set_fixed_length(bool value);
  public:

  // optional int32 max_length = 14;
  bool has_max_length() const;
  private:
  bool _internal_has_max_length() const;
  public:
  void clear_max_length();
  int32_t max_length() const;
  void set_max_length(int32_t value);
  private:
  int32_t _internal_max_length() const;
  void _internal_set_max_length(int32_t value);
  public:

  // optional bool long_names = 4 [default = true];
  bool has_long_names() const;
  private:
  bool _internal_has_long_names() const;
  public:
  void clear_long_names();
  bool long_names() const;
  void set_long_names(bool value);
  private:
  bool _internal_long_names() const;
  void _internal_set_long_names(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NanoPBOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t max_size_;
  int32_t max_count_;
  int type_;
  int int_size_;
  bool packed_struct_;
  bool packed_enum_;
  bool skip_message_;
  bool no_unions_;
  uint32_t msgid_;
  bool anonymous_oneof_;
  bool proto3_;
  bool enum_to_string_;
  bool fixed_length_;
  int32_t max_length_;
  bool long_names_;
  friend struct ::TableStruct_nanopb_5ftest_2eproto;
};
// ===================================================================

static const int kNanopbFileoptFieldNumber = 1010;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_fileopt;
static const int kNanopbMsgoptFieldNumber = 1010;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_msgopt;
static const int kNanopbEnumoptFieldNumber = 1010;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_enumopt;
static const int kNanopbFieldNumber = 1010;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NanoPBOptions

// optional int32 max_size = 1;
inline bool NanoPBOptions::_internal_has_max_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NanoPBOptions::has_max_size() const {
  return _internal_has_max_size();
}
inline void NanoPBOptions::clear_max_size() {
  max_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t NanoPBOptions::_internal_max_size() const {
  return max_size_;
}
inline int32_t NanoPBOptions::max_size() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_size)
  return _internal_max_size();
}
inline void NanoPBOptions::_internal_set_max_size(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_size_ = value;
}
inline void NanoPBOptions::set_max_size(int32_t value) {
  _internal_set_max_size(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_size)
}

// optional int32 max_length = 14;
inline bool NanoPBOptions::_internal_has_max_length() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool NanoPBOptions::has_max_length() const {
  return _internal_has_max_length();
}
inline void NanoPBOptions::clear_max_length() {
  max_length_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t NanoPBOptions::_internal_max_length() const {
  return max_length_;
}
inline int32_t NanoPBOptions::max_length() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_length)
  return _internal_max_length();
}
inline void NanoPBOptions::_internal_set_max_length(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  max_length_ = value;
}
inline void NanoPBOptions::set_max_length(int32_t value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_length)
}

// optional int32 max_count = 2;
inline bool NanoPBOptions::_internal_has_max_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NanoPBOptions::has_max_count() const {
  return _internal_has_max_count();
}
inline void NanoPBOptions::clear_max_count() {
  max_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t NanoPBOptions::_internal_max_count() const {
  return max_count_;
}
inline int32_t NanoPBOptions::max_count() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_count)
  return _internal_max_count();
}
inline void NanoPBOptions::_internal_set_max_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  max_count_ = value;
}
inline void NanoPBOptions::set_max_count(int32_t value) {
  _internal_set_max_count(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_count)
}

// optional .IntSize int_size = 7 [default = IS_DEFAULT];
inline bool NanoPBOptions::_internal_has_int_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NanoPBOptions::has_int_size() const {
  return _internal_has_int_size();
}
inline void NanoPBOptions::clear_int_size() {
  int_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::IntSize NanoPBOptions::_internal_int_size() const {
  return static_cast< ::IntSize >(int_size_);
}
inline ::IntSize NanoPBOptions::int_size() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.int_size)
  return _internal_int_size();
}
inline void NanoPBOptions::_internal_set_int_size(::IntSize value) {
  assert(::IntSize_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  int_size_ = value;
}
inline void NanoPBOptions::set_int_size(::IntSize value) {
  _internal_set_int_size(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.int_size)
}

// optional .FieldType type = 3 [default = FT_DEFAULT];
inline bool NanoPBOptions::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NanoPBOptions::has_type() const {
  return _internal_has_type();
}
inline void NanoPBOptions::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FieldType NanoPBOptions::_internal_type() const {
  return static_cast< ::FieldType >(type_);
}
inline ::FieldType NanoPBOptions::type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.type)
  return _internal_type();
}
inline void NanoPBOptions::_internal_set_type(::FieldType value) {
  assert(::FieldType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void NanoPBOptions::set_type(::FieldType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.type)
}

// optional bool long_names = 4 [default = true];
inline bool NanoPBOptions::_internal_has_long_names() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool NanoPBOptions::has_long_names() const {
  return _internal_has_long_names();
}
inline void NanoPBOptions::clear_long_names() {
  long_names_ = true;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool NanoPBOptions::_internal_long_names() const {
  return long_names_;
}
inline bool NanoPBOptions::long_names() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.long_names)
  return _internal_long_names();
}
inline void NanoPBOptions::_internal_set_long_names(bool value) {
  _has_bits_[0] |= 0x00004000u;
  long_names_ = value;
}
inline void NanoPBOptions::set_long_names(bool value) {
  _internal_set_long_names(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.long_names)
}

// optional bool packed_struct = 5 [default = false];
inline bool NanoPBOptions::_internal_has_packed_struct() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NanoPBOptions::has_packed_struct() const {
  return _internal_has_packed_struct();
}
inline void NanoPBOptions::clear_packed_struct() {
  packed_struct_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool NanoPBOptions::_internal_packed_struct() const {
  return packed_struct_;
}
inline bool NanoPBOptions::packed_struct() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.packed_struct)
  return _internal_packed_struct();
}
inline void NanoPBOptions::_internal_set_packed_struct(bool value) {
  _has_bits_[0] |= 0x00000010u;
  packed_struct_ = value;
}
inline void NanoPBOptions::set_packed_struct(bool value) {
  _internal_set_packed_struct(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.packed_struct)
}

// optional bool packed_enum = 10 [default = false];
inline bool NanoPBOptions::_internal_has_packed_enum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NanoPBOptions::has_packed_enum() const {
  return _internal_has_packed_enum();
}
inline void NanoPBOptions::clear_packed_enum() {
  packed_enum_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool NanoPBOptions::_internal_packed_enum() const {
  return packed_enum_;
}
inline bool NanoPBOptions::packed_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.packed_enum)
  return _internal_packed_enum();
}
inline void NanoPBOptions::_internal_set_packed_enum(bool value) {
  _has_bits_[0] |= 0x00000020u;
  packed_enum_ = value;
}
inline void NanoPBOptions::set_packed_enum(bool value) {
  _internal_set_packed_enum(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.packed_enum)
}

// optional bool skip_message = 6 [default = false];
inline bool NanoPBOptions::_internal_has_skip_message() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NanoPBOptions::has_skip_message() const {
  return _internal_has_skip_message();
}
inline void NanoPBOptions::clear_skip_message() {
  skip_message_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool NanoPBOptions::_internal_skip_message() const {
  return skip_message_;
}
inline bool NanoPBOptions::skip_message() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.skip_message)
  return _internal_skip_message();
}
inline void NanoPBOptions::_internal_set_skip_message(bool value) {
  _has_bits_[0] |= 0x00000040u;
  skip_message_ = value;
}
inline void NanoPBOptions::set_skip_message(bool value) {
  _internal_set_skip_message(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.skip_message)
}

// optional bool no_unions = 8 [default = false];
inline bool NanoPBOptions::_internal_has_no_unions() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NanoPBOptions::has_no_unions() const {
  return _internal_has_no_unions();
}
inline void NanoPBOptions::clear_no_unions() {
  no_unions_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool NanoPBOptions::_internal_no_unions() const {
  return no_unions_;
}
inline bool NanoPBOptions::no_unions() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.no_unions)
  return _internal_no_unions();
}
inline void NanoPBOptions::_internal_set_no_unions(bool value) {
  _has_bits_[0] |= 0x00000080u;
  no_unions_ = value;
}
inline void NanoPBOptions::set_no_unions(bool value) {
  _internal_set_no_unions(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.no_unions)
}

// optional uint32 msgid = 9;
inline bool NanoPBOptions::_internal_has_msgid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NanoPBOptions::has_msgid() const {
  return _internal_has_msgid();
}
inline void NanoPBOptions::clear_msgid() {
  msgid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t NanoPBOptions::_internal_msgid() const {
  return msgid_;
}
inline uint32_t NanoPBOptions::msgid() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.msgid)
  return _internal_msgid();
}
inline void NanoPBOptions::_internal_set_msgid(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  msgid_ = value;
}
inline void NanoPBOptions::set_msgid(uint32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.msgid)
}

// optional bool anonymous_oneof = 11 [default = false];
inline bool NanoPBOptions::_internal_has_anonymous_oneof() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NanoPBOptions::has_anonymous_oneof() const {
  return _internal_has_anonymous_oneof();
}
inline void NanoPBOptions::clear_anonymous_oneof() {
  anonymous_oneof_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool NanoPBOptions::_internal_anonymous_oneof() const {
  return anonymous_oneof_;
}
inline bool NanoPBOptions::anonymous_oneof() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.anonymous_oneof)
  return _internal_anonymous_oneof();
}
inline void NanoPBOptions::_internal_set_anonymous_oneof(bool value) {
  _has_bits_[0] |= 0x00000200u;
  anonymous_oneof_ = value;
}
inline void NanoPBOptions::set_anonymous_oneof(bool value) {
  _internal_set_anonymous_oneof(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.anonymous_oneof)
}

// optional bool proto3 = 12 [default = false];
inline bool NanoPBOptions::_internal_has_proto3() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NanoPBOptions::has_proto3() const {
  return _internal_has_proto3();
}
inline void NanoPBOptions::clear_proto3() {
  proto3_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool NanoPBOptions::_internal_proto3() const {
  return proto3_;
}
inline bool NanoPBOptions::proto3() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.proto3)
  return _internal_proto3();
}
inline void NanoPBOptions::_internal_set_proto3(bool value) {
  _has_bits_[0] |= 0x00000400u;
  proto3_ = value;
}
inline void NanoPBOptions::set_proto3(bool value) {
  _internal_set_proto3(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.proto3)
}

// optional bool enum_to_string = 13 [default = false];
inline bool NanoPBOptions::_internal_has_enum_to_string() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NanoPBOptions::has_enum_to_string() const {
  return _internal_has_enum_to_string();
}
inline void NanoPBOptions::clear_enum_to_string() {
  enum_to_string_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool NanoPBOptions::_internal_enum_to_string() const {
  return enum_to_string_;
}
inline bool NanoPBOptions::enum_to_string() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.enum_to_string)
  return _internal_enum_to_string();
}
inline void NanoPBOptions::_internal_set_enum_to_string(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enum_to_string_ = value;
}
inline void NanoPBOptions::set_enum_to_string(bool value) {
  _internal_set_enum_to_string(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.enum_to_string)
}

// optional bool fixed_length = 15 [default = false];
inline bool NanoPBOptions::_internal_has_fixed_length() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NanoPBOptions::has_fixed_length() const {
  return _internal_has_fixed_length();
}
inline void NanoPBOptions::clear_fixed_length() {
  fixed_length_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool NanoPBOptions::_internal_fixed_length() const {
  return fixed_length_;
}
inline bool NanoPBOptions::fixed_length() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.fixed_length)
  return _internal_fixed_length();
}
inline void NanoPBOptions::_internal_set_fixed_length(bool value) {
  _has_bits_[0] |= 0x00001000u;
  fixed_length_ = value;
}
inline void NanoPBOptions::set_fixed_length(bool value) {
  _internal_set_fixed_length(value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.fixed_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FieldType>() {
  return ::FieldType_descriptor();
}
template <> struct is_proto_enum< ::IntSize> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IntSize>() {
  return ::IntSize_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nanopb_5ftest_2eproto
