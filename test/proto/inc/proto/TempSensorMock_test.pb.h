// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempSensorMock_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempSensorMock_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TempSensorMock_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TempSensorMock_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TempSensorMock_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TempSensorMock_5ftest_2eproto;
namespace blox_test {
namespace TempSensorMock {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Fluctuation;
struct FluctuationDefaultTypeInternal;
extern FluctuationDefaultTypeInternal _Fluctuation_default_instance_;
}  // namespace TempSensorMock
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::TempSensorMock::Block* Arena::CreateMaybeMessage<::blox_test::TempSensorMock::Block>(Arena*);
template<> ::blox_test::TempSensorMock::Fluctuation* Arena::CreateMaybeMessage<::blox_test::TempSensorMock::Fluctuation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace TempSensorMock {

// ===================================================================

class Fluctuation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.TempSensorMock.Fluctuation) */ {
 public:
  inline Fluctuation() : Fluctuation(nullptr) {}
  ~Fluctuation() override;
  explicit PROTOBUF_CONSTEXPR Fluctuation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fluctuation(const Fluctuation& from);
  Fluctuation(Fluctuation&& from) noexcept
    : Fluctuation() {
    *this = ::std::move(from);
  }

  inline Fluctuation& operator=(const Fluctuation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fluctuation& operator=(Fluctuation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fluctuation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fluctuation* internal_default_instance() {
    return reinterpret_cast<const Fluctuation*>(
               &_Fluctuation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fluctuation& a, Fluctuation& b) {
    a.Swap(&b);
  }
  inline void Swap(Fluctuation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fluctuation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fluctuation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fluctuation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fluctuation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fluctuation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fluctuation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.TempSensorMock.Fluctuation";
  }
  protected:
  explicit Fluctuation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmplitudeFieldNumber = 1,
    kPeriodFieldNumber = 2,
  };
  // sint32 amplitude = 1 [(.nanopb) = {
  void clear_amplitude();
  int32_t amplitude() const;
  void set_amplitude(int32_t value);
  private:
  int32_t _internal_amplitude() const;
  void _internal_set_amplitude(int32_t value);
  public:

  // uint32 period = 2 [(.nanopb) = {
  void clear_period();
  uint32_t period() const;
  void set_period(uint32_t value);
  private:
  uint32_t _internal_period() const;
  void _internal_set_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.TempSensorMock.Fluctuation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t amplitude_;
  uint32_t period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TempSensorMock_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.TempSensorMock.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.TempSensorMock.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFluctuationsFieldNumber = 5,
    kStrippedFieldsFieldNumber = 99,
    kValueFieldNumber = 1,
    kConnectedFieldNumber = 3,
    kSettingFieldNumber = 4,
  };
  // repeated .blox_test.TempSensorMock.Fluctuation fluctuations = 5;
  int fluctuations_size() const;
  private:
  int _internal_fluctuations_size() const;
  public:
  void clear_fluctuations();
  ::blox_test::TempSensorMock::Fluctuation* mutable_fluctuations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >*
      mutable_fluctuations();
  private:
  const ::blox_test::TempSensorMock::Fluctuation& _internal_fluctuations(int index) const;
  ::blox_test::TempSensorMock::Fluctuation* _internal_add_fluctuations();
  public:
  const ::blox_test::TempSensorMock::Fluctuation& fluctuations(int index) const;
  ::blox_test::TempSensorMock::Fluctuation* add_fluctuations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >&
      fluctuations() const;

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  uint32_t _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_strippedfields();
  public:
  uint32_t strippedfields(int index) const;
  void set_strippedfields(int index, uint32_t value);
  void add_strippedfields(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_strippedfields();

  // sint32 value = 1 [(.nanopb) = {
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // bool connected = 3 [(.brewblox.field) = {
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // sint32 setting = 4 [(.nanopb) = {
  void clear_setting();
  int32_t setting() const;
  void set_setting(int32_t value);
  private:
  int32_t _internal_setting() const;
  void _internal_set_setting(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.TempSensorMock.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation > fluctuations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  int32_t value_;
  bool connected_;
  int32_t setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TempSensorMock_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fluctuation

// sint32 amplitude = 1 [(.nanopb) = {
inline void Fluctuation::clear_amplitude() {
  amplitude_ = 0;
}
inline int32_t Fluctuation::_internal_amplitude() const {
  return amplitude_;
}
inline int32_t Fluctuation::amplitude() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Fluctuation.amplitude)
  return _internal_amplitude();
}
inline void Fluctuation::_internal_set_amplitude(int32_t value) {
  
  amplitude_ = value;
}
inline void Fluctuation::set_amplitude(int32_t value) {
  _internal_set_amplitude(value);
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Fluctuation.amplitude)
}

// uint32 period = 2 [(.nanopb) = {
inline void Fluctuation::clear_period() {
  period_ = 0u;
}
inline uint32_t Fluctuation::_internal_period() const {
  return period_;
}
inline uint32_t Fluctuation::period() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Fluctuation.period)
  return _internal_period();
}
inline void Fluctuation::_internal_set_period(uint32_t value) {
  
  period_ = value;
}
inline void Fluctuation::set_period(uint32_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Fluctuation.period)
}

// -------------------------------------------------------------------

// Block

// sint32 value = 1 [(.nanopb) = {
inline void Block::clear_value() {
  value_ = 0;
}
inline int32_t Block::_internal_value() const {
  return value_;
}
inline int32_t Block::value() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.value)
  return _internal_value();
}
inline void Block::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void Block::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Block.value)
}

// bool connected = 3 [(.brewblox.field) = {
inline void Block::clear_connected() {
  connected_ = false;
}
inline bool Block::_internal_connected() const {
  return connected_;
}
inline bool Block::connected() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.connected)
  return _internal_connected();
}
inline void Block::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void Block::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Block.connected)
}

// sint32 setting = 4 [(.nanopb) = {
inline void Block::clear_setting() {
  setting_ = 0;
}
inline int32_t Block::_internal_setting() const {
  return setting_;
}
inline int32_t Block::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.setting)
  return _internal_setting();
}
inline void Block::_internal_set_setting(int32_t value) {
  
  setting_ = value;
}
inline void Block::set_setting(int32_t value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Block.setting)
}

// repeated .blox_test.TempSensorMock.Fluctuation fluctuations = 5;
inline int Block::_internal_fluctuations_size() const {
  return fluctuations_.size();
}
inline int Block::fluctuations_size() const {
  return _internal_fluctuations_size();
}
inline void Block::clear_fluctuations() {
  fluctuations_.Clear();
}
inline ::blox_test::TempSensorMock::Fluctuation* Block::mutable_fluctuations(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.TempSensorMock.Block.fluctuations)
  return fluctuations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >*
Block::mutable_fluctuations() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.TempSensorMock.Block.fluctuations)
  return &fluctuations_;
}
inline const ::blox_test::TempSensorMock::Fluctuation& Block::_internal_fluctuations(int index) const {
  return fluctuations_.Get(index);
}
inline const ::blox_test::TempSensorMock::Fluctuation& Block::fluctuations(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.fluctuations)
  return _internal_fluctuations(index);
}
inline ::blox_test::TempSensorMock::Fluctuation* Block::_internal_add_fluctuations() {
  return fluctuations_.Add();
}
inline ::blox_test::TempSensorMock::Fluctuation* Block::add_fluctuations() {
  ::blox_test::TempSensorMock::Fluctuation* _add = _internal_add_fluctuations();
  // @@protoc_insertion_point(field_add:blox_test.TempSensorMock.Block.fluctuations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >&
Block::fluctuations() const {
  // @@protoc_insertion_point(field_list:blox_test.TempSensorMock.Block.fluctuations)
  return fluctuations_;
}

// repeated uint32 strippedFields = 99 [(.nanopb) = {
inline int Block::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int Block::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void Block::clear_strippedfields() {
  strippedfields_.Clear();
}
inline uint32_t Block::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline uint32_t Block::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.strippedFields)
  return _internal_strippedfields(index);
}
inline void Block::set_strippedfields(int index, uint32_t value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Block.strippedFields)
}
inline void Block::_internal_add_strippedfields(uint32_t value) {
  strippedfields_.Add(value);
}
inline void Block::add_strippedfields(uint32_t value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox_test.TempSensorMock.Block.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox_test.TempSensorMock.Block.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.TempSensorMock.Block.strippedFields)
  return _internal_mutable_strippedfields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TempSensorMock
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TempSensorMock_5ftest_2eproto
