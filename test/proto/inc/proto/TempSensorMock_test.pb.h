// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempSensorMock_test.proto

#ifndef PROTOBUF_INCLUDED_TempSensorMock_5ftest_2eproto
#define PROTOBUF_INCLUDED_TempSensorMock_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_TempSensorMock_5ftest_2eproto 

namespace protobuf_TempSensorMock_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_TempSensorMock_5ftest_2eproto
namespace blox_test {
namespace TempSensorMock {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Fluctuation;
class FluctuationDefaultTypeInternal;
extern FluctuationDefaultTypeInternal _Fluctuation_default_instance_;
}  // namespace TempSensorMock
}  // namespace blox_test
namespace google {
namespace protobuf {
template<> ::blox_test::TempSensorMock::Block* Arena::CreateMaybeMessage<::blox_test::TempSensorMock::Block>(Arena*);
template<> ::blox_test::TempSensorMock::Fluctuation* Arena::CreateMaybeMessage<::blox_test::TempSensorMock::Fluctuation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox_test {
namespace TempSensorMock {

// ===================================================================

class Fluctuation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox_test.TempSensorMock.Fluctuation) */ {
 public:
  Fluctuation();
  virtual ~Fluctuation();

  Fluctuation(const Fluctuation& from);

  inline Fluctuation& operator=(const Fluctuation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fluctuation(Fluctuation&& from) noexcept
    : Fluctuation() {
    *this = ::std::move(from);
  }

  inline Fluctuation& operator=(Fluctuation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fluctuation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fluctuation* internal_default_instance() {
    return reinterpret_cast<const Fluctuation*>(
               &_Fluctuation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Fluctuation* other);
  friend void swap(Fluctuation& a, Fluctuation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fluctuation* New() const final {
    return CreateMaybeMessage<Fluctuation>(NULL);
  }

  Fluctuation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fluctuation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fluctuation& from);
  void MergeFrom(const Fluctuation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fluctuation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sint32 amplitude = 1 [(.nanopb) = {
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 1;
  ::google::protobuf::int32 amplitude() const;
  void set_amplitude(::google::protobuf::int32 value);

  // uint32 period = 2 [(.nanopb) = {
  void clear_period();
  static const int kPeriodFieldNumber = 2;
  ::google::protobuf::uint32 period() const;
  void set_period(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:blox_test.TempSensorMock.Fluctuation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 amplitude_;
  ::google::protobuf::uint32 period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TempSensorMock_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox_test.TempSensorMock.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blox_test.TempSensorMock.Fluctuation fluctuations = 5;
  int fluctuations_size() const;
  void clear_fluctuations();
  static const int kFluctuationsFieldNumber = 5;
  ::blox_test::TempSensorMock::Fluctuation* mutable_fluctuations(int index);
  ::google::protobuf::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >*
      mutable_fluctuations();
  const ::blox_test::TempSensorMock::Fluctuation& fluctuations(int index) const;
  ::blox_test::TempSensorMock::Fluctuation* add_fluctuations();
  const ::google::protobuf::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >&
      fluctuations() const;

  // sint32 value = 1 [(.nanopb) = {
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // bool connected = 3 [(.brewblox.field) = {
  void clear_connected();
  static const int kConnectedFieldNumber = 3;
  bool connected() const;
  void set_connected(bool value);

  // sint32 setting = 4 [(.nanopb) = {
  void clear_setting();
  static const int kSettingFieldNumber = 4;
  ::google::protobuf::int32 setting() const;
  void set_setting(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:blox_test.TempSensorMock.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation > fluctuations_;
  ::google::protobuf::int32 value_;
  bool connected_;
  ::google::protobuf::int32 setting_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TempSensorMock_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fluctuation

// sint32 amplitude = 1 [(.nanopb) = {
inline void Fluctuation::clear_amplitude() {
  amplitude_ = 0;
}
inline ::google::protobuf::int32 Fluctuation::amplitude() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Fluctuation.amplitude)
  return amplitude_;
}
inline void Fluctuation::set_amplitude(::google::protobuf::int32 value) {
  
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Fluctuation.amplitude)
}

// uint32 period = 2 [(.nanopb) = {
inline void Fluctuation::clear_period() {
  period_ = 0u;
}
inline ::google::protobuf::uint32 Fluctuation::period() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Fluctuation.period)
  return period_;
}
inline void Fluctuation::set_period(::google::protobuf::uint32 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Fluctuation.period)
}

// -------------------------------------------------------------------

// Block

// sint32 value = 1 [(.nanopb) = {
inline void Block::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Block::value() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.value)
  return value_;
}
inline void Block::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Block.value)
}

// bool connected = 3 [(.brewblox.field) = {
inline void Block::clear_connected() {
  connected_ = false;
}
inline bool Block::connected() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.connected)
  return connected_;
}
inline void Block::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Block.connected)
}

// sint32 setting = 4 [(.nanopb) = {
inline void Block::clear_setting() {
  setting_ = 0;
}
inline ::google::protobuf::int32 Block::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.setting)
  return setting_;
}
inline void Block::set_setting(::google::protobuf::int32 value) {
  
  setting_ = value;
  // @@protoc_insertion_point(field_set:blox_test.TempSensorMock.Block.setting)
}

// repeated .blox_test.TempSensorMock.Fluctuation fluctuations = 5;
inline int Block::fluctuations_size() const {
  return fluctuations_.size();
}
inline void Block::clear_fluctuations() {
  fluctuations_.Clear();
}
inline ::blox_test::TempSensorMock::Fluctuation* Block::mutable_fluctuations(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.TempSensorMock.Block.fluctuations)
  return fluctuations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >*
Block::mutable_fluctuations() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.TempSensorMock.Block.fluctuations)
  return &fluctuations_;
}
inline const ::blox_test::TempSensorMock::Fluctuation& Block::fluctuations(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.TempSensorMock.Block.fluctuations)
  return fluctuations_.Get(index);
}
inline ::blox_test::TempSensorMock::Fluctuation* Block::add_fluctuations() {
  // @@protoc_insertion_point(field_add:blox_test.TempSensorMock.Block.fluctuations)
  return fluctuations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blox_test::TempSensorMock::Fluctuation >&
Block::fluctuations() const {
  // @@protoc_insertion_point(field_list:blox_test.TempSensorMock.Block.fluctuations)
  return fluctuations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TempSensorMock
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_TempSensorMock_5ftest_2eproto
