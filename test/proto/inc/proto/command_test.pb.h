// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_5ftest_2eproto;
namespace command {
class Payload;
struct PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace command
PROTOBUF_NAMESPACE_OPEN
template<> ::command::Payload* Arena::CreateMaybeMessage<::command::Payload>(Arena*);
template<> ::command::Request* Arena::CreateMaybeMessage<::command::Request>(Arena*);
template<> ::command::Response* Arena::CreateMaybeMessage<::command::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace command {

enum Opcode : int {
  NONE = 0,
  VERSION = 1,
  BLOCK_READ = 10,
  BLOCK_READ_ALL = 11,
  BLOCK_WRITE = 12,
  BLOCK_CREATE = 13,
  BLOCK_DELETE = 14,
  BLOCK_DISCOVER = 15,
  STORAGE_READ = 20,
  STORAGE_READ_ALL = 21,
  REBOOT = 30,
  CLEAR_BLOCKS = 31,
  CLEAR_WIFI = 32,
  FACTORY_RESET = 33,
  FIRMWARE_UPDATE = 40,
  Opcode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Opcode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Opcode_IsValid(int value);
constexpr Opcode Opcode_MIN = NONE;
constexpr Opcode Opcode_MAX = FIRMWARE_UPDATE;
constexpr int Opcode_ARRAYSIZE = Opcode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Opcode_descriptor();
template<typename T>
inline const std::string& Opcode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Opcode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Opcode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Opcode_descriptor(), enum_t_value);
}
inline bool Opcode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Opcode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Opcode>(
    Opcode_descriptor(), name, value);
}
enum ErrorCode : int {
  OK = 0,
  UNKNOWN_ERROR = 1,
  INVALID_OPCODE = 2,
  INSUFFICIENT_HEAP = 4,
  INSUFFICIENT_STORAGE = 5,
  NETWORK_ERROR = 10,
  NETWORK_READ_ERROR = 11,
  NETWORK_DECODING_ERROR = 12,
  NETWORK_WRITE_ERROR = 13,
  NETWORK_ENCODING_ERROR = 14,
  STORAGE_ERROR = 20,
  STORAGE_READ_ERROR = 21,
  STORAGE_DECODING_ERROR = 22,
  STORAGE_CRC_ERROR = 23,
  STORAGE_WRITE_ERROR = 24,
  STORAGE_ENCODING_ERROR = 25,
  BLOCK_NOT_WRITABLE = 30,
  BLOCK_NOT_READABLE = 31,
  BLOCK_NOT_CREATABLE = 32,
  BLOCK_NOT_DELETABLE = 33,
  INVALID_BLOCK = 40,
  INVALID_BLOCK_ID = 41,
  INVALID_BLOCK_TYPE = 42,
  INVALID_BLOCK_SUBTYPE = 43,
  INVALID_BLOCK_CONTENT = 44,
  INVALID_STORED_BLOCK = 50,
  INVALID_STORED_BLOCK_ID = 51,
  INVALID_STORED_BLOCK_TYPE = 52,
  INVALID_STORED_BLOCK_SUBTYPE = 53,
  INVALID_STORED_BLOCK_CONTENT = 54,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = OK;
constexpr ErrorCode ErrorCode_MAX = INVALID_STORED_BLOCK_CONTENT;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:command.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  ~Payload() override;
  explicit PROTOBUF_CONSTEXPR Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "command.Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kBlockIdFieldNumber = 1,
    kBlockTypeFieldNumber = 2,
    kSubtypeFieldNumber = 3,
  };
  // string content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint32 blockId = 1 [(.nanopb) = {
  void clear_blockid();
  uint32_t blockid() const;
  void set_blockid(uint32_t value);
  private:
  uint32_t _internal_blockid() const;
  void _internal_set_blockid(uint32_t value);
  public:

  // .brewblox.BlockType blockType = 2;
  void clear_blocktype();
  ::brewblox::BlockType blocktype() const;
  void set_blocktype(::brewblox::BlockType value);
  private:
  ::brewblox::BlockType _internal_blocktype() const;
  void _internal_set_blocktype(::brewblox::BlockType value);
  public:

  // uint32 subtype = 3 [(.nanopb) = {
  void clear_subtype();
  uint32_t subtype() const;
  void set_subtype(uint32_t value);
  private:
  uint32_t _internal_subtype() const;
  void _internal_set_subtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:command.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  uint32_t blockid_;
  int blocktype_;
  uint32_t subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:command.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "command.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kMsgIdFieldNumber = 1,
    kOpcodeFieldNumber = 2,
  };
  // .command.Payload payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::command::Payload& payload() const;
  PROTOBUF_NODISCARD ::command::Payload* release_payload();
  ::command::Payload* mutable_payload();
  void set_allocated_payload(::command::Payload* payload);
  private:
  const ::command::Payload& _internal_payload() const;
  ::command::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::command::Payload* payload);
  ::command::Payload* unsafe_arena_release_payload();

  // uint32 msgId = 1;
  void clear_msgid();
  uint32_t msgid() const;
  void set_msgid(uint32_t value);
  private:
  uint32_t _internal_msgid() const;
  void _internal_set_msgid(uint32_t value);
  public:

  // .command.Opcode opcode = 2;
  void clear_opcode();
  ::command::Opcode opcode() const;
  void set_opcode(::command::Opcode value);
  private:
  ::command::Opcode _internal_opcode() const;
  void _internal_set_opcode(::command::Opcode value);
  public:

  // @@protoc_insertion_point(class_scope:command.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::command::Payload* payload_;
  uint32_t msgid_;
  int opcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:command.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "command.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kMsgIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // repeated .command.Payload payload = 3;
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  ::command::Payload* mutable_payload(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::command::Payload >*
      mutable_payload();
  private:
  const ::command::Payload& _internal_payload(int index) const;
  ::command::Payload* _internal_add_payload();
  public:
  const ::command::Payload& payload(int index) const;
  ::command::Payload* add_payload();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::command::Payload >&
      payload() const;

  // uint32 msgId = 1;
  void clear_msgid();
  uint32_t msgid() const;
  void set_msgid(uint32_t value);
  private:
  uint32_t _internal_msgid() const;
  void _internal_set_msgid(uint32_t value);
  public:

  // .command.ErrorCode error = 2;
  void clear_error();
  ::command::ErrorCode error() const;
  void set_error(::command::ErrorCode value);
  private:
  ::command::ErrorCode _internal_error() const;
  void _internal_set_error(::command::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:command.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::command::Payload > payload_;
  uint32_t msgid_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Payload

// uint32 blockId = 1 [(.nanopb) = {
inline void Payload::clear_blockid() {
  blockid_ = 0u;
}
inline uint32_t Payload::_internal_blockid() const {
  return blockid_;
}
inline uint32_t Payload::blockid() const {
  // @@protoc_insertion_point(field_get:command.Payload.blockId)
  return _internal_blockid();
}
inline void Payload::_internal_set_blockid(uint32_t value) {
  
  blockid_ = value;
}
inline void Payload::set_blockid(uint32_t value) {
  _internal_set_blockid(value);
  // @@protoc_insertion_point(field_set:command.Payload.blockId)
}

// .brewblox.BlockType blockType = 2;
inline void Payload::clear_blocktype() {
  blocktype_ = 0;
}
inline ::brewblox::BlockType Payload::_internal_blocktype() const {
  return static_cast< ::brewblox::BlockType >(blocktype_);
}
inline ::brewblox::BlockType Payload::blocktype() const {
  // @@protoc_insertion_point(field_get:command.Payload.blockType)
  return _internal_blocktype();
}
inline void Payload::_internal_set_blocktype(::brewblox::BlockType value) {
  
  blocktype_ = value;
}
inline void Payload::set_blocktype(::brewblox::BlockType value) {
  _internal_set_blocktype(value);
  // @@protoc_insertion_point(field_set:command.Payload.blockType)
}

// uint32 subtype = 3 [(.nanopb) = {
inline void Payload::clear_subtype() {
  subtype_ = 0u;
}
inline uint32_t Payload::_internal_subtype() const {
  return subtype_;
}
inline uint32_t Payload::subtype() const {
  // @@protoc_insertion_point(field_get:command.Payload.subtype)
  return _internal_subtype();
}
inline void Payload::_internal_set_subtype(uint32_t value) {
  
  subtype_ = value;
}
inline void Payload::set_subtype(uint32_t value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:command.Payload.subtype)
}

// string content = 4;
inline void Payload::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Payload::content() const {
  // @@protoc_insertion_point(field_get:command.Payload.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:command.Payload.content)
}
inline std::string* Payload::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:command.Payload.content)
  return _s;
}
inline const std::string& Payload::_internal_content() const {
  return content_.Get();
}
inline void Payload::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* Payload::release_content() {
  // @@protoc_insertion_point(field_release:command.Payload.content)
  return content_.Release();
}
inline void Payload::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:command.Payload.content)
}

// -------------------------------------------------------------------

// Request

// uint32 msgId = 1;
inline void Request::clear_msgid() {
  msgid_ = 0u;
}
inline uint32_t Request::_internal_msgid() const {
  return msgid_;
}
inline uint32_t Request::msgid() const {
  // @@protoc_insertion_point(field_get:command.Request.msgId)
  return _internal_msgid();
}
inline void Request::_internal_set_msgid(uint32_t value) {
  
  msgid_ = value;
}
inline void Request::set_msgid(uint32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:command.Request.msgId)
}

// .command.Opcode opcode = 2;
inline void Request::clear_opcode() {
  opcode_ = 0;
}
inline ::command::Opcode Request::_internal_opcode() const {
  return static_cast< ::command::Opcode >(opcode_);
}
inline ::command::Opcode Request::opcode() const {
  // @@protoc_insertion_point(field_get:command.Request.opcode)
  return _internal_opcode();
}
inline void Request::_internal_set_opcode(::command::Opcode value) {
  
  opcode_ = value;
}
inline void Request::set_opcode(::command::Opcode value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:command.Request.opcode)
}

// .command.Payload payload = 3;
inline bool Request::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool Request::has_payload() const {
  return _internal_has_payload();
}
inline void Request::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
inline const ::command::Payload& Request::_internal_payload() const {
  const ::command::Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::command::Payload&>(
      ::command::_Payload_default_instance_);
}
inline const ::command::Payload& Request::payload() const {
  // @@protoc_insertion_point(field_get:command.Request.payload)
  return _internal_payload();
}
inline void Request::unsafe_arena_set_allocated_payload(
    ::command::Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:command.Request.payload)
}
inline ::command::Payload* Request::release_payload() {
  
  ::command::Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::command::Payload* Request::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:command.Request.payload)
  
  ::command::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::command::Payload* Request::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::command::Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::command::Payload* Request::mutable_payload() {
  ::command::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:command.Request.payload)
  return _msg;
}
inline void Request::set_allocated_payload(::command::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:command.Request.payload)
}

// -------------------------------------------------------------------

// Response

// uint32 msgId = 1;
inline void Response::clear_msgid() {
  msgid_ = 0u;
}
inline uint32_t Response::_internal_msgid() const {
  return msgid_;
}
inline uint32_t Response::msgid() const {
  // @@protoc_insertion_point(field_get:command.Response.msgId)
  return _internal_msgid();
}
inline void Response::_internal_set_msgid(uint32_t value) {
  
  msgid_ = value;
}
inline void Response::set_msgid(uint32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:command.Response.msgId)
}

// .command.ErrorCode error = 2;
inline void Response::clear_error() {
  error_ = 0;
}
inline ::command::ErrorCode Response::_internal_error() const {
  return static_cast< ::command::ErrorCode >(error_);
}
inline ::command::ErrorCode Response::error() const {
  // @@protoc_insertion_point(field_get:command.Response.error)
  return _internal_error();
}
inline void Response::_internal_set_error(::command::ErrorCode value) {
  
  error_ = value;
}
inline void Response::set_error(::command::ErrorCode value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:command.Response.error)
}

// repeated .command.Payload payload = 3;
inline int Response::_internal_payload_size() const {
  return payload_.size();
}
inline int Response::payload_size() const {
  return _internal_payload_size();
}
inline void Response::clear_payload() {
  payload_.Clear();
}
inline ::command::Payload* Response::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:command.Response.payload)
  return payload_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::command::Payload >*
Response::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:command.Response.payload)
  return &payload_;
}
inline const ::command::Payload& Response::_internal_payload(int index) const {
  return payload_.Get(index);
}
inline const ::command::Payload& Response::payload(int index) const {
  // @@protoc_insertion_point(field_get:command.Response.payload)
  return _internal_payload(index);
}
inline ::command::Payload* Response::_internal_add_payload() {
  return payload_.Add();
}
inline ::command::Payload* Response::add_payload() {
  ::command::Payload* _add = _internal_add_payload();
  // @@protoc_insertion_point(field_add:command.Response.payload)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::command::Payload >&
Response::payload() const {
  // @@protoc_insertion_point(field_list:command.Response.payload)
  return payload_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace command

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::command::Opcode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::Opcode>() {
  return ::command::Opcode_descriptor();
}
template <> struct is_proto_enum< ::command::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::ErrorCode>() {
  return ::command::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_5ftest_2eproto
