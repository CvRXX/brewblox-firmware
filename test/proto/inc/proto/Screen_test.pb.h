// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Screen_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Screen_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Screen_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Screen_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Screen_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Screen_5ftest_2eproto;
namespace screen {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class ColorWidget;
struct ColorWidgetDefaultTypeInternal;
extern ColorWidgetDefaultTypeInternal _ColorWidget_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ContentNode;
struct ContentNodeDefaultTypeInternal;
extern ContentNodeDefaultTypeInternal _ContentNode_default_instance_;
class LayoutNode;
struct LayoutNodeDefaultTypeInternal;
extern LayoutNodeDefaultTypeInternal _LayoutNode_default_instance_;
class NumericValueWidget;
struct NumericValueWidgetDefaultTypeInternal;
extern NumericValueWidgetDefaultTypeInternal _NumericValueWidget_default_instance_;
}  // namespace screen
PROTOBUF_NAMESPACE_OPEN
template<> ::screen::Color* Arena::CreateMaybeMessage<::screen::Color>(Arena*);
template<> ::screen::ColorWidget* Arena::CreateMaybeMessage<::screen::ColorWidget>(Arena*);
template<> ::screen::Config* Arena::CreateMaybeMessage<::screen::Config>(Arena*);
template<> ::screen::ContentNode* Arena::CreateMaybeMessage<::screen::ContentNode>(Arena*);
template<> ::screen::LayoutNode* Arena::CreateMaybeMessage<::screen::LayoutNode>(Arena*);
template<> ::screen::NumericValueWidget* Arena::CreateMaybeMessage<::screen::NumericValueWidget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace screen {

enum LayoutNode_Type : int {
  LayoutNode_Type_Row = 0,
  LayoutNode_Type_Column = 1,
  LayoutNode_Type_Content = 2,
  LayoutNode_Type_LayoutNode_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LayoutNode_Type_LayoutNode_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LayoutNode_Type_IsValid(int value);
constexpr LayoutNode_Type LayoutNode_Type_Type_MIN = LayoutNode_Type_Row;
constexpr LayoutNode_Type LayoutNode_Type_Type_MAX = LayoutNode_Type_Content;
constexpr int LayoutNode_Type_Type_ARRAYSIZE = LayoutNode_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayoutNode_Type_descriptor();
template<typename T>
inline const std::string& LayoutNode_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayoutNode_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayoutNode_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LayoutNode_Type_descriptor(), enum_t_value);
}
inline bool LayoutNode_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayoutNode_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LayoutNode_Type>(
    LayoutNode_Type_descriptor(), name, value);
}
// ===================================================================

class LayoutNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:screen.LayoutNode) */ {
 public:
  inline LayoutNode() : LayoutNode(nullptr) {}
  ~LayoutNode() override;
  explicit PROTOBUF_CONSTEXPR LayoutNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutNode(const LayoutNode& from);
  LayoutNode(LayoutNode&& from) noexcept
    : LayoutNode() {
    *this = ::std::move(from);
  }

  inline LayoutNode& operator=(const LayoutNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutNode& operator=(LayoutNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutNode* internal_default_instance() {
    return reinterpret_cast<const LayoutNode*>(
               &_LayoutNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayoutNode& a, LayoutNode& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "screen.LayoutNode";
  }
  protected:
  explicit LayoutNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LayoutNode_Type Type;
  static constexpr Type Row =
    LayoutNode_Type_Row;
  static constexpr Type Column =
    LayoutNode_Type_Column;
  static constexpr Type Content =
    LayoutNode_Type_Content;
  static inline bool Type_IsValid(int value) {
    return LayoutNode_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LayoutNode_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LayoutNode_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LayoutNode_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return LayoutNode_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LayoutNode_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return LayoutNode_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kWeightFieldNumber = 4,
  };
  // uint32 parent = 1 [(.nanopb) = {
  void clear_parent();
  uint32_t parent() const;
  void set_parent(uint32_t value);
  private:
  uint32_t _internal_parent() const;
  void _internal_set_parent(uint32_t value);
  public:

  // uint32 nodeId = 2 [(.nanopb) = {
  void clear_nodeid();
  uint32_t nodeid() const;
  void set_nodeid(uint32_t value);
  private:
  uint32_t _internal_nodeid() const;
  void _internal_set_nodeid(uint32_t value);
  public:

  // .screen.LayoutNode.Type type = 3;
  void clear_type();
  ::screen::LayoutNode_Type type() const;
  void set_type(::screen::LayoutNode_Type value);
  private:
  ::screen::LayoutNode_Type _internal_type() const;
  void _internal_set_type(::screen::LayoutNode_Type value);
  public:

  // uint32 weight = 4 [(.nanopb) = {
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:screen.LayoutNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t parent_;
  uint32_t nodeid_;
  int type_;
  uint32_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:screen.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Color& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "screen.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // uint32 r = 1 [(.nanopb) = {
  void clear_r();
  uint32_t r() const;
  void set_r(uint32_t value);
  private:
  uint32_t _internal_r() const;
  void _internal_set_r(uint32_t value);
  public:

  // uint32 g = 2 [(.nanopb) = {
  void clear_g();
  uint32_t g() const;
  void set_g(uint32_t value);
  private:
  uint32_t _internal_g() const;
  void _internal_set_g(uint32_t value);
  public:

  // uint32 b = 3 [(.nanopb) = {
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:screen.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t r_;
  uint32_t g_;
  uint32_t b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_5ftest_2eproto;
};
// -------------------------------------------------------------------

class NumericValueWidget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:screen.NumericValueWidget) */ {
 public:
  inline NumericValueWidget() : NumericValueWidget(nullptr) {}
  ~NumericValueWidget() override;
  explicit PROTOBUF_CONSTEXPR NumericValueWidget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumericValueWidget(const NumericValueWidget& from);
  NumericValueWidget(NumericValueWidget&& from) noexcept
    : NumericValueWidget() {
    *this = ::std::move(from);
  }

  inline NumericValueWidget& operator=(const NumericValueWidget& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumericValueWidget& operator=(NumericValueWidget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumericValueWidget& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumericValueWidget* internal_default_instance() {
    return reinterpret_cast<const NumericValueWidget*>(
               &_NumericValueWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NumericValueWidget& a, NumericValueWidget& b) {
    a.Swap(&b);
  }
  inline void Swap(NumericValueWidget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumericValueWidget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumericValueWidget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumericValueWidget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumericValueWidget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NumericValueWidget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumericValueWidget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "screen.NumericValueWidget";
  }
  protected:
  explicit NumericValueWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 3,
    kColorFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string label = 3 [(.nanopb) = {
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .screen.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::screen::Color& color() const;
  PROTOBUF_NODISCARD ::screen::Color* release_color();
  ::screen::Color* mutable_color();
  void set_allocated_color(::screen::Color* color);
  private:
  const ::screen::Color& _internal_color() const;
  ::screen::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::screen::Color* color);
  ::screen::Color* unsafe_arena_release_color();

  // uint32 value = 2 [(.nanopb) = {
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:screen.NumericValueWidget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::screen::Color* color_;
  uint32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ColorWidget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:screen.ColorWidget) */ {
 public:
  inline ColorWidget() : ColorWidget(nullptr) {}
  ~ColorWidget() override;
  explicit PROTOBUF_CONSTEXPR ColorWidget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorWidget(const ColorWidget& from);
  ColorWidget(ColorWidget&& from) noexcept
    : ColorWidget() {
    *this = ::std::move(from);
  }

  inline ColorWidget& operator=(const ColorWidget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorWidget& operator=(ColorWidget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorWidget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorWidget* internal_default_instance() {
    return reinterpret_cast<const ColorWidget*>(
               &_ColorWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ColorWidget& a, ColorWidget& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorWidget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorWidget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorWidget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorWidget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorWidget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorWidget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorWidget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "screen.ColorWidget";
  }
  protected:
  explicit ColorWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // .screen.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::screen::Color& color() const;
  PROTOBUF_NODISCARD ::screen::Color* release_color();
  ::screen::Color* mutable_color();
  void set_allocated_color(::screen::Color* color);
  private:
  const ::screen::Color& _internal_color() const;
  ::screen::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::screen::Color* color);
  ::screen::Color* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:screen.ColorWidget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::screen::Color* color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ContentNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:screen.ContentNode) */ {
 public:
  inline ContentNode() : ContentNode(nullptr) {}
  ~ContentNode() override;
  explicit PROTOBUF_CONSTEXPR ContentNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentNode(const ContentNode& from);
  ContentNode(ContentNode&& from) noexcept
    : ContentNode() {
    *this = ::std::move(from);
  }

  inline ContentNode& operator=(const ContentNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentNode& operator=(ContentNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentNode& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kNumericValueWidget = 2,
    kColorWidget = 3,
    CONTENT_NOT_SET = 0,
  };

  static inline const ContentNode* internal_default_instance() {
    return reinterpret_cast<const ContentNode*>(
               &_ContentNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContentNode& a, ContentNode& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "screen.ContentNode";
  }
  protected:
  explicit ContentNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutNodeIdFieldNumber = 1,
    kNumericValueWidgetFieldNumber = 2,
    kColorWidgetFieldNumber = 3,
  };
  // uint32 layoutNodeId = 1 [(.nanopb) = {
  void clear_layoutnodeid();
  uint32_t layoutnodeid() const;
  void set_layoutnodeid(uint32_t value);
  private:
  uint32_t _internal_layoutnodeid() const;
  void _internal_set_layoutnodeid(uint32_t value);
  public:

  // .screen.NumericValueWidget numericValueWidget = 2;
  bool has_numericvaluewidget() const;
  private:
  bool _internal_has_numericvaluewidget() const;
  public:
  void clear_numericvaluewidget();
  const ::screen::NumericValueWidget& numericvaluewidget() const;
  PROTOBUF_NODISCARD ::screen::NumericValueWidget* release_numericvaluewidget();
  ::screen::NumericValueWidget* mutable_numericvaluewidget();
  void set_allocated_numericvaluewidget(::screen::NumericValueWidget* numericvaluewidget);
  private:
  const ::screen::NumericValueWidget& _internal_numericvaluewidget() const;
  ::screen::NumericValueWidget* _internal_mutable_numericvaluewidget();
  public:
  void unsafe_arena_set_allocated_numericvaluewidget(
      ::screen::NumericValueWidget* numericvaluewidget);
  ::screen::NumericValueWidget* unsafe_arena_release_numericvaluewidget();

  // .screen.ColorWidget colorWidget = 3;
  bool has_colorwidget() const;
  private:
  bool _internal_has_colorwidget() const;
  public:
  void clear_colorwidget();
  const ::screen::ColorWidget& colorwidget() const;
  PROTOBUF_NODISCARD ::screen::ColorWidget* release_colorwidget();
  ::screen::ColorWidget* mutable_colorwidget();
  void set_allocated_colorwidget(::screen::ColorWidget* colorwidget);
  private:
  const ::screen::ColorWidget& _internal_colorwidget() const;
  ::screen::ColorWidget* _internal_mutable_colorwidget();
  public:
  void unsafe_arena_set_allocated_colorwidget(
      ::screen::ColorWidget* colorwidget);
  ::screen::ColorWidget* unsafe_arena_release_colorwidget();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:screen.ContentNode)
 private:
  class _Internal;
  void set_has_numericvaluewidget();
  void set_has_colorwidget();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t layoutnodeid_;
  union ContentUnion {
    constexpr ContentUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::screen::NumericValueWidget* numericvaluewidget_;
    ::screen::ColorWidget* colorwidget_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Screen_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:screen.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "screen.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutNodesFieldNumber = 1,
    kContentNodesFieldNumber = 2,
  };
  // repeated .screen.LayoutNode layoutNodes = 1;
  int layoutnodes_size() const;
  private:
  int _internal_layoutnodes_size() const;
  public:
  void clear_layoutnodes();
  ::screen::LayoutNode* mutable_layoutnodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::LayoutNode >*
      mutable_layoutnodes();
  private:
  const ::screen::LayoutNode& _internal_layoutnodes(int index) const;
  ::screen::LayoutNode* _internal_add_layoutnodes();
  public:
  const ::screen::LayoutNode& layoutnodes(int index) const;
  ::screen::LayoutNode* add_layoutnodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::LayoutNode >&
      layoutnodes() const;

  // repeated .screen.ContentNode contentNodes = 2;
  int contentnodes_size() const;
  private:
  int _internal_contentnodes_size() const;
  public:
  void clear_contentnodes();
  ::screen::ContentNode* mutable_contentnodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::ContentNode >*
      mutable_contentnodes();
  private:
  const ::screen::ContentNode& _internal_contentnodes(int index) const;
  ::screen::ContentNode* _internal_add_contentnodes();
  public:
  const ::screen::ContentNode& contentnodes(int index) const;
  ::screen::ContentNode* add_contentnodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::ContentNode >&
      contentnodes() const;

  // @@protoc_insertion_point(class_scope:screen.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::LayoutNode > layoutnodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::ContentNode > contentnodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Screen_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayoutNode

// uint32 parent = 1 [(.nanopb) = {
inline void LayoutNode::clear_parent() {
  parent_ = 0u;
}
inline uint32_t LayoutNode::_internal_parent() const {
  return parent_;
}
inline uint32_t LayoutNode::parent() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.parent)
  return _internal_parent();
}
inline void LayoutNode::_internal_set_parent(uint32_t value) {
  
  parent_ = value;
}
inline void LayoutNode::set_parent(uint32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:screen.LayoutNode.parent)
}

// uint32 nodeId = 2 [(.nanopb) = {
inline void LayoutNode::clear_nodeid() {
  nodeid_ = 0u;
}
inline uint32_t LayoutNode::_internal_nodeid() const {
  return nodeid_;
}
inline uint32_t LayoutNode::nodeid() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.nodeId)
  return _internal_nodeid();
}
inline void LayoutNode::_internal_set_nodeid(uint32_t value) {
  
  nodeid_ = value;
}
inline void LayoutNode::set_nodeid(uint32_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:screen.LayoutNode.nodeId)
}

// .screen.LayoutNode.Type type = 3;
inline void LayoutNode::clear_type() {
  type_ = 0;
}
inline ::screen::LayoutNode_Type LayoutNode::_internal_type() const {
  return static_cast< ::screen::LayoutNode_Type >(type_);
}
inline ::screen::LayoutNode_Type LayoutNode::type() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.type)
  return _internal_type();
}
inline void LayoutNode::_internal_set_type(::screen::LayoutNode_Type value) {
  
  type_ = value;
}
inline void LayoutNode::set_type(::screen::LayoutNode_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:screen.LayoutNode.type)
}

// uint32 weight = 4 [(.nanopb) = {
inline void LayoutNode::clear_weight() {
  weight_ = 0u;
}
inline uint32_t LayoutNode::_internal_weight() const {
  return weight_;
}
inline uint32_t LayoutNode::weight() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.weight)
  return _internal_weight();
}
inline void LayoutNode::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void LayoutNode::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:screen.LayoutNode.weight)
}

// -------------------------------------------------------------------

// Color

// uint32 r = 1 [(.nanopb) = {
inline void Color::clear_r() {
  r_ = 0u;
}
inline uint32_t Color::_internal_r() const {
  return r_;
}
inline uint32_t Color::r() const {
  // @@protoc_insertion_point(field_get:screen.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(uint32_t value) {
  
  r_ = value;
}
inline void Color::set_r(uint32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:screen.Color.r)
}

// uint32 g = 2 [(.nanopb) = {
inline void Color::clear_g() {
  g_ = 0u;
}
inline uint32_t Color::_internal_g() const {
  return g_;
}
inline uint32_t Color::g() const {
  // @@protoc_insertion_point(field_get:screen.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(uint32_t value) {
  
  g_ = value;
}
inline void Color::set_g(uint32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:screen.Color.g)
}

// uint32 b = 3 [(.nanopb) = {
inline void Color::clear_b() {
  b_ = 0u;
}
inline uint32_t Color::_internal_b() const {
  return b_;
}
inline uint32_t Color::b() const {
  // @@protoc_insertion_point(field_get:screen.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(uint32_t value) {
  
  b_ = value;
}
inline void Color::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:screen.Color.b)
}

// -------------------------------------------------------------------

// NumericValueWidget

// .screen.Color color = 1;
inline bool NumericValueWidget::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool NumericValueWidget::has_color() const {
  return _internal_has_color();
}
inline void NumericValueWidget::clear_color() {
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::screen::Color& NumericValueWidget::_internal_color() const {
  const ::screen::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::screen::Color&>(
      ::screen::_Color_default_instance_);
}
inline const ::screen::Color& NumericValueWidget::color() const {
  // @@protoc_insertion_point(field_get:screen.NumericValueWidget.color)
  return _internal_color();
}
inline void NumericValueWidget::unsafe_arena_set_allocated_color(
    ::screen::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:screen.NumericValueWidget.color)
}
inline ::screen::Color* NumericValueWidget::release_color() {
  
  ::screen::Color* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::screen::Color* NumericValueWidget::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:screen.NumericValueWidget.color)
  
  ::screen::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::screen::Color* NumericValueWidget::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::screen::Color>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::screen::Color* NumericValueWidget::mutable_color() {
  ::screen::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:screen.NumericValueWidget.color)
  return _msg;
}
inline void NumericValueWidget::set_allocated_color(::screen::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:screen.NumericValueWidget.color)
}

// uint32 value = 2 [(.nanopb) = {
inline void NumericValueWidget::clear_value() {
  value_ = 0u;
}
inline uint32_t NumericValueWidget::_internal_value() const {
  return value_;
}
inline uint32_t NumericValueWidget::value() const {
  // @@protoc_insertion_point(field_get:screen.NumericValueWidget.value)
  return _internal_value();
}
inline void NumericValueWidget::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void NumericValueWidget::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:screen.NumericValueWidget.value)
}

// string label = 3 [(.nanopb) = {
inline void NumericValueWidget::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& NumericValueWidget::label() const {
  // @@protoc_insertion_point(field_get:screen.NumericValueWidget.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NumericValueWidget::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:screen.NumericValueWidget.label)
}
inline std::string* NumericValueWidget::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:screen.NumericValueWidget.label)
  return _s;
}
inline const std::string& NumericValueWidget::_internal_label() const {
  return label_.Get();
}
inline void NumericValueWidget::_internal_set_label(const std::string& value) {
  
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* NumericValueWidget::_internal_mutable_label() {
  
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* NumericValueWidget::release_label() {
  // @@protoc_insertion_point(field_release:screen.NumericValueWidget.label)
  return label_.Release();
}
inline void NumericValueWidget::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:screen.NumericValueWidget.label)
}

// -------------------------------------------------------------------

// ColorWidget

// .screen.Color color = 1;
inline bool ColorWidget::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool ColorWidget::has_color() const {
  return _internal_has_color();
}
inline void ColorWidget::clear_color() {
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::screen::Color& ColorWidget::_internal_color() const {
  const ::screen::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::screen::Color&>(
      ::screen::_Color_default_instance_);
}
inline const ::screen::Color& ColorWidget::color() const {
  // @@protoc_insertion_point(field_get:screen.ColorWidget.color)
  return _internal_color();
}
inline void ColorWidget::unsafe_arena_set_allocated_color(
    ::screen::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:screen.ColorWidget.color)
}
inline ::screen::Color* ColorWidget::release_color() {
  
  ::screen::Color* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::screen::Color* ColorWidget::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:screen.ColorWidget.color)
  
  ::screen::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::screen::Color* ColorWidget::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::screen::Color>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::screen::Color* ColorWidget::mutable_color() {
  ::screen::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:screen.ColorWidget.color)
  return _msg;
}
inline void ColorWidget::set_allocated_color(::screen::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:screen.ColorWidget.color)
}

// -------------------------------------------------------------------

// ContentNode

// uint32 layoutNodeId = 1 [(.nanopb) = {
inline void ContentNode::clear_layoutnodeid() {
  layoutnodeid_ = 0u;
}
inline uint32_t ContentNode::_internal_layoutnodeid() const {
  return layoutnodeid_;
}
inline uint32_t ContentNode::layoutnodeid() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.layoutNodeId)
  return _internal_layoutnodeid();
}
inline void ContentNode::_internal_set_layoutnodeid(uint32_t value) {
  
  layoutnodeid_ = value;
}
inline void ContentNode::set_layoutnodeid(uint32_t value) {
  _internal_set_layoutnodeid(value);
  // @@protoc_insertion_point(field_set:screen.ContentNode.layoutNodeId)
}

// .screen.NumericValueWidget numericValueWidget = 2;
inline bool ContentNode::_internal_has_numericvaluewidget() const {
  return content_case() == kNumericValueWidget;
}
inline bool ContentNode::has_numericvaluewidget() const {
  return _internal_has_numericvaluewidget();
}
inline void ContentNode::set_has_numericvaluewidget() {
  _oneof_case_[0] = kNumericValueWidget;
}
inline void ContentNode::clear_numericvaluewidget() {
  if (_internal_has_numericvaluewidget()) {
    if (GetArenaForAllocation() == nullptr) {
      delete content_.numericvaluewidget_;
    }
    clear_has_content();
  }
}
inline ::screen::NumericValueWidget* ContentNode::release_numericvaluewidget() {
  // @@protoc_insertion_point(field_release:screen.ContentNode.numericValueWidget)
  if (_internal_has_numericvaluewidget()) {
    clear_has_content();
    ::screen::NumericValueWidget* temp = content_.numericvaluewidget_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.numericvaluewidget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::screen::NumericValueWidget& ContentNode::_internal_numericvaluewidget() const {
  return _internal_has_numericvaluewidget()
      ? *content_.numericvaluewidget_
      : reinterpret_cast< ::screen::NumericValueWidget&>(::screen::_NumericValueWidget_default_instance_);
}
inline const ::screen::NumericValueWidget& ContentNode::numericvaluewidget() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.numericValueWidget)
  return _internal_numericvaluewidget();
}
inline ::screen::NumericValueWidget* ContentNode::unsafe_arena_release_numericvaluewidget() {
  // @@protoc_insertion_point(field_unsafe_arena_release:screen.ContentNode.numericValueWidget)
  if (_internal_has_numericvaluewidget()) {
    clear_has_content();
    ::screen::NumericValueWidget* temp = content_.numericvaluewidget_;
    content_.numericvaluewidget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ContentNode::unsafe_arena_set_allocated_numericvaluewidget(::screen::NumericValueWidget* numericvaluewidget) {
  clear_content();
  if (numericvaluewidget) {
    set_has_numericvaluewidget();
    content_.numericvaluewidget_ = numericvaluewidget;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:screen.ContentNode.numericValueWidget)
}
inline ::screen::NumericValueWidget* ContentNode::_internal_mutable_numericvaluewidget() {
  if (!_internal_has_numericvaluewidget()) {
    clear_content();
    set_has_numericvaluewidget();
    content_.numericvaluewidget_ = CreateMaybeMessage< ::screen::NumericValueWidget >(GetArenaForAllocation());
  }
  return content_.numericvaluewidget_;
}
inline ::screen::NumericValueWidget* ContentNode::mutable_numericvaluewidget() {
  ::screen::NumericValueWidget* _msg = _internal_mutable_numericvaluewidget();
  // @@protoc_insertion_point(field_mutable:screen.ContentNode.numericValueWidget)
  return _msg;
}

// .screen.ColorWidget colorWidget = 3;
inline bool ContentNode::_internal_has_colorwidget() const {
  return content_case() == kColorWidget;
}
inline bool ContentNode::has_colorwidget() const {
  return _internal_has_colorwidget();
}
inline void ContentNode::set_has_colorwidget() {
  _oneof_case_[0] = kColorWidget;
}
inline void ContentNode::clear_colorwidget() {
  if (_internal_has_colorwidget()) {
    if (GetArenaForAllocation() == nullptr) {
      delete content_.colorwidget_;
    }
    clear_has_content();
  }
}
inline ::screen::ColorWidget* ContentNode::release_colorwidget() {
  // @@protoc_insertion_point(field_release:screen.ContentNode.colorWidget)
  if (_internal_has_colorwidget()) {
    clear_has_content();
    ::screen::ColorWidget* temp = content_.colorwidget_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.colorwidget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::screen::ColorWidget& ContentNode::_internal_colorwidget() const {
  return _internal_has_colorwidget()
      ? *content_.colorwidget_
      : reinterpret_cast< ::screen::ColorWidget&>(::screen::_ColorWidget_default_instance_);
}
inline const ::screen::ColorWidget& ContentNode::colorwidget() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.colorWidget)
  return _internal_colorwidget();
}
inline ::screen::ColorWidget* ContentNode::unsafe_arena_release_colorwidget() {
  // @@protoc_insertion_point(field_unsafe_arena_release:screen.ContentNode.colorWidget)
  if (_internal_has_colorwidget()) {
    clear_has_content();
    ::screen::ColorWidget* temp = content_.colorwidget_;
    content_.colorwidget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ContentNode::unsafe_arena_set_allocated_colorwidget(::screen::ColorWidget* colorwidget) {
  clear_content();
  if (colorwidget) {
    set_has_colorwidget();
    content_.colorwidget_ = colorwidget;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:screen.ContentNode.colorWidget)
}
inline ::screen::ColorWidget* ContentNode::_internal_mutable_colorwidget() {
  if (!_internal_has_colorwidget()) {
    clear_content();
    set_has_colorwidget();
    content_.colorwidget_ = CreateMaybeMessage< ::screen::ColorWidget >(GetArenaForAllocation());
  }
  return content_.colorwidget_;
}
inline ::screen::ColorWidget* ContentNode::mutable_colorwidget() {
  ::screen::ColorWidget* _msg = _internal_mutable_colorwidget();
  // @@protoc_insertion_point(field_mutable:screen.ContentNode.colorWidget)
  return _msg;
}

inline bool ContentNode::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ContentNode::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ContentNode::ContentCase ContentNode::content_case() const {
  return ContentNode::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Config

// repeated .screen.LayoutNode layoutNodes = 1;
inline int Config::_internal_layoutnodes_size() const {
  return layoutnodes_.size();
}
inline int Config::layoutnodes_size() const {
  return _internal_layoutnodes_size();
}
inline void Config::clear_layoutnodes() {
  layoutnodes_.Clear();
}
inline ::screen::LayoutNode* Config::mutable_layoutnodes(int index) {
  // @@protoc_insertion_point(field_mutable:screen.Config.layoutNodes)
  return layoutnodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::LayoutNode >*
Config::mutable_layoutnodes() {
  // @@protoc_insertion_point(field_mutable_list:screen.Config.layoutNodes)
  return &layoutnodes_;
}
inline const ::screen::LayoutNode& Config::_internal_layoutnodes(int index) const {
  return layoutnodes_.Get(index);
}
inline const ::screen::LayoutNode& Config::layoutnodes(int index) const {
  // @@protoc_insertion_point(field_get:screen.Config.layoutNodes)
  return _internal_layoutnodes(index);
}
inline ::screen::LayoutNode* Config::_internal_add_layoutnodes() {
  return layoutnodes_.Add();
}
inline ::screen::LayoutNode* Config::add_layoutnodes() {
  ::screen::LayoutNode* _add = _internal_add_layoutnodes();
  // @@protoc_insertion_point(field_add:screen.Config.layoutNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::LayoutNode >&
Config::layoutnodes() const {
  // @@protoc_insertion_point(field_list:screen.Config.layoutNodes)
  return layoutnodes_;
}

// repeated .screen.ContentNode contentNodes = 2;
inline int Config::_internal_contentnodes_size() const {
  return contentnodes_.size();
}
inline int Config::contentnodes_size() const {
  return _internal_contentnodes_size();
}
inline void Config::clear_contentnodes() {
  contentnodes_.Clear();
}
inline ::screen::ContentNode* Config::mutable_contentnodes(int index) {
  // @@protoc_insertion_point(field_mutable:screen.Config.contentNodes)
  return contentnodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::ContentNode >*
Config::mutable_contentnodes() {
  // @@protoc_insertion_point(field_mutable_list:screen.Config.contentNodes)
  return &contentnodes_;
}
inline const ::screen::ContentNode& Config::_internal_contentnodes(int index) const {
  return contentnodes_.Get(index);
}
inline const ::screen::ContentNode& Config::contentnodes(int index) const {
  // @@protoc_insertion_point(field_get:screen.Config.contentNodes)
  return _internal_contentnodes(index);
}
inline ::screen::ContentNode* Config::_internal_add_contentnodes() {
  return contentnodes_.Add();
}
inline ::screen::ContentNode* Config::add_contentnodes() {
  ::screen::ContentNode* _add = _internal_add_contentnodes();
  // @@protoc_insertion_point(field_add:screen.Config.contentNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::screen::ContentNode >&
Config::contentnodes() const {
  // @@protoc_insertion_point(field_list:screen.Config.contentNodes)
  return contentnodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace screen

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::screen::LayoutNode_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::screen::LayoutNode_Type>() {
  return ::screen::LayoutNode_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Screen_5ftest_2eproto
