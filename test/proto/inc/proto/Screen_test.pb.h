// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Screen_test.proto

#ifndef PROTOBUF_INCLUDED_Screen_5ftest_2eproto
#define PROTOBUF_INCLUDED_Screen_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb_test.pb.h"
#include "brewblox_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Screen_5ftest_2eproto 

namespace protobuf_Screen_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Screen_5ftest_2eproto
namespace screen {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class ColorWidget;
class ColorWidgetDefaultTypeInternal;
extern ColorWidgetDefaultTypeInternal _ColorWidget_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ContentNode;
class ContentNodeDefaultTypeInternal;
extern ContentNodeDefaultTypeInternal _ContentNode_default_instance_;
class LayoutNode;
class LayoutNodeDefaultTypeInternal;
extern LayoutNodeDefaultTypeInternal _LayoutNode_default_instance_;
class NumericValueWidget;
class NumericValueWidgetDefaultTypeInternal;
extern NumericValueWidgetDefaultTypeInternal _NumericValueWidget_default_instance_;
class SetpointSensorPairWidget;
class SetpointSensorPairWidgetDefaultTypeInternal;
extern SetpointSensorPairWidgetDefaultTypeInternal _SetpointSensorPairWidget_default_instance_;
class TemperatureWidget;
class TemperatureWidgetDefaultTypeInternal;
extern TemperatureWidgetDefaultTypeInternal _TemperatureWidget_default_instance_;
}  // namespace screen
namespace google {
namespace protobuf {
template<> ::screen::Color* Arena::CreateMaybeMessage<::screen::Color>(Arena*);
template<> ::screen::ColorWidget* Arena::CreateMaybeMessage<::screen::ColorWidget>(Arena*);
template<> ::screen::Config* Arena::CreateMaybeMessage<::screen::Config>(Arena*);
template<> ::screen::ContentNode* Arena::CreateMaybeMessage<::screen::ContentNode>(Arena*);
template<> ::screen::LayoutNode* Arena::CreateMaybeMessage<::screen::LayoutNode>(Arena*);
template<> ::screen::NumericValueWidget* Arena::CreateMaybeMessage<::screen::NumericValueWidget>(Arena*);
template<> ::screen::SetpointSensorPairWidget* Arena::CreateMaybeMessage<::screen::SetpointSensorPairWidget>(Arena*);
template<> ::screen::TemperatureWidget* Arena::CreateMaybeMessage<::screen::TemperatureWidget>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace screen {

enum LayoutNode_Type {
  LayoutNode_Type_Row = 0,
  LayoutNode_Type_Column = 1,
  LayoutNode_Type_Content = 2,
  LayoutNode_Type_LayoutNode_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LayoutNode_Type_LayoutNode_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LayoutNode_Type_IsValid(int value);
const LayoutNode_Type LayoutNode_Type_Type_MIN = LayoutNode_Type_Row;
const LayoutNode_Type LayoutNode_Type_Type_MAX = LayoutNode_Type_Content;
const int LayoutNode_Type_Type_ARRAYSIZE = LayoutNode_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayoutNode_Type_descriptor();
inline const ::std::string& LayoutNode_Type_Name(LayoutNode_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayoutNode_Type_descriptor(), value);
}
inline bool LayoutNode_Type_Parse(
    const ::std::string& name, LayoutNode_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayoutNode_Type>(
    LayoutNode_Type_descriptor(), name, value);
}
// ===================================================================

class LayoutNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.LayoutNode) */ {
 public:
  LayoutNode();
  virtual ~LayoutNode();

  LayoutNode(const LayoutNode& from);

  inline LayoutNode& operator=(const LayoutNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayoutNode(LayoutNode&& from) noexcept
    : LayoutNode() {
    *this = ::std::move(from);
  }

  inline LayoutNode& operator=(LayoutNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LayoutNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayoutNode* internal_default_instance() {
    return reinterpret_cast<const LayoutNode*>(
               &_LayoutNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LayoutNode* other);
  friend void swap(LayoutNode& a, LayoutNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayoutNode* New() const final {
    return CreateMaybeMessage<LayoutNode>(NULL);
  }

  LayoutNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LayoutNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LayoutNode& from);
  void MergeFrom(const LayoutNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LayoutNode_Type Type;
  static const Type Row =
    LayoutNode_Type_Row;
  static const Type Column =
    LayoutNode_Type_Column;
  static const Type Content =
    LayoutNode_Type_Content;
  static inline bool Type_IsValid(int value) {
    return LayoutNode_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LayoutNode_Type_Type_MIN;
  static const Type Type_MAX =
    LayoutNode_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LayoutNode_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LayoutNode_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LayoutNode_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LayoutNode_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 parent = 1 [(.nanopb) = {
  void clear_parent();
  static const int kParentFieldNumber = 1;
  ::google::protobuf::uint32 parent() const;
  void set_parent(::google::protobuf::uint32 value);

  // uint32 nodeId = 2 [(.nanopb) = {
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint32 nodeid() const;
  void set_nodeid(::google::protobuf::uint32 value);

  // .screen.LayoutNode.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::screen::LayoutNode_Type type() const;
  void set_type(::screen::LayoutNode_Type value);

  // uint32 weight = 4 [(.nanopb) = {
  void clear_weight();
  static const int kWeightFieldNumber = 4;
  ::google::protobuf::uint32 weight() const;
  void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:screen.LayoutNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 parent_;
  ::google::protobuf::uint32 nodeid_;
  int type_;
  ::google::protobuf::uint32 weight_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(NULL);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 r = 1 [(.nanopb) = {
  void clear_r();
  static const int kRFieldNumber = 1;
  ::google::protobuf::uint32 r() const;
  void set_r(::google::protobuf::uint32 value);

  // uint32 g = 2 [(.nanopb) = {
  void clear_g();
  static const int kGFieldNumber = 2;
  ::google::protobuf::uint32 g() const;
  void set_g(::google::protobuf::uint32 value);

  // uint32 b = 3 [(.nanopb) = {
  void clear_b();
  static const int kBFieldNumber = 3;
  ::google::protobuf::uint32 b() const;
  void set_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:screen.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NumericValueWidget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.NumericValueWidget) */ {
 public:
  NumericValueWidget();
  virtual ~NumericValueWidget();

  NumericValueWidget(const NumericValueWidget& from);

  inline NumericValueWidget& operator=(const NumericValueWidget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumericValueWidget(NumericValueWidget&& from) noexcept
    : NumericValueWidget() {
    *this = ::std::move(from);
  }

  inline NumericValueWidget& operator=(NumericValueWidget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NumericValueWidget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumericValueWidget* internal_default_instance() {
    return reinterpret_cast<const NumericValueWidget*>(
               &_NumericValueWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NumericValueWidget* other);
  friend void swap(NumericValueWidget& a, NumericValueWidget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumericValueWidget* New() const final {
    return CreateMaybeMessage<NumericValueWidget>(NULL);
  }

  NumericValueWidget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumericValueWidget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumericValueWidget& from);
  void MergeFrom(const NumericValueWidget& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumericValueWidget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 3 [(.nanopb) = {
  void clear_label();
  static const int kLabelFieldNumber = 3;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // .screen.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  private:
  const ::screen::Color& _internal_color() const;
  public:
  const ::screen::Color& color() const;
  ::screen::Color* release_color();
  ::screen::Color* mutable_color();
  void set_allocated_color(::screen::Color* color);

  // uint32 value = 2 [(.nanopb) = {
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:screen.NumericValueWidget)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::screen::Color* color_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TemperatureWidget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.TemperatureWidget) */ {
 public:
  TemperatureWidget();
  virtual ~TemperatureWidget();

  TemperatureWidget(const TemperatureWidget& from);

  inline TemperatureWidget& operator=(const TemperatureWidget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TemperatureWidget(TemperatureWidget&& from) noexcept
    : TemperatureWidget() {
    *this = ::std::move(from);
  }

  inline TemperatureWidget& operator=(TemperatureWidget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureWidget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemperatureWidget* internal_default_instance() {
    return reinterpret_cast<const TemperatureWidget*>(
               &_TemperatureWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TemperatureWidget* other);
  friend void swap(TemperatureWidget& a, TemperatureWidget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TemperatureWidget* New() const final {
    return CreateMaybeMessage<TemperatureWidget>(NULL);
  }

  TemperatureWidget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TemperatureWidget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TemperatureWidget& from);
  void MergeFrom(const TemperatureWidget& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemperatureWidget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 2 [(.nanopb) = {
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // .screen.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  private:
  const ::screen::Color& _internal_color() const;
  public:
  const ::screen::Color& color() const;
  ::screen::Color* release_color();
  ::screen::Color* mutable_color();
  void set_allocated_color(::screen::Color* color);

  // uint32 tempSensor = 3 [(.nanopb) = {
  void clear_tempsensor();
  static const int kTempSensorFieldNumber = 3;
  ::google::protobuf::uint32 tempsensor() const;
  void set_tempsensor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:screen.TemperatureWidget)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::screen::Color* color_;
  ::google::protobuf::uint32 tempsensor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetpointSensorPairWidget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.SetpointSensorPairWidget) */ {
 public:
  SetpointSensorPairWidget();
  virtual ~SetpointSensorPairWidget();

  SetpointSensorPairWidget(const SetpointSensorPairWidget& from);

  inline SetpointSensorPairWidget& operator=(const SetpointSensorPairWidget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetpointSensorPairWidget(SetpointSensorPairWidget&& from) noexcept
    : SetpointSensorPairWidget() {
    *this = ::std::move(from);
  }

  inline SetpointSensorPairWidget& operator=(SetpointSensorPairWidget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetpointSensorPairWidget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetpointSensorPairWidget* internal_default_instance() {
    return reinterpret_cast<const SetpointSensorPairWidget*>(
               &_SetpointSensorPairWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SetpointSensorPairWidget* other);
  friend void swap(SetpointSensorPairWidget& a, SetpointSensorPairWidget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetpointSensorPairWidget* New() const final {
    return CreateMaybeMessage<SetpointSensorPairWidget>(NULL);
  }

  SetpointSensorPairWidget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetpointSensorPairWidget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetpointSensorPairWidget& from);
  void MergeFrom(const SetpointSensorPairWidget& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetpointSensorPairWidget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 2 [(.nanopb) = {
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // .screen.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  private:
  const ::screen::Color& _internal_color() const;
  public:
  const ::screen::Color& color() const;
  ::screen::Color* release_color();
  ::screen::Color* mutable_color();
  void set_allocated_color(::screen::Color* color);

  // uint32 setpointSensorPair = 3 [(.nanopb) = {
  void clear_setpointsensorpair();
  static const int kSetpointSensorPairFieldNumber = 3;
  ::google::protobuf::uint32 setpointsensorpair() const;
  void set_setpointsensorpair(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:screen.SetpointSensorPairWidget)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::screen::Color* color_;
  ::google::protobuf::uint32 setpointsensorpair_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ColorWidget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.ColorWidget) */ {
 public:
  ColorWidget();
  virtual ~ColorWidget();

  ColorWidget(const ColorWidget& from);

  inline ColorWidget& operator=(const ColorWidget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColorWidget(ColorWidget&& from) noexcept
    : ColorWidget() {
    *this = ::std::move(from);
  }

  inline ColorWidget& operator=(ColorWidget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorWidget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorWidget* internal_default_instance() {
    return reinterpret_cast<const ColorWidget*>(
               &_ColorWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ColorWidget* other);
  friend void swap(ColorWidget& a, ColorWidget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColorWidget* New() const final {
    return CreateMaybeMessage<ColorWidget>(NULL);
  }

  ColorWidget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ColorWidget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ColorWidget& from);
  void MergeFrom(const ColorWidget& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorWidget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .screen.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  private:
  const ::screen::Color& _internal_color() const;
  public:
  const ::screen::Color& color() const;
  ::screen::Color* release_color();
  ::screen::Color* mutable_color();
  void set_allocated_color(::screen::Color* color);

  // @@protoc_insertion_point(class_scope:screen.ColorWidget)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::screen::Color* color_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.ContentNode) */ {
 public:
  ContentNode();
  virtual ~ContentNode();

  ContentNode(const ContentNode& from);

  inline ContentNode& operator=(const ContentNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentNode(ContentNode&& from) noexcept
    : ContentNode() {
    *this = ::std::move(from);
  }

  inline ContentNode& operator=(ContentNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentNode& default_instance();

  enum ContentCase {
    kNumericValueWidget = 2,
    kColorWidget = 3,
    kTemperatureWidget = 4,
    kSetpointSensorPairWidget = 5,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentNode* internal_default_instance() {
    return reinterpret_cast<const ContentNode*>(
               &_ContentNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ContentNode* other);
  friend void swap(ContentNode& a, ContentNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentNode* New() const final {
    return CreateMaybeMessage<ContentNode>(NULL);
  }

  ContentNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentNode& from);
  void MergeFrom(const ContentNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 layoutNodeId = 1 [(.nanopb) = {
  void clear_layoutnodeid();
  static const int kLayoutNodeIdFieldNumber = 1;
  ::google::protobuf::uint32 layoutnodeid() const;
  void set_layoutnodeid(::google::protobuf::uint32 value);

  // .screen.NumericValueWidget numericValueWidget = 2;
  bool has_numericvaluewidget() const;
  void clear_numericvaluewidget();
  static const int kNumericValueWidgetFieldNumber = 2;
  private:
  const ::screen::NumericValueWidget& _internal_numericvaluewidget() const;
  public:
  const ::screen::NumericValueWidget& numericvaluewidget() const;
  ::screen::NumericValueWidget* release_numericvaluewidget();
  ::screen::NumericValueWidget* mutable_numericvaluewidget();
  void set_allocated_numericvaluewidget(::screen::NumericValueWidget* numericvaluewidget);

  // .screen.ColorWidget colorWidget = 3;
  bool has_colorwidget() const;
  void clear_colorwidget();
  static const int kColorWidgetFieldNumber = 3;
  private:
  const ::screen::ColorWidget& _internal_colorwidget() const;
  public:
  const ::screen::ColorWidget& colorwidget() const;
  ::screen::ColorWidget* release_colorwidget();
  ::screen::ColorWidget* mutable_colorwidget();
  void set_allocated_colorwidget(::screen::ColorWidget* colorwidget);

  // .screen.TemperatureWidget temperatureWidget = 4;
  bool has_temperaturewidget() const;
  void clear_temperaturewidget();
  static const int kTemperatureWidgetFieldNumber = 4;
  private:
  const ::screen::TemperatureWidget& _internal_temperaturewidget() const;
  public:
  const ::screen::TemperatureWidget& temperaturewidget() const;
  ::screen::TemperatureWidget* release_temperaturewidget();
  ::screen::TemperatureWidget* mutable_temperaturewidget();
  void set_allocated_temperaturewidget(::screen::TemperatureWidget* temperaturewidget);

  // .screen.SetpointSensorPairWidget setpointSensorPairWidget = 5;
  bool has_setpointsensorpairwidget() const;
  void clear_setpointsensorpairwidget();
  static const int kSetpointSensorPairWidgetFieldNumber = 5;
  private:
  const ::screen::SetpointSensorPairWidget& _internal_setpointsensorpairwidget() const;
  public:
  const ::screen::SetpointSensorPairWidget& setpointsensorpairwidget() const;
  ::screen::SetpointSensorPairWidget* release_setpointsensorpairwidget();
  ::screen::SetpointSensorPairWidget* mutable_setpointsensorpairwidget();
  void set_allocated_setpointsensorpairwidget(::screen::SetpointSensorPairWidget* setpointsensorpairwidget);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:screen.ContentNode)
 private:
  void set_has_numericvaluewidget();
  void set_has_colorwidget();
  void set_has_temperaturewidget();
  void set_has_setpointsensorpairwidget();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 layoutnodeid_;
  union ContentUnion {
    ContentUnion() {}
    ::screen::NumericValueWidget* numericvaluewidget_;
    ::screen::ColorWidget* colorwidget_;
    ::screen::TemperatureWidget* temperaturewidget_;
    ::screen::SetpointSensorPairWidget* setpointsensorpairwidget_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:screen.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .screen.LayoutNode layoutNodes = 1;
  int layoutnodes_size() const;
  void clear_layoutnodes();
  static const int kLayoutNodesFieldNumber = 1;
  ::screen::LayoutNode* mutable_layoutnodes(int index);
  ::google::protobuf::RepeatedPtrField< ::screen::LayoutNode >*
      mutable_layoutnodes();
  const ::screen::LayoutNode& layoutnodes(int index) const;
  ::screen::LayoutNode* add_layoutnodes();
  const ::google::protobuf::RepeatedPtrField< ::screen::LayoutNode >&
      layoutnodes() const;

  // repeated .screen.ContentNode contentNodes = 2;
  int contentnodes_size() const;
  void clear_contentnodes();
  static const int kContentNodesFieldNumber = 2;
  ::screen::ContentNode* mutable_contentnodes(int index);
  ::google::protobuf::RepeatedPtrField< ::screen::ContentNode >*
      mutable_contentnodes();
  const ::screen::ContentNode& contentnodes(int index) const;
  ::screen::ContentNode* add_contentnodes();
  const ::google::protobuf::RepeatedPtrField< ::screen::ContentNode >&
      contentnodes() const;

  // @@protoc_insertion_point(class_scope:screen.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::screen::LayoutNode > layoutnodes_;
  ::google::protobuf::RepeatedPtrField< ::screen::ContentNode > contentnodes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Screen_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayoutNode

// uint32 parent = 1 [(.nanopb) = {
inline void LayoutNode::clear_parent() {
  parent_ = 0u;
}
inline ::google::protobuf::uint32 LayoutNode::parent() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.parent)
  return parent_;
}
inline void LayoutNode::set_parent(::google::protobuf::uint32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:screen.LayoutNode.parent)
}

// uint32 nodeId = 2 [(.nanopb) = {
inline void LayoutNode::clear_nodeid() {
  nodeid_ = 0u;
}
inline ::google::protobuf::uint32 LayoutNode::nodeid() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.nodeId)
  return nodeid_;
}
inline void LayoutNode::set_nodeid(::google::protobuf::uint32 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:screen.LayoutNode.nodeId)
}

// .screen.LayoutNode.Type type = 3;
inline void LayoutNode::clear_type() {
  type_ = 0;
}
inline ::screen::LayoutNode_Type LayoutNode::type() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.type)
  return static_cast< ::screen::LayoutNode_Type >(type_);
}
inline void LayoutNode::set_type(::screen::LayoutNode_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:screen.LayoutNode.type)
}

// uint32 weight = 4 [(.nanopb) = {
inline void LayoutNode::clear_weight() {
  weight_ = 0u;
}
inline ::google::protobuf::uint32 LayoutNode::weight() const {
  // @@protoc_insertion_point(field_get:screen.LayoutNode.weight)
  return weight_;
}
inline void LayoutNode::set_weight(::google::protobuf::uint32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:screen.LayoutNode.weight)
}

// -------------------------------------------------------------------

// Color

// uint32 r = 1 [(.nanopb) = {
inline void Color::clear_r() {
  r_ = 0u;
}
inline ::google::protobuf::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:screen.Color.r)
  return r_;
}
inline void Color::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:screen.Color.r)
}

// uint32 g = 2 [(.nanopb) = {
inline void Color::clear_g() {
  g_ = 0u;
}
inline ::google::protobuf::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:screen.Color.g)
  return g_;
}
inline void Color::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:screen.Color.g)
}

// uint32 b = 3 [(.nanopb) = {
inline void Color::clear_b() {
  b_ = 0u;
}
inline ::google::protobuf::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:screen.Color.b)
  return b_;
}
inline void Color::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:screen.Color.b)
}

// -------------------------------------------------------------------

// NumericValueWidget

// .screen.Color color = 1;
inline bool NumericValueWidget::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline void NumericValueWidget::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
inline const ::screen::Color& NumericValueWidget::_internal_color() const {
  return *color_;
}
inline const ::screen::Color& NumericValueWidget::color() const {
  const ::screen::Color* p = color_;
  // @@protoc_insertion_point(field_get:screen.NumericValueWidget.color)
  return p != NULL ? *p : *reinterpret_cast<const ::screen::Color*>(
      &::screen::_Color_default_instance_);
}
inline ::screen::Color* NumericValueWidget::release_color() {
  // @@protoc_insertion_point(field_release:screen.NumericValueWidget.color)
  
  ::screen::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::screen::Color* NumericValueWidget::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::screen::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:screen.NumericValueWidget.color)
  return color_;
}
inline void NumericValueWidget::set_allocated_color(::screen::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete color_;
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:screen.NumericValueWidget.color)
}

// uint32 value = 2 [(.nanopb) = {
inline void NumericValueWidget::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 NumericValueWidget::value() const {
  // @@protoc_insertion_point(field_get:screen.NumericValueWidget.value)
  return value_;
}
inline void NumericValueWidget::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:screen.NumericValueWidget.value)
}

// string label = 3 [(.nanopb) = {
inline void NumericValueWidget::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NumericValueWidget::label() const {
  // @@protoc_insertion_point(field_get:screen.NumericValueWidget.label)
  return label_.GetNoArena();
}
inline void NumericValueWidget::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:screen.NumericValueWidget.label)
}
#if LANG_CXX11
inline void NumericValueWidget::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:screen.NumericValueWidget.label)
}
#endif
inline void NumericValueWidget::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:screen.NumericValueWidget.label)
}
inline void NumericValueWidget::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:screen.NumericValueWidget.label)
}
inline ::std::string* NumericValueWidget::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:screen.NumericValueWidget.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NumericValueWidget::release_label() {
  // @@protoc_insertion_point(field_release:screen.NumericValueWidget.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NumericValueWidget::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:screen.NumericValueWidget.label)
}

// -------------------------------------------------------------------

// TemperatureWidget

// .screen.Color color = 1;
inline bool TemperatureWidget::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline void TemperatureWidget::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
inline const ::screen::Color& TemperatureWidget::_internal_color() const {
  return *color_;
}
inline const ::screen::Color& TemperatureWidget::color() const {
  const ::screen::Color* p = color_;
  // @@protoc_insertion_point(field_get:screen.TemperatureWidget.color)
  return p != NULL ? *p : *reinterpret_cast<const ::screen::Color*>(
      &::screen::_Color_default_instance_);
}
inline ::screen::Color* TemperatureWidget::release_color() {
  // @@protoc_insertion_point(field_release:screen.TemperatureWidget.color)
  
  ::screen::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::screen::Color* TemperatureWidget::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::screen::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:screen.TemperatureWidget.color)
  return color_;
}
inline void TemperatureWidget::set_allocated_color(::screen::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete color_;
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:screen.TemperatureWidget.color)
}

// string label = 2 [(.nanopb) = {
inline void TemperatureWidget::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TemperatureWidget::label() const {
  // @@protoc_insertion_point(field_get:screen.TemperatureWidget.label)
  return label_.GetNoArena();
}
inline void TemperatureWidget::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:screen.TemperatureWidget.label)
}
#if LANG_CXX11
inline void TemperatureWidget::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:screen.TemperatureWidget.label)
}
#endif
inline void TemperatureWidget::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:screen.TemperatureWidget.label)
}
inline void TemperatureWidget::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:screen.TemperatureWidget.label)
}
inline ::std::string* TemperatureWidget::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:screen.TemperatureWidget.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TemperatureWidget::release_label() {
  // @@protoc_insertion_point(field_release:screen.TemperatureWidget.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TemperatureWidget::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:screen.TemperatureWidget.label)
}

// uint32 tempSensor = 3 [(.nanopb) = {
inline void TemperatureWidget::clear_tempsensor() {
  tempsensor_ = 0u;
}
inline ::google::protobuf::uint32 TemperatureWidget::tempsensor() const {
  // @@protoc_insertion_point(field_get:screen.TemperatureWidget.tempSensor)
  return tempsensor_;
}
inline void TemperatureWidget::set_tempsensor(::google::protobuf::uint32 value) {
  
  tempsensor_ = value;
  // @@protoc_insertion_point(field_set:screen.TemperatureWidget.tempSensor)
}

// -------------------------------------------------------------------

// SetpointSensorPairWidget

// .screen.Color color = 1;
inline bool SetpointSensorPairWidget::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline void SetpointSensorPairWidget::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
inline const ::screen::Color& SetpointSensorPairWidget::_internal_color() const {
  return *color_;
}
inline const ::screen::Color& SetpointSensorPairWidget::color() const {
  const ::screen::Color* p = color_;
  // @@protoc_insertion_point(field_get:screen.SetpointSensorPairWidget.color)
  return p != NULL ? *p : *reinterpret_cast<const ::screen::Color*>(
      &::screen::_Color_default_instance_);
}
inline ::screen::Color* SetpointSensorPairWidget::release_color() {
  // @@protoc_insertion_point(field_release:screen.SetpointSensorPairWidget.color)
  
  ::screen::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::screen::Color* SetpointSensorPairWidget::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::screen::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:screen.SetpointSensorPairWidget.color)
  return color_;
}
inline void SetpointSensorPairWidget::set_allocated_color(::screen::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete color_;
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:screen.SetpointSensorPairWidget.color)
}

// string label = 2 [(.nanopb) = {
inline void SetpointSensorPairWidget::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetpointSensorPairWidget::label() const {
  // @@protoc_insertion_point(field_get:screen.SetpointSensorPairWidget.label)
  return label_.GetNoArena();
}
inline void SetpointSensorPairWidget::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:screen.SetpointSensorPairWidget.label)
}
#if LANG_CXX11
inline void SetpointSensorPairWidget::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:screen.SetpointSensorPairWidget.label)
}
#endif
inline void SetpointSensorPairWidget::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:screen.SetpointSensorPairWidget.label)
}
inline void SetpointSensorPairWidget::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:screen.SetpointSensorPairWidget.label)
}
inline ::std::string* SetpointSensorPairWidget::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:screen.SetpointSensorPairWidget.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetpointSensorPairWidget::release_label() {
  // @@protoc_insertion_point(field_release:screen.SetpointSensorPairWidget.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetpointSensorPairWidget::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:screen.SetpointSensorPairWidget.label)
}

// uint32 setpointSensorPair = 3 [(.nanopb) = {
inline void SetpointSensorPairWidget::clear_setpointsensorpair() {
  setpointsensorpair_ = 0u;
}
inline ::google::protobuf::uint32 SetpointSensorPairWidget::setpointsensorpair() const {
  // @@protoc_insertion_point(field_get:screen.SetpointSensorPairWidget.setpointSensorPair)
  return setpointsensorpair_;
}
inline void SetpointSensorPairWidget::set_setpointsensorpair(::google::protobuf::uint32 value) {
  
  setpointsensorpair_ = value;
  // @@protoc_insertion_point(field_set:screen.SetpointSensorPairWidget.setpointSensorPair)
}

// -------------------------------------------------------------------

// ColorWidget

// .screen.Color color = 1;
inline bool ColorWidget::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline void ColorWidget::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
inline const ::screen::Color& ColorWidget::_internal_color() const {
  return *color_;
}
inline const ::screen::Color& ColorWidget::color() const {
  const ::screen::Color* p = color_;
  // @@protoc_insertion_point(field_get:screen.ColorWidget.color)
  return p != NULL ? *p : *reinterpret_cast<const ::screen::Color*>(
      &::screen::_Color_default_instance_);
}
inline ::screen::Color* ColorWidget::release_color() {
  // @@protoc_insertion_point(field_release:screen.ColorWidget.color)
  
  ::screen::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::screen::Color* ColorWidget::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::screen::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:screen.ColorWidget.color)
  return color_;
}
inline void ColorWidget::set_allocated_color(::screen::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete color_;
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:screen.ColorWidget.color)
}

// -------------------------------------------------------------------

// ContentNode

// uint32 layoutNodeId = 1 [(.nanopb) = {
inline void ContentNode::clear_layoutnodeid() {
  layoutnodeid_ = 0u;
}
inline ::google::protobuf::uint32 ContentNode::layoutnodeid() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.layoutNodeId)
  return layoutnodeid_;
}
inline void ContentNode::set_layoutnodeid(::google::protobuf::uint32 value) {
  
  layoutnodeid_ = value;
  // @@protoc_insertion_point(field_set:screen.ContentNode.layoutNodeId)
}

// .screen.NumericValueWidget numericValueWidget = 2;
inline bool ContentNode::has_numericvaluewidget() const {
  return content_case() == kNumericValueWidget;
}
inline void ContentNode::set_has_numericvaluewidget() {
  _oneof_case_[0] = kNumericValueWidget;
}
inline void ContentNode::clear_numericvaluewidget() {
  if (has_numericvaluewidget()) {
    delete content_.numericvaluewidget_;
    clear_has_content();
  }
}
inline const ::screen::NumericValueWidget& ContentNode::_internal_numericvaluewidget() const {
  return *content_.numericvaluewidget_;
}
inline ::screen::NumericValueWidget* ContentNode::release_numericvaluewidget() {
  // @@protoc_insertion_point(field_release:screen.ContentNode.numericValueWidget)
  if (has_numericvaluewidget()) {
    clear_has_content();
      ::screen::NumericValueWidget* temp = content_.numericvaluewidget_;
    content_.numericvaluewidget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::screen::NumericValueWidget& ContentNode::numericvaluewidget() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.numericValueWidget)
  return has_numericvaluewidget()
      ? *content_.numericvaluewidget_
      : *reinterpret_cast< ::screen::NumericValueWidget*>(&::screen::_NumericValueWidget_default_instance_);
}
inline ::screen::NumericValueWidget* ContentNode::mutable_numericvaluewidget() {
  if (!has_numericvaluewidget()) {
    clear_content();
    set_has_numericvaluewidget();
    content_.numericvaluewidget_ = CreateMaybeMessage< ::screen::NumericValueWidget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:screen.ContentNode.numericValueWidget)
  return content_.numericvaluewidget_;
}

// .screen.ColorWidget colorWidget = 3;
inline bool ContentNode::has_colorwidget() const {
  return content_case() == kColorWidget;
}
inline void ContentNode::set_has_colorwidget() {
  _oneof_case_[0] = kColorWidget;
}
inline void ContentNode::clear_colorwidget() {
  if (has_colorwidget()) {
    delete content_.colorwidget_;
    clear_has_content();
  }
}
inline const ::screen::ColorWidget& ContentNode::_internal_colorwidget() const {
  return *content_.colorwidget_;
}
inline ::screen::ColorWidget* ContentNode::release_colorwidget() {
  // @@protoc_insertion_point(field_release:screen.ContentNode.colorWidget)
  if (has_colorwidget()) {
    clear_has_content();
      ::screen::ColorWidget* temp = content_.colorwidget_;
    content_.colorwidget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::screen::ColorWidget& ContentNode::colorwidget() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.colorWidget)
  return has_colorwidget()
      ? *content_.colorwidget_
      : *reinterpret_cast< ::screen::ColorWidget*>(&::screen::_ColorWidget_default_instance_);
}
inline ::screen::ColorWidget* ContentNode::mutable_colorwidget() {
  if (!has_colorwidget()) {
    clear_content();
    set_has_colorwidget();
    content_.colorwidget_ = CreateMaybeMessage< ::screen::ColorWidget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:screen.ContentNode.colorWidget)
  return content_.colorwidget_;
}

// .screen.TemperatureWidget temperatureWidget = 4;
inline bool ContentNode::has_temperaturewidget() const {
  return content_case() == kTemperatureWidget;
}
inline void ContentNode::set_has_temperaturewidget() {
  _oneof_case_[0] = kTemperatureWidget;
}
inline void ContentNode::clear_temperaturewidget() {
  if (has_temperaturewidget()) {
    delete content_.temperaturewidget_;
    clear_has_content();
  }
}
inline const ::screen::TemperatureWidget& ContentNode::_internal_temperaturewidget() const {
  return *content_.temperaturewidget_;
}
inline ::screen::TemperatureWidget* ContentNode::release_temperaturewidget() {
  // @@protoc_insertion_point(field_release:screen.ContentNode.temperatureWidget)
  if (has_temperaturewidget()) {
    clear_has_content();
      ::screen::TemperatureWidget* temp = content_.temperaturewidget_;
    content_.temperaturewidget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::screen::TemperatureWidget& ContentNode::temperaturewidget() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.temperatureWidget)
  return has_temperaturewidget()
      ? *content_.temperaturewidget_
      : *reinterpret_cast< ::screen::TemperatureWidget*>(&::screen::_TemperatureWidget_default_instance_);
}
inline ::screen::TemperatureWidget* ContentNode::mutable_temperaturewidget() {
  if (!has_temperaturewidget()) {
    clear_content();
    set_has_temperaturewidget();
    content_.temperaturewidget_ = CreateMaybeMessage< ::screen::TemperatureWidget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:screen.ContentNode.temperatureWidget)
  return content_.temperaturewidget_;
}

// .screen.SetpointSensorPairWidget setpointSensorPairWidget = 5;
inline bool ContentNode::has_setpointsensorpairwidget() const {
  return content_case() == kSetpointSensorPairWidget;
}
inline void ContentNode::set_has_setpointsensorpairwidget() {
  _oneof_case_[0] = kSetpointSensorPairWidget;
}
inline void ContentNode::clear_setpointsensorpairwidget() {
  if (has_setpointsensorpairwidget()) {
    delete content_.setpointsensorpairwidget_;
    clear_has_content();
  }
}
inline const ::screen::SetpointSensorPairWidget& ContentNode::_internal_setpointsensorpairwidget() const {
  return *content_.setpointsensorpairwidget_;
}
inline ::screen::SetpointSensorPairWidget* ContentNode::release_setpointsensorpairwidget() {
  // @@protoc_insertion_point(field_release:screen.ContentNode.setpointSensorPairWidget)
  if (has_setpointsensorpairwidget()) {
    clear_has_content();
      ::screen::SetpointSensorPairWidget* temp = content_.setpointsensorpairwidget_;
    content_.setpointsensorpairwidget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::screen::SetpointSensorPairWidget& ContentNode::setpointsensorpairwidget() const {
  // @@protoc_insertion_point(field_get:screen.ContentNode.setpointSensorPairWidget)
  return has_setpointsensorpairwidget()
      ? *content_.setpointsensorpairwidget_
      : *reinterpret_cast< ::screen::SetpointSensorPairWidget*>(&::screen::_SetpointSensorPairWidget_default_instance_);
}
inline ::screen::SetpointSensorPairWidget* ContentNode::mutable_setpointsensorpairwidget() {
  if (!has_setpointsensorpairwidget()) {
    clear_content();
    set_has_setpointsensorpairwidget();
    content_.setpointsensorpairwidget_ = CreateMaybeMessage< ::screen::SetpointSensorPairWidget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:screen.ContentNode.setpointSensorPairWidget)
  return content_.setpointsensorpairwidget_;
}

inline bool ContentNode::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ContentNode::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ContentNode::ContentCase ContentNode::content_case() const {
  return ContentNode::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Config

// repeated .screen.LayoutNode layoutNodes = 1;
inline int Config::layoutnodes_size() const {
  return layoutnodes_.size();
}
inline void Config::clear_layoutnodes() {
  layoutnodes_.Clear();
}
inline ::screen::LayoutNode* Config::mutable_layoutnodes(int index) {
  // @@protoc_insertion_point(field_mutable:screen.Config.layoutNodes)
  return layoutnodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::screen::LayoutNode >*
Config::mutable_layoutnodes() {
  // @@protoc_insertion_point(field_mutable_list:screen.Config.layoutNodes)
  return &layoutnodes_;
}
inline const ::screen::LayoutNode& Config::layoutnodes(int index) const {
  // @@protoc_insertion_point(field_get:screen.Config.layoutNodes)
  return layoutnodes_.Get(index);
}
inline ::screen::LayoutNode* Config::add_layoutnodes() {
  // @@protoc_insertion_point(field_add:screen.Config.layoutNodes)
  return layoutnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::screen::LayoutNode >&
Config::layoutnodes() const {
  // @@protoc_insertion_point(field_list:screen.Config.layoutNodes)
  return layoutnodes_;
}

// repeated .screen.ContentNode contentNodes = 2;
inline int Config::contentnodes_size() const {
  return contentnodes_.size();
}
inline void Config::clear_contentnodes() {
  contentnodes_.Clear();
}
inline ::screen::ContentNode* Config::mutable_contentnodes(int index) {
  // @@protoc_insertion_point(field_mutable:screen.Config.contentNodes)
  return contentnodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::screen::ContentNode >*
Config::mutable_contentnodes() {
  // @@protoc_insertion_point(field_mutable_list:screen.Config.contentNodes)
  return &contentnodes_;
}
inline const ::screen::ContentNode& Config::contentnodes(int index) const {
  // @@protoc_insertion_point(field_get:screen.Config.contentNodes)
  return contentnodes_.Get(index);
}
inline ::screen::ContentNode* Config::add_contentnodes() {
  // @@protoc_insertion_point(field_add:screen.Config.contentNodes)
  return contentnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::screen::ContentNode >&
Config::contentnodes() const {
  // @@protoc_insertion_point(field_list:screen.Config.contentNodes)
  return contentnodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace screen

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::screen::LayoutNode_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::screen::LayoutNode_Type>() {
  return ::screen::LayoutNode_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Screen_5ftest_2eproto
