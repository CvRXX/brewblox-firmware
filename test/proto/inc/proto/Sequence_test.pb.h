// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sequence_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sequence_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sequence_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sequence_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sequence_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Sequence_5ftest_2eproto;
namespace blox_test {
namespace Sequence {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class EnableDisable;
struct EnableDisableDefaultTypeInternal;
extern EnableDisableDefaultTypeInternal _EnableDisable_default_instance_;
class Instruction;
struct InstructionDefaultTypeInternal;
extern InstructionDefaultTypeInternal _Instruction_default_instance_;
class Restart;
struct RestartDefaultTypeInternal;
extern RestartDefaultTypeInternal _Restart_default_instance_;
class SetDigital;
struct SetDigitalDefaultTypeInternal;
extern SetDigitalDefaultTypeInternal _SetDigital_default_instance_;
class SetPwm;
struct SetPwmDefaultTypeInternal;
extern SetPwmDefaultTypeInternal _SetPwm_default_instance_;
class SetSetpoint;
struct SetSetpointDefaultTypeInternal;
extern SetSetpointDefaultTypeInternal _SetSetpoint_default_instance_;
class TargetProfile;
struct TargetProfileDefaultTypeInternal;
extern TargetProfileDefaultTypeInternal _TargetProfile_default_instance_;
class TargetSequence;
struct TargetSequenceDefaultTypeInternal;
extern TargetSequenceDefaultTypeInternal _TargetSequence_default_instance_;
class WaitDigital;
struct WaitDigitalDefaultTypeInternal;
extern WaitDigitalDefaultTypeInternal _WaitDigital_default_instance_;
class WaitDuration;
struct WaitDurationDefaultTypeInternal;
extern WaitDurationDefaultTypeInternal _WaitDuration_default_instance_;
class WaitSetpoint;
struct WaitSetpointDefaultTypeInternal;
extern WaitSetpointDefaultTypeInternal _WaitSetpoint_default_instance_;
class WaitTemperatureBoundary;
struct WaitTemperatureBoundaryDefaultTypeInternal;
extern WaitTemperatureBoundaryDefaultTypeInternal _WaitTemperatureBoundary_default_instance_;
class WaitTemperatureRange;
struct WaitTemperatureRangeDefaultTypeInternal;
extern WaitTemperatureRangeDefaultTypeInternal _WaitTemperatureRange_default_instance_;
class WaitUntil;
struct WaitUntilDefaultTypeInternal;
extern WaitUntilDefaultTypeInternal _WaitUntil_default_instance_;
}  // namespace Sequence
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::Sequence::Block* Arena::CreateMaybeMessage<::blox_test::Sequence::Block>(Arena*);
template<> ::blox_test::Sequence::EnableDisable* Arena::CreateMaybeMessage<::blox_test::Sequence::EnableDisable>(Arena*);
template<> ::blox_test::Sequence::Instruction* Arena::CreateMaybeMessage<::blox_test::Sequence::Instruction>(Arena*);
template<> ::blox_test::Sequence::Restart* Arena::CreateMaybeMessage<::blox_test::Sequence::Restart>(Arena*);
template<> ::blox_test::Sequence::SetDigital* Arena::CreateMaybeMessage<::blox_test::Sequence::SetDigital>(Arena*);
template<> ::blox_test::Sequence::SetPwm* Arena::CreateMaybeMessage<::blox_test::Sequence::SetPwm>(Arena*);
template<> ::blox_test::Sequence::SetSetpoint* Arena::CreateMaybeMessage<::blox_test::Sequence::SetSetpoint>(Arena*);
template<> ::blox_test::Sequence::TargetProfile* Arena::CreateMaybeMessage<::blox_test::Sequence::TargetProfile>(Arena*);
template<> ::blox_test::Sequence::TargetSequence* Arena::CreateMaybeMessage<::blox_test::Sequence::TargetSequence>(Arena*);
template<> ::blox_test::Sequence::WaitDigital* Arena::CreateMaybeMessage<::blox_test::Sequence::WaitDigital>(Arena*);
template<> ::blox_test::Sequence::WaitDuration* Arena::CreateMaybeMessage<::blox_test::Sequence::WaitDuration>(Arena*);
template<> ::blox_test::Sequence::WaitSetpoint* Arena::CreateMaybeMessage<::blox_test::Sequence::WaitSetpoint>(Arena*);
template<> ::blox_test::Sequence::WaitTemperatureBoundary* Arena::CreateMaybeMessage<::blox_test::Sequence::WaitTemperatureBoundary>(Arena*);
template<> ::blox_test::Sequence::WaitTemperatureRange* Arena::CreateMaybeMessage<::blox_test::Sequence::WaitTemperatureRange>(Arena*);
template<> ::blox_test::Sequence::WaitUntil* Arena::CreateMaybeMessage<::blox_test::Sequence::WaitUntil>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace Sequence {

enum SequenceStatus : int {
  UNKNOWN = 0,
  DISABLED = 1,
  PAUSED = 2,
  NEXT = 3,
  WAIT = 4,
  END = 5,
  RESTART = 6,
  ERROR = 7,
  SequenceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SequenceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SequenceStatus_IsValid(int value);
constexpr SequenceStatus SequenceStatus_MIN = UNKNOWN;
constexpr SequenceStatus SequenceStatus_MAX = ERROR;
constexpr int SequenceStatus_ARRAYSIZE = SequenceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceStatus_descriptor();
template<typename T>
inline const std::string& SequenceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SequenceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SequenceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SequenceStatus_descriptor(), enum_t_value);
}
inline bool SequenceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SequenceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SequenceStatus>(
    SequenceStatus_descriptor(), name, value);
}
enum SequenceError : int {
  NONE = 0,
  INVALID_ARGUMENT = 1,
  INVALID_TARGET = 2,
  INACTIVE_TARGET = 3,
  DISABLED_TARGET = 4,
  SYSTEM_TIME_NOT_AVAILABLE = 5,
  SequenceError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SequenceError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SequenceError_IsValid(int value);
constexpr SequenceError SequenceError_MIN = NONE;
constexpr SequenceError SequenceError_MAX = SYSTEM_TIME_NOT_AVAILABLE;
constexpr int SequenceError_ARRAYSIZE = SequenceError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceError_descriptor();
template<typename T>
inline const std::string& SequenceError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SequenceError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SequenceError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SequenceError_descriptor(), enum_t_value);
}
inline bool SequenceError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SequenceError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SequenceError>(
    SequenceError_descriptor(), name, value);
}
// ===================================================================

class Restart final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:blox_test.Sequence.Restart) */ {
 public:
  inline Restart() : Restart(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Restart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Restart(const Restart& from);
  Restart(Restart&& from) noexcept
    : Restart() {
    *this = ::std::move(from);
  }

  inline Restart& operator=(const Restart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Restart& operator=(Restart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Restart& default_instance() {
    return *internal_default_instance();
  }
  static inline const Restart* internal_default_instance() {
    return reinterpret_cast<const Restart*>(
               &_Restart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Restart& a, Restart& b) {
    a.Swap(&b);
  }
  inline void Swap(Restart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Restart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Restart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Restart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Restart& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Restart& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.Restart";
  }
  protected:
  explicit Restart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.Restart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class EnableDisable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.EnableDisable) */ {
 public:
  inline EnableDisable() : EnableDisable(nullptr) {}
  ~EnableDisable() override;
  explicit PROTOBUF_CONSTEXPR EnableDisable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableDisable(const EnableDisable& from);
  EnableDisable(EnableDisable&& from) noexcept
    : EnableDisable() {
    *this = ::std::move(from);
  }

  inline EnableDisable& operator=(const EnableDisable& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableDisable& operator=(EnableDisable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableDisable& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableDisable* internal_default_instance() {
    return reinterpret_cast<const EnableDisable*>(
               &_EnableDisable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnableDisable& a, EnableDisable& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableDisable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableDisable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableDisable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableDisable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableDisable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnableDisable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableDisable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.EnableDisable";
  }
  protected:
  explicit EnableDisable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.EnableDisable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class WaitDuration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.WaitDuration) */ {
 public:
  inline WaitDuration() : WaitDuration(nullptr) {}
  ~WaitDuration() override;
  explicit PROTOBUF_CONSTEXPR WaitDuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitDuration(const WaitDuration& from);
  WaitDuration(WaitDuration&& from) noexcept
    : WaitDuration() {
    *this = ::std::move(from);
  }

  inline WaitDuration& operator=(const WaitDuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitDuration& operator=(WaitDuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitDuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitDuration* internal_default_instance() {
    return reinterpret_cast<const WaitDuration*>(
               &_WaitDuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WaitDuration& a, WaitDuration& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitDuration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitDuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitDuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitDuration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitDuration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitDuration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitDuration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.WaitDuration";
  }
  protected:
  explicit WaitDuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
  };
  // uint32 duration = 1 [(.nanopb) = {
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.WaitDuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class WaitUntil final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.WaitUntil) */ {
 public:
  inline WaitUntil() : WaitUntil(nullptr) {}
  ~WaitUntil() override;
  explicit PROTOBUF_CONSTEXPR WaitUntil(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitUntil(const WaitUntil& from);
  WaitUntil(WaitUntil&& from) noexcept
    : WaitUntil() {
    *this = ::std::move(from);
  }

  inline WaitUntil& operator=(const WaitUntil& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitUntil& operator=(WaitUntil&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitUntil& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitUntil* internal_default_instance() {
    return reinterpret_cast<const WaitUntil*>(
               &_WaitUntil_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WaitUntil& a, WaitUntil& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitUntil* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitUntil* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitUntil* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitUntil>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitUntil& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitUntil& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitUntil* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.WaitUntil";
  }
  protected:
  explicit WaitUntil(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // uint32 time = 1 [(.nanopb) = {
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.WaitUntil)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class WaitTemperatureRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.WaitTemperatureRange) */ {
 public:
  inline WaitTemperatureRange() : WaitTemperatureRange(nullptr) {}
  ~WaitTemperatureRange() override;
  explicit PROTOBUF_CONSTEXPR WaitTemperatureRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitTemperatureRange(const WaitTemperatureRange& from);
  WaitTemperatureRange(WaitTemperatureRange&& from) noexcept
    : WaitTemperatureRange() {
    *this = ::std::move(from);
  }

  inline WaitTemperatureRange& operator=(const WaitTemperatureRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitTemperatureRange& operator=(WaitTemperatureRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitTemperatureRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitTemperatureRange* internal_default_instance() {
    return reinterpret_cast<const WaitTemperatureRange*>(
               &_WaitTemperatureRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WaitTemperatureRange& a, WaitTemperatureRange& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitTemperatureRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitTemperatureRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitTemperatureRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitTemperatureRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitTemperatureRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitTemperatureRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitTemperatureRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.WaitTemperatureRange";
  }
  protected:
  explicit WaitTemperatureRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kLowerFieldNumber = 2,
    kUpperFieldNumber = 3,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // sint32 lower = 2 [(.nanopb) = {
  void clear_lower();
  int32_t lower() const;
  void set_lower(int32_t value);
  private:
  int32_t _internal_lower() const;
  void _internal_set_lower(int32_t value);
  public:

  // sint32 upper = 3 [(.nanopb) = {
  void clear_upper();
  int32_t upper() const;
  void set_upper(int32_t value);
  private:
  int32_t _internal_upper() const;
  void _internal_set_upper(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.WaitTemperatureRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  int32_t lower_;
  int32_t upper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class WaitTemperatureBoundary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.WaitTemperatureBoundary) */ {
 public:
  inline WaitTemperatureBoundary() : WaitTemperatureBoundary(nullptr) {}
  ~WaitTemperatureBoundary() override;
  explicit PROTOBUF_CONSTEXPR WaitTemperatureBoundary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitTemperatureBoundary(const WaitTemperatureBoundary& from);
  WaitTemperatureBoundary(WaitTemperatureBoundary&& from) noexcept
    : WaitTemperatureBoundary() {
    *this = ::std::move(from);
  }

  inline WaitTemperatureBoundary& operator=(const WaitTemperatureBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitTemperatureBoundary& operator=(WaitTemperatureBoundary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitTemperatureBoundary& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitTemperatureBoundary* internal_default_instance() {
    return reinterpret_cast<const WaitTemperatureBoundary*>(
               &_WaitTemperatureBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WaitTemperatureBoundary& a, WaitTemperatureBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitTemperatureBoundary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitTemperatureBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitTemperatureBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitTemperatureBoundary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitTemperatureBoundary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitTemperatureBoundary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitTemperatureBoundary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.WaitTemperatureBoundary";
  }
  protected:
  explicit WaitTemperatureBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // sint32 value = 2 [(.nanopb) = {
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.WaitTemperatureBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class SetSetpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.SetSetpoint) */ {
 public:
  inline SetSetpoint() : SetSetpoint(nullptr) {}
  ~SetSetpoint() override;
  explicit PROTOBUF_CONSTEXPR SetSetpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSetpoint(const SetSetpoint& from);
  SetSetpoint(SetSetpoint&& from) noexcept
    : SetSetpoint() {
    *this = ::std::move(from);
  }

  inline SetSetpoint& operator=(const SetSetpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSetpoint& operator=(SetSetpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSetpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSetpoint* internal_default_instance() {
    return reinterpret_cast<const SetSetpoint*>(
               &_SetSetpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetSetpoint& a, SetSetpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSetpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSetpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSetpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSetpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSetpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetSetpoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSetpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.SetSetpoint";
  }
  protected:
  explicit SetSetpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kSettingFieldNumber = 2,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // sint32 setting = 2 [(.nanopb) = {
  void clear_setting();
  int32_t setting() const;
  void set_setting(int32_t value);
  private:
  int32_t _internal_setting() const;
  void _internal_set_setting(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.SetSetpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  int32_t setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class WaitSetpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.WaitSetpoint) */ {
 public:
  inline WaitSetpoint() : WaitSetpoint(nullptr) {}
  ~WaitSetpoint() override;
  explicit PROTOBUF_CONSTEXPR WaitSetpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitSetpoint(const WaitSetpoint& from);
  WaitSetpoint(WaitSetpoint&& from) noexcept
    : WaitSetpoint() {
    *this = ::std::move(from);
  }

  inline WaitSetpoint& operator=(const WaitSetpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitSetpoint& operator=(WaitSetpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitSetpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitSetpoint* internal_default_instance() {
    return reinterpret_cast<const WaitSetpoint*>(
               &_WaitSetpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WaitSetpoint& a, WaitSetpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitSetpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitSetpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitSetpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitSetpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitSetpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitSetpoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitSetpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.WaitSetpoint";
  }
  protected:
  explicit WaitSetpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kPrecisionFieldNumber = 2,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // sint32 precision = 2 [(.nanopb) = {
  void clear_precision();
  int32_t precision() const;
  void set_precision(int32_t value);
  private:
  int32_t _internal_precision() const;
  void _internal_set_precision(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.WaitSetpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  int32_t precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class SetDigital final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.SetDigital) */ {
 public:
  inline SetDigital() : SetDigital(nullptr) {}
  ~SetDigital() override;
  explicit PROTOBUF_CONSTEXPR SetDigital(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDigital(const SetDigital& from);
  SetDigital(SetDigital&& from) noexcept
    : SetDigital() {
    *this = ::std::move(from);
  }

  inline SetDigital& operator=(const SetDigital& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDigital& operator=(SetDigital&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDigital& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDigital* internal_default_instance() {
    return reinterpret_cast<const SetDigital*>(
               &_SetDigital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetDigital& a, SetDigital& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDigital* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDigital* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDigital* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDigital>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetDigital& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetDigital& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDigital* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.SetDigital";
  }
  protected:
  explicit SetDigital(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kSettingFieldNumber = 2,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // .blox_test.IoArray.DigitalState setting = 2;
  void clear_setting();
  ::blox_test::IoArray::DigitalState setting() const;
  void set_setting(::blox_test::IoArray::DigitalState value);
  private:
  ::blox_test::IoArray::DigitalState _internal_setting() const;
  void _internal_set_setting(::blox_test::IoArray::DigitalState value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.SetDigital)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  int setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class WaitDigital final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.WaitDigital) */ {
 public:
  inline WaitDigital() : WaitDigital(nullptr) {}
  ~WaitDigital() override;
  explicit PROTOBUF_CONSTEXPR WaitDigital(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitDigital(const WaitDigital& from);
  WaitDigital(WaitDigital&& from) noexcept
    : WaitDigital() {
    *this = ::std::move(from);
  }

  inline WaitDigital& operator=(const WaitDigital& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitDigital& operator=(WaitDigital&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitDigital& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitDigital* internal_default_instance() {
    return reinterpret_cast<const WaitDigital*>(
               &_WaitDigital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WaitDigital& a, WaitDigital& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitDigital* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitDigital* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitDigital* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitDigital>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitDigital& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitDigital& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitDigital* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.WaitDigital";
  }
  protected:
  explicit WaitDigital(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.WaitDigital)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class SetPwm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.SetPwm) */ {
 public:
  inline SetPwm() : SetPwm(nullptr) {}
  ~SetPwm() override;
  explicit PROTOBUF_CONSTEXPR SetPwm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPwm(const SetPwm& from);
  SetPwm(SetPwm&& from) noexcept
    : SetPwm() {
    *this = ::std::move(from);
  }

  inline SetPwm& operator=(const SetPwm& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPwm& operator=(SetPwm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPwm& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPwm* internal_default_instance() {
    return reinterpret_cast<const SetPwm*>(
               &_SetPwm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetPwm& a, SetPwm& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPwm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPwm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPwm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPwm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPwm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPwm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPwm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.SetPwm";
  }
  protected:
  explicit SetPwm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kSettingFieldNumber = 2,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // sint32 setting = 2 [(.nanopb) = {
  void clear_setting();
  int32_t setting() const;
  void set_setting(int32_t value);
  private:
  int32_t _internal_setting() const;
  void _internal_set_setting(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.SetPwm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  int32_t setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class TargetProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.TargetProfile) */ {
 public:
  inline TargetProfile() : TargetProfile(nullptr) {}
  ~TargetProfile() override;
  explicit PROTOBUF_CONSTEXPR TargetProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetProfile(const TargetProfile& from);
  TargetProfile(TargetProfile&& from) noexcept
    : TargetProfile() {
    *this = ::std::move(from);
  }

  inline TargetProfile& operator=(const TargetProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetProfile& operator=(TargetProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetProfile* internal_default_instance() {
    return reinterpret_cast<const TargetProfile*>(
               &_TargetProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TargetProfile& a, TargetProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TargetProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.TargetProfile";
  }
  protected:
  explicit TargetProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.TargetProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class TargetSequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.TargetSequence) */ {
 public:
  inline TargetSequence() : TargetSequence(nullptr) {}
  ~TargetSequence() override;
  explicit PROTOBUF_CONSTEXPR TargetSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetSequence(const TargetSequence& from);
  TargetSequence(TargetSequence&& from) noexcept
    : TargetSequence() {
    *this = ::std::move(from);
  }

  inline TargetSequence& operator=(const TargetSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetSequence& operator=(TargetSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetSequence* internal_default_instance() {
    return reinterpret_cast<const TargetSequence*>(
               &_TargetSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TargetSequence& a, TargetSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetSequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TargetSequence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetSequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.TargetSequence";
  }
  protected:
  explicit TargetSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // uint32 target = 1 [(.nanopb) = {
  void clear_target();
  uint32_t target() const;
  void set_target(uint32_t value);
  private:
  uint32_t _internal_target() const;
  void _internal_set_target(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.TargetSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Instruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.Instruction) */ {
 public:
  inline Instruction() : Instruction(nullptr) {}
  ~Instruction() override;
  explicit PROTOBUF_CONSTEXPR Instruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instruction(const Instruction& from);
  Instruction(Instruction&& from) noexcept
    : Instruction() {
    *this = ::std::move(from);
  }

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instruction& operator=(Instruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instruction& default_instance() {
    return *internal_default_instance();
  }
  enum InstructionOneofCase {
    kRESTART = 1,
    kENABLE = 2,
    kDISABLE = 3,
    kWAITDURATION = 4,
    kWAITUNTIL = 5,
    kWAITTEMPBETWEEN = 6,
    kWAITTEMPNOTBETWEEN = 7,
    kWAITTEMPUNEXPECTED = 8,
    kWAITTEMPABOVE = 9,
    kWAITTEMPBELOW = 10,
    kSETSETPOINT = 11,
    kWAITSETPOINT = 12,
    kSETDIGITAL = 13,
    kWAITDIGITAL = 14,
    kSETPWM = 15,
    kSTARTPROFILE = 16,
    kWAITPROFILE = 17,
    kSTARTSEQUENCE = 18,
    kWAITSEQUENCE = 19,
    INSTRUCTION_ONEOF_NOT_SET = 0,
  };

  static inline const Instruction* internal_default_instance() {
    return reinterpret_cast<const Instruction*>(
               &_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Instruction& a, Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(Instruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Instruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Instruction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.Instruction";
  }
  protected:
  explicit Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRESTARTFieldNumber = 1,
    kENABLEFieldNumber = 2,
    kDISABLEFieldNumber = 3,
    kWAITDURATIONFieldNumber = 4,
    kWAITUNTILFieldNumber = 5,
    kWAITTEMPBETWEENFieldNumber = 6,
    kWAITTEMPNOTBETWEENFieldNumber = 7,
    kWAITTEMPUNEXPECTEDFieldNumber = 8,
    kWAITTEMPABOVEFieldNumber = 9,
    kWAITTEMPBELOWFieldNumber = 10,
    kSETSETPOINTFieldNumber = 11,
    kWAITSETPOINTFieldNumber = 12,
    kSETDIGITALFieldNumber = 13,
    kWAITDIGITALFieldNumber = 14,
    kSETPWMFieldNumber = 15,
    kSTARTPROFILEFieldNumber = 16,
    kWAITPROFILEFieldNumber = 17,
    kSTARTSEQUENCEFieldNumber = 18,
    kWAITSEQUENCEFieldNumber = 19,
  };
  // .blox_test.Sequence.Restart RESTART = 1;
  bool has_restart() const;
  private:
  bool _internal_has_restart() const;
  public:
  void clear_restart();
  const ::blox_test::Sequence::Restart& restart() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::Restart* release_restart();
  ::blox_test::Sequence::Restart* mutable_restart();
  void set_allocated_restart(::blox_test::Sequence::Restart* restart);
  private:
  const ::blox_test::Sequence::Restart& _internal_restart() const;
  ::blox_test::Sequence::Restart* _internal_mutable_restart();
  public:
  void unsafe_arena_set_allocated_restart(
      ::blox_test::Sequence::Restart* restart);
  ::blox_test::Sequence::Restart* unsafe_arena_release_restart();

  // .blox_test.Sequence.EnableDisable ENABLE = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::blox_test::Sequence::EnableDisable& enable() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::EnableDisable* release_enable();
  ::blox_test::Sequence::EnableDisable* mutable_enable();
  void set_allocated_enable(::blox_test::Sequence::EnableDisable* enable);
  private:
  const ::blox_test::Sequence::EnableDisable& _internal_enable() const;
  ::blox_test::Sequence::EnableDisable* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::blox_test::Sequence::EnableDisable* enable);
  ::blox_test::Sequence::EnableDisable* unsafe_arena_release_enable();

  // .blox_test.Sequence.EnableDisable DISABLE = 3;
  bool has_disable() const;
  private:
  bool _internal_has_disable() const;
  public:
  void clear_disable();
  const ::blox_test::Sequence::EnableDisable& disable() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::EnableDisable* release_disable();
  ::blox_test::Sequence::EnableDisable* mutable_disable();
  void set_allocated_disable(::blox_test::Sequence::EnableDisable* disable);
  private:
  const ::blox_test::Sequence::EnableDisable& _internal_disable() const;
  ::blox_test::Sequence::EnableDisable* _internal_mutable_disable();
  public:
  void unsafe_arena_set_allocated_disable(
      ::blox_test::Sequence::EnableDisable* disable);
  ::blox_test::Sequence::EnableDisable* unsafe_arena_release_disable();

  // .blox_test.Sequence.WaitDuration WAIT_DURATION = 4;
  bool has_wait_duration() const;
  private:
  bool _internal_has_wait_duration() const;
  public:
  void clear_wait_duration();
  const ::blox_test::Sequence::WaitDuration& wait_duration() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitDuration* release_wait_duration();
  ::blox_test::Sequence::WaitDuration* mutable_wait_duration();
  void set_allocated_wait_duration(::blox_test::Sequence::WaitDuration* wait_duration);
  private:
  const ::blox_test::Sequence::WaitDuration& _internal_wait_duration() const;
  ::blox_test::Sequence::WaitDuration* _internal_mutable_wait_duration();
  public:
  void unsafe_arena_set_allocated_wait_duration(
      ::blox_test::Sequence::WaitDuration* wait_duration);
  ::blox_test::Sequence::WaitDuration* unsafe_arena_release_wait_duration();

  // .blox_test.Sequence.WaitUntil WAIT_UNTIL = 5;
  bool has_wait_until() const;
  private:
  bool _internal_has_wait_until() const;
  public:
  void clear_wait_until();
  const ::blox_test::Sequence::WaitUntil& wait_until() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitUntil* release_wait_until();
  ::blox_test::Sequence::WaitUntil* mutable_wait_until();
  void set_allocated_wait_until(::blox_test::Sequence::WaitUntil* wait_until);
  private:
  const ::blox_test::Sequence::WaitUntil& _internal_wait_until() const;
  ::blox_test::Sequence::WaitUntil* _internal_mutable_wait_until();
  public:
  void unsafe_arena_set_allocated_wait_until(
      ::blox_test::Sequence::WaitUntil* wait_until);
  ::blox_test::Sequence::WaitUntil* unsafe_arena_release_wait_until();

  // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_BETWEEN = 6;
  bool has_wait_temp_between() const;
  private:
  bool _internal_has_wait_temp_between() const;
  public:
  void clear_wait_temp_between();
  const ::blox_test::Sequence::WaitTemperatureRange& wait_temp_between() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitTemperatureRange* release_wait_temp_between();
  ::blox_test::Sequence::WaitTemperatureRange* mutable_wait_temp_between();
  void set_allocated_wait_temp_between(::blox_test::Sequence::WaitTemperatureRange* wait_temp_between);
  private:
  const ::blox_test::Sequence::WaitTemperatureRange& _internal_wait_temp_between() const;
  ::blox_test::Sequence::WaitTemperatureRange* _internal_mutable_wait_temp_between();
  public:
  void unsafe_arena_set_allocated_wait_temp_between(
      ::blox_test::Sequence::WaitTemperatureRange* wait_temp_between);
  ::blox_test::Sequence::WaitTemperatureRange* unsafe_arena_release_wait_temp_between();

  // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_NOT_BETWEEN = 7;
  bool has_wait_temp_not_between() const;
  private:
  bool _internal_has_wait_temp_not_between() const;
  public:
  void clear_wait_temp_not_between();
  const ::blox_test::Sequence::WaitTemperatureRange& wait_temp_not_between() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitTemperatureRange* release_wait_temp_not_between();
  ::blox_test::Sequence::WaitTemperatureRange* mutable_wait_temp_not_between();
  void set_allocated_wait_temp_not_between(::blox_test::Sequence::WaitTemperatureRange* wait_temp_not_between);
  private:
  const ::blox_test::Sequence::WaitTemperatureRange& _internal_wait_temp_not_between() const;
  ::blox_test::Sequence::WaitTemperatureRange* _internal_mutable_wait_temp_not_between();
  public:
  void unsafe_arena_set_allocated_wait_temp_not_between(
      ::blox_test::Sequence::WaitTemperatureRange* wait_temp_not_between);
  ::blox_test::Sequence::WaitTemperatureRange* unsafe_arena_release_wait_temp_not_between();

  // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_UNEXPECTED = 8;
  bool has_wait_temp_unexpected() const;
  private:
  bool _internal_has_wait_temp_unexpected() const;
  public:
  void clear_wait_temp_unexpected();
  const ::blox_test::Sequence::WaitTemperatureRange& wait_temp_unexpected() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitTemperatureRange* release_wait_temp_unexpected();
  ::blox_test::Sequence::WaitTemperatureRange* mutable_wait_temp_unexpected();
  void set_allocated_wait_temp_unexpected(::blox_test::Sequence::WaitTemperatureRange* wait_temp_unexpected);
  private:
  const ::blox_test::Sequence::WaitTemperatureRange& _internal_wait_temp_unexpected() const;
  ::blox_test::Sequence::WaitTemperatureRange* _internal_mutable_wait_temp_unexpected();
  public:
  void unsafe_arena_set_allocated_wait_temp_unexpected(
      ::blox_test::Sequence::WaitTemperatureRange* wait_temp_unexpected);
  ::blox_test::Sequence::WaitTemperatureRange* unsafe_arena_release_wait_temp_unexpected();

  // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_ABOVE = 9;
  bool has_wait_temp_above() const;
  private:
  bool _internal_has_wait_temp_above() const;
  public:
  void clear_wait_temp_above();
  const ::blox_test::Sequence::WaitTemperatureBoundary& wait_temp_above() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitTemperatureBoundary* release_wait_temp_above();
  ::blox_test::Sequence::WaitTemperatureBoundary* mutable_wait_temp_above();
  void set_allocated_wait_temp_above(::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_above);
  private:
  const ::blox_test::Sequence::WaitTemperatureBoundary& _internal_wait_temp_above() const;
  ::blox_test::Sequence::WaitTemperatureBoundary* _internal_mutable_wait_temp_above();
  public:
  void unsafe_arena_set_allocated_wait_temp_above(
      ::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_above);
  ::blox_test::Sequence::WaitTemperatureBoundary* unsafe_arena_release_wait_temp_above();

  // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_BELOW = 10;
  bool has_wait_temp_below() const;
  private:
  bool _internal_has_wait_temp_below() const;
  public:
  void clear_wait_temp_below();
  const ::blox_test::Sequence::WaitTemperatureBoundary& wait_temp_below() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitTemperatureBoundary* release_wait_temp_below();
  ::blox_test::Sequence::WaitTemperatureBoundary* mutable_wait_temp_below();
  void set_allocated_wait_temp_below(::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_below);
  private:
  const ::blox_test::Sequence::WaitTemperatureBoundary& _internal_wait_temp_below() const;
  ::blox_test::Sequence::WaitTemperatureBoundary* _internal_mutable_wait_temp_below();
  public:
  void unsafe_arena_set_allocated_wait_temp_below(
      ::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_below);
  ::blox_test::Sequence::WaitTemperatureBoundary* unsafe_arena_release_wait_temp_below();

  // .blox_test.Sequence.SetSetpoint SET_SETPOINT = 11;
  bool has_set_setpoint() const;
  private:
  bool _internal_has_set_setpoint() const;
  public:
  void clear_set_setpoint();
  const ::blox_test::Sequence::SetSetpoint& set_setpoint() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::SetSetpoint* release_set_setpoint();
  ::blox_test::Sequence::SetSetpoint* mutable_set_setpoint();
  void set_allocated_set_setpoint(::blox_test::Sequence::SetSetpoint* set_setpoint);
  private:
  const ::blox_test::Sequence::SetSetpoint& _internal_set_setpoint() const;
  ::blox_test::Sequence::SetSetpoint* _internal_mutable_set_setpoint();
  public:
  void unsafe_arena_set_allocated_set_setpoint(
      ::blox_test::Sequence::SetSetpoint* set_setpoint);
  ::blox_test::Sequence::SetSetpoint* unsafe_arena_release_set_setpoint();

  // .blox_test.Sequence.WaitSetpoint WAIT_SETPOINT = 12;
  bool has_wait_setpoint() const;
  private:
  bool _internal_has_wait_setpoint() const;
  public:
  void clear_wait_setpoint();
  const ::blox_test::Sequence::WaitSetpoint& wait_setpoint() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitSetpoint* release_wait_setpoint();
  ::blox_test::Sequence::WaitSetpoint* mutable_wait_setpoint();
  void set_allocated_wait_setpoint(::blox_test::Sequence::WaitSetpoint* wait_setpoint);
  private:
  const ::blox_test::Sequence::WaitSetpoint& _internal_wait_setpoint() const;
  ::blox_test::Sequence::WaitSetpoint* _internal_mutable_wait_setpoint();
  public:
  void unsafe_arena_set_allocated_wait_setpoint(
      ::blox_test::Sequence::WaitSetpoint* wait_setpoint);
  ::blox_test::Sequence::WaitSetpoint* unsafe_arena_release_wait_setpoint();

  // .blox_test.Sequence.SetDigital SET_DIGITAL = 13;
  bool has_set_digital() const;
  private:
  bool _internal_has_set_digital() const;
  public:
  void clear_set_digital();
  const ::blox_test::Sequence::SetDigital& set_digital() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::SetDigital* release_set_digital();
  ::blox_test::Sequence::SetDigital* mutable_set_digital();
  void set_allocated_set_digital(::blox_test::Sequence::SetDigital* set_digital);
  private:
  const ::blox_test::Sequence::SetDigital& _internal_set_digital() const;
  ::blox_test::Sequence::SetDigital* _internal_mutable_set_digital();
  public:
  void unsafe_arena_set_allocated_set_digital(
      ::blox_test::Sequence::SetDigital* set_digital);
  ::blox_test::Sequence::SetDigital* unsafe_arena_release_set_digital();

  // .blox_test.Sequence.WaitDigital WAIT_DIGITAL = 14;
  bool has_wait_digital() const;
  private:
  bool _internal_has_wait_digital() const;
  public:
  void clear_wait_digital();
  const ::blox_test::Sequence::WaitDigital& wait_digital() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::WaitDigital* release_wait_digital();
  ::blox_test::Sequence::WaitDigital* mutable_wait_digital();
  void set_allocated_wait_digital(::blox_test::Sequence::WaitDigital* wait_digital);
  private:
  const ::blox_test::Sequence::WaitDigital& _internal_wait_digital() const;
  ::blox_test::Sequence::WaitDigital* _internal_mutable_wait_digital();
  public:
  void unsafe_arena_set_allocated_wait_digital(
      ::blox_test::Sequence::WaitDigital* wait_digital);
  ::blox_test::Sequence::WaitDigital* unsafe_arena_release_wait_digital();

  // .blox_test.Sequence.SetPwm SET_PWM = 15;
  bool has_set_pwm() const;
  private:
  bool _internal_has_set_pwm() const;
  public:
  void clear_set_pwm();
  const ::blox_test::Sequence::SetPwm& set_pwm() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::SetPwm* release_set_pwm();
  ::blox_test::Sequence::SetPwm* mutable_set_pwm();
  void set_allocated_set_pwm(::blox_test::Sequence::SetPwm* set_pwm);
  private:
  const ::blox_test::Sequence::SetPwm& _internal_set_pwm() const;
  ::blox_test::Sequence::SetPwm* _internal_mutable_set_pwm();
  public:
  void unsafe_arena_set_allocated_set_pwm(
      ::blox_test::Sequence::SetPwm* set_pwm);
  ::blox_test::Sequence::SetPwm* unsafe_arena_release_set_pwm();

  // .blox_test.Sequence.TargetProfile START_PROFILE = 16;
  bool has_start_profile() const;
  private:
  bool _internal_has_start_profile() const;
  public:
  void clear_start_profile();
  const ::blox_test::Sequence::TargetProfile& start_profile() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::TargetProfile* release_start_profile();
  ::blox_test::Sequence::TargetProfile* mutable_start_profile();
  void set_allocated_start_profile(::blox_test::Sequence::TargetProfile* start_profile);
  private:
  const ::blox_test::Sequence::TargetProfile& _internal_start_profile() const;
  ::blox_test::Sequence::TargetProfile* _internal_mutable_start_profile();
  public:
  void unsafe_arena_set_allocated_start_profile(
      ::blox_test::Sequence::TargetProfile* start_profile);
  ::blox_test::Sequence::TargetProfile* unsafe_arena_release_start_profile();

  // .blox_test.Sequence.TargetProfile WAIT_PROFILE = 17;
  bool has_wait_profile() const;
  private:
  bool _internal_has_wait_profile() const;
  public:
  void clear_wait_profile();
  const ::blox_test::Sequence::TargetProfile& wait_profile() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::TargetProfile* release_wait_profile();
  ::blox_test::Sequence::TargetProfile* mutable_wait_profile();
  void set_allocated_wait_profile(::blox_test::Sequence::TargetProfile* wait_profile);
  private:
  const ::blox_test::Sequence::TargetProfile& _internal_wait_profile() const;
  ::blox_test::Sequence::TargetProfile* _internal_mutable_wait_profile();
  public:
  void unsafe_arena_set_allocated_wait_profile(
      ::blox_test::Sequence::TargetProfile* wait_profile);
  ::blox_test::Sequence::TargetProfile* unsafe_arena_release_wait_profile();

  // .blox_test.Sequence.TargetSequence START_SEQUENCE = 18;
  bool has_start_sequence() const;
  private:
  bool _internal_has_start_sequence() const;
  public:
  void clear_start_sequence();
  const ::blox_test::Sequence::TargetSequence& start_sequence() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::TargetSequence* release_start_sequence();
  ::blox_test::Sequence::TargetSequence* mutable_start_sequence();
  void set_allocated_start_sequence(::blox_test::Sequence::TargetSequence* start_sequence);
  private:
  const ::blox_test::Sequence::TargetSequence& _internal_start_sequence() const;
  ::blox_test::Sequence::TargetSequence* _internal_mutable_start_sequence();
  public:
  void unsafe_arena_set_allocated_start_sequence(
      ::blox_test::Sequence::TargetSequence* start_sequence);
  ::blox_test::Sequence::TargetSequence* unsafe_arena_release_start_sequence();

  // .blox_test.Sequence.TargetSequence WAIT_SEQUENCE = 19;
  bool has_wait_sequence() const;
  private:
  bool _internal_has_wait_sequence() const;
  public:
  void clear_wait_sequence();
  const ::blox_test::Sequence::TargetSequence& wait_sequence() const;
  PROTOBUF_NODISCARD ::blox_test::Sequence::TargetSequence* release_wait_sequence();
  ::blox_test::Sequence::TargetSequence* mutable_wait_sequence();
  void set_allocated_wait_sequence(::blox_test::Sequence::TargetSequence* wait_sequence);
  private:
  const ::blox_test::Sequence::TargetSequence& _internal_wait_sequence() const;
  ::blox_test::Sequence::TargetSequence* _internal_mutable_wait_sequence();
  public:
  void unsafe_arena_set_allocated_wait_sequence(
      ::blox_test::Sequence::TargetSequence* wait_sequence);
  ::blox_test::Sequence::TargetSequence* unsafe_arena_release_wait_sequence();

  void clear_instruction_oneof();
  InstructionOneofCase instruction_oneof_case() const;
  // @@protoc_insertion_point(class_scope:blox_test.Sequence.Instruction)
 private:
  class _Internal;
  void set_has_restart();
  void set_has_enable();
  void set_has_disable();
  void set_has_wait_duration();
  void set_has_wait_until();
  void set_has_wait_temp_between();
  void set_has_wait_temp_not_between();
  void set_has_wait_temp_unexpected();
  void set_has_wait_temp_above();
  void set_has_wait_temp_below();
  void set_has_set_setpoint();
  void set_has_wait_setpoint();
  void set_has_set_digital();
  void set_has_wait_digital();
  void set_has_set_pwm();
  void set_has_start_profile();
  void set_has_wait_profile();
  void set_has_start_sequence();
  void set_has_wait_sequence();

  inline bool has_instruction_oneof() const;
  inline void clear_has_instruction_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InstructionOneofUnion {
    constexpr InstructionOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blox_test::Sequence::Restart* restart_;
    ::blox_test::Sequence::EnableDisable* enable_;
    ::blox_test::Sequence::EnableDisable* disable_;
    ::blox_test::Sequence::WaitDuration* wait_duration_;
    ::blox_test::Sequence::WaitUntil* wait_until_;
    ::blox_test::Sequence::WaitTemperatureRange* wait_temp_between_;
    ::blox_test::Sequence::WaitTemperatureRange* wait_temp_not_between_;
    ::blox_test::Sequence::WaitTemperatureRange* wait_temp_unexpected_;
    ::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_above_;
    ::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_below_;
    ::blox_test::Sequence::SetSetpoint* set_setpoint_;
    ::blox_test::Sequence::WaitSetpoint* wait_setpoint_;
    ::blox_test::Sequence::SetDigital* set_digital_;
    ::blox_test::Sequence::WaitDigital* wait_digital_;
    ::blox_test::Sequence::SetPwm* set_pwm_;
    ::blox_test::Sequence::TargetProfile* start_profile_;
    ::blox_test::Sequence::TargetProfile* wait_profile_;
    ::blox_test::Sequence::TargetSequence* start_sequence_;
    ::blox_test::Sequence::TargetSequence* wait_sequence_;
  } instruction_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Sequence.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Sequence.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionsFieldNumber = 2,
    kEnabledFieldNumber = 1,
    kOverrideStateFieldNumber = 3,
    kActiveInstructionFieldNumber = 4,
    kActiveInstructionStartedAtFieldNumber = 5,
    kDisabledAtFieldNumber = 6,
    kDisabledDurationFieldNumber = 7,
    kStatusFieldNumber = 8,
    kErrorFieldNumber = 9,
  };
  // repeated .blox_test.Sequence.Instruction instructions = 2;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;
  public:
  void clear_instructions();
  ::blox_test::Sequence::Instruction* mutable_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Sequence::Instruction >*
      mutable_instructions();
  private:
  const ::blox_test::Sequence::Instruction& _internal_instructions(int index) const;
  ::blox_test::Sequence::Instruction* _internal_add_instructions();
  public:
  const ::blox_test::Sequence::Instruction& instructions(int index) const;
  ::blox_test::Sequence::Instruction* add_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Sequence::Instruction >&
      instructions() const;

  // bool enabled = 1 [(.brewblox.field) = {
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool overrideState = 3;
  void clear_overridestate();
  bool overridestate() const;
  void set_overridestate(bool value);
  private:
  bool _internal_overridestate() const;
  void _internal_set_overridestate(bool value);
  public:

  // uint32 activeInstruction = 4 [(.nanopb) = {
  void clear_activeinstruction();
  uint32_t activeinstruction() const;
  void set_activeinstruction(uint32_t value);
  private:
  uint32_t _internal_activeinstruction() const;
  void _internal_set_activeinstruction(uint32_t value);
  public:

  // uint32 activeInstructionStartedAt = 5 [(.nanopb) = {
  void clear_activeinstructionstartedat();
  uint32_t activeinstructionstartedat() const;
  void set_activeinstructionstartedat(uint32_t value);
  private:
  uint32_t _internal_activeinstructionstartedat() const;
  void _internal_set_activeinstructionstartedat(uint32_t value);
  public:

  // uint32 disabledAt = 6 [(.nanopb) = {
  void clear_disabledat();
  uint32_t disabledat() const;
  void set_disabledat(uint32_t value);
  private:
  uint32_t _internal_disabledat() const;
  void _internal_set_disabledat(uint32_t value);
  public:

  // uint32 disabledDuration = 7 [(.nanopb) = {
  void clear_disabledduration();
  uint32_t disabledduration() const;
  void set_disabledduration(uint32_t value);
  private:
  uint32_t _internal_disabledduration() const;
  void _internal_set_disabledduration(uint32_t value);
  public:

  // .blox_test.Sequence.SequenceStatus status = 8 [(.brewblox.field) = {
  void clear_status();
  ::blox_test::Sequence::SequenceStatus status() const;
  void set_status(::blox_test::Sequence::SequenceStatus value);
  private:
  ::blox_test::Sequence::SequenceStatus _internal_status() const;
  void _internal_set_status(::blox_test::Sequence::SequenceStatus value);
  public:

  // .blox_test.Sequence.SequenceError error = 9 [(.brewblox.field) = {
  void clear_error();
  ::blox_test::Sequence::SequenceError error() const;
  void set_error(::blox_test::Sequence::SequenceError value);
  private:
  ::blox_test::Sequence::SequenceError _internal_error() const;
  void _internal_set_error(::blox_test::Sequence::SequenceError value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Sequence.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Sequence::Instruction > instructions_;
  bool enabled_;
  bool overridestate_;
  uint32_t activeinstruction_;
  uint32_t activeinstructionstartedat_;
  uint32_t disabledat_;
  uint32_t disabledduration_;
  int status_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sequence_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Restart

// -------------------------------------------------------------------

// EnableDisable

// uint32 target = 1 [(.nanopb) = {
inline void EnableDisable::clear_target() {
  target_ = 0u;
}
inline uint32_t EnableDisable::_internal_target() const {
  return target_;
}
inline uint32_t EnableDisable::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.EnableDisable.target)
  return _internal_target();
}
inline void EnableDisable::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void EnableDisable::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.EnableDisable.target)
}

// -------------------------------------------------------------------

// WaitDuration

// uint32 duration = 1 [(.nanopb) = {
inline void WaitDuration::clear_duration() {
  duration_ = 0u;
}
inline uint32_t WaitDuration::_internal_duration() const {
  return duration_;
}
inline uint32_t WaitDuration::duration() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitDuration.duration)
  return _internal_duration();
}
inline void WaitDuration::_internal_set_duration(uint32_t value) {
  
  duration_ = value;
}
inline void WaitDuration::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitDuration.duration)
}

// -------------------------------------------------------------------

// WaitUntil

// uint32 time = 1 [(.nanopb) = {
inline void WaitUntil::clear_time() {
  time_ = 0u;
}
inline uint32_t WaitUntil::_internal_time() const {
  return time_;
}
inline uint32_t WaitUntil::time() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitUntil.time)
  return _internal_time();
}
inline void WaitUntil::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void WaitUntil::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitUntil.time)
}

// -------------------------------------------------------------------

// WaitTemperatureRange

// uint32 target = 1 [(.nanopb) = {
inline void WaitTemperatureRange::clear_target() {
  target_ = 0u;
}
inline uint32_t WaitTemperatureRange::_internal_target() const {
  return target_;
}
inline uint32_t WaitTemperatureRange::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitTemperatureRange.target)
  return _internal_target();
}
inline void WaitTemperatureRange::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void WaitTemperatureRange::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitTemperatureRange.target)
}

// sint32 lower = 2 [(.nanopb) = {
inline void WaitTemperatureRange::clear_lower() {
  lower_ = 0;
}
inline int32_t WaitTemperatureRange::_internal_lower() const {
  return lower_;
}
inline int32_t WaitTemperatureRange::lower() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitTemperatureRange.lower)
  return _internal_lower();
}
inline void WaitTemperatureRange::_internal_set_lower(int32_t value) {
  
  lower_ = value;
}
inline void WaitTemperatureRange::set_lower(int32_t value) {
  _internal_set_lower(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitTemperatureRange.lower)
}

// sint32 upper = 3 [(.nanopb) = {
inline void WaitTemperatureRange::clear_upper() {
  upper_ = 0;
}
inline int32_t WaitTemperatureRange::_internal_upper() const {
  return upper_;
}
inline int32_t WaitTemperatureRange::upper() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitTemperatureRange.upper)
  return _internal_upper();
}
inline void WaitTemperatureRange::_internal_set_upper(int32_t value) {
  
  upper_ = value;
}
inline void WaitTemperatureRange::set_upper(int32_t value) {
  _internal_set_upper(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitTemperatureRange.upper)
}

// -------------------------------------------------------------------

// WaitTemperatureBoundary

// uint32 target = 1 [(.nanopb) = {
inline void WaitTemperatureBoundary::clear_target() {
  target_ = 0u;
}
inline uint32_t WaitTemperatureBoundary::_internal_target() const {
  return target_;
}
inline uint32_t WaitTemperatureBoundary::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitTemperatureBoundary.target)
  return _internal_target();
}
inline void WaitTemperatureBoundary::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void WaitTemperatureBoundary::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitTemperatureBoundary.target)
}

// sint32 value = 2 [(.nanopb) = {
inline void WaitTemperatureBoundary::clear_value() {
  value_ = 0;
}
inline int32_t WaitTemperatureBoundary::_internal_value() const {
  return value_;
}
inline int32_t WaitTemperatureBoundary::value() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitTemperatureBoundary.value)
  return _internal_value();
}
inline void WaitTemperatureBoundary::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void WaitTemperatureBoundary::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitTemperatureBoundary.value)
}

// -------------------------------------------------------------------

// SetSetpoint

// uint32 target = 1 [(.nanopb) = {
inline void SetSetpoint::clear_target() {
  target_ = 0u;
}
inline uint32_t SetSetpoint::_internal_target() const {
  return target_;
}
inline uint32_t SetSetpoint::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.SetSetpoint.target)
  return _internal_target();
}
inline void SetSetpoint::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void SetSetpoint::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.SetSetpoint.target)
}

// sint32 setting = 2 [(.nanopb) = {
inline void SetSetpoint::clear_setting() {
  setting_ = 0;
}
inline int32_t SetSetpoint::_internal_setting() const {
  return setting_;
}
inline int32_t SetSetpoint::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.SetSetpoint.setting)
  return _internal_setting();
}
inline void SetSetpoint::_internal_set_setting(int32_t value) {
  
  setting_ = value;
}
inline void SetSetpoint::set_setting(int32_t value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.SetSetpoint.setting)
}

// -------------------------------------------------------------------

// WaitSetpoint

// uint32 target = 1 [(.nanopb) = {
inline void WaitSetpoint::clear_target() {
  target_ = 0u;
}
inline uint32_t WaitSetpoint::_internal_target() const {
  return target_;
}
inline uint32_t WaitSetpoint::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitSetpoint.target)
  return _internal_target();
}
inline void WaitSetpoint::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void WaitSetpoint::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitSetpoint.target)
}

// sint32 precision = 2 [(.nanopb) = {
inline void WaitSetpoint::clear_precision() {
  precision_ = 0;
}
inline int32_t WaitSetpoint::_internal_precision() const {
  return precision_;
}
inline int32_t WaitSetpoint::precision() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitSetpoint.precision)
  return _internal_precision();
}
inline void WaitSetpoint::_internal_set_precision(int32_t value) {
  
  precision_ = value;
}
inline void WaitSetpoint::set_precision(int32_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitSetpoint.precision)
}

// -------------------------------------------------------------------

// SetDigital

// uint32 target = 1 [(.nanopb) = {
inline void SetDigital::clear_target() {
  target_ = 0u;
}
inline uint32_t SetDigital::_internal_target() const {
  return target_;
}
inline uint32_t SetDigital::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.SetDigital.target)
  return _internal_target();
}
inline void SetDigital::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void SetDigital::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.SetDigital.target)
}

// .blox_test.IoArray.DigitalState setting = 2;
inline void SetDigital::clear_setting() {
  setting_ = 0;
}
inline ::blox_test::IoArray::DigitalState SetDigital::_internal_setting() const {
  return static_cast< ::blox_test::IoArray::DigitalState >(setting_);
}
inline ::blox_test::IoArray::DigitalState SetDigital::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.SetDigital.setting)
  return _internal_setting();
}
inline void SetDigital::_internal_set_setting(::blox_test::IoArray::DigitalState value) {
  
  setting_ = value;
}
inline void SetDigital::set_setting(::blox_test::IoArray::DigitalState value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.SetDigital.setting)
}

// -------------------------------------------------------------------

// WaitDigital

// uint32 target = 1 [(.nanopb) = {
inline void WaitDigital::clear_target() {
  target_ = 0u;
}
inline uint32_t WaitDigital::_internal_target() const {
  return target_;
}
inline uint32_t WaitDigital::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.WaitDigital.target)
  return _internal_target();
}
inline void WaitDigital::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void WaitDigital::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.WaitDigital.target)
}

// -------------------------------------------------------------------

// SetPwm

// uint32 target = 1 [(.nanopb) = {
inline void SetPwm::clear_target() {
  target_ = 0u;
}
inline uint32_t SetPwm::_internal_target() const {
  return target_;
}
inline uint32_t SetPwm::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.SetPwm.target)
  return _internal_target();
}
inline void SetPwm::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void SetPwm::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.SetPwm.target)
}

// sint32 setting = 2 [(.nanopb) = {
inline void SetPwm::clear_setting() {
  setting_ = 0;
}
inline int32_t SetPwm::_internal_setting() const {
  return setting_;
}
inline int32_t SetPwm::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.SetPwm.setting)
  return _internal_setting();
}
inline void SetPwm::_internal_set_setting(int32_t value) {
  
  setting_ = value;
}
inline void SetPwm::set_setting(int32_t value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.SetPwm.setting)
}

// -------------------------------------------------------------------

// TargetProfile

// uint32 target = 1 [(.nanopb) = {
inline void TargetProfile::clear_target() {
  target_ = 0u;
}
inline uint32_t TargetProfile::_internal_target() const {
  return target_;
}
inline uint32_t TargetProfile::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.TargetProfile.target)
  return _internal_target();
}
inline void TargetProfile::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void TargetProfile::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.TargetProfile.target)
}

// -------------------------------------------------------------------

// TargetSequence

// uint32 target = 1 [(.nanopb) = {
inline void TargetSequence::clear_target() {
  target_ = 0u;
}
inline uint32_t TargetSequence::_internal_target() const {
  return target_;
}
inline uint32_t TargetSequence::target() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.TargetSequence.target)
  return _internal_target();
}
inline void TargetSequence::_internal_set_target(uint32_t value) {
  
  target_ = value;
}
inline void TargetSequence::set_target(uint32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.TargetSequence.target)
}

// -------------------------------------------------------------------

// Instruction

// .blox_test.Sequence.Restart RESTART = 1;
inline bool Instruction::_internal_has_restart() const {
  return instruction_oneof_case() == kRESTART;
}
inline bool Instruction::has_restart() const {
  return _internal_has_restart();
}
inline void Instruction::set_has_restart() {
  _oneof_case_[0] = kRESTART;
}
inline void Instruction::clear_restart() {
  if (_internal_has_restart()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.restart_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::Restart* Instruction::release_restart() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.RESTART)
  if (_internal_has_restart()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::Restart* temp = instruction_oneof_.restart_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.restart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::Restart& Instruction::_internal_restart() const {
  return _internal_has_restart()
      ? *instruction_oneof_.restart_
      : reinterpret_cast< ::blox_test::Sequence::Restart&>(::blox_test::Sequence::_Restart_default_instance_);
}
inline const ::blox_test::Sequence::Restart& Instruction::restart() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.RESTART)
  return _internal_restart();
}
inline ::blox_test::Sequence::Restart* Instruction::unsafe_arena_release_restart() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.RESTART)
  if (_internal_has_restart()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::Restart* temp = instruction_oneof_.restart_;
    instruction_oneof_.restart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_restart(::blox_test::Sequence::Restart* restart) {
  clear_instruction_oneof();
  if (restart) {
    set_has_restart();
    instruction_oneof_.restart_ = restart;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.RESTART)
}
inline ::blox_test::Sequence::Restart* Instruction::_internal_mutable_restart() {
  if (!_internal_has_restart()) {
    clear_instruction_oneof();
    set_has_restart();
    instruction_oneof_.restart_ = CreateMaybeMessage< ::blox_test::Sequence::Restart >(GetArenaForAllocation());
  }
  return instruction_oneof_.restart_;
}
inline ::blox_test::Sequence::Restart* Instruction::mutable_restart() {
  ::blox_test::Sequence::Restart* _msg = _internal_mutable_restart();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.RESTART)
  return _msg;
}

// .blox_test.Sequence.EnableDisable ENABLE = 2;
inline bool Instruction::_internal_has_enable() const {
  return instruction_oneof_case() == kENABLE;
}
inline bool Instruction::has_enable() const {
  return _internal_has_enable();
}
inline void Instruction::set_has_enable() {
  _oneof_case_[0] = kENABLE;
}
inline void Instruction::clear_enable() {
  if (_internal_has_enable()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.enable_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::EnableDisable* Instruction::release_enable() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.ENABLE)
  if (_internal_has_enable()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::EnableDisable* temp = instruction_oneof_.enable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::EnableDisable& Instruction::_internal_enable() const {
  return _internal_has_enable()
      ? *instruction_oneof_.enable_
      : reinterpret_cast< ::blox_test::Sequence::EnableDisable&>(::blox_test::Sequence::_EnableDisable_default_instance_);
}
inline const ::blox_test::Sequence::EnableDisable& Instruction::enable() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.ENABLE)
  return _internal_enable();
}
inline ::blox_test::Sequence::EnableDisable* Instruction::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.ENABLE)
  if (_internal_has_enable()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::EnableDisable* temp = instruction_oneof_.enable_;
    instruction_oneof_.enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_enable(::blox_test::Sequence::EnableDisable* enable) {
  clear_instruction_oneof();
  if (enable) {
    set_has_enable();
    instruction_oneof_.enable_ = enable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.ENABLE)
}
inline ::blox_test::Sequence::EnableDisable* Instruction::_internal_mutable_enable() {
  if (!_internal_has_enable()) {
    clear_instruction_oneof();
    set_has_enable();
    instruction_oneof_.enable_ = CreateMaybeMessage< ::blox_test::Sequence::EnableDisable >(GetArenaForAllocation());
  }
  return instruction_oneof_.enable_;
}
inline ::blox_test::Sequence::EnableDisable* Instruction::mutable_enable() {
  ::blox_test::Sequence::EnableDisable* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.ENABLE)
  return _msg;
}

// .blox_test.Sequence.EnableDisable DISABLE = 3;
inline bool Instruction::_internal_has_disable() const {
  return instruction_oneof_case() == kDISABLE;
}
inline bool Instruction::has_disable() const {
  return _internal_has_disable();
}
inline void Instruction::set_has_disable() {
  _oneof_case_[0] = kDISABLE;
}
inline void Instruction::clear_disable() {
  if (_internal_has_disable()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.disable_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::EnableDisable* Instruction::release_disable() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.DISABLE)
  if (_internal_has_disable()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::EnableDisable* temp = instruction_oneof_.disable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::EnableDisable& Instruction::_internal_disable() const {
  return _internal_has_disable()
      ? *instruction_oneof_.disable_
      : reinterpret_cast< ::blox_test::Sequence::EnableDisable&>(::blox_test::Sequence::_EnableDisable_default_instance_);
}
inline const ::blox_test::Sequence::EnableDisable& Instruction::disable() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.DISABLE)
  return _internal_disable();
}
inline ::blox_test::Sequence::EnableDisable* Instruction::unsafe_arena_release_disable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.DISABLE)
  if (_internal_has_disable()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::EnableDisable* temp = instruction_oneof_.disable_;
    instruction_oneof_.disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_disable(::blox_test::Sequence::EnableDisable* disable) {
  clear_instruction_oneof();
  if (disable) {
    set_has_disable();
    instruction_oneof_.disable_ = disable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.DISABLE)
}
inline ::blox_test::Sequence::EnableDisable* Instruction::_internal_mutable_disable() {
  if (!_internal_has_disable()) {
    clear_instruction_oneof();
    set_has_disable();
    instruction_oneof_.disable_ = CreateMaybeMessage< ::blox_test::Sequence::EnableDisable >(GetArenaForAllocation());
  }
  return instruction_oneof_.disable_;
}
inline ::blox_test::Sequence::EnableDisable* Instruction::mutable_disable() {
  ::blox_test::Sequence::EnableDisable* _msg = _internal_mutable_disable();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.DISABLE)
  return _msg;
}

// .blox_test.Sequence.WaitDuration WAIT_DURATION = 4;
inline bool Instruction::_internal_has_wait_duration() const {
  return instruction_oneof_case() == kWAITDURATION;
}
inline bool Instruction::has_wait_duration() const {
  return _internal_has_wait_duration();
}
inline void Instruction::set_has_wait_duration() {
  _oneof_case_[0] = kWAITDURATION;
}
inline void Instruction::clear_wait_duration() {
  if (_internal_has_wait_duration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_duration_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitDuration* Instruction::release_wait_duration() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_DURATION)
  if (_internal_has_wait_duration()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitDuration* temp = instruction_oneof_.wait_duration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitDuration& Instruction::_internal_wait_duration() const {
  return _internal_has_wait_duration()
      ? *instruction_oneof_.wait_duration_
      : reinterpret_cast< ::blox_test::Sequence::WaitDuration&>(::blox_test::Sequence::_WaitDuration_default_instance_);
}
inline const ::blox_test::Sequence::WaitDuration& Instruction::wait_duration() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_DURATION)
  return _internal_wait_duration();
}
inline ::blox_test::Sequence::WaitDuration* Instruction::unsafe_arena_release_wait_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_DURATION)
  if (_internal_has_wait_duration()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitDuration* temp = instruction_oneof_.wait_duration_;
    instruction_oneof_.wait_duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_duration(::blox_test::Sequence::WaitDuration* wait_duration) {
  clear_instruction_oneof();
  if (wait_duration) {
    set_has_wait_duration();
    instruction_oneof_.wait_duration_ = wait_duration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_DURATION)
}
inline ::blox_test::Sequence::WaitDuration* Instruction::_internal_mutable_wait_duration() {
  if (!_internal_has_wait_duration()) {
    clear_instruction_oneof();
    set_has_wait_duration();
    instruction_oneof_.wait_duration_ = CreateMaybeMessage< ::blox_test::Sequence::WaitDuration >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_duration_;
}
inline ::blox_test::Sequence::WaitDuration* Instruction::mutable_wait_duration() {
  ::blox_test::Sequence::WaitDuration* _msg = _internal_mutable_wait_duration();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_DURATION)
  return _msg;
}

// .blox_test.Sequence.WaitUntil WAIT_UNTIL = 5;
inline bool Instruction::_internal_has_wait_until() const {
  return instruction_oneof_case() == kWAITUNTIL;
}
inline bool Instruction::has_wait_until() const {
  return _internal_has_wait_until();
}
inline void Instruction::set_has_wait_until() {
  _oneof_case_[0] = kWAITUNTIL;
}
inline void Instruction::clear_wait_until() {
  if (_internal_has_wait_until()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_until_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitUntil* Instruction::release_wait_until() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_UNTIL)
  if (_internal_has_wait_until()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitUntil* temp = instruction_oneof_.wait_until_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_until_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitUntil& Instruction::_internal_wait_until() const {
  return _internal_has_wait_until()
      ? *instruction_oneof_.wait_until_
      : reinterpret_cast< ::blox_test::Sequence::WaitUntil&>(::blox_test::Sequence::_WaitUntil_default_instance_);
}
inline const ::blox_test::Sequence::WaitUntil& Instruction::wait_until() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_UNTIL)
  return _internal_wait_until();
}
inline ::blox_test::Sequence::WaitUntil* Instruction::unsafe_arena_release_wait_until() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_UNTIL)
  if (_internal_has_wait_until()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitUntil* temp = instruction_oneof_.wait_until_;
    instruction_oneof_.wait_until_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_until(::blox_test::Sequence::WaitUntil* wait_until) {
  clear_instruction_oneof();
  if (wait_until) {
    set_has_wait_until();
    instruction_oneof_.wait_until_ = wait_until;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_UNTIL)
}
inline ::blox_test::Sequence::WaitUntil* Instruction::_internal_mutable_wait_until() {
  if (!_internal_has_wait_until()) {
    clear_instruction_oneof();
    set_has_wait_until();
    instruction_oneof_.wait_until_ = CreateMaybeMessage< ::blox_test::Sequence::WaitUntil >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_until_;
}
inline ::blox_test::Sequence::WaitUntil* Instruction::mutable_wait_until() {
  ::blox_test::Sequence::WaitUntil* _msg = _internal_mutable_wait_until();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_UNTIL)
  return _msg;
}

// .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_BETWEEN = 6;
inline bool Instruction::_internal_has_wait_temp_between() const {
  return instruction_oneof_case() == kWAITTEMPBETWEEN;
}
inline bool Instruction::has_wait_temp_between() const {
  return _internal_has_wait_temp_between();
}
inline void Instruction::set_has_wait_temp_between() {
  _oneof_case_[0] = kWAITTEMPBETWEEN;
}
inline void Instruction::clear_wait_temp_between() {
  if (_internal_has_wait_temp_between()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_temp_between_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::release_wait_temp_between() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_TEMP_BETWEEN)
  if (_internal_has_wait_temp_between()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureRange* temp = instruction_oneof_.wait_temp_between_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_temp_between_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitTemperatureRange& Instruction::_internal_wait_temp_between() const {
  return _internal_has_wait_temp_between()
      ? *instruction_oneof_.wait_temp_between_
      : reinterpret_cast< ::blox_test::Sequence::WaitTemperatureRange&>(::blox_test::Sequence::_WaitTemperatureRange_default_instance_);
}
inline const ::blox_test::Sequence::WaitTemperatureRange& Instruction::wait_temp_between() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_TEMP_BETWEEN)
  return _internal_wait_temp_between();
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::unsafe_arena_release_wait_temp_between() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_TEMP_BETWEEN)
  if (_internal_has_wait_temp_between()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureRange* temp = instruction_oneof_.wait_temp_between_;
    instruction_oneof_.wait_temp_between_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_temp_between(::blox_test::Sequence::WaitTemperatureRange* wait_temp_between) {
  clear_instruction_oneof();
  if (wait_temp_between) {
    set_has_wait_temp_between();
    instruction_oneof_.wait_temp_between_ = wait_temp_between;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_BETWEEN)
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::_internal_mutable_wait_temp_between() {
  if (!_internal_has_wait_temp_between()) {
    clear_instruction_oneof();
    set_has_wait_temp_between();
    instruction_oneof_.wait_temp_between_ = CreateMaybeMessage< ::blox_test::Sequence::WaitTemperatureRange >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_temp_between_;
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::mutable_wait_temp_between() {
  ::blox_test::Sequence::WaitTemperatureRange* _msg = _internal_mutable_wait_temp_between();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_TEMP_BETWEEN)
  return _msg;
}

// .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_NOT_BETWEEN = 7;
inline bool Instruction::_internal_has_wait_temp_not_between() const {
  return instruction_oneof_case() == kWAITTEMPNOTBETWEEN;
}
inline bool Instruction::has_wait_temp_not_between() const {
  return _internal_has_wait_temp_not_between();
}
inline void Instruction::set_has_wait_temp_not_between() {
  _oneof_case_[0] = kWAITTEMPNOTBETWEEN;
}
inline void Instruction::clear_wait_temp_not_between() {
  if (_internal_has_wait_temp_not_between()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_temp_not_between_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::release_wait_temp_not_between() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_TEMP_NOT_BETWEEN)
  if (_internal_has_wait_temp_not_between()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureRange* temp = instruction_oneof_.wait_temp_not_between_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_temp_not_between_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitTemperatureRange& Instruction::_internal_wait_temp_not_between() const {
  return _internal_has_wait_temp_not_between()
      ? *instruction_oneof_.wait_temp_not_between_
      : reinterpret_cast< ::blox_test::Sequence::WaitTemperatureRange&>(::blox_test::Sequence::_WaitTemperatureRange_default_instance_);
}
inline const ::blox_test::Sequence::WaitTemperatureRange& Instruction::wait_temp_not_between() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_TEMP_NOT_BETWEEN)
  return _internal_wait_temp_not_between();
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::unsafe_arena_release_wait_temp_not_between() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_TEMP_NOT_BETWEEN)
  if (_internal_has_wait_temp_not_between()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureRange* temp = instruction_oneof_.wait_temp_not_between_;
    instruction_oneof_.wait_temp_not_between_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_temp_not_between(::blox_test::Sequence::WaitTemperatureRange* wait_temp_not_between) {
  clear_instruction_oneof();
  if (wait_temp_not_between) {
    set_has_wait_temp_not_between();
    instruction_oneof_.wait_temp_not_between_ = wait_temp_not_between;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_NOT_BETWEEN)
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::_internal_mutable_wait_temp_not_between() {
  if (!_internal_has_wait_temp_not_between()) {
    clear_instruction_oneof();
    set_has_wait_temp_not_between();
    instruction_oneof_.wait_temp_not_between_ = CreateMaybeMessage< ::blox_test::Sequence::WaitTemperatureRange >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_temp_not_between_;
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::mutable_wait_temp_not_between() {
  ::blox_test::Sequence::WaitTemperatureRange* _msg = _internal_mutable_wait_temp_not_between();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_TEMP_NOT_BETWEEN)
  return _msg;
}

// .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_UNEXPECTED = 8;
inline bool Instruction::_internal_has_wait_temp_unexpected() const {
  return instruction_oneof_case() == kWAITTEMPUNEXPECTED;
}
inline bool Instruction::has_wait_temp_unexpected() const {
  return _internal_has_wait_temp_unexpected();
}
inline void Instruction::set_has_wait_temp_unexpected() {
  _oneof_case_[0] = kWAITTEMPUNEXPECTED;
}
inline void Instruction::clear_wait_temp_unexpected() {
  if (_internal_has_wait_temp_unexpected()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_temp_unexpected_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::release_wait_temp_unexpected() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_TEMP_UNEXPECTED)
  if (_internal_has_wait_temp_unexpected()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureRange* temp = instruction_oneof_.wait_temp_unexpected_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_temp_unexpected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitTemperatureRange& Instruction::_internal_wait_temp_unexpected() const {
  return _internal_has_wait_temp_unexpected()
      ? *instruction_oneof_.wait_temp_unexpected_
      : reinterpret_cast< ::blox_test::Sequence::WaitTemperatureRange&>(::blox_test::Sequence::_WaitTemperatureRange_default_instance_);
}
inline const ::blox_test::Sequence::WaitTemperatureRange& Instruction::wait_temp_unexpected() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_TEMP_UNEXPECTED)
  return _internal_wait_temp_unexpected();
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::unsafe_arena_release_wait_temp_unexpected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_TEMP_UNEXPECTED)
  if (_internal_has_wait_temp_unexpected()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureRange* temp = instruction_oneof_.wait_temp_unexpected_;
    instruction_oneof_.wait_temp_unexpected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_temp_unexpected(::blox_test::Sequence::WaitTemperatureRange* wait_temp_unexpected) {
  clear_instruction_oneof();
  if (wait_temp_unexpected) {
    set_has_wait_temp_unexpected();
    instruction_oneof_.wait_temp_unexpected_ = wait_temp_unexpected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_UNEXPECTED)
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::_internal_mutable_wait_temp_unexpected() {
  if (!_internal_has_wait_temp_unexpected()) {
    clear_instruction_oneof();
    set_has_wait_temp_unexpected();
    instruction_oneof_.wait_temp_unexpected_ = CreateMaybeMessage< ::blox_test::Sequence::WaitTemperatureRange >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_temp_unexpected_;
}
inline ::blox_test::Sequence::WaitTemperatureRange* Instruction::mutable_wait_temp_unexpected() {
  ::blox_test::Sequence::WaitTemperatureRange* _msg = _internal_mutable_wait_temp_unexpected();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_TEMP_UNEXPECTED)
  return _msg;
}

// .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_ABOVE = 9;
inline bool Instruction::_internal_has_wait_temp_above() const {
  return instruction_oneof_case() == kWAITTEMPABOVE;
}
inline bool Instruction::has_wait_temp_above() const {
  return _internal_has_wait_temp_above();
}
inline void Instruction::set_has_wait_temp_above() {
  _oneof_case_[0] = kWAITTEMPABOVE;
}
inline void Instruction::clear_wait_temp_above() {
  if (_internal_has_wait_temp_above()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_temp_above_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::release_wait_temp_above() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_TEMP_ABOVE)
  if (_internal_has_wait_temp_above()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureBoundary* temp = instruction_oneof_.wait_temp_above_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_temp_above_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitTemperatureBoundary& Instruction::_internal_wait_temp_above() const {
  return _internal_has_wait_temp_above()
      ? *instruction_oneof_.wait_temp_above_
      : reinterpret_cast< ::blox_test::Sequence::WaitTemperatureBoundary&>(::blox_test::Sequence::_WaitTemperatureBoundary_default_instance_);
}
inline const ::blox_test::Sequence::WaitTemperatureBoundary& Instruction::wait_temp_above() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_TEMP_ABOVE)
  return _internal_wait_temp_above();
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::unsafe_arena_release_wait_temp_above() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_TEMP_ABOVE)
  if (_internal_has_wait_temp_above()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureBoundary* temp = instruction_oneof_.wait_temp_above_;
    instruction_oneof_.wait_temp_above_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_temp_above(::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_above) {
  clear_instruction_oneof();
  if (wait_temp_above) {
    set_has_wait_temp_above();
    instruction_oneof_.wait_temp_above_ = wait_temp_above;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_ABOVE)
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::_internal_mutable_wait_temp_above() {
  if (!_internal_has_wait_temp_above()) {
    clear_instruction_oneof();
    set_has_wait_temp_above();
    instruction_oneof_.wait_temp_above_ = CreateMaybeMessage< ::blox_test::Sequence::WaitTemperatureBoundary >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_temp_above_;
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::mutable_wait_temp_above() {
  ::blox_test::Sequence::WaitTemperatureBoundary* _msg = _internal_mutable_wait_temp_above();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_TEMP_ABOVE)
  return _msg;
}

// .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_BELOW = 10;
inline bool Instruction::_internal_has_wait_temp_below() const {
  return instruction_oneof_case() == kWAITTEMPBELOW;
}
inline bool Instruction::has_wait_temp_below() const {
  return _internal_has_wait_temp_below();
}
inline void Instruction::set_has_wait_temp_below() {
  _oneof_case_[0] = kWAITTEMPBELOW;
}
inline void Instruction::clear_wait_temp_below() {
  if (_internal_has_wait_temp_below()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_temp_below_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::release_wait_temp_below() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_TEMP_BELOW)
  if (_internal_has_wait_temp_below()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureBoundary* temp = instruction_oneof_.wait_temp_below_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_temp_below_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitTemperatureBoundary& Instruction::_internal_wait_temp_below() const {
  return _internal_has_wait_temp_below()
      ? *instruction_oneof_.wait_temp_below_
      : reinterpret_cast< ::blox_test::Sequence::WaitTemperatureBoundary&>(::blox_test::Sequence::_WaitTemperatureBoundary_default_instance_);
}
inline const ::blox_test::Sequence::WaitTemperatureBoundary& Instruction::wait_temp_below() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_TEMP_BELOW)
  return _internal_wait_temp_below();
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::unsafe_arena_release_wait_temp_below() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_TEMP_BELOW)
  if (_internal_has_wait_temp_below()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitTemperatureBoundary* temp = instruction_oneof_.wait_temp_below_;
    instruction_oneof_.wait_temp_below_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_temp_below(::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_below) {
  clear_instruction_oneof();
  if (wait_temp_below) {
    set_has_wait_temp_below();
    instruction_oneof_.wait_temp_below_ = wait_temp_below;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_BELOW)
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::_internal_mutable_wait_temp_below() {
  if (!_internal_has_wait_temp_below()) {
    clear_instruction_oneof();
    set_has_wait_temp_below();
    instruction_oneof_.wait_temp_below_ = CreateMaybeMessage< ::blox_test::Sequence::WaitTemperatureBoundary >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_temp_below_;
}
inline ::blox_test::Sequence::WaitTemperatureBoundary* Instruction::mutable_wait_temp_below() {
  ::blox_test::Sequence::WaitTemperatureBoundary* _msg = _internal_mutable_wait_temp_below();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_TEMP_BELOW)
  return _msg;
}

// .blox_test.Sequence.SetSetpoint SET_SETPOINT = 11;
inline bool Instruction::_internal_has_set_setpoint() const {
  return instruction_oneof_case() == kSETSETPOINT;
}
inline bool Instruction::has_set_setpoint() const {
  return _internal_has_set_setpoint();
}
inline void Instruction::set_has_set_setpoint() {
  _oneof_case_[0] = kSETSETPOINT;
}
inline void Instruction::clear_set_setpoint() {
  if (_internal_has_set_setpoint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.set_setpoint_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::SetSetpoint* Instruction::release_set_setpoint() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.SET_SETPOINT)
  if (_internal_has_set_setpoint()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::SetSetpoint* temp = instruction_oneof_.set_setpoint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.set_setpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::SetSetpoint& Instruction::_internal_set_setpoint() const {
  return _internal_has_set_setpoint()
      ? *instruction_oneof_.set_setpoint_
      : reinterpret_cast< ::blox_test::Sequence::SetSetpoint&>(::blox_test::Sequence::_SetSetpoint_default_instance_);
}
inline const ::blox_test::Sequence::SetSetpoint& Instruction::set_setpoint() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.SET_SETPOINT)
  return _internal_set_setpoint();
}
inline ::blox_test::Sequence::SetSetpoint* Instruction::unsafe_arena_release_set_setpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.SET_SETPOINT)
  if (_internal_has_set_setpoint()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::SetSetpoint* temp = instruction_oneof_.set_setpoint_;
    instruction_oneof_.set_setpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_set_setpoint(::blox_test::Sequence::SetSetpoint* set_setpoint) {
  clear_instruction_oneof();
  if (set_setpoint) {
    set_has_set_setpoint();
    instruction_oneof_.set_setpoint_ = set_setpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.SET_SETPOINT)
}
inline ::blox_test::Sequence::SetSetpoint* Instruction::_internal_mutable_set_setpoint() {
  if (!_internal_has_set_setpoint()) {
    clear_instruction_oneof();
    set_has_set_setpoint();
    instruction_oneof_.set_setpoint_ = CreateMaybeMessage< ::blox_test::Sequence::SetSetpoint >(GetArenaForAllocation());
  }
  return instruction_oneof_.set_setpoint_;
}
inline ::blox_test::Sequence::SetSetpoint* Instruction::mutable_set_setpoint() {
  ::blox_test::Sequence::SetSetpoint* _msg = _internal_mutable_set_setpoint();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.SET_SETPOINT)
  return _msg;
}

// .blox_test.Sequence.WaitSetpoint WAIT_SETPOINT = 12;
inline bool Instruction::_internal_has_wait_setpoint() const {
  return instruction_oneof_case() == kWAITSETPOINT;
}
inline bool Instruction::has_wait_setpoint() const {
  return _internal_has_wait_setpoint();
}
inline void Instruction::set_has_wait_setpoint() {
  _oneof_case_[0] = kWAITSETPOINT;
}
inline void Instruction::clear_wait_setpoint() {
  if (_internal_has_wait_setpoint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_setpoint_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitSetpoint* Instruction::release_wait_setpoint() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_SETPOINT)
  if (_internal_has_wait_setpoint()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitSetpoint* temp = instruction_oneof_.wait_setpoint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_setpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitSetpoint& Instruction::_internal_wait_setpoint() const {
  return _internal_has_wait_setpoint()
      ? *instruction_oneof_.wait_setpoint_
      : reinterpret_cast< ::blox_test::Sequence::WaitSetpoint&>(::blox_test::Sequence::_WaitSetpoint_default_instance_);
}
inline const ::blox_test::Sequence::WaitSetpoint& Instruction::wait_setpoint() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_SETPOINT)
  return _internal_wait_setpoint();
}
inline ::blox_test::Sequence::WaitSetpoint* Instruction::unsafe_arena_release_wait_setpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_SETPOINT)
  if (_internal_has_wait_setpoint()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitSetpoint* temp = instruction_oneof_.wait_setpoint_;
    instruction_oneof_.wait_setpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_setpoint(::blox_test::Sequence::WaitSetpoint* wait_setpoint) {
  clear_instruction_oneof();
  if (wait_setpoint) {
    set_has_wait_setpoint();
    instruction_oneof_.wait_setpoint_ = wait_setpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_SETPOINT)
}
inline ::blox_test::Sequence::WaitSetpoint* Instruction::_internal_mutable_wait_setpoint() {
  if (!_internal_has_wait_setpoint()) {
    clear_instruction_oneof();
    set_has_wait_setpoint();
    instruction_oneof_.wait_setpoint_ = CreateMaybeMessage< ::blox_test::Sequence::WaitSetpoint >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_setpoint_;
}
inline ::blox_test::Sequence::WaitSetpoint* Instruction::mutable_wait_setpoint() {
  ::blox_test::Sequence::WaitSetpoint* _msg = _internal_mutable_wait_setpoint();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_SETPOINT)
  return _msg;
}

// .blox_test.Sequence.SetDigital SET_DIGITAL = 13;
inline bool Instruction::_internal_has_set_digital() const {
  return instruction_oneof_case() == kSETDIGITAL;
}
inline bool Instruction::has_set_digital() const {
  return _internal_has_set_digital();
}
inline void Instruction::set_has_set_digital() {
  _oneof_case_[0] = kSETDIGITAL;
}
inline void Instruction::clear_set_digital() {
  if (_internal_has_set_digital()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.set_digital_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::SetDigital* Instruction::release_set_digital() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.SET_DIGITAL)
  if (_internal_has_set_digital()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::SetDigital* temp = instruction_oneof_.set_digital_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.set_digital_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::SetDigital& Instruction::_internal_set_digital() const {
  return _internal_has_set_digital()
      ? *instruction_oneof_.set_digital_
      : reinterpret_cast< ::blox_test::Sequence::SetDigital&>(::blox_test::Sequence::_SetDigital_default_instance_);
}
inline const ::blox_test::Sequence::SetDigital& Instruction::set_digital() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.SET_DIGITAL)
  return _internal_set_digital();
}
inline ::blox_test::Sequence::SetDigital* Instruction::unsafe_arena_release_set_digital() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.SET_DIGITAL)
  if (_internal_has_set_digital()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::SetDigital* temp = instruction_oneof_.set_digital_;
    instruction_oneof_.set_digital_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_set_digital(::blox_test::Sequence::SetDigital* set_digital) {
  clear_instruction_oneof();
  if (set_digital) {
    set_has_set_digital();
    instruction_oneof_.set_digital_ = set_digital;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.SET_DIGITAL)
}
inline ::blox_test::Sequence::SetDigital* Instruction::_internal_mutable_set_digital() {
  if (!_internal_has_set_digital()) {
    clear_instruction_oneof();
    set_has_set_digital();
    instruction_oneof_.set_digital_ = CreateMaybeMessage< ::blox_test::Sequence::SetDigital >(GetArenaForAllocation());
  }
  return instruction_oneof_.set_digital_;
}
inline ::blox_test::Sequence::SetDigital* Instruction::mutable_set_digital() {
  ::blox_test::Sequence::SetDigital* _msg = _internal_mutable_set_digital();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.SET_DIGITAL)
  return _msg;
}

// .blox_test.Sequence.WaitDigital WAIT_DIGITAL = 14;
inline bool Instruction::_internal_has_wait_digital() const {
  return instruction_oneof_case() == kWAITDIGITAL;
}
inline bool Instruction::has_wait_digital() const {
  return _internal_has_wait_digital();
}
inline void Instruction::set_has_wait_digital() {
  _oneof_case_[0] = kWAITDIGITAL;
}
inline void Instruction::clear_wait_digital() {
  if (_internal_has_wait_digital()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_digital_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::WaitDigital* Instruction::release_wait_digital() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_DIGITAL)
  if (_internal_has_wait_digital()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitDigital* temp = instruction_oneof_.wait_digital_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_digital_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::WaitDigital& Instruction::_internal_wait_digital() const {
  return _internal_has_wait_digital()
      ? *instruction_oneof_.wait_digital_
      : reinterpret_cast< ::blox_test::Sequence::WaitDigital&>(::blox_test::Sequence::_WaitDigital_default_instance_);
}
inline const ::blox_test::Sequence::WaitDigital& Instruction::wait_digital() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_DIGITAL)
  return _internal_wait_digital();
}
inline ::blox_test::Sequence::WaitDigital* Instruction::unsafe_arena_release_wait_digital() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_DIGITAL)
  if (_internal_has_wait_digital()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::WaitDigital* temp = instruction_oneof_.wait_digital_;
    instruction_oneof_.wait_digital_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_digital(::blox_test::Sequence::WaitDigital* wait_digital) {
  clear_instruction_oneof();
  if (wait_digital) {
    set_has_wait_digital();
    instruction_oneof_.wait_digital_ = wait_digital;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_DIGITAL)
}
inline ::blox_test::Sequence::WaitDigital* Instruction::_internal_mutable_wait_digital() {
  if (!_internal_has_wait_digital()) {
    clear_instruction_oneof();
    set_has_wait_digital();
    instruction_oneof_.wait_digital_ = CreateMaybeMessage< ::blox_test::Sequence::WaitDigital >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_digital_;
}
inline ::blox_test::Sequence::WaitDigital* Instruction::mutable_wait_digital() {
  ::blox_test::Sequence::WaitDigital* _msg = _internal_mutable_wait_digital();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_DIGITAL)
  return _msg;
}

// .blox_test.Sequence.SetPwm SET_PWM = 15;
inline bool Instruction::_internal_has_set_pwm() const {
  return instruction_oneof_case() == kSETPWM;
}
inline bool Instruction::has_set_pwm() const {
  return _internal_has_set_pwm();
}
inline void Instruction::set_has_set_pwm() {
  _oneof_case_[0] = kSETPWM;
}
inline void Instruction::clear_set_pwm() {
  if (_internal_has_set_pwm()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.set_pwm_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::SetPwm* Instruction::release_set_pwm() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.SET_PWM)
  if (_internal_has_set_pwm()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::SetPwm* temp = instruction_oneof_.set_pwm_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.set_pwm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::SetPwm& Instruction::_internal_set_pwm() const {
  return _internal_has_set_pwm()
      ? *instruction_oneof_.set_pwm_
      : reinterpret_cast< ::blox_test::Sequence::SetPwm&>(::blox_test::Sequence::_SetPwm_default_instance_);
}
inline const ::blox_test::Sequence::SetPwm& Instruction::set_pwm() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.SET_PWM)
  return _internal_set_pwm();
}
inline ::blox_test::Sequence::SetPwm* Instruction::unsafe_arena_release_set_pwm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.SET_PWM)
  if (_internal_has_set_pwm()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::SetPwm* temp = instruction_oneof_.set_pwm_;
    instruction_oneof_.set_pwm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_set_pwm(::blox_test::Sequence::SetPwm* set_pwm) {
  clear_instruction_oneof();
  if (set_pwm) {
    set_has_set_pwm();
    instruction_oneof_.set_pwm_ = set_pwm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.SET_PWM)
}
inline ::blox_test::Sequence::SetPwm* Instruction::_internal_mutable_set_pwm() {
  if (!_internal_has_set_pwm()) {
    clear_instruction_oneof();
    set_has_set_pwm();
    instruction_oneof_.set_pwm_ = CreateMaybeMessage< ::blox_test::Sequence::SetPwm >(GetArenaForAllocation());
  }
  return instruction_oneof_.set_pwm_;
}
inline ::blox_test::Sequence::SetPwm* Instruction::mutable_set_pwm() {
  ::blox_test::Sequence::SetPwm* _msg = _internal_mutable_set_pwm();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.SET_PWM)
  return _msg;
}

// .blox_test.Sequence.TargetProfile START_PROFILE = 16;
inline bool Instruction::_internal_has_start_profile() const {
  return instruction_oneof_case() == kSTARTPROFILE;
}
inline bool Instruction::has_start_profile() const {
  return _internal_has_start_profile();
}
inline void Instruction::set_has_start_profile() {
  _oneof_case_[0] = kSTARTPROFILE;
}
inline void Instruction::clear_start_profile() {
  if (_internal_has_start_profile()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.start_profile_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::TargetProfile* Instruction::release_start_profile() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.START_PROFILE)
  if (_internal_has_start_profile()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetProfile* temp = instruction_oneof_.start_profile_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.start_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::TargetProfile& Instruction::_internal_start_profile() const {
  return _internal_has_start_profile()
      ? *instruction_oneof_.start_profile_
      : reinterpret_cast< ::blox_test::Sequence::TargetProfile&>(::blox_test::Sequence::_TargetProfile_default_instance_);
}
inline const ::blox_test::Sequence::TargetProfile& Instruction::start_profile() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.START_PROFILE)
  return _internal_start_profile();
}
inline ::blox_test::Sequence::TargetProfile* Instruction::unsafe_arena_release_start_profile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.START_PROFILE)
  if (_internal_has_start_profile()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetProfile* temp = instruction_oneof_.start_profile_;
    instruction_oneof_.start_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_start_profile(::blox_test::Sequence::TargetProfile* start_profile) {
  clear_instruction_oneof();
  if (start_profile) {
    set_has_start_profile();
    instruction_oneof_.start_profile_ = start_profile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.START_PROFILE)
}
inline ::blox_test::Sequence::TargetProfile* Instruction::_internal_mutable_start_profile() {
  if (!_internal_has_start_profile()) {
    clear_instruction_oneof();
    set_has_start_profile();
    instruction_oneof_.start_profile_ = CreateMaybeMessage< ::blox_test::Sequence::TargetProfile >(GetArenaForAllocation());
  }
  return instruction_oneof_.start_profile_;
}
inline ::blox_test::Sequence::TargetProfile* Instruction::mutable_start_profile() {
  ::blox_test::Sequence::TargetProfile* _msg = _internal_mutable_start_profile();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.START_PROFILE)
  return _msg;
}

// .blox_test.Sequence.TargetProfile WAIT_PROFILE = 17;
inline bool Instruction::_internal_has_wait_profile() const {
  return instruction_oneof_case() == kWAITPROFILE;
}
inline bool Instruction::has_wait_profile() const {
  return _internal_has_wait_profile();
}
inline void Instruction::set_has_wait_profile() {
  _oneof_case_[0] = kWAITPROFILE;
}
inline void Instruction::clear_wait_profile() {
  if (_internal_has_wait_profile()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_profile_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::TargetProfile* Instruction::release_wait_profile() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_PROFILE)
  if (_internal_has_wait_profile()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetProfile* temp = instruction_oneof_.wait_profile_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::TargetProfile& Instruction::_internal_wait_profile() const {
  return _internal_has_wait_profile()
      ? *instruction_oneof_.wait_profile_
      : reinterpret_cast< ::blox_test::Sequence::TargetProfile&>(::blox_test::Sequence::_TargetProfile_default_instance_);
}
inline const ::blox_test::Sequence::TargetProfile& Instruction::wait_profile() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_PROFILE)
  return _internal_wait_profile();
}
inline ::blox_test::Sequence::TargetProfile* Instruction::unsafe_arena_release_wait_profile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_PROFILE)
  if (_internal_has_wait_profile()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetProfile* temp = instruction_oneof_.wait_profile_;
    instruction_oneof_.wait_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_profile(::blox_test::Sequence::TargetProfile* wait_profile) {
  clear_instruction_oneof();
  if (wait_profile) {
    set_has_wait_profile();
    instruction_oneof_.wait_profile_ = wait_profile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_PROFILE)
}
inline ::blox_test::Sequence::TargetProfile* Instruction::_internal_mutable_wait_profile() {
  if (!_internal_has_wait_profile()) {
    clear_instruction_oneof();
    set_has_wait_profile();
    instruction_oneof_.wait_profile_ = CreateMaybeMessage< ::blox_test::Sequence::TargetProfile >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_profile_;
}
inline ::blox_test::Sequence::TargetProfile* Instruction::mutable_wait_profile() {
  ::blox_test::Sequence::TargetProfile* _msg = _internal_mutable_wait_profile();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_PROFILE)
  return _msg;
}

// .blox_test.Sequence.TargetSequence START_SEQUENCE = 18;
inline bool Instruction::_internal_has_start_sequence() const {
  return instruction_oneof_case() == kSTARTSEQUENCE;
}
inline bool Instruction::has_start_sequence() const {
  return _internal_has_start_sequence();
}
inline void Instruction::set_has_start_sequence() {
  _oneof_case_[0] = kSTARTSEQUENCE;
}
inline void Instruction::clear_start_sequence() {
  if (_internal_has_start_sequence()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.start_sequence_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::TargetSequence* Instruction::release_start_sequence() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.START_SEQUENCE)
  if (_internal_has_start_sequence()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetSequence* temp = instruction_oneof_.start_sequence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.start_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::TargetSequence& Instruction::_internal_start_sequence() const {
  return _internal_has_start_sequence()
      ? *instruction_oneof_.start_sequence_
      : reinterpret_cast< ::blox_test::Sequence::TargetSequence&>(::blox_test::Sequence::_TargetSequence_default_instance_);
}
inline const ::blox_test::Sequence::TargetSequence& Instruction::start_sequence() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.START_SEQUENCE)
  return _internal_start_sequence();
}
inline ::blox_test::Sequence::TargetSequence* Instruction::unsafe_arena_release_start_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.START_SEQUENCE)
  if (_internal_has_start_sequence()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetSequence* temp = instruction_oneof_.start_sequence_;
    instruction_oneof_.start_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_start_sequence(::blox_test::Sequence::TargetSequence* start_sequence) {
  clear_instruction_oneof();
  if (start_sequence) {
    set_has_start_sequence();
    instruction_oneof_.start_sequence_ = start_sequence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.START_SEQUENCE)
}
inline ::blox_test::Sequence::TargetSequence* Instruction::_internal_mutable_start_sequence() {
  if (!_internal_has_start_sequence()) {
    clear_instruction_oneof();
    set_has_start_sequence();
    instruction_oneof_.start_sequence_ = CreateMaybeMessage< ::blox_test::Sequence::TargetSequence >(GetArenaForAllocation());
  }
  return instruction_oneof_.start_sequence_;
}
inline ::blox_test::Sequence::TargetSequence* Instruction::mutable_start_sequence() {
  ::blox_test::Sequence::TargetSequence* _msg = _internal_mutable_start_sequence();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.START_SEQUENCE)
  return _msg;
}

// .blox_test.Sequence.TargetSequence WAIT_SEQUENCE = 19;
inline bool Instruction::_internal_has_wait_sequence() const {
  return instruction_oneof_case() == kWAITSEQUENCE;
}
inline bool Instruction::has_wait_sequence() const {
  return _internal_has_wait_sequence();
}
inline void Instruction::set_has_wait_sequence() {
  _oneof_case_[0] = kWAITSEQUENCE;
}
inline void Instruction::clear_wait_sequence() {
  if (_internal_has_wait_sequence()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instruction_oneof_.wait_sequence_;
    }
    clear_has_instruction_oneof();
  }
}
inline ::blox_test::Sequence::TargetSequence* Instruction::release_wait_sequence() {
  // @@protoc_insertion_point(field_release:blox_test.Sequence.Instruction.WAIT_SEQUENCE)
  if (_internal_has_wait_sequence()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetSequence* temp = instruction_oneof_.wait_sequence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instruction_oneof_.wait_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox_test::Sequence::TargetSequence& Instruction::_internal_wait_sequence() const {
  return _internal_has_wait_sequence()
      ? *instruction_oneof_.wait_sequence_
      : reinterpret_cast< ::blox_test::Sequence::TargetSequence&>(::blox_test::Sequence::_TargetSequence_default_instance_);
}
inline const ::blox_test::Sequence::TargetSequence& Instruction::wait_sequence() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Instruction.WAIT_SEQUENCE)
  return _internal_wait_sequence();
}
inline ::blox_test::Sequence::TargetSequence* Instruction::unsafe_arena_release_wait_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.Sequence.Instruction.WAIT_SEQUENCE)
  if (_internal_has_wait_sequence()) {
    clear_has_instruction_oneof();
    ::blox_test::Sequence::TargetSequence* temp = instruction_oneof_.wait_sequence_;
    instruction_oneof_.wait_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Instruction::unsafe_arena_set_allocated_wait_sequence(::blox_test::Sequence::TargetSequence* wait_sequence) {
  clear_instruction_oneof();
  if (wait_sequence) {
    set_has_wait_sequence();
    instruction_oneof_.wait_sequence_ = wait_sequence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.Sequence.Instruction.WAIT_SEQUENCE)
}
inline ::blox_test::Sequence::TargetSequence* Instruction::_internal_mutable_wait_sequence() {
  if (!_internal_has_wait_sequence()) {
    clear_instruction_oneof();
    set_has_wait_sequence();
    instruction_oneof_.wait_sequence_ = CreateMaybeMessage< ::blox_test::Sequence::TargetSequence >(GetArenaForAllocation());
  }
  return instruction_oneof_.wait_sequence_;
}
inline ::blox_test::Sequence::TargetSequence* Instruction::mutable_wait_sequence() {
  ::blox_test::Sequence::TargetSequence* _msg = _internal_mutable_wait_sequence();
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Instruction.WAIT_SEQUENCE)
  return _msg;
}

inline bool Instruction::has_instruction_oneof() const {
  return instruction_oneof_case() != INSTRUCTION_ONEOF_NOT_SET;
}
inline void Instruction::clear_has_instruction_oneof() {
  _oneof_case_[0] = INSTRUCTION_ONEOF_NOT_SET;
}
inline Instruction::InstructionOneofCase Instruction::instruction_oneof_case() const {
  return Instruction::InstructionOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Block

// bool enabled = 1 [(.brewblox.field) = {
inline void Block::clear_enabled() {
  enabled_ = false;
}
inline bool Block::_internal_enabled() const {
  return enabled_;
}
inline bool Block::enabled() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.enabled)
  return _internal_enabled();
}
inline void Block::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Block::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.enabled)
}

// repeated .blox_test.Sequence.Instruction instructions = 2;
inline int Block::_internal_instructions_size() const {
  return instructions_.size();
}
inline int Block::instructions_size() const {
  return _internal_instructions_size();
}
inline void Block::clear_instructions() {
  instructions_.Clear();
}
inline ::blox_test::Sequence::Instruction* Block::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.Sequence.Block.instructions)
  return instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Sequence::Instruction >*
Block::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.Sequence.Block.instructions)
  return &instructions_;
}
inline const ::blox_test::Sequence::Instruction& Block::_internal_instructions(int index) const {
  return instructions_.Get(index);
}
inline const ::blox_test::Sequence::Instruction& Block::instructions(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.instructions)
  return _internal_instructions(index);
}
inline ::blox_test::Sequence::Instruction* Block::_internal_add_instructions() {
  return instructions_.Add();
}
inline ::blox_test::Sequence::Instruction* Block::add_instructions() {
  ::blox_test::Sequence::Instruction* _add = _internal_add_instructions();
  // @@protoc_insertion_point(field_add:blox_test.Sequence.Block.instructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Sequence::Instruction >&
Block::instructions() const {
  // @@protoc_insertion_point(field_list:blox_test.Sequence.Block.instructions)
  return instructions_;
}

// bool overrideState = 3;
inline void Block::clear_overridestate() {
  overridestate_ = false;
}
inline bool Block::_internal_overridestate() const {
  return overridestate_;
}
inline bool Block::overridestate() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.overrideState)
  return _internal_overridestate();
}
inline void Block::_internal_set_overridestate(bool value) {
  
  overridestate_ = value;
}
inline void Block::set_overridestate(bool value) {
  _internal_set_overridestate(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.overrideState)
}

// uint32 activeInstruction = 4 [(.nanopb) = {
inline void Block::clear_activeinstruction() {
  activeinstruction_ = 0u;
}
inline uint32_t Block::_internal_activeinstruction() const {
  return activeinstruction_;
}
inline uint32_t Block::activeinstruction() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.activeInstruction)
  return _internal_activeinstruction();
}
inline void Block::_internal_set_activeinstruction(uint32_t value) {
  
  activeinstruction_ = value;
}
inline void Block::set_activeinstruction(uint32_t value) {
  _internal_set_activeinstruction(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.activeInstruction)
}

// uint32 activeInstructionStartedAt = 5 [(.nanopb) = {
inline void Block::clear_activeinstructionstartedat() {
  activeinstructionstartedat_ = 0u;
}
inline uint32_t Block::_internal_activeinstructionstartedat() const {
  return activeinstructionstartedat_;
}
inline uint32_t Block::activeinstructionstartedat() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.activeInstructionStartedAt)
  return _internal_activeinstructionstartedat();
}
inline void Block::_internal_set_activeinstructionstartedat(uint32_t value) {
  
  activeinstructionstartedat_ = value;
}
inline void Block::set_activeinstructionstartedat(uint32_t value) {
  _internal_set_activeinstructionstartedat(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.activeInstructionStartedAt)
}

// uint32 disabledAt = 6 [(.nanopb) = {
inline void Block::clear_disabledat() {
  disabledat_ = 0u;
}
inline uint32_t Block::_internal_disabledat() const {
  return disabledat_;
}
inline uint32_t Block::disabledat() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.disabledAt)
  return _internal_disabledat();
}
inline void Block::_internal_set_disabledat(uint32_t value) {
  
  disabledat_ = value;
}
inline void Block::set_disabledat(uint32_t value) {
  _internal_set_disabledat(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.disabledAt)
}

// uint32 disabledDuration = 7 [(.nanopb) = {
inline void Block::clear_disabledduration() {
  disabledduration_ = 0u;
}
inline uint32_t Block::_internal_disabledduration() const {
  return disabledduration_;
}
inline uint32_t Block::disabledduration() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.disabledDuration)
  return _internal_disabledduration();
}
inline void Block::_internal_set_disabledduration(uint32_t value) {
  
  disabledduration_ = value;
}
inline void Block::set_disabledduration(uint32_t value) {
  _internal_set_disabledduration(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.disabledDuration)
}

// .blox_test.Sequence.SequenceStatus status = 8 [(.brewblox.field) = {
inline void Block::clear_status() {
  status_ = 0;
}
inline ::blox_test::Sequence::SequenceStatus Block::_internal_status() const {
  return static_cast< ::blox_test::Sequence::SequenceStatus >(status_);
}
inline ::blox_test::Sequence::SequenceStatus Block::status() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.status)
  return _internal_status();
}
inline void Block::_internal_set_status(::blox_test::Sequence::SequenceStatus value) {
  
  status_ = value;
}
inline void Block::set_status(::blox_test::Sequence::SequenceStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.status)
}

// .blox_test.Sequence.SequenceError error = 9 [(.brewblox.field) = {
inline void Block::clear_error() {
  error_ = 0;
}
inline ::blox_test::Sequence::SequenceError Block::_internal_error() const {
  return static_cast< ::blox_test::Sequence::SequenceError >(error_);
}
inline ::blox_test::Sequence::SequenceError Block::error() const {
  // @@protoc_insertion_point(field_get:blox_test.Sequence.Block.error)
  return _internal_error();
}
inline void Block::_internal_set_error(::blox_test::Sequence::SequenceError value) {
  
  error_ = value;
}
inline void Block::set_error(::blox_test::Sequence::SequenceError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:blox_test.Sequence.Block.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sequence
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::Sequence::SequenceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::Sequence::SequenceStatus>() {
  return ::blox_test::Sequence::SequenceStatus_descriptor();
}
template <> struct is_proto_enum< ::blox_test::Sequence::SequenceError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::Sequence::SequenceError>() {
  return ::blox_test::Sequence::SequenceError_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sequence_5ftest_2eproto
