// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneWireGpioModule_test.proto

#include "OneWireGpioModule_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blox_test {
namespace OneWireGpioModule {
PROTOBUF_CONSTEXPR GpioModuleChannel::GpioModuleChannel(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(0u)
  , devicetype_(0)

  , pinsmask_(0u)
  , width_(0u){}
struct GpioModuleChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpioModuleChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpioModuleChannelDefaultTypeInternal() {}
  union {
    GpioModuleChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpioModuleChannelDefaultTypeInternal _GpioModuleChannel_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : channels_()
  , moduleposition_(0u)
  , modulestatus_(0u)
  , pullupdesired_(0u)
  , pullupstatus_(0u)
  , pullupwhenactive_(0u)
  , pullupwheninactive_(0u)
  , pulldowndesired_(0u)
  , pulldownstatus_(0u)
  , pulldownwhenactive_(0u)
  , pulldownwheninactive_(0u)
  , overcurrent_(0u)
  , openload_(0u)
  , useexternalpower_(false)
  , modulestatusclear_(0u){}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace OneWireGpioModule
}  // namespace blox_test
static ::_pb::Metadata file_level_metadata_OneWireGpioModule_5ftest_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_OneWireGpioModule_5ftest_2eproto = nullptr;

const uint32_t TableStruct_OneWireGpioModule_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::GpioModuleChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::GpioModuleChannel, id_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::GpioModuleChannel, devicetype_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::GpioModuleChannel, pinsmask_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::GpioModuleChannel, width_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::GpioModuleChannel, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, channels_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, moduleposition_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, modulestatus_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pullupdesired_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pullupstatus_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pullupwhenactive_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pullupwheninactive_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pulldowndesired_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pulldownstatus_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pulldownwhenactive_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, pulldownwheninactive_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, overcurrent_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, openload_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, useexternalpower_),
  PROTOBUF_FIELD_OFFSET(::blox_test::OneWireGpioModule::Block, modulestatusclear_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::blox_test::OneWireGpioModule::GpioModuleChannel)},
  { 11, -1, -1, sizeof(::blox_test::OneWireGpioModule::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::blox_test::OneWireGpioModule::_GpioModuleChannel_default_instance_._instance,
  &::blox_test::OneWireGpioModule::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_OneWireGpioModule_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034OneWireGpioModule_test.proto\022\033blox_tes"
  "t.OneWireGpioModule\032\023brewblox_test.proto"
  "\032\021nanopb_test.proto\"\261\001\n\021GpioModuleChanne"
  "l\022\021\n\002id\030\001 \001(\rB\005\222\?\0028\010\022\?\n\ndeviceType\030\002 \001(\016"
  "2+.blox_test.OneWireGpioModule.GpioDevic"
  "eType\022\035\n\010pinsMask\030\003 \001(\rB\013\222\?\0028\010\212\265\030\002P\001\022\024\n\005"
  "width\030\004 \001(\rB\005\222\?\0028\010\022\023\n\004name\030\005 \001(\tB\005\222\?\002\010 \""
  "\234\005\n\005Block\022G\n\010channels\030\001 \003(\0132..blox_test."
  "OneWireGpioModule.GpioModuleChannelB\005\222\?\002"
  "\020\010\022\035\n\016modulePosition\030\002 \001(\rB\005\222\?\0028\010\022!\n\014mod"
  "uleStatus\030\003 \001(\rB\013\222\?\0028\010\212\265\030\002P\001\022(\n\rpullUpDe"
  "sired\030\004 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022\'\n\014pullUp"
  "Status\030\005 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022+\n\020pullU"
  "pWhenActive\030\006 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022-\n\022"
  "pullUpWhenInactive\030\007 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030"
  "\002P\001\022*\n\017pullDownDesired\030\010 \001(\rB\021\212\265\030\002(\001\222\?\0028"
  "\010\212\265\030\002P\001\022)\n\016pullDownStatus\030\t \001(\rB\021\212\265\030\002(\001\222"
  "\?\0028\010\212\265\030\002P\001\022-\n\022pullDownWhenActive\030\n \001(\rB\021"
  "\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022/\n\024pullDownWhenInactiv"
  "e\030\013 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022&\n\013overCurren"
  "t\030\014 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022#\n\010openLoad\030\r"
  " \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022\030\n\020useExternalPo"
  "wer\030\016 \001(\010\022&\n\021moduleStatusClear\030  \001(\rB\013\222\?"
  "\0028\010\212\265\030\002P\001:\023\212\265\030\003\030\305\002\212\265\030\002H\n\212\265\030\002H\014*\225\005\n\016GpioD"
  "eviceType\022\021\n\rGPIO_DEV_NONE\020\000\022\023\n\017GPIO_DEV"
  "_SSR_2P\020\001\022\023\n\017GPIO_DEV_SSR_1P\020\002\022 \n\034GPIO_D"
  "EV_MECHANICAL_RELAY_2P\020\003\022*\n&GPIO_DEV_MEC"
  "HANICAL_RELAY_1P_HIGH_SIDE\020\004\022)\n%GPIO_DEV"
  "_MECHANICAL_RELAY_1P_LOW_SIDE\020\005\022\024\n\020GPIO_"
  "DEV_COIL_2P\020\006\022\"\n\036GPIO_DEV_COIL_2P_BIDIRE"
  "CTIONAL\020\007\022\036\n\032GPIO_DEV_COIL_1P_HIGH_SIDE\020"
  "\010\022\035\n\031GPIO_DEV_COIL_1P_LOW_SIDE\020\t\022\025\n\021GPIO"
  "_DEV_MOTOR_2P\020\n\022#\n\037GPIO_DEV_MOTOR_2P_BID"
  "IRECTIONAL\020\013\022\037\n\033GPIO_DEV_MOTOR_1P_HIGH_S"
  "IDE\020\014\022\036\n\032GPIO_DEV_MOTOR_1P_LOW_SIDE\020\r\022\033\n"
  "\027GPIO_DEV_LOAD_DETECT_2P\020\016\022%\n!GPIO_DEV_L"
  "OAD_DETECT_1P_PULL_DOWN\020\017\022#\n\037GPIO_DEV_LO"
  "AD_DETECT_1P_PULL_UP\020\020\022\025\n\021GPIO_DEV_POWER"
  "_1P\020\021\022!\n\035GPIO_DEV_POWER_1P_LOAD_DETECT\020\022"
  "\022\023\n\017GPIO_DEV_GND_1P\020\023\022\037\n\033GPIO_DEV_GND_1P"
  "_LOAD_DETECT\020\024*\212\002\n\016GpioErrorFlags\022\021\n\rGPI"
  "O_ERR_NONE\020\000\022\033\n\027GPIO_ERR_POWER_ON_RESET\020"
  "\001\022\030\n\024GPIO_ERR_OVERVOLTAGE\020\002\022\031\n\025GPIO_ERR_"
  "UNDERVOLTAGE\020\004\022\030\n\024GPIO_ERR_OVERCURRENT\020\010"
  "\022\026\n\022GPIO_ERR_OPEN_LOAD\020\020\022$\n GPIO_ERR_OVE"
  "RTEMPERATURE_WARNING\020 \022\"\n\036GPIO_ERR_OVERT"
  "EMPERATURE_ERROR\020@\022\027\n\022GPIO_ERR_SPI_ERROR"
  "\020\200\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_OneWireGpioModule_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::_pbi::once_flag descriptor_table_OneWireGpioModule_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_OneWireGpioModule_5ftest_2eproto = {
    false, false, 1891, descriptor_table_protodef_OneWireGpioModule_5ftest_2eproto,
    "OneWireGpioModule_test.proto",
    &descriptor_table_OneWireGpioModule_5ftest_2eproto_once, descriptor_table_OneWireGpioModule_5ftest_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_OneWireGpioModule_5ftest_2eproto::offsets,
    file_level_metadata_OneWireGpioModule_5ftest_2eproto, file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto,
    file_level_service_descriptors_OneWireGpioModule_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_OneWireGpioModule_5ftest_2eproto_getter() {
  return &descriptor_table_OneWireGpioModule_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_OneWireGpioModule_5ftest_2eproto(&descriptor_table_OneWireGpioModule_5ftest_2eproto);
namespace blox_test {
namespace OneWireGpioModule {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OneWireGpioModule_5ftest_2eproto);
  return file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto[0];
}
bool GpioDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioErrorFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OneWireGpioModule_5ftest_2eproto);
  return file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto[1];
}
bool GpioErrorFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GpioModuleChannel::_Internal {
 public:
};

GpioModuleChannel::GpioModuleChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.OneWireGpioModule.GpioModuleChannel)
}
GpioModuleChannel::GpioModuleChannel(const GpioModuleChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&id_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:blox_test.OneWireGpioModule.GpioModuleChannel)
}

inline void GpioModuleChannel::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&id_)) + sizeof(width_));
}

GpioModuleChannel::~GpioModuleChannel() {
  // @@protoc_insertion_point(destructor:blox_test.OneWireGpioModule.GpioModuleChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpioModuleChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void GpioModuleChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpioModuleChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.OneWireGpioModule.GpioModuleChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&id_)) + sizeof(width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioModuleChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.OneWireGpioModule.GpioDeviceType deviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::blox_test::OneWireGpioModule::GpioDeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 pinsMask = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pinsmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 4 [(.nanopb) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5 [(.nanopb) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "blox_test.OneWireGpioModule.GpioModuleChannel.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpioModuleChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.OneWireGpioModule.GpioModuleChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [(.nanopb) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .blox_test.OneWireGpioModule.GpioDeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_devicetype(), target);
  }

  // uint32 pinsMask = 3 [(.nanopb) = {
  if (this->_internal_pinsmask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pinsmask(), target);
  }

  // uint32 width = 4 [(.nanopb) = {
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // string name = 5 [(.nanopb) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox_test.OneWireGpioModule.GpioModuleChannel.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.OneWireGpioModule.GpioModuleChannel)
  return target;
}

size_t GpioModuleChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.OneWireGpioModule.GpioModuleChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5 [(.nanopb) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [(.nanopb) = {
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .blox_test.OneWireGpioModule.GpioDeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  // uint32 pinsMask = 3 [(.nanopb) = {
  if (this->_internal_pinsmask() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pinsmask());
  }

  // uint32 width = 4 [(.nanopb) = {
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpioModuleChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpioModuleChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpioModuleChannel::GetClassData() const { return &_class_data_; }

void GpioModuleChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GpioModuleChannel *>(to)->MergeFrom(
      static_cast<const GpioModuleChannel &>(from));
}


void GpioModuleChannel::MergeFrom(const GpioModuleChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.OneWireGpioModule.GpioModuleChannel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
  if (from._internal_pinsmask() != 0) {
    _internal_set_pinsmask(from._internal_pinsmask());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpioModuleChannel::CopyFrom(const GpioModuleChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.OneWireGpioModule.GpioModuleChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioModuleChannel::IsInitialized() const {
  return true;
}

void GpioModuleChannel::InternalSwap(GpioModuleChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioModuleChannel, width_)
      + sizeof(GpioModuleChannel::width_)
      - PROTOBUF_FIELD_OFFSET(GpioModuleChannel, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioModuleChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_OneWireGpioModule_5ftest_2eproto_getter, &descriptor_table_OneWireGpioModule_5ftest_2eproto_once,
      file_level_metadata_OneWireGpioModule_5ftest_2eproto[0]);
}

// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.OneWireGpioModule.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&moduleposition_, &from.moduleposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&modulestatusclear_) -
    reinterpret_cast<char*>(&moduleposition_)) + sizeof(modulestatusclear_));
  // @@protoc_insertion_point(copy_constructor:blox_test.OneWireGpioModule.Block)
}

inline void Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&moduleposition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modulestatusclear_) -
    reinterpret_cast<char*>(&moduleposition_)) + sizeof(modulestatusclear_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.OneWireGpioModule.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.OneWireGpioModule.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  ::memset(&moduleposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modulestatusclear_) -
      reinterpret_cast<char*>(&moduleposition_)) + sizeof(modulestatusclear_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox_test.OneWireGpioModule.GpioModuleChannel channels = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 modulePosition = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          moduleposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 moduleStatus = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          modulestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullUpDesired = 4 [(.nanopb) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          pullupdesired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullUpStatus = 5 [(.nanopb) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          pullupstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullUpWhenActive = 6 [(.nanopb) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          pullupwhenactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullUpWhenInactive = 7 [(.nanopb) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          pullupwheninactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullDownDesired = 8 [(.nanopb) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          pulldowndesired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullDownStatus = 9 [(.nanopb) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          pulldownstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullDownWhenActive = 10 [(.nanopb) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          pulldownwhenactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pullDownWhenInactive = 11 [(.nanopb) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          pulldownwheninactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 overCurrent = 12 [(.nanopb) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          overcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 openLoad = 13 [(.nanopb) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          openload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool useExternalPower = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          useexternalpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 moduleStatusClear = 32 [(.nanopb) = {
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          modulestatusclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.OneWireGpioModule.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox_test.OneWireGpioModule.GpioModuleChannel channels = 1 [(.nanopb) = {
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 modulePosition = 2 [(.nanopb) = {
  if (this->_internal_moduleposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moduleposition(), target);
  }

  // uint32 moduleStatus = 3 [(.nanopb) = {
  if (this->_internal_modulestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modulestatus(), target);
  }

  // uint32 pullUpDesired = 4 [(.nanopb) = {
  if (this->_internal_pullupdesired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pullupdesired(), target);
  }

  // uint32 pullUpStatus = 5 [(.nanopb) = {
  if (this->_internal_pullupstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pullupstatus(), target);
  }

  // uint32 pullUpWhenActive = 6 [(.nanopb) = {
  if (this->_internal_pullupwhenactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pullupwhenactive(), target);
  }

  // uint32 pullUpWhenInactive = 7 [(.nanopb) = {
  if (this->_internal_pullupwheninactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pullupwheninactive(), target);
  }

  // uint32 pullDownDesired = 8 [(.nanopb) = {
  if (this->_internal_pulldowndesired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pulldowndesired(), target);
  }

  // uint32 pullDownStatus = 9 [(.nanopb) = {
  if (this->_internal_pulldownstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pulldownstatus(), target);
  }

  // uint32 pullDownWhenActive = 10 [(.nanopb) = {
  if (this->_internal_pulldownwhenactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pulldownwhenactive(), target);
  }

  // uint32 pullDownWhenInactive = 11 [(.nanopb) = {
  if (this->_internal_pulldownwheninactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_pulldownwheninactive(), target);
  }

  // uint32 overCurrent = 12 [(.nanopb) = {
  if (this->_internal_overcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_overcurrent(), target);
  }

  // uint32 openLoad = 13 [(.nanopb) = {
  if (this->_internal_openload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_openload(), target);
  }

  // bool useExternalPower = 14;
  if (this->_internal_useexternalpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_useexternalpower(), target);
  }

  // uint32 moduleStatusClear = 32 [(.nanopb) = {
  if (this->_internal_modulestatusclear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_modulestatusclear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.OneWireGpioModule.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.OneWireGpioModule.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox_test.OneWireGpioModule.GpioModuleChannel channels = 1 [(.nanopb) = {
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 modulePosition = 2 [(.nanopb) = {
  if (this->_internal_moduleposition() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moduleposition());
  }

  // uint32 moduleStatus = 3 [(.nanopb) = {
  if (this->_internal_modulestatus() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_modulestatus());
  }

  // uint32 pullUpDesired = 4 [(.nanopb) = {
  if (this->_internal_pullupdesired() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pullupdesired());
  }

  // uint32 pullUpStatus = 5 [(.nanopb) = {
  if (this->_internal_pullupstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pullupstatus());
  }

  // uint32 pullUpWhenActive = 6 [(.nanopb) = {
  if (this->_internal_pullupwhenactive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pullupwhenactive());
  }

  // uint32 pullUpWhenInactive = 7 [(.nanopb) = {
  if (this->_internal_pullupwheninactive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pullupwheninactive());
  }

  // uint32 pullDownDesired = 8 [(.nanopb) = {
  if (this->_internal_pulldowndesired() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pulldowndesired());
  }

  // uint32 pullDownStatus = 9 [(.nanopb) = {
  if (this->_internal_pulldownstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pulldownstatus());
  }

  // uint32 pullDownWhenActive = 10 [(.nanopb) = {
  if (this->_internal_pulldownwhenactive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pulldownwhenactive());
  }

  // uint32 pullDownWhenInactive = 11 [(.nanopb) = {
  if (this->_internal_pulldownwheninactive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pulldownwheninactive());
  }

  // uint32 overCurrent = 12 [(.nanopb) = {
  if (this->_internal_overcurrent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_overcurrent());
  }

  // uint32 openLoad = 13 [(.nanopb) = {
  if (this->_internal_openload() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_openload());
  }

  // bool useExternalPower = 14;
  if (this->_internal_useexternalpower() != 0) {
    total_size += 1 + 1;
  }

  // uint32 moduleStatusClear = 32 [(.nanopb) = {
  if (this->_internal_modulestatusclear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_modulestatusclear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.OneWireGpioModule.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_moduleposition() != 0) {
    _internal_set_moduleposition(from._internal_moduleposition());
  }
  if (from._internal_modulestatus() != 0) {
    _internal_set_modulestatus(from._internal_modulestatus());
  }
  if (from._internal_pullupdesired() != 0) {
    _internal_set_pullupdesired(from._internal_pullupdesired());
  }
  if (from._internal_pullupstatus() != 0) {
    _internal_set_pullupstatus(from._internal_pullupstatus());
  }
  if (from._internal_pullupwhenactive() != 0) {
    _internal_set_pullupwhenactive(from._internal_pullupwhenactive());
  }
  if (from._internal_pullupwheninactive() != 0) {
    _internal_set_pullupwheninactive(from._internal_pullupwheninactive());
  }
  if (from._internal_pulldowndesired() != 0) {
    _internal_set_pulldowndesired(from._internal_pulldowndesired());
  }
  if (from._internal_pulldownstatus() != 0) {
    _internal_set_pulldownstatus(from._internal_pulldownstatus());
  }
  if (from._internal_pulldownwhenactive() != 0) {
    _internal_set_pulldownwhenactive(from._internal_pulldownwhenactive());
  }
  if (from._internal_pulldownwheninactive() != 0) {
    _internal_set_pulldownwheninactive(from._internal_pulldownwheninactive());
  }
  if (from._internal_overcurrent() != 0) {
    _internal_set_overcurrent(from._internal_overcurrent());
  }
  if (from._internal_openload() != 0) {
    _internal_set_openload(from._internal_openload());
  }
  if (from._internal_useexternalpower() != 0) {
    _internal_set_useexternalpower(from._internal_useexternalpower());
  }
  if (from._internal_modulestatusclear() != 0) {
    _internal_set_modulestatusclear(from._internal_modulestatusclear());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.OneWireGpioModule.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, modulestatusclear_)
      + sizeof(Block::modulestatusclear_)
      - PROTOBUF_FIELD_OFFSET(Block, moduleposition_)>(
          reinterpret_cast<char*>(&moduleposition_),
          reinterpret_cast<char*>(&other->moduleposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_OneWireGpioModule_5ftest_2eproto_getter, &descriptor_table_OneWireGpioModule_5ftest_2eproto_once,
      file_level_metadata_OneWireGpioModule_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace OneWireGpioModule
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::OneWireGpioModule::GpioModuleChannel*
Arena::CreateMaybeMessage< ::blox_test::OneWireGpioModule::GpioModuleChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::OneWireGpioModule::GpioModuleChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::OneWireGpioModule::Block*
Arena::CreateMaybeMessage< ::blox_test::OneWireGpioModule::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::OneWireGpioModule::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
