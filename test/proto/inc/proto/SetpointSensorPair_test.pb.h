// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SetpointSensorPair_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SetpointSensorPair_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SetpointSensorPair_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SetpointSensorPair_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SetpointSensorPair_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SetpointSensorPair_5ftest_2eproto;
namespace blox_test {
namespace SetpointSensorPair {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace SetpointSensorPair
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::SetpointSensorPair::Block* Arena::CreateMaybeMessage<::blox_test::SetpointSensorPair::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace SetpointSensorPair {

enum FilterChoice : int {
  FILTER_NONE = 0,
  FILTER_15s = 1,
  FILTER_45s = 2,
  FILTER_90s = 3,
  FILTER_3m = 4,
  FILTER_10m = 5,
  FILTER_30m = 6,
  FilterChoice_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FilterChoice_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FilterChoice_IsValid(int value);
constexpr FilterChoice FilterChoice_MIN = FILTER_NONE;
constexpr FilterChoice FilterChoice_MAX = FILTER_30m;
constexpr int FilterChoice_ARRAYSIZE = FilterChoice_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterChoice_descriptor();
template<typename T>
inline const std::string& FilterChoice_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterChoice>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterChoice_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FilterChoice_descriptor(), enum_t_value);
}
inline bool FilterChoice_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilterChoice* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FilterChoice>(
    FilterChoice_descriptor(), name, value);
}
// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.SetpointSensorPair.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.SetpointSensorPair.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrippedFieldsFieldNumber = 99,
    kSensorIdFieldNumber = 2,
    kSettingFieldNumber = 5,
    kValueFieldNumber = 6,
    kStoredSettingFieldNumber = 8,
    kFilterFieldNumber = 9,
    kSettingEnabledFieldNumber = 7,
    kResetFilterFieldNumber = 12,
    kFilterThresholdFieldNumber = 10,
    kValueUnfilteredFieldNumber = 11,
  };
  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  uint32_t _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_strippedfields();
  public:
  uint32_t strippedfields(int index) const;
  void set_strippedfields(int index, uint32_t value);
  void add_strippedfields(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_strippedfields();

  // uint32 sensorId = 2 [(.nanopb) = {
  void clear_sensorid();
  uint32_t sensorid() const;
  void set_sensorid(uint32_t value);
  private:
  uint32_t _internal_sensorid() const;
  void _internal_set_sensorid(uint32_t value);
  public:

  // sint32 setting = 5 [(.nanopb) = {
  void clear_setting();
  int32_t setting() const;
  void set_setting(int32_t value);
  private:
  int32_t _internal_setting() const;
  void _internal_set_setting(int32_t value);
  public:

  // sint32 value = 6 [(.nanopb) = {
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // sint32 storedSetting = 8 [(.nanopb) = {
  void clear_storedsetting();
  int32_t storedsetting() const;
  void set_storedsetting(int32_t value);
  private:
  int32_t _internal_storedsetting() const;
  void _internal_set_storedsetting(int32_t value);
  public:

  // .blox_test.SetpointSensorPair.FilterChoice filter = 9;
  void clear_filter();
  ::blox_test::SetpointSensorPair::FilterChoice filter() const;
  void set_filter(::blox_test::SetpointSensorPair::FilterChoice value);
  private:
  ::blox_test::SetpointSensorPair::FilterChoice _internal_filter() const;
  void _internal_set_filter(::blox_test::SetpointSensorPair::FilterChoice value);
  public:

  // bool settingEnabled = 7;
  void clear_settingenabled();
  bool settingenabled() const;
  void set_settingenabled(bool value);
  private:
  bool _internal_settingenabled() const;
  void _internal_set_settingenabled(bool value);
  public:

  // bool resetFilter = 12;
  void clear_resetfilter();
  bool resetfilter() const;
  void set_resetfilter(bool value);
  private:
  bool _internal_resetfilter() const;
  void _internal_set_resetfilter(bool value);
  public:

  // sint32 filterThreshold = 10 [(.nanopb) = {
  void clear_filterthreshold();
  int32_t filterthreshold() const;
  void set_filterthreshold(int32_t value);
  private:
  int32_t _internal_filterthreshold() const;
  void _internal_set_filterthreshold(int32_t value);
  public:

  // sint32 valueUnfiltered = 11 [(.nanopb) = {
  void clear_valueunfiltered();
  int32_t valueunfiltered() const;
  void set_valueunfiltered(int32_t value);
  private:
  int32_t _internal_valueunfiltered() const;
  void _internal_set_valueunfiltered(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.SetpointSensorPair.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  uint32_t sensorid_;
  int32_t setting_;
  int32_t value_;
  int32_t storedsetting_;
  int filter_;
  bool settingenabled_;
  bool resetfilter_;
  int32_t filterthreshold_;
  int32_t valueunfiltered_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SetpointSensorPair_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// uint32 sensorId = 2 [(.nanopb) = {
inline void Block::clear_sensorid() {
  sensorid_ = 0u;
}
inline uint32_t Block::_internal_sensorid() const {
  return sensorid_;
}
inline uint32_t Block::sensorid() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.sensorId)
  return _internal_sensorid();
}
inline void Block::_internal_set_sensorid(uint32_t value) {
  
  sensorid_ = value;
}
inline void Block::set_sensorid(uint32_t value) {
  _internal_set_sensorid(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.sensorId)
}

// sint32 setting = 5 [(.nanopb) = {
inline void Block::clear_setting() {
  setting_ = 0;
}
inline int32_t Block::_internal_setting() const {
  return setting_;
}
inline int32_t Block::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.setting)
  return _internal_setting();
}
inline void Block::_internal_set_setting(int32_t value) {
  
  setting_ = value;
}
inline void Block::set_setting(int32_t value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.setting)
}

// sint32 value = 6 [(.nanopb) = {
inline void Block::clear_value() {
  value_ = 0;
}
inline int32_t Block::_internal_value() const {
  return value_;
}
inline int32_t Block::value() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.value)
  return _internal_value();
}
inline void Block::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void Block::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.value)
}

// bool settingEnabled = 7;
inline void Block::clear_settingenabled() {
  settingenabled_ = false;
}
inline bool Block::_internal_settingenabled() const {
  return settingenabled_;
}
inline bool Block::settingenabled() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.settingEnabled)
  return _internal_settingenabled();
}
inline void Block::_internal_set_settingenabled(bool value) {
  
  settingenabled_ = value;
}
inline void Block::set_settingenabled(bool value) {
  _internal_set_settingenabled(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.settingEnabled)
}

// sint32 storedSetting = 8 [(.nanopb) = {
inline void Block::clear_storedsetting() {
  storedsetting_ = 0;
}
inline int32_t Block::_internal_storedsetting() const {
  return storedsetting_;
}
inline int32_t Block::storedsetting() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.storedSetting)
  return _internal_storedsetting();
}
inline void Block::_internal_set_storedsetting(int32_t value) {
  
  storedsetting_ = value;
}
inline void Block::set_storedsetting(int32_t value) {
  _internal_set_storedsetting(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.storedSetting)
}

// .blox_test.SetpointSensorPair.FilterChoice filter = 9;
inline void Block::clear_filter() {
  filter_ = 0;
}
inline ::blox_test::SetpointSensorPair::FilterChoice Block::_internal_filter() const {
  return static_cast< ::blox_test::SetpointSensorPair::FilterChoice >(filter_);
}
inline ::blox_test::SetpointSensorPair::FilterChoice Block::filter() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.filter)
  return _internal_filter();
}
inline void Block::_internal_set_filter(::blox_test::SetpointSensorPair::FilterChoice value) {
  
  filter_ = value;
}
inline void Block::set_filter(::blox_test::SetpointSensorPair::FilterChoice value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.filter)
}

// sint32 filterThreshold = 10 [(.nanopb) = {
inline void Block::clear_filterthreshold() {
  filterthreshold_ = 0;
}
inline int32_t Block::_internal_filterthreshold() const {
  return filterthreshold_;
}
inline int32_t Block::filterthreshold() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.filterThreshold)
  return _internal_filterthreshold();
}
inline void Block::_internal_set_filterthreshold(int32_t value) {
  
  filterthreshold_ = value;
}
inline void Block::set_filterthreshold(int32_t value) {
  _internal_set_filterthreshold(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.filterThreshold)
}

// sint32 valueUnfiltered = 11 [(.nanopb) = {
inline void Block::clear_valueunfiltered() {
  valueunfiltered_ = 0;
}
inline int32_t Block::_internal_valueunfiltered() const {
  return valueunfiltered_;
}
inline int32_t Block::valueunfiltered() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.valueUnfiltered)
  return _internal_valueunfiltered();
}
inline void Block::_internal_set_valueunfiltered(int32_t value) {
  
  valueunfiltered_ = value;
}
inline void Block::set_valueunfiltered(int32_t value) {
  _internal_set_valueunfiltered(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.valueUnfiltered)
}

// bool resetFilter = 12;
inline void Block::clear_resetfilter() {
  resetfilter_ = false;
}
inline bool Block::_internal_resetfilter() const {
  return resetfilter_;
}
inline bool Block::resetfilter() const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.resetFilter)
  return _internal_resetfilter();
}
inline void Block::_internal_set_resetfilter(bool value) {
  
  resetfilter_ = value;
}
inline void Block::set_resetfilter(bool value) {
  _internal_set_resetfilter(value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.resetFilter)
}

// repeated uint32 strippedFields = 99 [(.nanopb) = {
inline int Block::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int Block::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void Block::clear_strippedfields() {
  strippedfields_.Clear();
}
inline uint32_t Block::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline uint32_t Block::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.SetpointSensorPair.Block.strippedFields)
  return _internal_strippedfields(index);
}
inline void Block::set_strippedfields(int index, uint32_t value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox_test.SetpointSensorPair.Block.strippedFields)
}
inline void Block::_internal_add_strippedfields(uint32_t value) {
  strippedfields_.Add(value);
}
inline void Block::add_strippedfields(uint32_t value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox_test.SetpointSensorPair.Block.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox_test.SetpointSensorPair.Block.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.SetpointSensorPair.Block.strippedFields)
  return _internal_mutable_strippedfields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SetpointSensorPair
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::SetpointSensorPair::FilterChoice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::SetpointSensorPair::FilterChoice>() {
  return ::blox_test::SetpointSensorPair::FilterChoice_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SetpointSensorPair_5ftest_2eproto
