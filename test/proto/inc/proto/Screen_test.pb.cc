// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Screen_test.proto

#include "Screen_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace screen {
PROTOBUF_CONSTEXPR LayoutNode::LayoutNode(
    ::_pbi::ConstantInitialized)
  : parent_(0u)
  , nodeid_(0u)
  , type_(0)

  , weight_(0u){}
struct LayoutNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayoutNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayoutNodeDefaultTypeInternal() {}
  union {
    LayoutNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayoutNodeDefaultTypeInternal _LayoutNode_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized)
  : r_(0u)
  , g_(0u)
  , b_(0u){}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
PROTOBUF_CONSTEXPR NumericValueWidget::NumericValueWidget(
    ::_pbi::ConstantInitialized)
  : label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , color_(nullptr)
  , value_(0u){}
struct NumericValueWidgetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumericValueWidgetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumericValueWidgetDefaultTypeInternal() {}
  union {
    NumericValueWidget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumericValueWidgetDefaultTypeInternal _NumericValueWidget_default_instance_;
PROTOBUF_CONSTEXPR ColorWidget::ColorWidget(
    ::_pbi::ConstantInitialized)
  : color_(nullptr){}
struct ColorWidgetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorWidgetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorWidgetDefaultTypeInternal() {}
  union {
    ColorWidget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorWidgetDefaultTypeInternal _ColorWidget_default_instance_;
PROTOBUF_CONSTEXPR ContentNode::ContentNode(
    ::_pbi::ConstantInitialized)
  : layoutnodeid_(0u)
  , _oneof_case_{}{}
struct ContentNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentNodeDefaultTypeInternal() {}
  union {
    ContentNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentNodeDefaultTypeInternal _ContentNode_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized)
  : layoutnodes_()
  , contentnodes_(){}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace screen
static ::_pb::Metadata file_level_metadata_Screen_5ftest_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Screen_5ftest_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Screen_5ftest_2eproto = nullptr;

const uint32_t TableStruct_Screen_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::screen::LayoutNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::screen::LayoutNode, parent_),
  PROTOBUF_FIELD_OFFSET(::screen::LayoutNode, nodeid_),
  PROTOBUF_FIELD_OFFSET(::screen::LayoutNode, type_),
  PROTOBUF_FIELD_OFFSET(::screen::LayoutNode, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::screen::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::screen::Color, r_),
  PROTOBUF_FIELD_OFFSET(::screen::Color, g_),
  PROTOBUF_FIELD_OFFSET(::screen::Color, b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::screen::NumericValueWidget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::screen::NumericValueWidget, color_),
  PROTOBUF_FIELD_OFFSET(::screen::NumericValueWidget, value_),
  PROTOBUF_FIELD_OFFSET(::screen::NumericValueWidget, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::screen::ColorWidget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::screen::ColorWidget, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::screen::ContentNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::screen::ContentNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::screen::ContentNode, layoutnodeid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::screen::ContentNode, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::screen::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::screen::Config, layoutnodes_),
  PROTOBUF_FIELD_OFFSET(::screen::Config, contentnodes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::screen::LayoutNode)},
  { 10, -1, -1, sizeof(::screen::Color)},
  { 19, -1, -1, sizeof(::screen::NumericValueWidget)},
  { 28, -1, -1, sizeof(::screen::ColorWidget)},
  { 35, -1, -1, sizeof(::screen::ContentNode)},
  { 45, -1, -1, sizeof(::screen::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::screen::_LayoutNode_default_instance_._instance,
  &::screen::_Color_default_instance_._instance,
  &::screen::_NumericValueWidget_default_instance_._instance,
  &::screen::_ColorWidget_default_instance_._instance,
  &::screen::_ContentNode_default_instance_._instance,
  &::screen::_Config_default_instance_._instance,
};

const char descriptor_table_protodef_Screen_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Screen_test.proto\022\006screen\032\021nanopb_test"
  ".proto\"\242\001\n\nLayoutNode\022\025\n\006parent\030\001 \001(\rB\005\222"
  "\?\0028\010\022\025\n\006nodeId\030\002 \001(\rB\005\222\?\0028\010\022%\n\004type\030\003 \001("
  "\0162\027.screen.LayoutNode.Type\022\025\n\006weight\030\004 \001"
  "(\rB\005\222\?\0028\020\"(\n\004Type\022\007\n\003Row\020\000\022\n\n\006Column\020\001\022\013"
  "\n\007Content\020\002\"=\n\005Color\022\020\n\001r\030\001 \001(\rB\005\222\?\0028\010\022\020"
  "\n\001g\030\002 \001(\rB\005\222\?\0028\010\022\020\n\001b\030\003 \001(\rB\005\222\?\0028\010\"^\n\022Nu"
  "mericValueWidget\022\034\n\005color\030\001 \001(\0132\r.screen"
  ".Color\022\024\n\005value\030\002 \001(\rB\005\222\?\0028\010\022\024\n\005label\030\003 "
  "\001(\tB\005\222\?\002p(\"+\n\013ColorWidget\022\034\n\005color\030\001 \001(\013"
  "2\r.screen.Color\"\233\001\n\013ContentNode\022\033\n\014layou"
  "tNodeId\030\001 \001(\rB\005\222\?\0028\010\0228\n\022numericValueWidg"
  "et\030\002 \001(\0132\032.screen.NumericValueWidgetH\000\022*"
  "\n\013colorWidget\030\003 \001(\0132\023.screen.ColorWidget"
  "H\000B\t\n\007content\"\\\n\006Config\022\'\n\013layoutNodes\030\001"
  " \003(\0132\022.screen.LayoutNode\022)\n\014contentNodes"
  "\030\002 \003(\0132\023.screen.ContentNodeb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Screen_5ftest_2eproto_deps[1] = {
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::_pbi::once_flag descriptor_table_Screen_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Screen_5ftest_2eproto = {
    false, false, 675, descriptor_table_protodef_Screen_5ftest_2eproto,
    "Screen_test.proto",
    &descriptor_table_Screen_5ftest_2eproto_once, descriptor_table_Screen_5ftest_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_Screen_5ftest_2eproto::offsets,
    file_level_metadata_Screen_5ftest_2eproto, file_level_enum_descriptors_Screen_5ftest_2eproto,
    file_level_service_descriptors_Screen_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Screen_5ftest_2eproto_getter() {
  return &descriptor_table_Screen_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Screen_5ftest_2eproto(&descriptor_table_Screen_5ftest_2eproto);
namespace screen {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayoutNode_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Screen_5ftest_2eproto);
  return file_level_enum_descriptors_Screen_5ftest_2eproto[0];
}
bool LayoutNode_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayoutNode_Type LayoutNode::Row;
constexpr LayoutNode_Type LayoutNode::Column;
constexpr LayoutNode_Type LayoutNode::Content;
constexpr LayoutNode_Type LayoutNode::Type_MIN;
constexpr LayoutNode_Type LayoutNode::Type_MAX;
constexpr int LayoutNode::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LayoutNode::_Internal {
 public:
};

LayoutNode::LayoutNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:screen.LayoutNode)
}
LayoutNode::LayoutNode(const LayoutNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&parent_, &from.parent_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:screen.LayoutNode)
}

inline void LayoutNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(weight_));
}

LayoutNode::~LayoutNode() {
  // @@protoc_insertion_point(destructor:screen.LayoutNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayoutNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LayoutNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayoutNode::Clear() {
// @@protoc_insertion_point(message_clear_start:screen.LayoutNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&parent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&parent_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 parent = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nodeId = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .screen.LayoutNode.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::screen::LayoutNode_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 weight = 4 [(.nanopb) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayoutNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:screen.LayoutNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 parent = 1 [(.nanopb) = {
  if (this->_internal_parent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_parent(), target);
  }

  // uint32 nodeId = 2 [(.nanopb) = {
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nodeid(), target);
  }

  // .screen.LayoutNode.Type type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // uint32 weight = 4 [(.nanopb) = {
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:screen.LayoutNode)
  return target;
}

size_t LayoutNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:screen.LayoutNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 parent = 1 [(.nanopb) = {
  if (this->_internal_parent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent());
  }

  // uint32 nodeId = 2 [(.nanopb) = {
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodeid());
  }

  // .screen.LayoutNode.Type type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 weight = 4 [(.nanopb) = {
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayoutNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutNode::GetClassData() const { return &_class_data_; }

void LayoutNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LayoutNode *>(to)->MergeFrom(
      static_cast<const LayoutNode &>(from));
}


void LayoutNode::MergeFrom(const LayoutNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:screen.LayoutNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_parent() != 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from._internal_nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutNode::CopyFrom(const LayoutNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:screen.LayoutNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutNode::IsInitialized() const {
  return true;
}

void LayoutNode::InternalSwap(LayoutNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayoutNode, weight_)
      + sizeof(LayoutNode::weight_)
      - PROTOBUF_FIELD_OFFSET(LayoutNode, parent_)>(
          reinterpret_cast<char*>(&parent_),
          reinterpret_cast<char*>(&other->parent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Screen_5ftest_2eproto_getter, &descriptor_table_Screen_5ftest_2eproto_once,
      file_level_metadata_Screen_5ftest_2eproto[0]);
}

// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:screen.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:screen.Color)
}

inline void Color::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:screen.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:screen.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 r = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 g = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 b = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:screen.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 r = 1 [(.nanopb) = {
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_r(), target);
  }

  // uint32 g = 2 [(.nanopb) = {
  if (this->_internal_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_g(), target);
  }

  // uint32 b = 3 [(.nanopb) = {
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:screen.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:screen.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 r = 1 [(.nanopb) = {
  if (this->_internal_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_r());
  }

  // uint32 g = 2 [(.nanopb) = {
  if (this->_internal_g() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_g());
  }

  // uint32 b = 3 [(.nanopb) = {
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }

void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Color *>(to)->MergeFrom(
      static_cast<const Color &>(from));
}


void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:screen.Color)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from._internal_g() != 0) {
    _internal_set_g(from._internal_g());
  }
  if (from._internal_b() != 0) {
    _internal_set_b(from._internal_b());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:screen.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, b_)
      + sizeof(Color::b_)
      - PROTOBUF_FIELD_OFFSET(Color, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Screen_5ftest_2eproto_getter, &descriptor_table_Screen_5ftest_2eproto_once,
      file_level_metadata_Screen_5ftest_2eproto[1]);
}

// ===================================================================

class NumericValueWidget::_Internal {
 public:
  static const ::screen::Color& color(const NumericValueWidget* msg);
};

const ::screen::Color&
NumericValueWidget::_Internal::color(const NumericValueWidget* msg) {
  return *msg->color_;
}
NumericValueWidget::NumericValueWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:screen.NumericValueWidget)
}
NumericValueWidget::NumericValueWidget(const NumericValueWidget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    color_ = new ::screen::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:screen.NumericValueWidget)
}

inline void NumericValueWidget::SharedCtor() {
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&color_)) + sizeof(value_));
}

NumericValueWidget::~NumericValueWidget() {
  // @@protoc_insertion_point(destructor:screen.NumericValueWidget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumericValueWidget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.Destroy();
  if (this != internal_default_instance()) delete color_;
}

void NumericValueWidget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumericValueWidget::Clear() {
// @@protoc_insertion_point(message_clear_start:screen.NumericValueWidget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumericValueWidget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .screen.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "screen.NumericValueWidget.label"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumericValueWidget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:screen.NumericValueWidget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .screen.Color color = 1;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // uint32 value = 2 [(.nanopb) = {
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // string label = 3 [(.nanopb) = {
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "screen.NumericValueWidget.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:screen.NumericValueWidget)
  return target;
}

size_t NumericValueWidget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:screen.NumericValueWidget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 3 [(.nanopb) = {
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .screen.Color color = 1;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // uint32 value = 2 [(.nanopb) = {
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumericValueWidget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NumericValueWidget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumericValueWidget::GetClassData() const { return &_class_data_; }

void NumericValueWidget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NumericValueWidget *>(to)->MergeFrom(
      static_cast<const NumericValueWidget &>(from));
}


void NumericValueWidget::MergeFrom(const NumericValueWidget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:screen.NumericValueWidget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (from._internal_has_color()) {
    _internal_mutable_color()->::screen::Color::MergeFrom(from._internal_color());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumericValueWidget::CopyFrom(const NumericValueWidget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:screen.NumericValueWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumericValueWidget::IsInitialized() const {
  return true;
}

void NumericValueWidget::InternalSwap(NumericValueWidget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumericValueWidget, value_)
      + sizeof(NumericValueWidget::value_)
      - PROTOBUF_FIELD_OFFSET(NumericValueWidget, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumericValueWidget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Screen_5ftest_2eproto_getter, &descriptor_table_Screen_5ftest_2eproto_once,
      file_level_metadata_Screen_5ftest_2eproto[2]);
}

// ===================================================================

class ColorWidget::_Internal {
 public:
  static const ::screen::Color& color(const ColorWidget* msg);
};

const ::screen::Color&
ColorWidget::_Internal::color(const ColorWidget* msg) {
  return *msg->color_;
}
ColorWidget::ColorWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:screen.ColorWidget)
}
ColorWidget::ColorWidget(const ColorWidget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::screen::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:screen.ColorWidget)
}

inline void ColorWidget::SharedCtor() {
color_ = nullptr;
}

ColorWidget::~ColorWidget() {
  // @@protoc_insertion_point(destructor:screen.ColorWidget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColorWidget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void ColorWidget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorWidget::Clear() {
// @@protoc_insertion_point(message_clear_start:screen.ColorWidget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorWidget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .screen.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorWidget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:screen.ColorWidget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .screen.Color color = 1;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:screen.ColorWidget)
  return target;
}

size_t ColorWidget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:screen.ColorWidget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .screen.Color color = 1;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorWidget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorWidget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorWidget::GetClassData() const { return &_class_data_; }

void ColorWidget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorWidget *>(to)->MergeFrom(
      static_cast<const ColorWidget &>(from));
}


void ColorWidget::MergeFrom(const ColorWidget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:screen.ColorWidget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_mutable_color()->::screen::Color::MergeFrom(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorWidget::CopyFrom(const ColorWidget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:screen.ColorWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorWidget::IsInitialized() const {
  return true;
}

void ColorWidget::InternalSwap(ColorWidget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorWidget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Screen_5ftest_2eproto_getter, &descriptor_table_Screen_5ftest_2eproto_once,
      file_level_metadata_Screen_5ftest_2eproto[3]);
}

// ===================================================================

class ContentNode::_Internal {
 public:
  static const ::screen::NumericValueWidget& numericvaluewidget(const ContentNode* msg);
  static const ::screen::ColorWidget& colorwidget(const ContentNode* msg);
};

const ::screen::NumericValueWidget&
ContentNode::_Internal::numericvaluewidget(const ContentNode* msg) {
  return *msg->content_.numericvaluewidget_;
}
const ::screen::ColorWidget&
ContentNode::_Internal::colorwidget(const ContentNode* msg) {
  return *msg->content_.colorwidget_;
}
void ContentNode::set_allocated_numericvaluewidget(::screen::NumericValueWidget* numericvaluewidget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (numericvaluewidget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(numericvaluewidget);
    if (message_arena != submessage_arena) {
      numericvaluewidget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numericvaluewidget, submessage_arena);
    }
    set_has_numericvaluewidget();
    content_.numericvaluewidget_ = numericvaluewidget;
  }
  // @@protoc_insertion_point(field_set_allocated:screen.ContentNode.numericValueWidget)
}
void ContentNode::set_allocated_colorwidget(::screen::ColorWidget* colorwidget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (colorwidget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(colorwidget);
    if (message_arena != submessage_arena) {
      colorwidget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colorwidget, submessage_arena);
    }
    set_has_colorwidget();
    content_.colorwidget_ = colorwidget;
  }
  // @@protoc_insertion_point(field_set_allocated:screen.ContentNode.colorWidget)
}
ContentNode::ContentNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:screen.ContentNode)
}
ContentNode::ContentNode(const ContentNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  layoutnodeid_ = from.layoutnodeid_;
  clear_has_content();
  switch (from.content_case()) {
    case kNumericValueWidget: {
      _internal_mutable_numericvaluewidget()->::screen::NumericValueWidget::MergeFrom(from._internal_numericvaluewidget());
      break;
    }
    case kColorWidget: {
      _internal_mutable_colorwidget()->::screen::ColorWidget::MergeFrom(from._internal_colorwidget());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:screen.ContentNode)
}

inline void ContentNode::SharedCtor() {
layoutnodeid_ = 0u;
clear_has_content();
}

ContentNode::~ContentNode() {
  // @@protoc_insertion_point(destructor:screen.ContentNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void ContentNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentNode::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:screen.ContentNode)
  switch (content_case()) {
    case kNumericValueWidget: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.numericvaluewidget_;
      }
      break;
    }
    case kColorWidget: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.colorwidget_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ContentNode::Clear() {
// @@protoc_insertion_point(message_clear_start:screen.ContentNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layoutnodeid_ = 0u;
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 layoutNodeId = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          layoutnodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .screen.NumericValueWidget numericValueWidget = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_numericvaluewidget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .screen.ColorWidget colorWidget = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorwidget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:screen.ContentNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 layoutNodeId = 1 [(.nanopb) = {
  if (this->_internal_layoutnodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_layoutnodeid(), target);
  }

  // .screen.NumericValueWidget numericValueWidget = 2;
  if (_internal_has_numericvaluewidget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::numericvaluewidget(this),
        _Internal::numericvaluewidget(this).GetCachedSize(), target, stream);
  }

  // .screen.ColorWidget colorWidget = 3;
  if (_internal_has_colorwidget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::colorwidget(this),
        _Internal::colorwidget(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:screen.ContentNode)
  return target;
}

size_t ContentNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:screen.ContentNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 layoutNodeId = 1 [(.nanopb) = {
  if (this->_internal_layoutnodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layoutnodeid());
  }

  switch (content_case()) {
    // .screen.NumericValueWidget numericValueWidget = 2;
    case kNumericValueWidget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.numericvaluewidget_);
      break;
    }
    // .screen.ColorWidget colorWidget = 3;
    case kColorWidget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.colorwidget_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentNode::GetClassData() const { return &_class_data_; }

void ContentNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentNode *>(to)->MergeFrom(
      static_cast<const ContentNode &>(from));
}


void ContentNode::MergeFrom(const ContentNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:screen.ContentNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_layoutnodeid() != 0) {
    _internal_set_layoutnodeid(from._internal_layoutnodeid());
  }
  switch (from.content_case()) {
    case kNumericValueWidget: {
      _internal_mutable_numericvaluewidget()->::screen::NumericValueWidget::MergeFrom(from._internal_numericvaluewidget());
      break;
    }
    case kColorWidget: {
      _internal_mutable_colorwidget()->::screen::ColorWidget::MergeFrom(from._internal_colorwidget());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentNode::CopyFrom(const ContentNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:screen.ContentNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentNode::IsInitialized() const {
  return true;
}

void ContentNode::InternalSwap(ContentNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(layoutnodeid_, other->layoutnodeid_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Screen_5ftest_2eproto_getter, &descriptor_table_Screen_5ftest_2eproto_once,
      file_level_metadata_Screen_5ftest_2eproto[4]);
}

// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layoutnodes_(arena),
  contentnodes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:screen.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layoutnodes_(from.layoutnodes_),
      contentnodes_(from.contentnodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:screen.Config)
}

inline void Config::SharedCtor() {
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:screen.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:screen.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layoutnodes_.Clear();
  contentnodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .screen.LayoutNode layoutNodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layoutnodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .screen.ContentNode contentNodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contentnodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:screen.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .screen.LayoutNode layoutNodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layoutnodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_layoutnodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .screen.ContentNode contentNodes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contentnodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_contentnodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:screen.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:screen.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .screen.LayoutNode layoutNodes = 1;
  total_size += 1UL * this->_internal_layoutnodes_size();
  for (const auto& msg : this->layoutnodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .screen.ContentNode contentNodes = 2;
  total_size += 1UL * this->_internal_contentnodes_size();
  for (const auto& msg : this->contentnodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:screen.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layoutnodes_.MergeFrom(from.layoutnodes_);
  contentnodes_.MergeFrom(from.contentnodes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:screen.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layoutnodes_.InternalSwap(&other->layoutnodes_);
  contentnodes_.InternalSwap(&other->contentnodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Screen_5ftest_2eproto_getter, &descriptor_table_Screen_5ftest_2eproto_once,
      file_level_metadata_Screen_5ftest_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace screen
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::screen::LayoutNode*
Arena::CreateMaybeMessage< ::screen::LayoutNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::screen::LayoutNode >(arena);
}
template<> PROTOBUF_NOINLINE ::screen::Color*
Arena::CreateMaybeMessage< ::screen::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::screen::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::screen::NumericValueWidget*
Arena::CreateMaybeMessage< ::screen::NumericValueWidget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::screen::NumericValueWidget >(arena);
}
template<> PROTOBUF_NOINLINE ::screen::ColorWidget*
Arena::CreateMaybeMessage< ::screen::ColorWidget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::screen::ColorWidget >(arena);
}
template<> PROTOBUF_NOINLINE ::screen::ContentNode*
Arena::CreateMaybeMessage< ::screen::ContentNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::screen::ContentNode >(arena);
}
template<> PROTOBUF_NOINLINE ::screen::Config*
Arena::CreateMaybeMessage< ::screen::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::screen::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
