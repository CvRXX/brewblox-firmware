// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SysInfo_test.proto

#include "SysInfo_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace blox_test {
namespace SysInfo {
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block>
      _instance;
} _Block_default_instance_;
}  // namespace SysInfo
}  // namespace blox_test
namespace protobuf_SysInfo_5ftest_2eproto {
static void InitDefaultsBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::SysInfo::_Block_default_instance_;
    new (ptr) ::blox_test::SysInfo::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::SysInfo::Block::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Block =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlock}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Block.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, releasedate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, protocoldate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, updatespersecond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, systemtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, tempunit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::SysInfo::Block, displaybrightness_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox_test::SysInfo::Block)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox_test::SysInfo::_Block_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "SysInfo_test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022SysInfo_test.proto\022\021blox_test.SysInfo\032"
      "\023brewblox_test.proto\032\021nanopb_test.proto\""
      "\212\004\n\005Block\022#\n\010deviceId\030\001 \001(\014B\021\212\265\030\002(\001\222\?\002\010\014"
      "\212\265\030\0028\001\022\034\n\007version\030\002 \001(\tB\013\212\265\030\002(\001\222\?\002\010\014\0225\n\010"
      "platform\030\003 \001(\0162\033.blox_test.SysInfo.Platf"
      "ormB\006\212\265\030\002(\001\022$\n\017protocolVersion\030\007 \001(\tB\013\212\265"
      "\030\002(\001\222\?\002\010\014\022 \n\013releaseDate\030\010 \001(\tB\013\212\265\030\002(\001\222\?"
      "\002\010\014\022!\n\014protocolDate\030\t \001(\tB\013\212\265\030\002(\001\222\?\002\010\014\022\035"
      "\n\002ip\030\n \001(\rB\021\212\265\030\002(\001\212\265\030\002`\001\222\?\0028 \022.\n\006uptime\030"
      "\013 \001(\rB\036\212\265\030\002(\001\212\265\030\0020\001\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 \0222\n"
      "\020updatesPerSecond\030\014 \001(\rB\030\212\265\030\002(\001\212\265\030\0020\001\212\265\030"
      "\003\020\350\007\222\?\0028 \022\037\n\nsystemTime\030\r \001(\rB\013\212\265\030\002X\001\222\?\002"
      "8 \022\027\n\010timeZone\030\016 \001(\tB\005\222\?\002\010 \0224\n\010tempUnit\030"
      "\017 \001(\0162\".blox_test.SysInfo.TemperatureUni"
      "t\022 \n\021displayBrightness\030\020 \001(\rB\005\222\?\0028\010:\007\212\265\030"
      "\003\030\200\002*}\n\010Platform\022\024\n\020PLATFORM_UNKNOWN\020\000\022\020"
      "\n\014PLATFORM_GCC\020\003\022\023\n\017PLATFORM_PHOTON\020\006\022\017\n"
      "\013PLATFORM_P1\020\010\022\020\n\014PLATFORM_ESP\020d\022\021\n\014PLAT"
      "FORM_SIM\020\310\001*8\n\017TemperatureUnit\022\020\n\014TEMP_C"
      "ELSIUS\020\000\022\023\n\017TEMP_FAHRENHEIT\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 797);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SysInfo_test.proto", &protobuf_RegisterTypes);
  ::protobuf_brewblox_5ftest_2eproto::AddDescriptors();
  ::protobuf_nanopb_5ftest_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SysInfo_5ftest_2eproto
namespace blox_test {
namespace SysInfo {
const ::google::protobuf::EnumDescriptor* Platform_descriptor() {
  protobuf_SysInfo_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SysInfo_5ftest_2eproto::file_level_enum_descriptors[0];
}
bool Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 6:
    case 8:
    case 100:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TemperatureUnit_descriptor() {
  protobuf_SysInfo_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SysInfo_5ftest_2eproto::file_level_enum_descriptors[1];
}
bool TemperatureUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Block::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kDeviceIdFieldNumber;
const int Block::kVersionFieldNumber;
const int Block::kPlatformFieldNumber;
const int Block::kProtocolVersionFieldNumber;
const int Block::kReleaseDateFieldNumber;
const int Block::kProtocolDateFieldNumber;
const int Block::kIpFieldNumber;
const int Block::kUptimeFieldNumber;
const int Block::kUpdatesPerSecondFieldNumber;
const int Block::kSystemTimeFieldNumber;
const int Block::kTimeZoneFieldNumber;
const int Block::kTempUnitFieldNumber;
const int Block::kDisplayBrightnessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_SysInfo_5ftest_2eproto::scc_info_Block.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox_test.SysInfo.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  protocolversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocolversion().size() > 0) {
    protocolversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolversion_);
  }
  releasedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.releasedate().size() > 0) {
    releasedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.releasedate_);
  }
  protocoldate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocoldate().size() > 0) {
    protocoldate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoldate_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timezone().size() > 0) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  ::memcpy(&platform_, &from.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&displaybrightness_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(displaybrightness_));
  // @@protoc_insertion_point(copy_constructor:blox_test.SysInfo.Block)
}

void Block::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  releasedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocoldate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&displaybrightness_) -
      reinterpret_cast<char*>(&platform_)) + sizeof(displaybrightness_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.SysInfo.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  releasedate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocoldate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  ::protobuf_SysInfo_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SysInfo_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Block& Block::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_SysInfo_5ftest_2eproto::scc_info_Block.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.SysInfo.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  releasedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocoldate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&displaybrightness_) -
      reinterpret_cast<char*>(&platform_)) + sizeof(displaybrightness_));
  _internal_metadata_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox_test.SysInfo.Block)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes deviceId = 1 [(.nanopb) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blox_test.SysInfo.Block.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox_test.SysInfo.Platform platform = 3 [(.brewblox.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_platform(static_cast< ::blox_test::SysInfo::Platform >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocolVersion = 7 [(.nanopb) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocolversion().data(), static_cast<int>(this->protocolversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blox_test.SysInfo.Block.protocolVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string releaseDate = 8 [(.nanopb) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_releasedate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->releasedate().data(), static_cast<int>(this->releasedate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blox_test.SysInfo.Block.releaseDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocolDate = 9 [(.nanopb) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocoldate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocoldate().data(), static_cast<int>(this->protocoldate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blox_test.SysInfo.Block.protocolDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ip = 10 [(.nanopb) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uptime = 11 [(.nanopb) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 updatesPerSecond = 12 [(.nanopb) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatespersecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 systemTime = 13 [(.nanopb) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systemtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timeZone = 14 [(.nanopb) = {
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), static_cast<int>(this->timezone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blox_test.SysInfo.Block.timeZone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox_test.SysInfo.TemperatureUnit tempUnit = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tempunit(static_cast< ::blox_test::SysInfo::TemperatureUnit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 displayBrightness = 16 [(.nanopb) = {
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displaybrightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox_test.SysInfo.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox_test.SysInfo.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox_test.SysInfo.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1 [(.nanopb) = {
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->deviceid(), output);
  }

  // string version = 2 [(.nanopb) = {
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // .blox_test.SysInfo.Platform platform = 3 [(.brewblox.field) = {
  if (this->platform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform(), output);
  }

  // string protocolVersion = 7 [(.nanopb) = {
  if (this->protocolversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolversion().data(), static_cast<int>(this->protocolversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.protocolVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->protocolversion(), output);
  }

  // string releaseDate = 8 [(.nanopb) = {
  if (this->releasedate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->releasedate().data(), static_cast<int>(this->releasedate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.releaseDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->releasedate(), output);
  }

  // string protocolDate = 9 [(.nanopb) = {
  if (this->protocoldate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocoldate().data(), static_cast<int>(this->protocoldate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.protocolDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->protocoldate(), output);
  }

  // uint32 ip = 10 [(.nanopb) = {
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ip(), output);
  }

  // uint32 uptime = 11 [(.nanopb) = {
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uptime(), output);
  }

  // uint32 updatesPerSecond = 12 [(.nanopb) = {
  if (this->updatespersecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->updatespersecond(), output);
  }

  // uint32 systemTime = 13 [(.nanopb) = {
  if (this->systemtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->systemtime(), output);
  }

  // string timeZone = 14 [(.nanopb) = {
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.timeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->timezone(), output);
  }

  // .blox_test.SysInfo.TemperatureUnit tempUnit = 15;
  if (this->tempunit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->tempunit(), output);
  }

  // uint32 displayBrightness = 16 [(.nanopb) = {
  if (this->displaybrightness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->displaybrightness(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox_test.SysInfo.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.SysInfo.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1 [(.nanopb) = {
  if (this->deviceid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->deviceid(), target);
  }

  // string version = 2 [(.nanopb) = {
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // .blox_test.SysInfo.Platform platform = 3 [(.brewblox.field) = {
  if (this->platform() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platform(), target);
  }

  // string protocolVersion = 7 [(.nanopb) = {
  if (this->protocolversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolversion().data(), static_cast<int>(this->protocolversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.protocolVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->protocolversion(), target);
  }

  // string releaseDate = 8 [(.nanopb) = {
  if (this->releasedate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->releasedate().data(), static_cast<int>(this->releasedate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.releaseDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->releasedate(), target);
  }

  // string protocolDate = 9 [(.nanopb) = {
  if (this->protocoldate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocoldate().data(), static_cast<int>(this->protocoldate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.protocolDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->protocoldate(), target);
  }

  // uint32 ip = 10 [(.nanopb) = {
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ip(), target);
  }

  // uint32 uptime = 11 [(.nanopb) = {
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uptime(), target);
  }

  // uint32 updatesPerSecond = 12 [(.nanopb) = {
  if (this->updatespersecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->updatespersecond(), target);
  }

  // uint32 systemTime = 13 [(.nanopb) = {
  if (this->systemtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->systemtime(), target);
  }

  // string timeZone = 14 [(.nanopb) = {
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox_test.SysInfo.Block.timeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->timezone(), target);
  }

  // .blox_test.SysInfo.TemperatureUnit tempUnit = 15;
  if (this->tempunit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->tempunit(), target);
  }

  // uint32 displayBrightness = 16 [(.nanopb) = {
  if (this->displaybrightness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->displaybrightness(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.SysInfo.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.SysInfo.Block)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes deviceId = 1 [(.nanopb) = {
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceid());
  }

  // string version = 2 [(.nanopb) = {
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string protocolVersion = 7 [(.nanopb) = {
  if (this->protocolversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocolversion());
  }

  // string releaseDate = 8 [(.nanopb) = {
  if (this->releasedate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->releasedate());
  }

  // string protocolDate = 9 [(.nanopb) = {
  if (this->protocoldate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocoldate());
  }

  // string timeZone = 14 [(.nanopb) = {
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // .blox_test.SysInfo.Platform platform = 3 [(.brewblox.field) = {
  if (this->platform() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
  }

  // uint32 ip = 10 [(.nanopb) = {
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  // uint32 uptime = 11 [(.nanopb) = {
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uptime());
  }

  // uint32 updatesPerSecond = 12 [(.nanopb) = {
  if (this->updatespersecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatespersecond());
  }

  // uint32 systemTime = 13 [(.nanopb) = {
  if (this->systemtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->systemtime());
  }

  // .blox_test.SysInfo.TemperatureUnit tempUnit = 15;
  if (this->tempunit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tempunit());
  }

  // uint32 displayBrightness = 16 [(.nanopb) = {
  if (this->displaybrightness() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->displaybrightness());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.SysInfo.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.SysInfo.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.SysInfo.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.SysInfo.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.protocolversion().size() > 0) {

    protocolversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolversion_);
  }
  if (from.releasedate().size() > 0) {

    releasedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.releasedate_);
  }
  if (from.protocoldate().size() > 0) {

    protocoldate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoldate_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.platform() != 0) {
    set_platform(from.platform());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.updatespersecond() != 0) {
    set_updatespersecond(from.updatespersecond());
  }
  if (from.systemtime() != 0) {
    set_systemtime(from.systemtime());
  }
  if (from.tempunit() != 0) {
    set_tempunit(from.tempunit());
  }
  if (from.displaybrightness() != 0) {
    set_displaybrightness(from.displaybrightness());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.SysInfo.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.SysInfo.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  deviceid_.Swap(&other->deviceid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocolversion_.Swap(&other->protocolversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  releasedate_.Swap(&other->releasedate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocoldate_.Swap(&other->protocoldate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timezone_.Swap(&other->timezone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(platform_, other->platform_);
  swap(ip_, other->ip_);
  swap(uptime_, other->uptime_);
  swap(updatespersecond_, other->updatespersecond_);
  swap(systemtime_, other->systemtime_);
  swap(tempunit_, other->tempunit_);
  swap(displaybrightness_, other->displaybrightness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_SysInfo_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SysInfo_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SysInfo
}  // namespace blox_test
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox_test::SysInfo::Block* Arena::CreateMaybeMessage< ::blox_test::SysInfo::Block >(Arena* arena) {
  return Arena::CreateInternal< ::blox_test::SysInfo::Block >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
