// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TouchSettings_test.proto

#include "TouchSettings_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blox_test {
namespace TouchSettings {
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : calibrated_(0)

  , xoffset_(0)
  , yoffset_(0)
  , xbitsperpixelx16_(0u)
  , ybitsperpixelx16_(0u){}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace TouchSettings
}  // namespace blox_test
static ::_pb::Metadata file_level_metadata_TouchSettings_5ftest_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TouchSettings_5ftest_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TouchSettings_5ftest_2eproto = nullptr;

const uint32_t TableStruct_TouchSettings_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::TouchSettings::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::TouchSettings::Block, calibrated_),
  PROTOBUF_FIELD_OFFSET(::blox_test::TouchSettings::Block, xoffset_),
  PROTOBUF_FIELD_OFFSET(::blox_test::TouchSettings::Block, yoffset_),
  PROTOBUF_FIELD_OFFSET(::blox_test::TouchSettings::Block, xbitsperpixelx16_),
  PROTOBUF_FIELD_OFFSET(::blox_test::TouchSettings::Block, ybitsperpixelx16_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::blox_test::TouchSettings::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::blox_test::TouchSettings::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_TouchSettings_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TouchSettings_test.proto\022\027blox_test.To"
  "uchSettings\032\023brewblox_test.proto\032\021nanopb"
  "_test.proto\"\273\001\n\005Block\0227\n\ncalibrated\030\001 \001("
  "\0162#.blox_test.TouchSettings.Calibrated\022\026"
  "\n\007xOffset\030\002 \001(\005B\005\222\?\0028\020\022\026\n\007yOffset\030\003 \001(\005B"
  "\005\222\?\0028\020\022\037\n\020xBitsPerPixelX16\030\004 \001(\rB\005\222\?\0028\020\022"
  "\037\n\020yBitsPerPixelX16\030\005 \001(\rB\005\222\?\0028\020:\007\212\265\030\003\030\271"
  "\002*G\n\nCalibrated\022\021\n\rCALIBRATED_NO\020\000\022\022\n\016CA"
  "LIBRATED_YES\020\001\022\022\n\016CALIBRATED_NEW\020\002b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TouchSettings_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::_pbi::once_flag descriptor_table_TouchSettings_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TouchSettings_5ftest_2eproto = {
    false, false, 362, descriptor_table_protodef_TouchSettings_5ftest_2eproto,
    "TouchSettings_test.proto",
    &descriptor_table_TouchSettings_5ftest_2eproto_once, descriptor_table_TouchSettings_5ftest_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_TouchSettings_5ftest_2eproto::offsets,
    file_level_metadata_TouchSettings_5ftest_2eproto, file_level_enum_descriptors_TouchSettings_5ftest_2eproto,
    file_level_service_descriptors_TouchSettings_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TouchSettings_5ftest_2eproto_getter() {
  return &descriptor_table_TouchSettings_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TouchSettings_5ftest_2eproto(&descriptor_table_TouchSettings_5ftest_2eproto);
namespace blox_test {
namespace TouchSettings {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Calibrated_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TouchSettings_5ftest_2eproto);
  return file_level_enum_descriptors_TouchSettings_5ftest_2eproto[0];
}
bool Calibrated_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.TouchSettings.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&calibrated_, &from.calibrated_,
    static_cast<size_t>(reinterpret_cast<char*>(&ybitsperpixelx16_) -
    reinterpret_cast<char*>(&calibrated_)) + sizeof(ybitsperpixelx16_));
  // @@protoc_insertion_point(copy_constructor:blox_test.TouchSettings.Block)
}

inline void Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&calibrated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ybitsperpixelx16_) -
    reinterpret_cast<char*>(&calibrated_)) + sizeof(ybitsperpixelx16_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.TouchSettings.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.TouchSettings.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&calibrated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ybitsperpixelx16_) -
      reinterpret_cast<char*>(&calibrated_)) + sizeof(ybitsperpixelx16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox_test.TouchSettings.Calibrated calibrated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_calibrated(static_cast<::blox_test::TouchSettings::Calibrated>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 xOffset = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 yOffset = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          yoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 xBitsPerPixelX16 = 4 [(.nanopb) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          xbitsperpixelx16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 yBitsPerPixelX16 = 5 [(.nanopb) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ybitsperpixelx16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.TouchSettings.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox_test.TouchSettings.Calibrated calibrated = 1;
  if (this->_internal_calibrated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_calibrated(), target);
  }

  // int32 xOffset = 2 [(.nanopb) = {
  if (this->_internal_xoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_xoffset(), target);
  }

  // int32 yOffset = 3 [(.nanopb) = {
  if (this->_internal_yoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_yoffset(), target);
  }

  // uint32 xBitsPerPixelX16 = 4 [(.nanopb) = {
  if (this->_internal_xbitsperpixelx16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xbitsperpixelx16(), target);
  }

  // uint32 yBitsPerPixelX16 = 5 [(.nanopb) = {
  if (this->_internal_ybitsperpixelx16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ybitsperpixelx16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.TouchSettings.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.TouchSettings.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blox_test.TouchSettings.Calibrated calibrated = 1;
  if (this->_internal_calibrated() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_calibrated());
  }

  // int32 xOffset = 2 [(.nanopb) = {
  if (this->_internal_xoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xoffset());
  }

  // int32 yOffset = 3 [(.nanopb) = {
  if (this->_internal_yoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yoffset());
  }

  // uint32 xBitsPerPixelX16 = 4 [(.nanopb) = {
  if (this->_internal_xbitsperpixelx16() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xbitsperpixelx16());
  }

  // uint32 yBitsPerPixelX16 = 5 [(.nanopb) = {
  if (this->_internal_ybitsperpixelx16() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ybitsperpixelx16());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.TouchSettings.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_calibrated() != 0) {
    _internal_set_calibrated(from._internal_calibrated());
  }
  if (from._internal_xoffset() != 0) {
    _internal_set_xoffset(from._internal_xoffset());
  }
  if (from._internal_yoffset() != 0) {
    _internal_set_yoffset(from._internal_yoffset());
  }
  if (from._internal_xbitsperpixelx16() != 0) {
    _internal_set_xbitsperpixelx16(from._internal_xbitsperpixelx16());
  }
  if (from._internal_ybitsperpixelx16() != 0) {
    _internal_set_ybitsperpixelx16(from._internal_ybitsperpixelx16());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.TouchSettings.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, ybitsperpixelx16_)
      + sizeof(Block::ybitsperpixelx16_)
      - PROTOBUF_FIELD_OFFSET(Block, calibrated_)>(
          reinterpret_cast<char*>(&calibrated_),
          reinterpret_cast<char*>(&other->calibrated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TouchSettings_5ftest_2eproto_getter, &descriptor_table_TouchSettings_5ftest_2eproto_once,
      file_level_metadata_TouchSettings_5ftest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TouchSettings
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::TouchSettings::Block*
Arena::CreateMaybeMessage< ::blox_test::TouchSettings::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::TouchSettings::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
