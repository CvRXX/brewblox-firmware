// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WiFiSettings_test.proto

#include "WiFiSettings_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blox_test {
namespace WiFiSettings {
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : ssid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , security_(0)

  , cipher_(0)

  , signal_(0){}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace WiFiSettings
}  // namespace blox_test
static ::_pb::Metadata file_level_metadata_WiFiSettings_5ftest_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_WiFiSettings_5ftest_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_WiFiSettings_5ftest_2eproto = nullptr;

const uint32_t TableStruct_WiFiSettings_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::WiFiSettings::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::WiFiSettings::Block, ssid_),
  PROTOBUF_FIELD_OFFSET(::blox_test::WiFiSettings::Block, password_),
  PROTOBUF_FIELD_OFFSET(::blox_test::WiFiSettings::Block, security_),
  PROTOBUF_FIELD_OFFSET(::blox_test::WiFiSettings::Block, cipher_),
  PROTOBUF_FIELD_OFFSET(::blox_test::WiFiSettings::Block, signal_),
  PROTOBUF_FIELD_OFFSET(::blox_test::WiFiSettings::Block, ip_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::blox_test::WiFiSettings::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::blox_test::WiFiSettings::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_WiFiSettings_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027WiFiSettings_test.proto\022\026blox_test.WiF"
  "iSettings\032\023brewblox_test.proto\032\021nanopb_t"
  "est.proto\"\343\001\n\005Block\022\023\n\004ssid\030\001 \001(\tB\005\222\?\002\010!"
  "\022\027\n\010password\030\002 \001(\tB\005\222\?\002\010@\0222\n\010security\030\003 "
  "\001(\0162 .blox_test.WiFiSettings.Security\022.\n"
  "\006cipher\030\004 \001(\0162\036.blox_test.WiFiSettings.C"
  "ipher\022!\n\006signal\030\005 \001(\005B\021\212\265\030\002(\001\212\265\030\0020\001\222\?\0028\010"
  "\022\034\n\002ip\030\006 \001(\tB\020\212\265\030\002(\001\222\?\002\010\020\222\?\002x\001:\007\212\265\030\003\030\270\002*"
  "\247\001\n\010Security\022\022\n\016WLAN_SEC_UNSEC\020\000\022\020\n\014WLAN"
  "_SEC_WEP\020\001\022\020\n\014WLAN_SEC_WPA\020\002\022\021\n\rWLAN_SEC"
  "_WPA2\020\003\022\033\n\027WLAN_SEC_WPA_ENTERPRISE\020\004\022\034\n\030"
  "WLAN_SEC_WPA2_ENTERPRISE\020\005\022\025\n\020WLAN_SEC_N"
  "OT_SET\020\377\001*i\n\006Cipher\022\027\n\023WLAN_CIPHER_NOT_S"
  "ET\020\000\022\023\n\017WLAN_CIPHER_AES\020\001\022\024\n\020WLAN_CIPHER"
  "_TKIP\020\002\022\033\n\027WLAN_CIPHER_AES_OR_TKIP\020\003b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_WiFiSettings_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::_pbi::once_flag descriptor_table_WiFiSettings_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_WiFiSettings_5ftest_2eproto = {
    false, false, 604, descriptor_table_protodef_WiFiSettings_5ftest_2eproto,
    "WiFiSettings_test.proto",
    &descriptor_table_WiFiSettings_5ftest_2eproto_once, descriptor_table_WiFiSettings_5ftest_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_WiFiSettings_5ftest_2eproto::offsets,
    file_level_metadata_WiFiSettings_5ftest_2eproto, file_level_enum_descriptors_WiFiSettings_5ftest_2eproto,
    file_level_service_descriptors_WiFiSettings_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_WiFiSettings_5ftest_2eproto_getter() {
  return &descriptor_table_WiFiSettings_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_WiFiSettings_5ftest_2eproto(&descriptor_table_WiFiSettings_5ftest_2eproto);
namespace blox_test {
namespace WiFiSettings {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Security_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WiFiSettings_5ftest_2eproto);
  return file_level_enum_descriptors_WiFiSettings_5ftest_2eproto[0];
}
bool Security_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cipher_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WiFiSettings_5ftest_2eproto);
  return file_level_enum_descriptors_WiFiSettings_5ftest_2eproto[1];
}
bool Cipher_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.WiFiSettings.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    ssid_.Set(from._internal_ssid(), 
      GetArenaForAllocation());
  }
  password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(from._internal_password(), 
      GetArenaForAllocation());
  }
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&security_, &from.security_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_) -
    reinterpret_cast<char*>(&security_)) + sizeof(signal_));
  // @@protoc_insertion_point(copy_constructor:blox_test.WiFiSettings.Block)
}

inline void Block::SharedCtor() {
ssid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ssid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signal_) -
    reinterpret_cast<char*>(&security_)) + sizeof(signal_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.WiFiSettings.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssid_.Destroy();
  password_.Destroy();
  ip_.Destroy();
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.WiFiSettings.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  password_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&security_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_) -
      reinterpret_cast<char*>(&security_)) + sizeof(signal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "blox_test.WiFiSettings.Block.ssid"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "blox_test.WiFiSettings.Block.password"));
        } else
          goto handle_unusual;
        continue;
      // .blox_test.WiFiSettings.Security security = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_security(static_cast<::blox_test::WiFiSettings::Security>(val));
        } else
          goto handle_unusual;
        continue;
      // .blox_test.WiFiSettings.Cipher cipher = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cipher(static_cast<::blox_test::WiFiSettings::Cipher>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 signal = 5 [(.nanopb) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 6 [(.nanopb) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "blox_test.WiFiSettings.Block.ip"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.WiFiSettings.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1 [(.nanopb) = {
  if (!this->_internal_ssid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox_test.WiFiSettings.Block.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string password = 2 [(.nanopb) = {
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox_test.WiFiSettings.Block.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .blox_test.WiFiSettings.Security security = 3;
  if (this->_internal_security() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_security(), target);
  }

  // .blox_test.WiFiSettings.Cipher cipher = 4;
  if (this->_internal_cipher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cipher(), target);
  }

  // int32 signal = 5 [(.nanopb) = {
  if (this->_internal_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_signal(), target);
  }

  // string ip = 6 [(.nanopb) = {
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox_test.WiFiSettings.Block.ip");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.WiFiSettings.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.WiFiSettings.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1 [(.nanopb) = {
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string password = 2 [(.nanopb) = {
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string ip = 6 [(.nanopb) = {
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .blox_test.WiFiSettings.Security security = 3;
  if (this->_internal_security() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_security());
  }

  // .blox_test.WiFiSettings.Cipher cipher = 4;
  if (this->_internal_cipher() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cipher());
  }

  // int32 signal = 5 [(.nanopb) = {
  if (this->_internal_signal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.WiFiSettings.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_security() != 0) {
    _internal_set_security(from._internal_security());
  }
  if (from._internal_cipher() != 0) {
    _internal_set_cipher(from._internal_cipher());
  }
  if (from._internal_signal() != 0) {
    _internal_set_signal(from._internal_signal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.WiFiSettings.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ssid_, lhs_arena,
      &other->ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, signal_)
      + sizeof(Block::signal_)
      - PROTOBUF_FIELD_OFFSET(Block, security_)>(
          reinterpret_cast<char*>(&security_),
          reinterpret_cast<char*>(&other->security_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WiFiSettings_5ftest_2eproto_getter, &descriptor_table_WiFiSettings_5ftest_2eproto_once,
      file_level_metadata_WiFiSettings_5ftest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace WiFiSettings
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::WiFiSettings::Block*
Arena::CreateMaybeMessage< ::blox_test::WiFiSettings::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::WiFiSettings::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
