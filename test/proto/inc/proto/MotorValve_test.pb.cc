// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MotorValve_test.proto

#include "MotorValve_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Constraints_5ftest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Constraints_5ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DigitalConstraints;
}  // namespace protobuf_Constraints_5ftest_2eproto
namespace blox_test {
namespace MotorValve {
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block>
      _instance;
} _Block_default_instance_;
}  // namespace MotorValve
}  // namespace blox_test
namespace protobuf_MotorValve_5ftest_2eproto {
static void InitDefaultsBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::MotorValve::_Block_default_instance_;
    new (ptr) ::blox_test::MotorValve::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::MotorValve::Block::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Block =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlock}, {
      &protobuf_Constraints_5ftest_2eproto::scc_info_DigitalConstraints.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Block.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, hwdevice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, constrainedby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, valvestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, desiredstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, claimedby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox_test::MotorValve::Block, startchannel_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox_test::MotorValve::Block)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox_test::MotorValve::_Block_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MotorValve_test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025MotorValve_test.proto\022\024blox_test.Motor"
      "Valve\032\023brewblox_test.proto\032\021nanopb_test."
      "proto\032\026Constraints_test.proto\032\022IoArray_t"
      "est.proto\"\240\003\n\005Block\022\035\n\010hwDevice\030\001 \001(\rB\013\212"
      "\265\030\002\030\013\222\?\0028\020\022\026\n\007channel\030\002 \001(\rB\005\222\?\0028\010\022<\n\005st"
      "ate\030\003 \001(\0162\037.blox_test.IoArray.DigitalSta"
      "teB\014\212\265\030\0020\001\212\265\030\002(\001\022@\n\rconstrainedBy\030\005 \001(\0132"
      ").blox_test.Constraints.DigitalConstrain"
      "ts\022B\n\nvalveState\030\006 \001(\0162 .blox_test.Motor"
      "Valve.ValveStateB\014\212\265\030\0020\001\212\265\030\002(\001\022=\n\014desire"
      "dState\030\007 \001(\0162\037.blox_test.IoArray.Digital"
      "StateB\006\212\265\030\0020\001\022%\n\tclaimedBy\030\010 \001(\rB\022\212\265\030\003\030\377"
      "\001\212\265\030\002(\001\222\?\0028\020\022!\n\014startChannel\030Z \001(\010B\013\212\265\030\002"
      "H\001\222\?\002\030\003:\023\212\265\030\003\030\301\002\212\265\030\002H\006\212\265\030\002H\020*\226\001\n\nValveSt"
      "ate\022\021\n\rVALVE_UNKNOWN\020\000\022\016\n\nVALVE_OPEN\020\001\022\020"
      "\n\014VALVE_CLOSED\020\002\022\021\n\rVALVE_OPENING\020\003\022\021\n\rV"
      "ALVE_CLOSING\020\004\022\030\n\024VALVE_HALF_OPEN_IDLE\020\005"
      "\022\023\n\017VALVE_INIT_IDLE\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MotorValve_test.proto", &protobuf_RegisterTypes);
  ::protobuf_brewblox_5ftest_2eproto::AddDescriptors();
  ::protobuf_nanopb_5ftest_2eproto::AddDescriptors();
  ::protobuf_Constraints_5ftest_2eproto::AddDescriptors();
  ::protobuf_IoArray_5ftest_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MotorValve_5ftest_2eproto
namespace blox_test {
namespace MotorValve {
const ::google::protobuf::EnumDescriptor* ValveState_descriptor() {
  protobuf_MotorValve_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MotorValve_5ftest_2eproto::file_level_enum_descriptors[0];
}
bool ValveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::blox_test::MotorValve::_Block_default_instance_._instance.get_mutable()->constrainedby_ = const_cast< ::blox_test::Constraints::DigitalConstraints*>(
      ::blox_test::Constraints::DigitalConstraints::internal_default_instance());
}
void Block::clear_constrainedby() {
  if (GetArenaNoVirtual() == NULL && constrainedby_ != NULL) {
    delete constrainedby_;
  }
  constrainedby_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kHwDeviceFieldNumber;
const int Block::kChannelFieldNumber;
const int Block::kStateFieldNumber;
const int Block::kConstrainedByFieldNumber;
const int Block::kValveStateFieldNumber;
const int Block::kDesiredStateFieldNumber;
const int Block::kClaimedByFieldNumber;
const int Block::kStartChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MotorValve_5ftest_2eproto::scc_info_Block.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox_test.MotorValve.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_constrainedby()) {
    constrainedby_ = new ::blox_test::Constraints::DigitalConstraints(*from.constrainedby_);
  } else {
    constrainedby_ = NULL;
  }
  ::memcpy(&hwdevice_, &from.hwdevice_,
    static_cast<size_t>(reinterpret_cast<char*>(&startchannel_) -
    reinterpret_cast<char*>(&hwdevice_)) + sizeof(startchannel_));
  // @@protoc_insertion_point(copy_constructor:blox_test.MotorValve.Block)
}

void Block::SharedCtor() {
  ::memset(&constrainedby_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startchannel_) -
      reinterpret_cast<char*>(&constrainedby_)) + sizeof(startchannel_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.MotorValve.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != internal_default_instance()) delete constrainedby_;
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  ::protobuf_MotorValve_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MotorValve_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Block& Block::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MotorValve_5ftest_2eproto::scc_info_Block.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.MotorValve.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && constrainedby_ != NULL) {
    delete constrainedby_;
  }
  constrainedby_ = NULL;
  ::memset(&hwdevice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startchannel_) -
      reinterpret_cast<char*>(&hwdevice_)) + sizeof(startchannel_));
  _internal_metadata_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox_test.MotorValve.Block)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hwDevice = 1 [(.nanopb) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hwdevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox_test.IoArray.DigitalState state = 3 [(.brewblox.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::blox_test::IoArray::DigitalState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox_test.Constraints.DigitalConstraints constrainedBy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constrainedby()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox_test.MotorValve.ValveState valveState = 6 [(.brewblox.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_valvestate(static_cast< ::blox_test::MotorValve::ValveState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox_test.IoArray.DigitalState desiredState = 7 [(.brewblox.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_desiredstate(static_cast< ::blox_test::IoArray::DigitalState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 claimedBy = 8 [(.nanopb) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimedby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool startChannel = 90 [(.nanopb) = {
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startchannel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox_test.MotorValve.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox_test.MotorValve.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox_test.MotorValve.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hwDevice = 1 [(.nanopb) = {
  if (this->hwdevice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hwdevice(), output);
  }

  // uint32 channel = 2 [(.nanopb) = {
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  // .blox_test.IoArray.DigitalState state = 3 [(.brewblox.field) = {
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // .blox_test.Constraints.DigitalConstraints constrainedBy = 5;
  if (this->has_constrainedby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_constrainedby(), output);
  }

  // .blox_test.MotorValve.ValveState valveState = 6 [(.brewblox.field) = {
  if (this->valvestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->valvestate(), output);
  }

  // .blox_test.IoArray.DigitalState desiredState = 7 [(.brewblox.field) = {
  if (this->desiredstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->desiredstate(), output);
  }

  // uint32 claimedBy = 8 [(.nanopb) = {
  if (this->claimedby() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->claimedby(), output);
  }

  // bool startChannel = 90 [(.nanopb) = {
  if (this->startchannel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(90, this->startchannel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox_test.MotorValve.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.MotorValve.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hwDevice = 1 [(.nanopb) = {
  if (this->hwdevice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hwdevice(), target);
  }

  // uint32 channel = 2 [(.nanopb) = {
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }

  // .blox_test.IoArray.DigitalState state = 3 [(.brewblox.field) = {
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // .blox_test.Constraints.DigitalConstraints constrainedBy = 5;
  if (this->has_constrainedby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_constrainedby(), deterministic, target);
  }

  // .blox_test.MotorValve.ValveState valveState = 6 [(.brewblox.field) = {
  if (this->valvestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->valvestate(), target);
  }

  // .blox_test.IoArray.DigitalState desiredState = 7 [(.brewblox.field) = {
  if (this->desiredstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->desiredstate(), target);
  }

  // uint32 claimedBy = 8 [(.nanopb) = {
  if (this->claimedby() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->claimedby(), target);
  }

  // bool startChannel = 90 [(.nanopb) = {
  if (this->startchannel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(90, this->startchannel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.MotorValve.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.MotorValve.Block)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blox_test.Constraints.DigitalConstraints constrainedBy = 5;
  if (this->has_constrainedby()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constrainedby_);
  }

  // uint32 hwDevice = 1 [(.nanopb) = {
  if (this->hwdevice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hwdevice());
  }

  // uint32 channel = 2 [(.nanopb) = {
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // .blox_test.IoArray.DigitalState state = 3 [(.brewblox.field) = {
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .blox_test.MotorValve.ValveState valveState = 6 [(.brewblox.field) = {
  if (this->valvestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->valvestate());
  }

  // .blox_test.IoArray.DigitalState desiredState = 7 [(.brewblox.field) = {
  if (this->desiredstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->desiredstate());
  }

  // uint32 claimedBy = 8 [(.nanopb) = {
  if (this->claimedby() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->claimedby());
  }

  // bool startChannel = 90 [(.nanopb) = {
  if (this->startchannel() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.MotorValve.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.MotorValve.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.MotorValve.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.MotorValve.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_constrainedby()) {
    mutable_constrainedby()->::blox_test::Constraints::DigitalConstraints::MergeFrom(from.constrainedby());
  }
  if (from.hwdevice() != 0) {
    set_hwdevice(from.hwdevice());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.valvestate() != 0) {
    set_valvestate(from.valvestate());
  }
  if (from.desiredstate() != 0) {
    set_desiredstate(from.desiredstate());
  }
  if (from.claimedby() != 0) {
    set_claimedby(from.claimedby());
  }
  if (from.startchannel() != 0) {
    set_startchannel(from.startchannel());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.MotorValve.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.MotorValve.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  swap(constrainedby_, other->constrainedby_);
  swap(hwdevice_, other->hwdevice_);
  swap(channel_, other->channel_);
  swap(state_, other->state_);
  swap(valvestate_, other->valvestate_);
  swap(desiredstate_, other->desiredstate_);
  swap(claimedby_, other->claimedby_);
  swap(startchannel_, other->startchannel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_MotorValve_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MotorValve_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MotorValve
}  // namespace blox_test
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox_test::MotorValve::Block* Arena::CreateMaybeMessage< ::blox_test::MotorValve::Block >(Arena* arena) {
  return Arena::CreateInternal< ::blox_test::MotorValve::Block >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
