// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MotorValve_test.proto

#include "MotorValve_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blox_test {
namespace MotorValve {
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : strippedfields_()
  , _strippedfields_cached_byte_size_(0)
  , constrainedby_(nullptr)
  , hwdevice_(0u)
  , startchannel_(0u)
  , state_(0)

  , valvestate_(0)

  , desiredstate_(0)
{}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace MotorValve
}  // namespace blox_test
static ::_pb::Metadata file_level_metadata_MotorValve_5ftest_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_MotorValve_5ftest_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MotorValve_5ftest_2eproto = nullptr;

const uint32_t TableStruct_MotorValve_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, hwdevice_),
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, startchannel_),
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, state_),
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, constrainedby_),
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, valvestate_),
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, desiredstate_),
  PROTOBUF_FIELD_OFFSET(::blox_test::MotorValve::Block, strippedfields_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::blox_test::MotorValve::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::blox_test::MotorValve::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_MotorValve_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025MotorValve_test.proto\022\024blox_test.Motor"
  "Valve\032\023brewblox_test.proto\032\021nanopb_test."
  "proto\032\026Constraints_test.proto\032\022IoArray_t"
  "est.proto\"\205\003\n\005Block\022#\n\010hwDevice\030\001 \001(\rB\021\212"
  "\265\030\002\030\013\212\265\030\002@\001\222\?\0028\020\022\033\n\014startChannel\030\002 \001(\rB\005"
  "\222\?\0028\010\022<\n\005state\030\003 \001(\0162\037.blox_test.IoArray"
  ".DigitalStateB\014\212\265\030\0020\001\212\265\030\002(\001\022@\n\rconstrain"
  "edBy\030\005 \001(\0132).blox_test.Constraints.Digit"
  "alConstraints\022B\n\nvalveState\030\006 \001(\0162 .blox"
  "_test.MotorValve.ValveStateB\014\212\265\030\0020\001\212\265\030\002("
  "\001\022=\n\014desiredState\030\007 \001(\0162\037.blox_test.IoAr"
  "ray.DigitalStateB\006\212\265\030\0020\001\022(\n\016strippedFiel"
  "ds\030c \003(\rB\020\212\265\030\002(\001\222\?\0028\020\222\?\002\020\002:\r\212\265\030\003\030\301\002\212\265\030\002H"
  "\006*\226\001\n\nValveState\022\021\n\rVALVE_UNKNOWN\020\000\022\016\n\nV"
  "ALVE_OPEN\020\001\022\020\n\014VALVE_CLOSED\020\002\022\021\n\rVALVE_O"
  "PENING\020\003\022\021\n\rVALVE_CLOSING\020\004\022\030\n\024VALVE_HAL"
  "F_OPEN_IDLE\020\005\022\023\n\017VALVE_INIT_IDLE\020\006b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MotorValve_5ftest_2eproto_deps[4] = {
  &::descriptor_table_Constraints_5ftest_2eproto,
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::_pbi::once_flag descriptor_table_MotorValve_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MotorValve_5ftest_2eproto = {
    false, false, 682, descriptor_table_protodef_MotorValve_5ftest_2eproto,
    "MotorValve_test.proto",
    &descriptor_table_MotorValve_5ftest_2eproto_once, descriptor_table_MotorValve_5ftest_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_MotorValve_5ftest_2eproto::offsets,
    file_level_metadata_MotorValve_5ftest_2eproto, file_level_enum_descriptors_MotorValve_5ftest_2eproto,
    file_level_service_descriptors_MotorValve_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MotorValve_5ftest_2eproto_getter() {
  return &descriptor_table_MotorValve_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MotorValve_5ftest_2eproto(&descriptor_table_MotorValve_5ftest_2eproto);
namespace blox_test {
namespace MotorValve {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValveState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MotorValve_5ftest_2eproto);
  return file_level_enum_descriptors_MotorValve_5ftest_2eproto[0];
}
bool ValveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Block::_Internal {
 public:
  static const ::blox_test::Constraints::DigitalConstraints& constrainedby(const Block* msg);
};

const ::blox_test::Constraints::DigitalConstraints&
Block::_Internal::constrainedby(const Block* msg) {
  return *msg->constrainedby_;
}
void Block::clear_constrainedby() {
  if (GetArenaForAllocation() == nullptr && constrainedby_ != nullptr) {
    delete constrainedby_;
  }
  constrainedby_ = nullptr;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  strippedfields_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.MotorValve.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      strippedfields_(from.strippedfields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constrainedby()) {
    constrainedby_ = new ::blox_test::Constraints::DigitalConstraints(*from.constrainedby_);
  } else {
    constrainedby_ = nullptr;
  }
  ::memcpy(&hwdevice_, &from.hwdevice_,
    static_cast<size_t>(reinterpret_cast<char*>(&desiredstate_) -
    reinterpret_cast<char*>(&hwdevice_)) + sizeof(desiredstate_));
  // @@protoc_insertion_point(copy_constructor:blox_test.MotorValve.Block)
}

inline void Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&constrainedby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&desiredstate_) -
    reinterpret_cast<char*>(&constrainedby_)) + sizeof(desiredstate_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.MotorValve.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete constrainedby_;
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.MotorValve.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strippedfields_.Clear();
  if (GetArenaForAllocation() == nullptr && constrainedby_ != nullptr) {
    delete constrainedby_;
  }
  constrainedby_ = nullptr;
  ::memset(&hwdevice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desiredstate_) -
      reinterpret_cast<char*>(&hwdevice_)) + sizeof(desiredstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hwDevice = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hwdevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 startChannel = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          startchannel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.IoArray.DigitalState state = 3 [(.brewblox.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::blox_test::IoArray::DigitalState>(val));
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Constraints.DigitalConstraints constrainedBy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_constrainedby(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.MotorValve.ValveState valveState = 6 [(.brewblox.field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_valvestate(static_cast<::blox_test::MotorValve::ValveState>(val));
        } else
          goto handle_unusual;
        continue;
      // .blox_test.IoArray.DigitalState desiredState = 7 [(.brewblox.field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_desiredstate(static_cast<::blox_test::IoArray::DigitalState>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 strippedFields = 99 [(.nanopb) = {
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_strippedfields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.MotorValve.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hwDevice = 1 [(.nanopb) = {
  if (this->_internal_hwdevice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hwdevice(), target);
  }

  // uint32 startChannel = 2 [(.nanopb) = {
  if (this->_internal_startchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_startchannel(), target);
  }

  // .blox_test.IoArray.DigitalState state = 3 [(.brewblox.field) = {
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // .blox_test.Constraints.DigitalConstraints constrainedBy = 5;
  if (this->_internal_has_constrainedby()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::constrainedby(this),
        _Internal::constrainedby(this).GetCachedSize(), target, stream);
  }

  // .blox_test.MotorValve.ValveState valveState = 6 [(.brewblox.field) = {
  if (this->_internal_valvestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_valvestate(), target);
  }

  // .blox_test.IoArray.DigitalState desiredState = 7 [(.brewblox.field) = {
  if (this->_internal_desiredstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_desiredstate(), target);
  }

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  {
    int byte_size = _strippedfields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          99, _internal_strippedfields(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.MotorValve.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.MotorValve.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->strippedfields_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _strippedfields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .blox_test.Constraints.DigitalConstraints constrainedBy = 5;
  if (this->_internal_has_constrainedby()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constrainedby_);
  }

  // uint32 hwDevice = 1 [(.nanopb) = {
  if (this->_internal_hwdevice() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hwdevice());
  }

  // uint32 startChannel = 2 [(.nanopb) = {
  if (this->_internal_startchannel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startchannel());
  }

  // .blox_test.IoArray.DigitalState state = 3 [(.brewblox.field) = {
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .blox_test.MotorValve.ValveState valveState = 6 [(.brewblox.field) = {
  if (this->_internal_valvestate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_valvestate());
  }

  // .blox_test.IoArray.DigitalState desiredState = 7 [(.brewblox.field) = {
  if (this->_internal_desiredstate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_desiredstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.MotorValve.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  strippedfields_.MergeFrom(from.strippedfields_);
  if (from._internal_has_constrainedby()) {
    _internal_mutable_constrainedby()->::blox_test::Constraints::DigitalConstraints::MergeFrom(from._internal_constrainedby());
  }
  if (from._internal_hwdevice() != 0) {
    _internal_set_hwdevice(from._internal_hwdevice());
  }
  if (from._internal_startchannel() != 0) {
    _internal_set_startchannel(from._internal_startchannel());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_valvestate() != 0) {
    _internal_set_valvestate(from._internal_valvestate());
  }
  if (from._internal_desiredstate() != 0) {
    _internal_set_desiredstate(from._internal_desiredstate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.MotorValve.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  strippedfields_.InternalSwap(&other->strippedfields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, desiredstate_)
      + sizeof(Block::desiredstate_)
      - PROTOBUF_FIELD_OFFSET(Block, constrainedby_)>(
          reinterpret_cast<char*>(&constrainedby_),
          reinterpret_cast<char*>(&other->constrainedby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MotorValve_5ftest_2eproto_getter, &descriptor_table_MotorValve_5ftest_2eproto_once,
      file_level_metadata_MotorValve_5ftest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MotorValve
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::MotorValve::Block*
Arena::CreateMaybeMessage< ::blox_test::MotorValve::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::MotorValve::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
