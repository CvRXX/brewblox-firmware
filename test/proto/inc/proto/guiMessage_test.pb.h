// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guiMessage_test.proto

#ifndef PROTOBUF_INCLUDED_guiMessage_5ftest_2eproto
#define PROTOBUF_INCLUDED_guiMessage_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_guiMessage_5ftest_2eproto 

namespace protobuf_guiMessage_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_guiMessage_5ftest_2eproto
namespace guiMessage {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class ContentNode;
class ContentNodeDefaultTypeInternal;
extern ContentNodeDefaultTypeInternal _ContentNode_default_instance_;
class Gui;
class GuiDefaultTypeInternal;
extern GuiDefaultTypeInternal _Gui_default_instance_;
class LayoutNode;
class LayoutNodeDefaultTypeInternal;
extern LayoutNodeDefaultTypeInternal _LayoutNode_default_instance_;
class NumericValue;
class NumericValueDefaultTypeInternal;
extern NumericValueDefaultTypeInternal _NumericValue_default_instance_;
class Widget;
class WidgetDefaultTypeInternal;
extern WidgetDefaultTypeInternal _Widget_default_instance_;
}  // namespace guiMessage
namespace google {
namespace protobuf {
template<> ::guiMessage::Color* Arena::CreateMaybeMessage<::guiMessage::Color>(Arena*);
template<> ::guiMessage::ContentNode* Arena::CreateMaybeMessage<::guiMessage::ContentNode>(Arena*);
template<> ::guiMessage::Gui* Arena::CreateMaybeMessage<::guiMessage::Gui>(Arena*);
template<> ::guiMessage::LayoutNode* Arena::CreateMaybeMessage<::guiMessage::LayoutNode>(Arena*);
template<> ::guiMessage::NumericValue* Arena::CreateMaybeMessage<::guiMessage::NumericValue>(Arena*);
template<> ::guiMessage::Widget* Arena::CreateMaybeMessage<::guiMessage::Widget>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace guiMessage {

enum Type {
  Row = 0,
  Column = 1,
  Content = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_IsValid(int value);
const Type Type_MIN = Row;
const Type Type_MAX = Content;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class LayoutNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guiMessage.LayoutNode) */ {
 public:
  LayoutNode();
  virtual ~LayoutNode();

  LayoutNode(const LayoutNode& from);

  inline LayoutNode& operator=(const LayoutNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayoutNode(LayoutNode&& from) noexcept
    : LayoutNode() {
    *this = ::std::move(from);
  }

  inline LayoutNode& operator=(LayoutNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LayoutNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayoutNode* internal_default_instance() {
    return reinterpret_cast<const LayoutNode*>(
               &_LayoutNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LayoutNode* other);
  friend void swap(LayoutNode& a, LayoutNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayoutNode* New() const final {
    return CreateMaybeMessage<LayoutNode>(NULL);
  }

  LayoutNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LayoutNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LayoutNode& from);
  void MergeFrom(const LayoutNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 parent = 1 [(.nanopb) = {
  void clear_parent();
  static const int kParentFieldNumber = 1;
  ::google::protobuf::uint32 parent() const;
  void set_parent(::google::protobuf::uint32 value);

  // uint32 nodeId = 2 [(.nanopb) = {
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint32 nodeid() const;
  void set_nodeid(::google::protobuf::uint32 value);

  // .guiMessage.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::guiMessage::Type type() const;
  void set_type(::guiMessage::Type value);

  // uint32 weight = 4 [(.nanopb) = {
  void clear_weight();
  static const int kWeightFieldNumber = 4;
  ::google::protobuf::uint32 weight() const;
  void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:guiMessage.LayoutNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 parent_;
  ::google::protobuf::uint32 nodeid_;
  int type_;
  ::google::protobuf::uint32 weight_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guiMessage_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guiMessage.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(NULL);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 r = 1 [(.nanopb) = {
  void clear_r();
  static const int kRFieldNumber = 1;
  ::google::protobuf::uint32 r() const;
  void set_r(::google::protobuf::uint32 value);

  // uint32 g = 2 [(.nanopb) = {
  void clear_g();
  static const int kGFieldNumber = 2;
  ::google::protobuf::uint32 g() const;
  void set_g(::google::protobuf::uint32 value);

  // uint32 b = 3 [(.nanopb) = {
  void clear_b();
  static const int kBFieldNumber = 3;
  ::google::protobuf::uint32 b() const;
  void set_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:guiMessage.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guiMessage_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NumericValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guiMessage.NumericValue) */ {
 public:
  NumericValue();
  virtual ~NumericValue();

  NumericValue(const NumericValue& from);

  inline NumericValue& operator=(const NumericValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumericValue(NumericValue&& from) noexcept
    : NumericValue() {
    *this = ::std::move(from);
  }

  inline NumericValue& operator=(NumericValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NumericValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumericValue* internal_default_instance() {
    return reinterpret_cast<const NumericValue*>(
               &_NumericValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NumericValue* other);
  friend void swap(NumericValue& a, NumericValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumericValue* New() const final {
    return CreateMaybeMessage<NumericValue>(NULL);
  }

  NumericValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumericValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumericValue& from);
  void MergeFrom(const NumericValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumericValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 3 [(.nanopb) = {
  void clear_label();
  static const int kLabelFieldNumber = 3;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // .guiMessage.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  private:
  const ::guiMessage::Color& _internal_color() const;
  public:
  const ::guiMessage::Color& color() const;
  ::guiMessage::Color* release_color();
  ::guiMessage::Color* mutable_color();
  void set_allocated_color(::guiMessage::Color* color);

  // uint32 value = 2 [(.nanopb) = {
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:guiMessage.NumericValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::guiMessage::Color* color_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guiMessage_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Widget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guiMessage.Widget) */ {
 public:
  Widget();
  virtual ~Widget();

  Widget(const Widget& from);

  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Widget(Widget&& from) noexcept
    : Widget() {
    *this = ::std::move(from);
  }

  inline Widget& operator=(Widget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Widget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Widget* internal_default_instance() {
    return reinterpret_cast<const Widget*>(
               &_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Widget* other);
  friend void swap(Widget& a, Widget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Widget* New() const final {
    return CreateMaybeMessage<Widget>(NULL);
  }

  Widget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Widget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Widget& from);
  void MergeFrom(const Widget& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Widget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .guiMessage.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  private:
  const ::guiMessage::Color& _internal_color() const;
  public:
  const ::guiMessage::Color& color() const;
  ::guiMessage::Color* release_color();
  ::guiMessage::Color* mutable_color();
  void set_allocated_color(::guiMessage::Color* color);

  // @@protoc_insertion_point(class_scope:guiMessage.Widget)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::guiMessage::Color* color_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guiMessage_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guiMessage.ContentNode) */ {
 public:
  ContentNode();
  virtual ~ContentNode();

  ContentNode(const ContentNode& from);

  inline ContentNode& operator=(const ContentNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentNode(ContentNode&& from) noexcept
    : ContentNode() {
    *this = ::std::move(from);
  }

  inline ContentNode& operator=(ContentNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentNode& default_instance();

  enum ContentCase {
    kNumericValue = 2,
    kWidget = 3,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentNode* internal_default_instance() {
    return reinterpret_cast<const ContentNode*>(
               &_ContentNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ContentNode* other);
  friend void swap(ContentNode& a, ContentNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentNode* New() const final {
    return CreateMaybeMessage<ContentNode>(NULL);
  }

  ContentNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentNode& from);
  void MergeFrom(const ContentNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 layoutNodeId = 1;
  void clear_layoutnodeid();
  static const int kLayoutNodeIdFieldNumber = 1;
  ::google::protobuf::uint32 layoutnodeid() const;
  void set_layoutnodeid(::google::protobuf::uint32 value);

  // .guiMessage.NumericValue numericValue = 2;
  bool has_numericvalue() const;
  void clear_numericvalue();
  static const int kNumericValueFieldNumber = 2;
  private:
  const ::guiMessage::NumericValue& _internal_numericvalue() const;
  public:
  const ::guiMessage::NumericValue& numericvalue() const;
  ::guiMessage::NumericValue* release_numericvalue();
  ::guiMessage::NumericValue* mutable_numericvalue();
  void set_allocated_numericvalue(::guiMessage::NumericValue* numericvalue);

  // .guiMessage.Widget widget = 3;
  bool has_widget() const;
  void clear_widget();
  static const int kWidgetFieldNumber = 3;
  private:
  const ::guiMessage::Widget& _internal_widget() const;
  public:
  const ::guiMessage::Widget& widget() const;
  ::guiMessage::Widget* release_widget();
  ::guiMessage::Widget* mutable_widget();
  void set_allocated_widget(::guiMessage::Widget* widget);

  void clear_Content();
  ContentCase Content_case() const;
  // @@protoc_insertion_point(class_scope:guiMessage.ContentNode)
 private:
  void set_has_numericvalue();
  void set_has_widget();

  inline bool has_Content() const;
  inline void clear_has_Content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 layoutnodeid_;
  union ContentUnion {
    ContentUnion() {}
    ::guiMessage::NumericValue* numericvalue_;
    ::guiMessage::Widget* widget_;
  } Content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_guiMessage_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gui : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guiMessage.Gui) */ {
 public:
  Gui();
  virtual ~Gui();

  Gui(const Gui& from);

  inline Gui& operator=(const Gui& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gui(Gui&& from) noexcept
    : Gui() {
    *this = ::std::move(from);
  }

  inline Gui& operator=(Gui&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gui& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gui* internal_default_instance() {
    return reinterpret_cast<const Gui*>(
               &_Gui_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Gui* other);
  friend void swap(Gui& a, Gui& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gui* New() const final {
    return CreateMaybeMessage<Gui>(NULL);
  }

  Gui* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gui>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gui& from);
  void MergeFrom(const Gui& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gui* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .guiMessage.LayoutNode layoutNodes = 1;
  int layoutnodes_size() const;
  void clear_layoutnodes();
  static const int kLayoutNodesFieldNumber = 1;
  ::guiMessage::LayoutNode* mutable_layoutnodes(int index);
  ::google::protobuf::RepeatedPtrField< ::guiMessage::LayoutNode >*
      mutable_layoutnodes();
  const ::guiMessage::LayoutNode& layoutnodes(int index) const;
  ::guiMessage::LayoutNode* add_layoutnodes();
  const ::google::protobuf::RepeatedPtrField< ::guiMessage::LayoutNode >&
      layoutnodes() const;

  // repeated .guiMessage.ContentNode contentNodes = 2;
  int contentnodes_size() const;
  void clear_contentnodes();
  static const int kContentNodesFieldNumber = 2;
  ::guiMessage::ContentNode* mutable_contentnodes(int index);
  ::google::protobuf::RepeatedPtrField< ::guiMessage::ContentNode >*
      mutable_contentnodes();
  const ::guiMessage::ContentNode& contentnodes(int index) const;
  ::guiMessage::ContentNode* add_contentnodes();
  const ::google::protobuf::RepeatedPtrField< ::guiMessage::ContentNode >&
      contentnodes() const;

  // @@protoc_insertion_point(class_scope:guiMessage.Gui)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::guiMessage::LayoutNode > layoutnodes_;
  ::google::protobuf::RepeatedPtrField< ::guiMessage::ContentNode > contentnodes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guiMessage_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayoutNode

// uint32 parent = 1 [(.nanopb) = {
inline void LayoutNode::clear_parent() {
  parent_ = 0u;
}
inline ::google::protobuf::uint32 LayoutNode::parent() const {
  // @@protoc_insertion_point(field_get:guiMessage.LayoutNode.parent)
  return parent_;
}
inline void LayoutNode::set_parent(::google::protobuf::uint32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.LayoutNode.parent)
}

// uint32 nodeId = 2 [(.nanopb) = {
inline void LayoutNode::clear_nodeid() {
  nodeid_ = 0u;
}
inline ::google::protobuf::uint32 LayoutNode::nodeid() const {
  // @@protoc_insertion_point(field_get:guiMessage.LayoutNode.nodeId)
  return nodeid_;
}
inline void LayoutNode::set_nodeid(::google::protobuf::uint32 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.LayoutNode.nodeId)
}

// .guiMessage.Type type = 3;
inline void LayoutNode::clear_type() {
  type_ = 0;
}
inline ::guiMessage::Type LayoutNode::type() const {
  // @@protoc_insertion_point(field_get:guiMessage.LayoutNode.type)
  return static_cast< ::guiMessage::Type >(type_);
}
inline void LayoutNode::set_type(::guiMessage::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.LayoutNode.type)
}

// uint32 weight = 4 [(.nanopb) = {
inline void LayoutNode::clear_weight() {
  weight_ = 0u;
}
inline ::google::protobuf::uint32 LayoutNode::weight() const {
  // @@protoc_insertion_point(field_get:guiMessage.LayoutNode.weight)
  return weight_;
}
inline void LayoutNode::set_weight(::google::protobuf::uint32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.LayoutNode.weight)
}

// -------------------------------------------------------------------

// Color

// uint32 r = 1 [(.nanopb) = {
inline void Color::clear_r() {
  r_ = 0u;
}
inline ::google::protobuf::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:guiMessage.Color.r)
  return r_;
}
inline void Color::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.Color.r)
}

// uint32 g = 2 [(.nanopb) = {
inline void Color::clear_g() {
  g_ = 0u;
}
inline ::google::protobuf::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:guiMessage.Color.g)
  return g_;
}
inline void Color::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.Color.g)
}

// uint32 b = 3 [(.nanopb) = {
inline void Color::clear_b() {
  b_ = 0u;
}
inline ::google::protobuf::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:guiMessage.Color.b)
  return b_;
}
inline void Color::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.Color.b)
}

// -------------------------------------------------------------------

// NumericValue

// .guiMessage.Color color = 1;
inline bool NumericValue::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline void NumericValue::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
inline const ::guiMessage::Color& NumericValue::_internal_color() const {
  return *color_;
}
inline const ::guiMessage::Color& NumericValue::color() const {
  const ::guiMessage::Color* p = color_;
  // @@protoc_insertion_point(field_get:guiMessage.NumericValue.color)
  return p != NULL ? *p : *reinterpret_cast<const ::guiMessage::Color*>(
      &::guiMessage::_Color_default_instance_);
}
inline ::guiMessage::Color* NumericValue::release_color() {
  // @@protoc_insertion_point(field_release:guiMessage.NumericValue.color)
  
  ::guiMessage::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::guiMessage::Color* NumericValue::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::guiMessage::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:guiMessage.NumericValue.color)
  return color_;
}
inline void NumericValue::set_allocated_color(::guiMessage::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete color_;
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:guiMessage.NumericValue.color)
}

// uint32 value = 2 [(.nanopb) = {
inline void NumericValue::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 NumericValue::value() const {
  // @@protoc_insertion_point(field_get:guiMessage.NumericValue.value)
  return value_;
}
inline void NumericValue::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.NumericValue.value)
}

// string label = 3 [(.nanopb) = {
inline void NumericValue::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NumericValue::label() const {
  // @@protoc_insertion_point(field_get:guiMessage.NumericValue.label)
  return label_.GetNoArena();
}
inline void NumericValue::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:guiMessage.NumericValue.label)
}
#if LANG_CXX11
inline void NumericValue::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guiMessage.NumericValue.label)
}
#endif
inline void NumericValue::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guiMessage.NumericValue.label)
}
inline void NumericValue::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guiMessage.NumericValue.label)
}
inline ::std::string* NumericValue::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:guiMessage.NumericValue.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NumericValue::release_label() {
  // @@protoc_insertion_point(field_release:guiMessage.NumericValue.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NumericValue::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:guiMessage.NumericValue.label)
}

// -------------------------------------------------------------------

// Widget

// .guiMessage.Color color = 1;
inline bool Widget::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline void Widget::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
inline const ::guiMessage::Color& Widget::_internal_color() const {
  return *color_;
}
inline const ::guiMessage::Color& Widget::color() const {
  const ::guiMessage::Color* p = color_;
  // @@protoc_insertion_point(field_get:guiMessage.Widget.color)
  return p != NULL ? *p : *reinterpret_cast<const ::guiMessage::Color*>(
      &::guiMessage::_Color_default_instance_);
}
inline ::guiMessage::Color* Widget::release_color() {
  // @@protoc_insertion_point(field_release:guiMessage.Widget.color)
  
  ::guiMessage::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::guiMessage::Color* Widget::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::guiMessage::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:guiMessage.Widget.color)
  return color_;
}
inline void Widget::set_allocated_color(::guiMessage::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete color_;
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:guiMessage.Widget.color)
}

// -------------------------------------------------------------------

// ContentNode

// uint32 layoutNodeId = 1;
inline void ContentNode::clear_layoutnodeid() {
  layoutnodeid_ = 0u;
}
inline ::google::protobuf::uint32 ContentNode::layoutnodeid() const {
  // @@protoc_insertion_point(field_get:guiMessage.ContentNode.layoutNodeId)
  return layoutnodeid_;
}
inline void ContentNode::set_layoutnodeid(::google::protobuf::uint32 value) {
  
  layoutnodeid_ = value;
  // @@protoc_insertion_point(field_set:guiMessage.ContentNode.layoutNodeId)
}

// .guiMessage.NumericValue numericValue = 2;
inline bool ContentNode::has_numericvalue() const {
  return Content_case() == kNumericValue;
}
inline void ContentNode::set_has_numericvalue() {
  _oneof_case_[0] = kNumericValue;
}
inline void ContentNode::clear_numericvalue() {
  if (has_numericvalue()) {
    delete Content_.numericvalue_;
    clear_has_Content();
  }
}
inline const ::guiMessage::NumericValue& ContentNode::_internal_numericvalue() const {
  return *Content_.numericvalue_;
}
inline ::guiMessage::NumericValue* ContentNode::release_numericvalue() {
  // @@protoc_insertion_point(field_release:guiMessage.ContentNode.numericValue)
  if (has_numericvalue()) {
    clear_has_Content();
      ::guiMessage::NumericValue* temp = Content_.numericvalue_;
    Content_.numericvalue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::guiMessage::NumericValue& ContentNode::numericvalue() const {
  // @@protoc_insertion_point(field_get:guiMessage.ContentNode.numericValue)
  return has_numericvalue()
      ? *Content_.numericvalue_
      : *reinterpret_cast< ::guiMessage::NumericValue*>(&::guiMessage::_NumericValue_default_instance_);
}
inline ::guiMessage::NumericValue* ContentNode::mutable_numericvalue() {
  if (!has_numericvalue()) {
    clear_Content();
    set_has_numericvalue();
    Content_.numericvalue_ = CreateMaybeMessage< ::guiMessage::NumericValue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:guiMessage.ContentNode.numericValue)
  return Content_.numericvalue_;
}

// .guiMessage.Widget widget = 3;
inline bool ContentNode::has_widget() const {
  return Content_case() == kWidget;
}
inline void ContentNode::set_has_widget() {
  _oneof_case_[0] = kWidget;
}
inline void ContentNode::clear_widget() {
  if (has_widget()) {
    delete Content_.widget_;
    clear_has_Content();
  }
}
inline const ::guiMessage::Widget& ContentNode::_internal_widget() const {
  return *Content_.widget_;
}
inline ::guiMessage::Widget* ContentNode::release_widget() {
  // @@protoc_insertion_point(field_release:guiMessage.ContentNode.widget)
  if (has_widget()) {
    clear_has_Content();
      ::guiMessage::Widget* temp = Content_.widget_;
    Content_.widget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::guiMessage::Widget& ContentNode::widget() const {
  // @@protoc_insertion_point(field_get:guiMessage.ContentNode.widget)
  return has_widget()
      ? *Content_.widget_
      : *reinterpret_cast< ::guiMessage::Widget*>(&::guiMessage::_Widget_default_instance_);
}
inline ::guiMessage::Widget* ContentNode::mutable_widget() {
  if (!has_widget()) {
    clear_Content();
    set_has_widget();
    Content_.widget_ = CreateMaybeMessage< ::guiMessage::Widget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:guiMessage.ContentNode.widget)
  return Content_.widget_;
}

inline bool ContentNode::has_Content() const {
  return Content_case() != CONTENT_NOT_SET;
}
inline void ContentNode::clear_has_Content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ContentNode::ContentCase ContentNode::Content_case() const {
  return ContentNode::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Gui

// repeated .guiMessage.LayoutNode layoutNodes = 1;
inline int Gui::layoutnodes_size() const {
  return layoutnodes_.size();
}
inline void Gui::clear_layoutnodes() {
  layoutnodes_.Clear();
}
inline ::guiMessage::LayoutNode* Gui::mutable_layoutnodes(int index) {
  // @@protoc_insertion_point(field_mutable:guiMessage.Gui.layoutNodes)
  return layoutnodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::guiMessage::LayoutNode >*
Gui::mutable_layoutnodes() {
  // @@protoc_insertion_point(field_mutable_list:guiMessage.Gui.layoutNodes)
  return &layoutnodes_;
}
inline const ::guiMessage::LayoutNode& Gui::layoutnodes(int index) const {
  // @@protoc_insertion_point(field_get:guiMessage.Gui.layoutNodes)
  return layoutnodes_.Get(index);
}
inline ::guiMessage::LayoutNode* Gui::add_layoutnodes() {
  // @@protoc_insertion_point(field_add:guiMessage.Gui.layoutNodes)
  return layoutnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::guiMessage::LayoutNode >&
Gui::layoutnodes() const {
  // @@protoc_insertion_point(field_list:guiMessage.Gui.layoutNodes)
  return layoutnodes_;
}

// repeated .guiMessage.ContentNode contentNodes = 2;
inline int Gui::contentnodes_size() const {
  return contentnodes_.size();
}
inline void Gui::clear_contentnodes() {
  contentnodes_.Clear();
}
inline ::guiMessage::ContentNode* Gui::mutable_contentnodes(int index) {
  // @@protoc_insertion_point(field_mutable:guiMessage.Gui.contentNodes)
  return contentnodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::guiMessage::ContentNode >*
Gui::mutable_contentnodes() {
  // @@protoc_insertion_point(field_mutable_list:guiMessage.Gui.contentNodes)
  return &contentnodes_;
}
inline const ::guiMessage::ContentNode& Gui::contentnodes(int index) const {
  // @@protoc_insertion_point(field_get:guiMessage.Gui.contentNodes)
  return contentnodes_.Get(index);
}
inline ::guiMessage::ContentNode* Gui::add_contentnodes() {
  // @@protoc_insertion_point(field_add:guiMessage.Gui.contentNodes)
  return contentnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::guiMessage::ContentNode >&
Gui::contentnodes() const {
  // @@protoc_insertion_point(field_list:guiMessage.Gui.contentNodes)
  return contentnodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace guiMessage

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::guiMessage::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::guiMessage::Type>() {
  return ::guiMessage::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_guiMessage_5ftest_2eproto
