// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EdgeCase_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EdgeCase_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EdgeCase_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EdgeCase_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EdgeCase_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EdgeCase_5ftest_2eproto;
namespace blox_test {
namespace EdgeCase {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class NestedLink;
struct NestedLinkDefaultTypeInternal;
extern NestedLinkDefaultTypeInternal _NestedLink_default_instance_;
class Settings;
struct SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class SubCase;
struct SubCaseDefaultTypeInternal;
extern SubCaseDefaultTypeInternal _SubCase_default_instance_;
}  // namespace EdgeCase
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::EdgeCase::Block* Arena::CreateMaybeMessage<::blox_test::EdgeCase::Block>(Arena*);
template<> ::blox_test::EdgeCase::NestedLink* Arena::CreateMaybeMessage<::blox_test::EdgeCase::NestedLink>(Arena*);
template<> ::blox_test::EdgeCase::Settings* Arena::CreateMaybeMessage<::blox_test::EdgeCase::Settings>(Arena*);
template<> ::blox_test::EdgeCase::State* Arena::CreateMaybeMessage<::blox_test::EdgeCase::State>(Arena*);
template<> ::blox_test::EdgeCase::SubCase* Arena::CreateMaybeMessage<::blox_test::EdgeCase::SubCase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace EdgeCase {

// ===================================================================

class Settings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.EdgeCase.Settings) */ {
 public:
  inline Settings() : Settings(nullptr) {}
  ~Settings() override;
  explicit PROTOBUF_CONSTEXPR Settings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Settings(const Settings& from);
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Settings& operator=(Settings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Settings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }
  inline void Swap(Settings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Settings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Settings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.EdgeCase.Settings";
  }
  protected:
  explicit Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // fixed64 address = 1 [(.brewblox.field) = {
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // sint32 offset = 2 [(.brewblox.field) = {
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.EdgeCase.Settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t address_;
  int32_t offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EdgeCase_5ftest_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.EdgeCase.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit PROTOBUF_CONSTEXPR State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.EdgeCase.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kConnectedFieldNumber = 2,
  };
  // sint32 value = 1 [(.brewblox.field) = {
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // bool connected = 2 [(.brewblox.field) = {
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.EdgeCase.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  bool connected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EdgeCase_5ftest_2eproto;
};
// -------------------------------------------------------------------

class NestedLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.EdgeCase.NestedLink) */ {
 public:
  inline NestedLink() : NestedLink(nullptr) {}
  ~NestedLink() override;
  explicit PROTOBUF_CONSTEXPR NestedLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NestedLink(const NestedLink& from);
  NestedLink(NestedLink&& from) noexcept
    : NestedLink() {
    *this = ::std::move(from);
  }

  inline NestedLink& operator=(const NestedLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedLink& operator=(NestedLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NestedLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const NestedLink* internal_default_instance() {
    return reinterpret_cast<const NestedLink*>(
               &_NestedLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NestedLink& a, NestedLink& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NestedLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NestedLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NestedLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NestedLink& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.EdgeCase.NestedLink";
  }
  protected:
  explicit NestedLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // uint32 connection = 1 [(.brewblox.field) = {
  void clear_connection();
  uint32_t connection() const;
  void set_connection(uint32_t value);
  private:
  uint32_t _internal_connection() const;
  void _internal_set_connection(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.EdgeCase.NestedLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EdgeCase_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.EdgeCase.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.EdgeCase.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalLinksFieldNumber = 4,
    kListValuesFieldNumber = 5,
    kStrippedFieldsFieldNumber = 99,
    kSettingsFieldNumber = 1,
    kStateFieldNumber = 2,
    kLinkFieldNumber = 3,
    kDeltaVFieldNumber = 6,
    kLoggedFieldNumber = 7,
    kUnLoggedFieldNumber = 8,
    kDrivenDeviceFieldNumber = 9,
  };
  // repeated .blox_test.EdgeCase.NestedLink additionalLinks = 4;
  int additionallinks_size() const;
  private:
  int _internal_additionallinks_size() const;
  public:
  void clear_additionallinks();
  ::blox_test::EdgeCase::NestedLink* mutable_additionallinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::EdgeCase::NestedLink >*
      mutable_additionallinks();
  private:
  const ::blox_test::EdgeCase::NestedLink& _internal_additionallinks(int index) const;
  ::blox_test::EdgeCase::NestedLink* _internal_add_additionallinks();
  public:
  const ::blox_test::EdgeCase::NestedLink& additionallinks(int index) const;
  ::blox_test::EdgeCase::NestedLink* add_additionallinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::EdgeCase::NestedLink >&
      additionallinks() const;

  // repeated float listValues = 5 [(.brewblox.field) = {
  int listvalues_size() const;
  private:
  int _internal_listvalues_size() const;
  public:
  void clear_listvalues();
  private:
  float _internal_listvalues(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_listvalues() const;
  void _internal_add_listvalues(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_listvalues();
  public:
  float listvalues(int index) const;
  void set_listvalues(int index, float value);
  void add_listvalues(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      listvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_listvalues();

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  uint32_t _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_strippedfields();
  public:
  uint32_t strippedfields(int index) const;
  void set_strippedfields(int index, uint32_t value);
  void add_strippedfields(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_strippedfields();

  // .blox_test.EdgeCase.Settings settings = 1;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::blox_test::EdgeCase::Settings& settings() const;
  PROTOBUF_NODISCARD ::blox_test::EdgeCase::Settings* release_settings();
  ::blox_test::EdgeCase::Settings* mutable_settings();
  void set_allocated_settings(::blox_test::EdgeCase::Settings* settings);
  private:
  const ::blox_test::EdgeCase::Settings& _internal_settings() const;
  ::blox_test::EdgeCase::Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::blox_test::EdgeCase::Settings* settings);
  ::blox_test::EdgeCase::Settings* unsafe_arena_release_settings();

  // .blox_test.EdgeCase.State state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::blox_test::EdgeCase::State& state() const;
  PROTOBUF_NODISCARD ::blox_test::EdgeCase::State* release_state();
  ::blox_test::EdgeCase::State* mutable_state();
  void set_allocated_state(::blox_test::EdgeCase::State* state);
  private:
  const ::blox_test::EdgeCase::State& _internal_state() const;
  ::blox_test::EdgeCase::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::blox_test::EdgeCase::State* state);
  ::blox_test::EdgeCase::State* unsafe_arena_release_state();

  // uint32 link = 3 [(.brewblox.field) = {
  void clear_link();
  uint32_t link() const;
  void set_link(uint32_t value);
  private:
  uint32_t _internal_link() const;
  void _internal_set_link(uint32_t value);
  public:

  // uint32 deltaV = 6 [(.brewblox.field) = {
  void clear_deltav();
  uint32_t deltav() const;
  void set_deltav(uint32_t value);
  private:
  uint32_t _internal_deltav() const;
  void _internal_set_deltav(uint32_t value);
  public:

  // uint32 logged = 7 [(.brewblox.field) = {
  void clear_logged();
  uint32_t logged() const;
  void set_logged(uint32_t value);
  private:
  uint32_t _internal_logged() const;
  void _internal_set_logged(uint32_t value);
  public:

  // uint32 unLogged = 8;
  void clear_unlogged();
  uint32_t unlogged() const;
  void set_unlogged(uint32_t value);
  private:
  uint32_t _internal_unlogged() const;
  void _internal_set_unlogged(uint32_t value);
  public:

  // uint32 drivenDevice = 9 [(.nanopb) = {
  void clear_drivendevice();
  uint32_t drivendevice() const;
  void set_drivendevice(uint32_t value);
  private:
  uint32_t _internal_drivendevice() const;
  void _internal_set_drivendevice(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.EdgeCase.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::EdgeCase::NestedLink > additionallinks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > listvalues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  ::blox_test::EdgeCase::Settings* settings_;
  ::blox_test::EdgeCase::State* state_;
  uint32_t link_;
  uint32_t deltav_;
  uint32_t logged_;
  uint32_t unlogged_;
  uint32_t drivendevice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EdgeCase_5ftest_2eproto;
};
// -------------------------------------------------------------------

class SubCase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.EdgeCase.SubCase) */ {
 public:
  inline SubCase() : SubCase(nullptr) {}
  ~SubCase() override;
  explicit PROTOBUF_CONSTEXPR SubCase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubCase(const SubCase& from);
  SubCase(SubCase&& from) noexcept
    : SubCase() {
    *this = ::std::move(from);
  }

  inline SubCase& operator=(const SubCase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubCase& operator=(SubCase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubCase& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubCase* internal_default_instance() {
    return reinterpret_cast<const SubCase*>(
               &_SubCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubCase& a, SubCase& b) {
    a.Swap(&b);
  }
  inline void Swap(SubCase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubCase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubCase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubCase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubCase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubCase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubCase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.EdgeCase.SubCase";
  }
  protected:
  explicit SubCase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubvalueFieldNumber = 1,
  };
  // uint32 subvalue = 1;
  void clear_subvalue();
  uint32_t subvalue() const;
  void set_subvalue(uint32_t value);
  private:
  uint32_t _internal_subvalue() const;
  void _internal_set_subvalue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.EdgeCase.SubCase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t subvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EdgeCase_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Settings

// fixed64 address = 1 [(.brewblox.field) = {
inline void Settings::clear_address() {
  address_ = uint64_t{0u};
}
inline uint64_t Settings::_internal_address() const {
  return address_;
}
inline uint64_t Settings::address() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Settings.address)
  return _internal_address();
}
inline void Settings::_internal_set_address(uint64_t value) {
  
  address_ = value;
}
inline void Settings::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Settings.address)
}

// sint32 offset = 2 [(.brewblox.field) = {
inline void Settings::clear_offset() {
  offset_ = 0;
}
inline int32_t Settings::_internal_offset() const {
  return offset_;
}
inline int32_t Settings::offset() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Settings.offset)
  return _internal_offset();
}
inline void Settings::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void Settings::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Settings.offset)
}

// -------------------------------------------------------------------

// State

// sint32 value = 1 [(.brewblox.field) = {
inline void State::clear_value() {
  value_ = 0;
}
inline int32_t State::_internal_value() const {
  return value_;
}
inline int32_t State::value() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.State.value)
  return _internal_value();
}
inline void State::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void State::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.State.value)
}

// bool connected = 2 [(.brewblox.field) = {
inline void State::clear_connected() {
  connected_ = false;
}
inline bool State::_internal_connected() const {
  return connected_;
}
inline bool State::connected() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.State.connected)
  return _internal_connected();
}
inline void State::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void State::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.State.connected)
}

// -------------------------------------------------------------------

// NestedLink

// uint32 connection = 1 [(.brewblox.field) = {
inline void NestedLink::clear_connection() {
  connection_ = 0u;
}
inline uint32_t NestedLink::_internal_connection() const {
  return connection_;
}
inline uint32_t NestedLink::connection() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.NestedLink.connection)
  return _internal_connection();
}
inline void NestedLink::_internal_set_connection(uint32_t value) {
  
  connection_ = value;
}
inline void NestedLink::set_connection(uint32_t value) {
  _internal_set_connection(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.NestedLink.connection)
}

// -------------------------------------------------------------------

// Block

// .blox_test.EdgeCase.Settings settings = 1;
inline bool Block::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool Block::has_settings() const {
  return _internal_has_settings();
}
inline void Block::clear_settings() {
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::blox_test::EdgeCase::Settings& Block::_internal_settings() const {
  const ::blox_test::EdgeCase::Settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::blox_test::EdgeCase::Settings&>(
      ::blox_test::EdgeCase::_Settings_default_instance_);
}
inline const ::blox_test::EdgeCase::Settings& Block::settings() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.settings)
  return _internal_settings();
}
inline void Block::unsafe_arena_set_allocated_settings(
    ::blox_test::EdgeCase::Settings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.EdgeCase.Block.settings)
}
inline ::blox_test::EdgeCase::Settings* Block::release_settings() {
  
  ::blox_test::EdgeCase::Settings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blox_test::EdgeCase::Settings* Block::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:blox_test.EdgeCase.Block.settings)
  
  ::blox_test::EdgeCase::Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::blox_test::EdgeCase::Settings* Block::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::blox_test::EdgeCase::Settings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::blox_test::EdgeCase::Settings* Block::mutable_settings() {
  ::blox_test::EdgeCase::Settings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:blox_test.EdgeCase.Block.settings)
  return _msg;
}
inline void Block::set_allocated_settings(::blox_test::EdgeCase::Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:blox_test.EdgeCase.Block.settings)
}

// .blox_test.EdgeCase.State state = 2;
inline bool Block::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Block::has_state() const {
  return _internal_has_state();
}
inline void Block::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::blox_test::EdgeCase::State& Block::_internal_state() const {
  const ::blox_test::EdgeCase::State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::blox_test::EdgeCase::State&>(
      ::blox_test::EdgeCase::_State_default_instance_);
}
inline const ::blox_test::EdgeCase::State& Block::state() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.state)
  return _internal_state();
}
inline void Block::unsafe_arena_set_allocated_state(
    ::blox_test::EdgeCase::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.EdgeCase.Block.state)
}
inline ::blox_test::EdgeCase::State* Block::release_state() {
  
  ::blox_test::EdgeCase::State* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blox_test::EdgeCase::State* Block::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:blox_test.EdgeCase.Block.state)
  
  ::blox_test::EdgeCase::State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::blox_test::EdgeCase::State* Block::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::blox_test::EdgeCase::State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::blox_test::EdgeCase::State* Block::mutable_state() {
  ::blox_test::EdgeCase::State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:blox_test.EdgeCase.Block.state)
  return _msg;
}
inline void Block::set_allocated_state(::blox_test::EdgeCase::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:blox_test.EdgeCase.Block.state)
}

// uint32 link = 3 [(.brewblox.field) = {
inline void Block::clear_link() {
  link_ = 0u;
}
inline uint32_t Block::_internal_link() const {
  return link_;
}
inline uint32_t Block::link() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.link)
  return _internal_link();
}
inline void Block::_internal_set_link(uint32_t value) {
  
  link_ = value;
}
inline void Block::set_link(uint32_t value) {
  _internal_set_link(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Block.link)
}

// repeated .blox_test.EdgeCase.NestedLink additionalLinks = 4;
inline int Block::_internal_additionallinks_size() const {
  return additionallinks_.size();
}
inline int Block::additionallinks_size() const {
  return _internal_additionallinks_size();
}
inline void Block::clear_additionallinks() {
  additionallinks_.Clear();
}
inline ::blox_test::EdgeCase::NestedLink* Block::mutable_additionallinks(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.EdgeCase.Block.additionalLinks)
  return additionallinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::EdgeCase::NestedLink >*
Block::mutable_additionallinks() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.EdgeCase.Block.additionalLinks)
  return &additionallinks_;
}
inline const ::blox_test::EdgeCase::NestedLink& Block::_internal_additionallinks(int index) const {
  return additionallinks_.Get(index);
}
inline const ::blox_test::EdgeCase::NestedLink& Block::additionallinks(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.additionalLinks)
  return _internal_additionallinks(index);
}
inline ::blox_test::EdgeCase::NestedLink* Block::_internal_add_additionallinks() {
  return additionallinks_.Add();
}
inline ::blox_test::EdgeCase::NestedLink* Block::add_additionallinks() {
  ::blox_test::EdgeCase::NestedLink* _add = _internal_add_additionallinks();
  // @@protoc_insertion_point(field_add:blox_test.EdgeCase.Block.additionalLinks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::EdgeCase::NestedLink >&
Block::additionallinks() const {
  // @@protoc_insertion_point(field_list:blox_test.EdgeCase.Block.additionalLinks)
  return additionallinks_;
}

// repeated float listValues = 5 [(.brewblox.field) = {
inline int Block::_internal_listvalues_size() const {
  return listvalues_.size();
}
inline int Block::listvalues_size() const {
  return _internal_listvalues_size();
}
inline void Block::clear_listvalues() {
  listvalues_.Clear();
}
inline float Block::_internal_listvalues(int index) const {
  return listvalues_.Get(index);
}
inline float Block::listvalues(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.listValues)
  return _internal_listvalues(index);
}
inline void Block::set_listvalues(int index, float value) {
  listvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Block.listValues)
}
inline void Block::_internal_add_listvalues(float value) {
  listvalues_.Add(value);
}
inline void Block::add_listvalues(float value) {
  _internal_add_listvalues(value);
  // @@protoc_insertion_point(field_add:blox_test.EdgeCase.Block.listValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Block::_internal_listvalues() const {
  return listvalues_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Block::listvalues() const {
  // @@protoc_insertion_point(field_list:blox_test.EdgeCase.Block.listValues)
  return _internal_listvalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Block::_internal_mutable_listvalues() {
  return &listvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Block::mutable_listvalues() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.EdgeCase.Block.listValues)
  return _internal_mutable_listvalues();
}

// uint32 deltaV = 6 [(.brewblox.field) = {
inline void Block::clear_deltav() {
  deltav_ = 0u;
}
inline uint32_t Block::_internal_deltav() const {
  return deltav_;
}
inline uint32_t Block::deltav() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.deltaV)
  return _internal_deltav();
}
inline void Block::_internal_set_deltav(uint32_t value) {
  
  deltav_ = value;
}
inline void Block::set_deltav(uint32_t value) {
  _internal_set_deltav(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Block.deltaV)
}

// uint32 logged = 7 [(.brewblox.field) = {
inline void Block::clear_logged() {
  logged_ = 0u;
}
inline uint32_t Block::_internal_logged() const {
  return logged_;
}
inline uint32_t Block::logged() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.logged)
  return _internal_logged();
}
inline void Block::_internal_set_logged(uint32_t value) {
  
  logged_ = value;
}
inline void Block::set_logged(uint32_t value) {
  _internal_set_logged(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Block.logged)
}

// uint32 unLogged = 8;
inline void Block::clear_unlogged() {
  unlogged_ = 0u;
}
inline uint32_t Block::_internal_unlogged() const {
  return unlogged_;
}
inline uint32_t Block::unlogged() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.unLogged)
  return _internal_unlogged();
}
inline void Block::_internal_set_unlogged(uint32_t value) {
  
  unlogged_ = value;
}
inline void Block::set_unlogged(uint32_t value) {
  _internal_set_unlogged(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Block.unLogged)
}

// uint32 drivenDevice = 9 [(.nanopb) = {
inline void Block::clear_drivendevice() {
  drivendevice_ = 0u;
}
inline uint32_t Block::_internal_drivendevice() const {
  return drivendevice_;
}
inline uint32_t Block::drivendevice() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.drivenDevice)
  return _internal_drivendevice();
}
inline void Block::_internal_set_drivendevice(uint32_t value) {
  
  drivendevice_ = value;
}
inline void Block::set_drivendevice(uint32_t value) {
  _internal_set_drivendevice(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Block.drivenDevice)
}

// repeated uint32 strippedFields = 99 [(.nanopb) = {
inline int Block::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int Block::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void Block::clear_strippedfields() {
  strippedfields_.Clear();
}
inline uint32_t Block::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline uint32_t Block::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.Block.strippedFields)
  return _internal_strippedfields(index);
}
inline void Block::set_strippedfields(int index, uint32_t value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.Block.strippedFields)
}
inline void Block::_internal_add_strippedfields(uint32_t value) {
  strippedfields_.Add(value);
}
inline void Block::add_strippedfields(uint32_t value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox_test.EdgeCase.Block.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox_test.EdgeCase.Block.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.EdgeCase.Block.strippedFields)
  return _internal_mutable_strippedfields();
}

// -------------------------------------------------------------------

// SubCase

// uint32 subvalue = 1;
inline void SubCase::clear_subvalue() {
  subvalue_ = 0u;
}
inline uint32_t SubCase::_internal_subvalue() const {
  return subvalue_;
}
inline uint32_t SubCase::subvalue() const {
  // @@protoc_insertion_point(field_get:blox_test.EdgeCase.SubCase.subvalue)
  return _internal_subvalue();
}
inline void SubCase::_internal_set_subvalue(uint32_t value) {
  
  subvalue_ = value;
}
inline void SubCase::set_subvalue(uint32_t value) {
  _internal_set_subvalue(value);
  // @@protoc_insertion_point(field_set:blox_test.EdgeCase.SubCase.subvalue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace EdgeCase
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EdgeCase_5ftest_2eproto
