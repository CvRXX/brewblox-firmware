// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorOffset_test.proto

#ifndef PROTOBUF_INCLUDED_ActuatorOffset_5ftest_2eproto
#define PROTOBUF_INCLUDED_ActuatorOffset_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "Constraints_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ActuatorOffset_5ftest_2eproto 

namespace protobuf_ActuatorOffset_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ActuatorOffset_5ftest_2eproto
namespace blox_test {
namespace ActuatorOffset {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace ActuatorOffset
}  // namespace blox_test
namespace google {
namespace protobuf {
template<> ::blox_test::ActuatorOffset::Block* Arena::CreateMaybeMessage<::blox_test::ActuatorOffset::Block>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox_test {
namespace ActuatorOffset {

enum ReferenceKind {
  REF_SETTING = 0,
  REF_VALUE = 1,
  ReferenceKind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReferenceKind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReferenceKind_IsValid(int value);
const ReferenceKind ReferenceKind_MIN = REF_SETTING;
const ReferenceKind ReferenceKind_MAX = REF_VALUE;
const int ReferenceKind_ARRAYSIZE = ReferenceKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReferenceKind_descriptor();
inline const ::std::string& ReferenceKind_Name(ReferenceKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReferenceKind_descriptor(), value);
}
inline bool ReferenceKind_Parse(
    const ::std::string& name, ReferenceKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReferenceKind>(
    ReferenceKind_descriptor(), name, value);
}
// ===================================================================

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox_test.ActuatorOffset.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .blox_test.Constraints.AnalogConstraints constrainedBy = 8;
  bool has_constrainedby() const;
  void clear_constrainedby();
  static const int kConstrainedByFieldNumber = 8;
  private:
  const ::blox_test::Constraints::AnalogConstraints& _internal_constrainedby() const;
  public:
  const ::blox_test::Constraints::AnalogConstraints& constrainedby() const;
  ::blox_test::Constraints::AnalogConstraints* release_constrainedby();
  ::blox_test::Constraints::AnalogConstraints* mutable_constrainedby();
  void set_allocated_constrainedby(::blox_test::Constraints::AnalogConstraints* constrainedby);

  // uint32 targetId = 1 [(.nanopb) = {
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::google::protobuf::uint32 targetid() const;
  void set_targetid(::google::protobuf::uint32 value);

  // uint32 referenceId = 3 [(.nanopb) = {
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 3;
  ::google::protobuf::uint32 referenceid() const;
  void set_referenceid(::google::protobuf::uint32 value);

  // .blox_test.ActuatorOffset.ReferenceKind referenceSettingOrValue = 4;
  void clear_referencesettingorvalue();
  static const int kReferenceSettingOrValueFieldNumber = 4;
  ::blox_test::ActuatorOffset::ReferenceKind referencesettingorvalue() const;
  void set_referencesettingorvalue(::blox_test::ActuatorOffset::ReferenceKind value);

  // sint32 setting = 6 [(.nanopb) = {
  void clear_setting();
  static const int kSettingFieldNumber = 6;
  ::google::protobuf::int32 setting() const;
  void set_setting(::google::protobuf::int32 value);

  // sint32 value = 7 [(.nanopb) = {
  void clear_value();
  static const int kValueFieldNumber = 7;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // sint32 desiredSetting = 11 [(.nanopb) = {
  void clear_desiredsetting();
  static const int kDesiredSettingFieldNumber = 11;
  ::google::protobuf::int32 desiredsetting() const;
  void set_desiredsetting(::google::protobuf::int32 value);

  // uint32 claimedBy = 12 [(.nanopb) = {
  void clear_claimedby();
  static const int kClaimedByFieldNumber = 12;
  ::google::protobuf::uint32 claimedby() const;
  void set_claimedby(::google::protobuf::uint32 value);

  // bool enabled = 10;
  void clear_enabled();
  static const int kEnabledFieldNumber = 10;
  bool enabled() const;
  void set_enabled(bool value);

  // bool drivenTargetId = 90 [(.nanopb) = {
  void clear_driventargetid();
  static const int kDrivenTargetIdFieldNumber = 90;
  bool driventargetid() const;
  void set_driventargetid(bool value);

  // @@protoc_insertion_point(class_scope:blox_test.ActuatorOffset.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::blox_test::Constraints::AnalogConstraints* constrainedby_;
  ::google::protobuf::uint32 targetid_;
  ::google::protobuf::uint32 referenceid_;
  int referencesettingorvalue_;
  ::google::protobuf::int32 setting_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 desiredsetting_;
  ::google::protobuf::uint32 claimedby_;
  bool enabled_;
  bool driventargetid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ActuatorOffset_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// uint32 targetId = 1 [(.nanopb) = {
inline void Block::clear_targetid() {
  targetid_ = 0u;
}
inline ::google::protobuf::uint32 Block::targetid() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.targetId)
  return targetid_;
}
inline void Block::set_targetid(::google::protobuf::uint32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.targetId)
}

// uint32 referenceId = 3 [(.nanopb) = {
inline void Block::clear_referenceid() {
  referenceid_ = 0u;
}
inline ::google::protobuf::uint32 Block::referenceid() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.referenceId)
  return referenceid_;
}
inline void Block::set_referenceid(::google::protobuf::uint32 value) {
  
  referenceid_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.referenceId)
}

// .blox_test.ActuatorOffset.ReferenceKind referenceSettingOrValue = 4;
inline void Block::clear_referencesettingorvalue() {
  referencesettingorvalue_ = 0;
}
inline ::blox_test::ActuatorOffset::ReferenceKind Block::referencesettingorvalue() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.referenceSettingOrValue)
  return static_cast< ::blox_test::ActuatorOffset::ReferenceKind >(referencesettingorvalue_);
}
inline void Block::set_referencesettingorvalue(::blox_test::ActuatorOffset::ReferenceKind value) {
  
  referencesettingorvalue_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.referenceSettingOrValue)
}

// sint32 setting = 6 [(.nanopb) = {
inline void Block::clear_setting() {
  setting_ = 0;
}
inline ::google::protobuf::int32 Block::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.setting)
  return setting_;
}
inline void Block::set_setting(::google::protobuf::int32 value) {
  
  setting_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.setting)
}

// sint32 value = 7 [(.nanopb) = {
inline void Block::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Block::value() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.value)
  return value_;
}
inline void Block::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.value)
}

// .blox_test.Constraints.AnalogConstraints constrainedBy = 8;
inline bool Block::has_constrainedby() const {
  return this != internal_default_instance() && constrainedby_ != NULL;
}
inline const ::blox_test::Constraints::AnalogConstraints& Block::_internal_constrainedby() const {
  return *constrainedby_;
}
inline const ::blox_test::Constraints::AnalogConstraints& Block::constrainedby() const {
  const ::blox_test::Constraints::AnalogConstraints* p = constrainedby_;
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.constrainedBy)
  return p != NULL ? *p : *reinterpret_cast<const ::blox_test::Constraints::AnalogConstraints*>(
      &::blox_test::Constraints::_AnalogConstraints_default_instance_);
}
inline ::blox_test::Constraints::AnalogConstraints* Block::release_constrainedby() {
  // @@protoc_insertion_point(field_release:blox_test.ActuatorOffset.Block.constrainedBy)
  
  ::blox_test::Constraints::AnalogConstraints* temp = constrainedby_;
  constrainedby_ = NULL;
  return temp;
}
inline ::blox_test::Constraints::AnalogConstraints* Block::mutable_constrainedby() {
  
  if (constrainedby_ == NULL) {
    auto* p = CreateMaybeMessage<::blox_test::Constraints::AnalogConstraints>(GetArenaNoVirtual());
    constrainedby_ = p;
  }
  // @@protoc_insertion_point(field_mutable:blox_test.ActuatorOffset.Block.constrainedBy)
  return constrainedby_;
}
inline void Block::set_allocated_constrainedby(::blox_test::Constraints::AnalogConstraints* constrainedby) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(constrainedby_);
  }
  if (constrainedby) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      constrainedby = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constrainedby, submessage_arena);
    }
    
  } else {
    
  }
  constrainedby_ = constrainedby;
  // @@protoc_insertion_point(field_set_allocated:blox_test.ActuatorOffset.Block.constrainedBy)
}

// bool enabled = 10;
inline void Block::clear_enabled() {
  enabled_ = false;
}
inline bool Block::enabled() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.enabled)
  return enabled_;
}
inline void Block::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.enabled)
}

// sint32 desiredSetting = 11 [(.nanopb) = {
inline void Block::clear_desiredsetting() {
  desiredsetting_ = 0;
}
inline ::google::protobuf::int32 Block::desiredsetting() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.desiredSetting)
  return desiredsetting_;
}
inline void Block::set_desiredsetting(::google::protobuf::int32 value) {
  
  desiredsetting_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.desiredSetting)
}

// uint32 claimedBy = 12 [(.nanopb) = {
inline void Block::clear_claimedby() {
  claimedby_ = 0u;
}
inline ::google::protobuf::uint32 Block::claimedby() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.claimedBy)
  return claimedby_;
}
inline void Block::set_claimedby(::google::protobuf::uint32 value) {
  
  claimedby_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.claimedBy)
}

// bool drivenTargetId = 90 [(.nanopb) = {
inline void Block::clear_driventargetid() {
  driventargetid_ = false;
}
inline bool Block::driventargetid() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorOffset.Block.drivenTargetId)
  return driventargetid_;
}
inline void Block::set_driventargetid(bool value) {
  
  driventargetid_ = value;
  // @@protoc_insertion_point(field_set:blox_test.ActuatorOffset.Block.drivenTargetId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ActuatorOffset
}  // namespace blox_test

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blox_test::ActuatorOffset::ReferenceKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::ActuatorOffset::ReferenceKind>() {
  return ::blox_test::ActuatorOffset::ReferenceKind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ActuatorOffset_5ftest_2eproto
