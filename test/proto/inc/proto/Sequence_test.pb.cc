// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sequence_test.proto

#include "Sequence_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blox_test {
namespace Sequence {
PROTOBUF_CONSTEXPR Restart::Restart(
    ::_pbi::ConstantInitialized){}
struct RestartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RestartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RestartDefaultTypeInternal() {}
  union {
    Restart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RestartDefaultTypeInternal _Restart_default_instance_;
PROTOBUF_CONSTEXPR EnableDisable::EnableDisable(
    ::_pbi::ConstantInitialized)
  : target_(0u){}
struct EnableDisableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableDisableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableDisableDefaultTypeInternal() {}
  union {
    EnableDisable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableDisableDefaultTypeInternal _EnableDisable_default_instance_;
PROTOBUF_CONSTEXPR WaitDuration::WaitDuration(
    ::_pbi::ConstantInitialized)
  : duration_(0u){}
struct WaitDurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitDurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitDurationDefaultTypeInternal() {}
  union {
    WaitDuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitDurationDefaultTypeInternal _WaitDuration_default_instance_;
PROTOBUF_CONSTEXPR WaitUntil::WaitUntil(
    ::_pbi::ConstantInitialized)
  : time_(0u){}
struct WaitUntilDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitUntilDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitUntilDefaultTypeInternal() {}
  union {
    WaitUntil _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitUntilDefaultTypeInternal _WaitUntil_default_instance_;
PROTOBUF_CONSTEXPR WaitTemperatureRange::WaitTemperatureRange(
    ::_pbi::ConstantInitialized)
  : target_(0u)
  , lower_(0)
  , upper_(0){}
struct WaitTemperatureRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitTemperatureRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitTemperatureRangeDefaultTypeInternal() {}
  union {
    WaitTemperatureRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitTemperatureRangeDefaultTypeInternal _WaitTemperatureRange_default_instance_;
PROTOBUF_CONSTEXPR WaitTemperatureBoundary::WaitTemperatureBoundary(
    ::_pbi::ConstantInitialized)
  : target_(0u)
  , value_(0){}
struct WaitTemperatureBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitTemperatureBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitTemperatureBoundaryDefaultTypeInternal() {}
  union {
    WaitTemperatureBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitTemperatureBoundaryDefaultTypeInternal _WaitTemperatureBoundary_default_instance_;
PROTOBUF_CONSTEXPR SetSetpoint::SetSetpoint(
    ::_pbi::ConstantInitialized)
  : target_(0u)
  , setting_(0){}
struct SetSetpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSetpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSetpointDefaultTypeInternal() {}
  union {
    SetSetpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSetpointDefaultTypeInternal _SetSetpoint_default_instance_;
PROTOBUF_CONSTEXPR WaitSetpoint::WaitSetpoint(
    ::_pbi::ConstantInitialized)
  : target_(0u)
  , precision_(0){}
struct WaitSetpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitSetpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitSetpointDefaultTypeInternal() {}
  union {
    WaitSetpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitSetpointDefaultTypeInternal _WaitSetpoint_default_instance_;
PROTOBUF_CONSTEXPR SetDigital::SetDigital(
    ::_pbi::ConstantInitialized)
  : target_(0u)
  , setting_(0)
{}
struct SetDigitalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetDigitalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetDigitalDefaultTypeInternal() {}
  union {
    SetDigital _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetDigitalDefaultTypeInternal _SetDigital_default_instance_;
PROTOBUF_CONSTEXPR WaitDigital::WaitDigital(
    ::_pbi::ConstantInitialized)
  : target_(0u){}
struct WaitDigitalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitDigitalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitDigitalDefaultTypeInternal() {}
  union {
    WaitDigital _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitDigitalDefaultTypeInternal _WaitDigital_default_instance_;
PROTOBUF_CONSTEXPR SetPwm::SetPwm(
    ::_pbi::ConstantInitialized)
  : target_(0u)
  , setting_(0){}
struct SetPwmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPwmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPwmDefaultTypeInternal() {}
  union {
    SetPwm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPwmDefaultTypeInternal _SetPwm_default_instance_;
PROTOBUF_CONSTEXPR TargetProfile::TargetProfile(
    ::_pbi::ConstantInitialized)
  : target_(0u){}
struct TargetProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetProfileDefaultTypeInternal() {}
  union {
    TargetProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetProfileDefaultTypeInternal _TargetProfile_default_instance_;
PROTOBUF_CONSTEXPR TargetSequence::TargetSequence(
    ::_pbi::ConstantInitialized)
  : target_(0u){}
struct TargetSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetSequenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetSequenceDefaultTypeInternal() {}
  union {
    TargetSequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetSequenceDefaultTypeInternal _TargetSequence_default_instance_;
PROTOBUF_CONSTEXPR Instruction::Instruction(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InstructionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstructionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstructionDefaultTypeInternal() {}
  union {
    Instruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstructionDefaultTypeInternal _Instruction_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : instructions_()
  , enabled_(false)
  , overridestate_(false)
  , activeinstruction_(0u)
  , activeinstructionstartedat_(0u)
  , disabledat_(0u)
  , disabledduration_(0u)
  , status_(0)

  , error_(0)
{}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace Sequence
}  // namespace blox_test
static ::_pb::Metadata file_level_metadata_Sequence_5ftest_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Sequence_5ftest_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Sequence_5ftest_2eproto = nullptr;

const uint32_t TableStruct_Sequence_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Restart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::EnableDisable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::EnableDisable, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitDuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitDuration, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitUntil, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitUntil, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitTemperatureRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitTemperatureRange, target_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitTemperatureRange, lower_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitTemperatureRange, upper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitTemperatureBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitTemperatureBoundary, target_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitTemperatureBoundary, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetSetpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetSetpoint, target_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetSetpoint, setting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitSetpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitSetpoint, target_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitSetpoint, precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetDigital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetDigital, target_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetDigital, setting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitDigital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::WaitDigital, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetPwm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetPwm, target_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::SetPwm, setting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::TargetProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::TargetProfile, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::TargetSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::TargetSequence, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Instruction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Instruction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Instruction, instruction_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, enabled_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, instructions_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, overridestate_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, activeinstruction_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, activeinstructionstartedat_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, disabledat_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, disabledduration_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, status_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Sequence::Block, error_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::blox_test::Sequence::Restart)},
  { 6, -1, -1, sizeof(::blox_test::Sequence::EnableDisable)},
  { 13, -1, -1, sizeof(::blox_test::Sequence::WaitDuration)},
  { 20, -1, -1, sizeof(::blox_test::Sequence::WaitUntil)},
  { 27, -1, -1, sizeof(::blox_test::Sequence::WaitTemperatureRange)},
  { 36, -1, -1, sizeof(::blox_test::Sequence::WaitTemperatureBoundary)},
  { 44, -1, -1, sizeof(::blox_test::Sequence::SetSetpoint)},
  { 52, -1, -1, sizeof(::blox_test::Sequence::WaitSetpoint)},
  { 60, -1, -1, sizeof(::blox_test::Sequence::SetDigital)},
  { 68, -1, -1, sizeof(::blox_test::Sequence::WaitDigital)},
  { 75, -1, -1, sizeof(::blox_test::Sequence::SetPwm)},
  { 83, -1, -1, sizeof(::blox_test::Sequence::TargetProfile)},
  { 90, -1, -1, sizeof(::blox_test::Sequence::TargetSequence)},
  { 97, -1, -1, sizeof(::blox_test::Sequence::Instruction)},
  { 123, -1, -1, sizeof(::blox_test::Sequence::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::blox_test::Sequence::_Restart_default_instance_._instance,
  &::blox_test::Sequence::_EnableDisable_default_instance_._instance,
  &::blox_test::Sequence::_WaitDuration_default_instance_._instance,
  &::blox_test::Sequence::_WaitUntil_default_instance_._instance,
  &::blox_test::Sequence::_WaitTemperatureRange_default_instance_._instance,
  &::blox_test::Sequence::_WaitTemperatureBoundary_default_instance_._instance,
  &::blox_test::Sequence::_SetSetpoint_default_instance_._instance,
  &::blox_test::Sequence::_WaitSetpoint_default_instance_._instance,
  &::blox_test::Sequence::_SetDigital_default_instance_._instance,
  &::blox_test::Sequence::_WaitDigital_default_instance_._instance,
  &::blox_test::Sequence::_SetPwm_default_instance_._instance,
  &::blox_test::Sequence::_TargetProfile_default_instance_._instance,
  &::blox_test::Sequence::_TargetSequence_default_instance_._instance,
  &::blox_test::Sequence::_Instruction_default_instance_._instance,
  &::blox_test::Sequence::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_Sequence_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Sequence_test.proto\022\022blox_test.Sequenc"
  "e\032\023brewblox_test.proto\032\021nanopb_test.prot"
  "o\032\022IoArray_test.proto\"\t\n\007Restart\",\n\rEnab"
  "leDisable\022\033\n\006target\030\001 \001(\rB\013\212\265\030\002\030\017\222\?\0028\020\"-"
  "\n\014WaitDuration\022\035\n\010duration\030\001 \001(\rB\013\212\265\030\002\010\003"
  "\222\?\0028 \"&\n\tWaitUntil\022\031\n\004time\030\001 \001(\rB\013\212\265\030\002X\001"
  "\222\?\0028 \"y\n\024WaitTemperatureRange\022\033\n\006target\030"
  "\001 \001(\rB\013\212\265\030\002\030\002\222\?\0028\020\022!\n\005lower\030\002 \001(\021B\022\212\265\030\002\010"
  "\001\212\265\030\003\020\200 \222\?\0028 \022!\n\005upper\030\003 \001(\021B\022\212\265\030\002\010\001\212\265\030\003"
  "\020\200 \222\?\0028 \"Y\n\027WaitTemperatureBoundary\022\033\n\006t"
  "arget\030\001 \001(\rB\013\212\265\030\002\030\002\222\?\0028\020\022!\n\005value\030\002 \001(\021B"
  "\022\212\265\030\002\010\001\212\265\030\003\020\200 \222\?\0028 \"O\n\013SetSetpoint\022\033\n\006ta"
  "rget\030\001 \001(\rB\013\212\265\030\002\030\004\222\?\0028\020\022#\n\007setting\030\002 \001(\021"
  "B\022\212\265\030\002\010\001\212\265\030\003\020\200 \222\?\0028 \"R\n\014WaitSetpoint\022\033\n\006"
  "target\030\001 \001(\rB\013\212\265\030\002\030\004\222\?\0028\020\022%\n\tprecision\030\002"
  " \001(\021B\022\212\265\030\002\010\006\212\265\030\003\020\200 \222\?\0028 \"[\n\nSetDigital\022\033"
  "\n\006target\030\001 \001(\rB\013\212\265\030\002\030\006\222\?\0028\020\0220\n\007setting\030\002"
  " \001(\0162\037.blox_test.IoArray.DigitalState\"*\n"
  "\013WaitDigital\022\033\n\006target\030\001 \001(\rB\013\212\265\030\002\030\006\222\?\0028"
  "\020\"E\n\006SetPwm\022\034\n\006target\030\001 \001(\rB\014\212\265\030\003\030\263\002\222\?\0028"
  "\020\022\035\n\007setting\030\002 \001(\021B\014\212\265\030\003\020\200 \222\?\0028 \"-\n\rTarg"
  "etProfile\022\034\n\006target\030\001 \001(\rB\014\212\265\030\003\030\267\002\222\?\0028\020\""
  ".\n\016TargetSequence\022\034\n\006target\030\001 \001(\rB\014\212\265\030\003\030"
  "\306\002\222\?\0028\020\"\236\t\n\013Instruction\022.\n\007RESTART\030\001 \001(\013"
  "2\033.blox_test.Sequence.RestartH\000\0223\n\006ENABL"
  "E\030\002 \001(\0132!.blox_test.Sequence.EnableDisab"
  "leH\000\0224\n\007DISABLE\030\003 \001(\0132!.blox_test.Sequen"
  "ce.EnableDisableH\000\0229\n\rWAIT_DURATION\030\004 \001("
  "\0132 .blox_test.Sequence.WaitDurationH\000\0223\n"
  "\nWAIT_UNTIL\030\005 \001(\0132\035.blox_test.Sequence.W"
  "aitUntilH\000\022E\n\021WAIT_TEMP_BETWEEN\030\006 \001(\0132(."
  "blox_test.Sequence.WaitTemperatureRangeH"
  "\000\022I\n\025WAIT_TEMP_NOT_BETWEEN\030\007 \001(\0132(.blox_"
  "test.Sequence.WaitTemperatureRangeH\000\022H\n\024"
  "WAIT_TEMP_UNEXPECTED\030\010 \001(\0132(.blox_test.S"
  "equence.WaitTemperatureRangeH\000\022F\n\017WAIT_T"
  "EMP_ABOVE\030\t \001(\0132+.blox_test.Sequence.Wai"
  "tTemperatureBoundaryH\000\022F\n\017WAIT_TEMP_BELO"
  "W\030\n \001(\0132+.blox_test.Sequence.WaitTempera"
  "tureBoundaryH\000\0227\n\014SET_SETPOINT\030\013 \001(\0132\037.b"
  "lox_test.Sequence.SetSetpointH\000\0229\n\rWAIT_"
  "SETPOINT\030\014 \001(\0132 .blox_test.Sequence.Wait"
  "SetpointH\000\0225\n\013SET_DIGITAL\030\r \001(\0132\036.blox_t"
  "est.Sequence.SetDigitalH\000\0227\n\014WAIT_DIGITA"
  "L\030\016 \001(\0132\037.blox_test.Sequence.WaitDigital"
  "H\000\022-\n\007SET_PWM\030\017 \001(\0132\032.blox_test.Sequence"
  ".SetPwmH\000\022:\n\rSTART_PROFILE\030\020 \001(\0132!.blox_"
  "test.Sequence.TargetProfileH\000\0229\n\014WAIT_PR"
  "OFILE\030\021 \001(\0132!.blox_test.Sequence.TargetP"
  "rofileH\000\022<\n\016START_SEQUENCE\030\022 \001(\0132\".blox_"
  "test.Sequence.TargetSequenceH\000\022;\n\rWAIT_S"
  "EQUENCE\030\023 \001(\0132\".blox_test.Sequence.Targe"
  "tSequenceH\000B\023\n\021instruction_oneof\"\232\003\n\005Blo"
  "ck\022\027\n\007enabled\030\001 \001(\010B\006\212\265\030\0020\001\0225\n\014instructi"
  "ons\030\002 \003(\0132\037.blox_test.Sequence.Instructi"
  "on\022\025\n\roverrideState\030\003 \001(\010\022&\n\021activeInstr"
  "uction\030\004 \001(\rB\013\222\?\0028\020\212\265\030\0020\001\0225\n\032activeInstr"
  "uctionStartedAt\030\005 \001(\rB\021\222\?\0028 \212\265\030\002X\001\212\265\030\0020\001"
  "\022\037\n\ndisabledAt\030\006 \001(\rB\013\222\?\0028 \212\265\030\002X\001\022%\n\020dis"
  "abledDuration\030\007 \001(\rB\013\222\?\0028 \212\265\030\002\010\003\022:\n\006stat"
  "us\030\010 \001(\0162\".blox_test.Sequence.SequenceSt"
  "atusB\006\212\265\030\002(\001\0228\n\005error\030\t \001(\0162!.blox_test."
  "Sequence.SequenceErrorB\006\212\265\030\002(\001:\r\212\265\030\003\030\306\002\212"
  "\265\030\002H\017*l\n\016SequenceStatus\022\013\n\007UNKNOWN\020\000\022\014\n\010"
  "DISABLED\020\001\022\n\n\006PAUSED\020\002\022\010\n\004NEXT\020\003\022\010\n\004WAIT"
  "\020\004\022\007\n\003END\020\005\022\013\n\007RESTART\020\006\022\t\n\005ERROR\020\007*\214\001\n\r"
  "SequenceError\022\010\n\004NONE\020\000\022\024\n\020INVALID_ARGUM"
  "ENT\020\001\022\022\n\016INVALID_TARGET\020\002\022\023\n\017INACTIVE_TA"
  "RGET\020\003\022\023\n\017DISABLED_TARGET\020\004\022\035\n\031SYSTEM_TI"
  "ME_NOT_AVAILABLE\020\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Sequence_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::_pbi::once_flag descriptor_table_Sequence_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Sequence_5ftest_2eproto = {
    false, false, 2786, descriptor_table_protodef_Sequence_5ftest_2eproto,
    "Sequence_test.proto",
    &descriptor_table_Sequence_5ftest_2eproto_once, descriptor_table_Sequence_5ftest_2eproto_deps, 3, 15,
    schemas, file_default_instances, TableStruct_Sequence_5ftest_2eproto::offsets,
    file_level_metadata_Sequence_5ftest_2eproto, file_level_enum_descriptors_Sequence_5ftest_2eproto,
    file_level_service_descriptors_Sequence_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Sequence_5ftest_2eproto_getter() {
  return &descriptor_table_Sequence_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Sequence_5ftest_2eproto(&descriptor_table_Sequence_5ftest_2eproto);
namespace blox_test {
namespace Sequence {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Sequence_5ftest_2eproto);
  return file_level_enum_descriptors_Sequence_5ftest_2eproto[0];
}
bool SequenceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Sequence_5ftest_2eproto);
  return file_level_enum_descriptors_Sequence_5ftest_2eproto[1];
}
bool SequenceError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Restart::_Internal {
 public:
};

Restart::Restart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.Restart)
}
Restart::Restart(const Restart& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.Restart)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Restart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Restart::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Restart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[0]);
}

// ===================================================================

class EnableDisable::_Internal {
 public:
};

EnableDisable::EnableDisable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.EnableDisable)
}
EnableDisable::EnableDisable(const EnableDisable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.EnableDisable)
}

inline void EnableDisable::SharedCtor() {
target_ = 0u;
}

EnableDisable::~EnableDisable() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.EnableDisable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableDisable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableDisable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnableDisable::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.EnableDisable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableDisable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnableDisable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.EnableDisable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.EnableDisable)
  return target;
}

size_t EnableDisable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.EnableDisable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableDisable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnableDisable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableDisable::GetClassData() const { return &_class_data_; }

void EnableDisable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnableDisable *>(to)->MergeFrom(
      static_cast<const EnableDisable &>(from));
}


void EnableDisable::MergeFrom(const EnableDisable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.EnableDisable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableDisable::CopyFrom(const EnableDisable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.EnableDisable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableDisable::IsInitialized() const {
  return true;
}

void EnableDisable::InternalSwap(EnableDisable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableDisable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[1]);
}

// ===================================================================

class WaitDuration::_Internal {
 public:
};

WaitDuration::WaitDuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.WaitDuration)
}
WaitDuration::WaitDuration(const WaitDuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.WaitDuration)
}

inline void WaitDuration::SharedCtor() {
duration_ = 0u;
}

WaitDuration::~WaitDuration() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.WaitDuration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitDuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitDuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.WaitDuration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitDuration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 duration = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitDuration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.WaitDuration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration = 1 [(.nanopb) = {
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.WaitDuration)
  return target;
}

size_t WaitDuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.WaitDuration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 duration = 1 [(.nanopb) = {
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitDuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitDuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitDuration::GetClassData() const { return &_class_data_; }

void WaitDuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitDuration *>(to)->MergeFrom(
      static_cast<const WaitDuration &>(from));
}


void WaitDuration::MergeFrom(const WaitDuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.WaitDuration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitDuration::CopyFrom(const WaitDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.WaitDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitDuration::IsInitialized() const {
  return true;
}

void WaitDuration::InternalSwap(WaitDuration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitDuration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[2]);
}

// ===================================================================

class WaitUntil::_Internal {
 public:
};

WaitUntil::WaitUntil(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.WaitUntil)
}
WaitUntil::WaitUntil(const WaitUntil& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.WaitUntil)
}

inline void WaitUntil::SharedCtor() {
time_ = 0u;
}

WaitUntil::~WaitUntil() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.WaitUntil)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitUntil::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitUntil::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitUntil::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.WaitUntil)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitUntil::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitUntil::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.WaitUntil)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time = 1 [(.nanopb) = {
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.WaitUntil)
  return target;
}

size_t WaitUntil::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.WaitUntil)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time = 1 [(.nanopb) = {
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitUntil::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitUntil::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitUntil::GetClassData() const { return &_class_data_; }

void WaitUntil::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitUntil *>(to)->MergeFrom(
      static_cast<const WaitUntil &>(from));
}


void WaitUntil::MergeFrom(const WaitUntil& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.WaitUntil)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitUntil::CopyFrom(const WaitUntil& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.WaitUntil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitUntil::IsInitialized() const {
  return true;
}

void WaitUntil::InternalSwap(WaitUntil* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitUntil::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[3]);
}

// ===================================================================

class WaitTemperatureRange::_Internal {
 public:
};

WaitTemperatureRange::WaitTemperatureRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.WaitTemperatureRange)
}
WaitTemperatureRange::WaitTemperatureRange(const WaitTemperatureRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&target_)) + sizeof(upper_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.WaitTemperatureRange)
}

inline void WaitTemperatureRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&target_)) + sizeof(upper_));
}

WaitTemperatureRange::~WaitTemperatureRange() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.WaitTemperatureRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitTemperatureRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitTemperatureRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitTemperatureRange::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.WaitTemperatureRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_) -
      reinterpret_cast<char*>(&target_)) + sizeof(upper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitTemperatureRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 lower = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 upper = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitTemperatureRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.WaitTemperatureRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  // sint32 lower = 2 [(.nanopb) = {
  if (this->_internal_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_lower(), target);
  }

  // sint32 upper = 3 [(.nanopb) = {
  if (this->_internal_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.WaitTemperatureRange)
  return target;
}

size_t WaitTemperatureRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.WaitTemperatureRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // sint32 lower = 2 [(.nanopb) = {
  if (this->_internal_lower() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_lower());
  }

  // sint32 upper = 3 [(.nanopb) = {
  if (this->_internal_upper() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_upper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitTemperatureRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitTemperatureRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitTemperatureRange::GetClassData() const { return &_class_data_; }

void WaitTemperatureRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitTemperatureRange *>(to)->MergeFrom(
      static_cast<const WaitTemperatureRange &>(from));
}


void WaitTemperatureRange::MergeFrom(const WaitTemperatureRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.WaitTemperatureRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_lower() != 0) {
    _internal_set_lower(from._internal_lower());
  }
  if (from._internal_upper() != 0) {
    _internal_set_upper(from._internal_upper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitTemperatureRange::CopyFrom(const WaitTemperatureRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.WaitTemperatureRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitTemperatureRange::IsInitialized() const {
  return true;
}

void WaitTemperatureRange::InternalSwap(WaitTemperatureRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitTemperatureRange, upper_)
      + sizeof(WaitTemperatureRange::upper_)
      - PROTOBUF_FIELD_OFFSET(WaitTemperatureRange, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitTemperatureRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[4]);
}

// ===================================================================

class WaitTemperatureBoundary::_Internal {
 public:
};

WaitTemperatureBoundary::WaitTemperatureBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.WaitTemperatureBoundary)
}
WaitTemperatureBoundary::WaitTemperatureBoundary(const WaitTemperatureBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&target_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.WaitTemperatureBoundary)
}

inline void WaitTemperatureBoundary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&target_)) + sizeof(value_));
}

WaitTemperatureBoundary::~WaitTemperatureBoundary() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.WaitTemperatureBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitTemperatureBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitTemperatureBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitTemperatureBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.WaitTemperatureBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&target_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitTemperatureBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 value = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitTemperatureBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.WaitTemperatureBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  // sint32 value = 2 [(.nanopb) = {
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.WaitTemperatureBoundary)
  return target;
}

size_t WaitTemperatureBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.WaitTemperatureBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // sint32 value = 2 [(.nanopb) = {
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitTemperatureBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitTemperatureBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitTemperatureBoundary::GetClassData() const { return &_class_data_; }

void WaitTemperatureBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitTemperatureBoundary *>(to)->MergeFrom(
      static_cast<const WaitTemperatureBoundary &>(from));
}


void WaitTemperatureBoundary::MergeFrom(const WaitTemperatureBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.WaitTemperatureBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitTemperatureBoundary::CopyFrom(const WaitTemperatureBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.WaitTemperatureBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitTemperatureBoundary::IsInitialized() const {
  return true;
}

void WaitTemperatureBoundary::InternalSwap(WaitTemperatureBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitTemperatureBoundary, value_)
      + sizeof(WaitTemperatureBoundary::value_)
      - PROTOBUF_FIELD_OFFSET(WaitTemperatureBoundary, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitTemperatureBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[5]);
}

// ===================================================================

class SetSetpoint::_Internal {
 public:
};

SetSetpoint::SetSetpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.SetSetpoint)
}
SetSetpoint::SetSetpoint(const SetSetpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_) -
    reinterpret_cast<char*>(&target_)) + sizeof(setting_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.SetSetpoint)
}

inline void SetSetpoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&setting_) -
    reinterpret_cast<char*>(&target_)) + sizeof(setting_));
}

SetSetpoint::~SetSetpoint() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.SetSetpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSetpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSetpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSetpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.SetSetpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_) -
      reinterpret_cast<char*>(&target_)) + sizeof(setting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSetpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 setting = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetSetpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.SetSetpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  // sint32 setting = 2 [(.nanopb) = {
  if (this->_internal_setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.SetSetpoint)
  return target;
}

size_t SetSetpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.SetSetpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // sint32 setting = 2 [(.nanopb) = {
  if (this->_internal_setting() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_setting());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSetpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetSetpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSetpoint::GetClassData() const { return &_class_data_; }

void SetSetpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetSetpoint *>(to)->MergeFrom(
      static_cast<const SetSetpoint &>(from));
}


void SetSetpoint::MergeFrom(const SetSetpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.SetSetpoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_setting() != 0) {
    _internal_set_setting(from._internal_setting());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSetpoint::CopyFrom(const SetSetpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.SetSetpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSetpoint::IsInitialized() const {
  return true;
}

void SetSetpoint::InternalSwap(SetSetpoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetSetpoint, setting_)
      + sizeof(SetSetpoint::setting_)
      - PROTOBUF_FIELD_OFFSET(SetSetpoint, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSetpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[6]);
}

// ===================================================================

class WaitSetpoint::_Internal {
 public:
};

WaitSetpoint::WaitSetpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.WaitSetpoint)
}
WaitSetpoint::WaitSetpoint(const WaitSetpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&target_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.WaitSetpoint)
}

inline void WaitSetpoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&target_)) + sizeof(precision_));
}

WaitSetpoint::~WaitSetpoint() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.WaitSetpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitSetpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitSetpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitSetpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.WaitSetpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&target_)) + sizeof(precision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitSetpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 precision = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitSetpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.WaitSetpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  // sint32 precision = 2 [(.nanopb) = {
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.WaitSetpoint)
  return target;
}

size_t WaitSetpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.WaitSetpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // sint32 precision = 2 [(.nanopb) = {
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_precision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitSetpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitSetpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitSetpoint::GetClassData() const { return &_class_data_; }

void WaitSetpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitSetpoint *>(to)->MergeFrom(
      static_cast<const WaitSetpoint &>(from));
}


void WaitSetpoint::MergeFrom(const WaitSetpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.WaitSetpoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitSetpoint::CopyFrom(const WaitSetpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.WaitSetpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitSetpoint::IsInitialized() const {
  return true;
}

void WaitSetpoint::InternalSwap(WaitSetpoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitSetpoint, precision_)
      + sizeof(WaitSetpoint::precision_)
      - PROTOBUF_FIELD_OFFSET(WaitSetpoint, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitSetpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[7]);
}

// ===================================================================

class SetDigital::_Internal {
 public:
};

SetDigital::SetDigital(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.SetDigital)
}
SetDigital::SetDigital(const SetDigital& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_) -
    reinterpret_cast<char*>(&target_)) + sizeof(setting_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.SetDigital)
}

inline void SetDigital::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&setting_) -
    reinterpret_cast<char*>(&target_)) + sizeof(setting_));
}

SetDigital::~SetDigital() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.SetDigital)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetDigital::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetDigital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDigital::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.SetDigital)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_) -
      reinterpret_cast<char*>(&target_)) + sizeof(setting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDigital::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.IoArray.DigitalState setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_setting(static_cast<::blox_test::IoArray::DigitalState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetDigital::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.SetDigital)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  // .blox_test.IoArray.DigitalState setting = 2;
  if (this->_internal_setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.SetDigital)
  return target;
}

size_t SetDigital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.SetDigital)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // .blox_test.IoArray.DigitalState setting = 2;
  if (this->_internal_setting() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_setting());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDigital::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetDigital::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDigital::GetClassData() const { return &_class_data_; }

void SetDigital::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetDigital *>(to)->MergeFrom(
      static_cast<const SetDigital &>(from));
}


void SetDigital::MergeFrom(const SetDigital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.SetDigital)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_setting() != 0) {
    _internal_set_setting(from._internal_setting());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetDigital::CopyFrom(const SetDigital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.SetDigital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDigital::IsInitialized() const {
  return true;
}

void SetDigital::InternalSwap(SetDigital* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetDigital, setting_)
      + sizeof(SetDigital::setting_)
      - PROTOBUF_FIELD_OFFSET(SetDigital, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDigital::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[8]);
}

// ===================================================================

class WaitDigital::_Internal {
 public:
};

WaitDigital::WaitDigital(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.WaitDigital)
}
WaitDigital::WaitDigital(const WaitDigital& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.WaitDigital)
}

inline void WaitDigital::SharedCtor() {
target_ = 0u;
}

WaitDigital::~WaitDigital() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.WaitDigital)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitDigital::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitDigital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitDigital::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.WaitDigital)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitDigital::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitDigital::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.WaitDigital)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.WaitDigital)
  return target;
}

size_t WaitDigital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.WaitDigital)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitDigital::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitDigital::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitDigital::GetClassData() const { return &_class_data_; }

void WaitDigital::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitDigital *>(to)->MergeFrom(
      static_cast<const WaitDigital &>(from));
}


void WaitDigital::MergeFrom(const WaitDigital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.WaitDigital)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitDigital::CopyFrom(const WaitDigital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.WaitDigital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitDigital::IsInitialized() const {
  return true;
}

void WaitDigital::InternalSwap(WaitDigital* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitDigital::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[9]);
}

// ===================================================================

class SetPwm::_Internal {
 public:
};

SetPwm::SetPwm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.SetPwm)
}
SetPwm::SetPwm(const SetPwm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_) -
    reinterpret_cast<char*>(&target_)) + sizeof(setting_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.SetPwm)
}

inline void SetPwm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&setting_) -
    reinterpret_cast<char*>(&target_)) + sizeof(setting_));
}

SetPwm::~SetPwm() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.SetPwm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPwm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPwm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPwm::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.SetPwm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_) -
      reinterpret_cast<char*>(&target_)) + sizeof(setting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPwm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 setting = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPwm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.SetPwm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  // sint32 setting = 2 [(.nanopb) = {
  if (this->_internal_setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.SetPwm)
  return target;
}

size_t SetPwm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.SetPwm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  // sint32 setting = 2 [(.nanopb) = {
  if (this->_internal_setting() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_setting());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPwm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPwm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPwm::GetClassData() const { return &_class_data_; }

void SetPwm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPwm *>(to)->MergeFrom(
      static_cast<const SetPwm &>(from));
}


void SetPwm::MergeFrom(const SetPwm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.SetPwm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_setting() != 0) {
    _internal_set_setting(from._internal_setting());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPwm::CopyFrom(const SetPwm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.SetPwm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPwm::IsInitialized() const {
  return true;
}

void SetPwm::InternalSwap(SetPwm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPwm, setting_)
      + sizeof(SetPwm::setting_)
      - PROTOBUF_FIELD_OFFSET(SetPwm, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPwm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[10]);
}

// ===================================================================

class TargetProfile::_Internal {
 public:
};

TargetProfile::TargetProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.TargetProfile)
}
TargetProfile::TargetProfile(const TargetProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.TargetProfile)
}

inline void TargetProfile::SharedCtor() {
target_ = 0u;
}

TargetProfile::~TargetProfile() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.TargetProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TargetProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.TargetProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.TargetProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.TargetProfile)
  return target;
}

size_t TargetProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.TargetProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetProfile::GetClassData() const { return &_class_data_; }

void TargetProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetProfile *>(to)->MergeFrom(
      static_cast<const TargetProfile &>(from));
}


void TargetProfile::MergeFrom(const TargetProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.TargetProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetProfile::CopyFrom(const TargetProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.TargetProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetProfile::IsInitialized() const {
  return true;
}

void TargetProfile::InternalSwap(TargetProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[11]);
}

// ===================================================================

class TargetSequence::_Internal {
 public:
};

TargetSequence::TargetSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.TargetSequence)
}
TargetSequence::TargetSequence(const TargetSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.TargetSequence)
}

inline void TargetSequence::SharedCtor() {
target_ = 0u;
}

TargetSequence::~TargetSequence() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.TargetSequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TargetSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.TargetSequence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetSequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetSequence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.TargetSequence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.TargetSequence)
  return target;
}

size_t TargetSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.TargetSequence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target = 1 [(.nanopb) = {
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetSequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetSequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetSequence::GetClassData() const { return &_class_data_; }

void TargetSequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetSequence *>(to)->MergeFrom(
      static_cast<const TargetSequence &>(from));
}


void TargetSequence::MergeFrom(const TargetSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.TargetSequence)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetSequence::CopyFrom(const TargetSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.TargetSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSequence::IsInitialized() const {
  return true;
}

void TargetSequence::InternalSwap(TargetSequence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetSequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[12]);
}

// ===================================================================

class Instruction::_Internal {
 public:
  static const ::blox_test::Sequence::Restart& restart(const Instruction* msg);
  static const ::blox_test::Sequence::EnableDisable& enable(const Instruction* msg);
  static const ::blox_test::Sequence::EnableDisable& disable(const Instruction* msg);
  static const ::blox_test::Sequence::WaitDuration& wait_duration(const Instruction* msg);
  static const ::blox_test::Sequence::WaitUntil& wait_until(const Instruction* msg);
  static const ::blox_test::Sequence::WaitTemperatureRange& wait_temp_between(const Instruction* msg);
  static const ::blox_test::Sequence::WaitTemperatureRange& wait_temp_not_between(const Instruction* msg);
  static const ::blox_test::Sequence::WaitTemperatureRange& wait_temp_unexpected(const Instruction* msg);
  static const ::blox_test::Sequence::WaitTemperatureBoundary& wait_temp_above(const Instruction* msg);
  static const ::blox_test::Sequence::WaitTemperatureBoundary& wait_temp_below(const Instruction* msg);
  static const ::blox_test::Sequence::SetSetpoint& set_setpoint(const Instruction* msg);
  static const ::blox_test::Sequence::WaitSetpoint& wait_setpoint(const Instruction* msg);
  static const ::blox_test::Sequence::SetDigital& set_digital(const Instruction* msg);
  static const ::blox_test::Sequence::WaitDigital& wait_digital(const Instruction* msg);
  static const ::blox_test::Sequence::SetPwm& set_pwm(const Instruction* msg);
  static const ::blox_test::Sequence::TargetProfile& start_profile(const Instruction* msg);
  static const ::blox_test::Sequence::TargetProfile& wait_profile(const Instruction* msg);
  static const ::blox_test::Sequence::TargetSequence& start_sequence(const Instruction* msg);
  static const ::blox_test::Sequence::TargetSequence& wait_sequence(const Instruction* msg);
};

const ::blox_test::Sequence::Restart&
Instruction::_Internal::restart(const Instruction* msg) {
  return *msg->instruction_oneof_.restart_;
}
const ::blox_test::Sequence::EnableDisable&
Instruction::_Internal::enable(const Instruction* msg) {
  return *msg->instruction_oneof_.enable_;
}
const ::blox_test::Sequence::EnableDisable&
Instruction::_Internal::disable(const Instruction* msg) {
  return *msg->instruction_oneof_.disable_;
}
const ::blox_test::Sequence::WaitDuration&
Instruction::_Internal::wait_duration(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_duration_;
}
const ::blox_test::Sequence::WaitUntil&
Instruction::_Internal::wait_until(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_until_;
}
const ::blox_test::Sequence::WaitTemperatureRange&
Instruction::_Internal::wait_temp_between(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_temp_between_;
}
const ::blox_test::Sequence::WaitTemperatureRange&
Instruction::_Internal::wait_temp_not_between(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_temp_not_between_;
}
const ::blox_test::Sequence::WaitTemperatureRange&
Instruction::_Internal::wait_temp_unexpected(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_temp_unexpected_;
}
const ::blox_test::Sequence::WaitTemperatureBoundary&
Instruction::_Internal::wait_temp_above(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_temp_above_;
}
const ::blox_test::Sequence::WaitTemperatureBoundary&
Instruction::_Internal::wait_temp_below(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_temp_below_;
}
const ::blox_test::Sequence::SetSetpoint&
Instruction::_Internal::set_setpoint(const Instruction* msg) {
  return *msg->instruction_oneof_.set_setpoint_;
}
const ::blox_test::Sequence::WaitSetpoint&
Instruction::_Internal::wait_setpoint(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_setpoint_;
}
const ::blox_test::Sequence::SetDigital&
Instruction::_Internal::set_digital(const Instruction* msg) {
  return *msg->instruction_oneof_.set_digital_;
}
const ::blox_test::Sequence::WaitDigital&
Instruction::_Internal::wait_digital(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_digital_;
}
const ::blox_test::Sequence::SetPwm&
Instruction::_Internal::set_pwm(const Instruction* msg) {
  return *msg->instruction_oneof_.set_pwm_;
}
const ::blox_test::Sequence::TargetProfile&
Instruction::_Internal::start_profile(const Instruction* msg) {
  return *msg->instruction_oneof_.start_profile_;
}
const ::blox_test::Sequence::TargetProfile&
Instruction::_Internal::wait_profile(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_profile_;
}
const ::blox_test::Sequence::TargetSequence&
Instruction::_Internal::start_sequence(const Instruction* msg) {
  return *msg->instruction_oneof_.start_sequence_;
}
const ::blox_test::Sequence::TargetSequence&
Instruction::_Internal::wait_sequence(const Instruction* msg) {
  return *msg->instruction_oneof_.wait_sequence_;
}
void Instruction::set_allocated_restart(::blox_test::Sequence::Restart* restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(restart);
    if (message_arena != submessage_arena) {
      restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart, submessage_arena);
    }
    set_has_restart();
    instruction_oneof_.restart_ = restart;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.RESTART)
}
void Instruction::set_allocated_enable(::blox_test::Sequence::EnableDisable* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enable);
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    set_has_enable();
    instruction_oneof_.enable_ = enable;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.ENABLE)
}
void Instruction::set_allocated_disable(::blox_test::Sequence::EnableDisable* disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(disable);
    if (message_arena != submessage_arena) {
      disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disable, submessage_arena);
    }
    set_has_disable();
    instruction_oneof_.disable_ = disable;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.DISABLE)
}
void Instruction::set_allocated_wait_duration(::blox_test::Sequence::WaitDuration* wait_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_duration);
    if (message_arena != submessage_arena) {
      wait_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_duration, submessage_arena);
    }
    set_has_wait_duration();
    instruction_oneof_.wait_duration_ = wait_duration;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_DURATION)
}
void Instruction::set_allocated_wait_until(::blox_test::Sequence::WaitUntil* wait_until) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_until) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_until);
    if (message_arena != submessage_arena) {
      wait_until = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_until, submessage_arena);
    }
    set_has_wait_until();
    instruction_oneof_.wait_until_ = wait_until;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_UNTIL)
}
void Instruction::set_allocated_wait_temp_between(::blox_test::Sequence::WaitTemperatureRange* wait_temp_between) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_temp_between) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_temp_between);
    if (message_arena != submessage_arena) {
      wait_temp_between = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_temp_between, submessage_arena);
    }
    set_has_wait_temp_between();
    instruction_oneof_.wait_temp_between_ = wait_temp_between;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_BETWEEN)
}
void Instruction::set_allocated_wait_temp_not_between(::blox_test::Sequence::WaitTemperatureRange* wait_temp_not_between) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_temp_not_between) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_temp_not_between);
    if (message_arena != submessage_arena) {
      wait_temp_not_between = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_temp_not_between, submessage_arena);
    }
    set_has_wait_temp_not_between();
    instruction_oneof_.wait_temp_not_between_ = wait_temp_not_between;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_NOT_BETWEEN)
}
void Instruction::set_allocated_wait_temp_unexpected(::blox_test::Sequence::WaitTemperatureRange* wait_temp_unexpected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_temp_unexpected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_temp_unexpected);
    if (message_arena != submessage_arena) {
      wait_temp_unexpected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_temp_unexpected, submessage_arena);
    }
    set_has_wait_temp_unexpected();
    instruction_oneof_.wait_temp_unexpected_ = wait_temp_unexpected;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_UNEXPECTED)
}
void Instruction::set_allocated_wait_temp_above(::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_above) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_temp_above) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_temp_above);
    if (message_arena != submessage_arena) {
      wait_temp_above = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_temp_above, submessage_arena);
    }
    set_has_wait_temp_above();
    instruction_oneof_.wait_temp_above_ = wait_temp_above;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_ABOVE)
}
void Instruction::set_allocated_wait_temp_below(::blox_test::Sequence::WaitTemperatureBoundary* wait_temp_below) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_temp_below) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_temp_below);
    if (message_arena != submessage_arena) {
      wait_temp_below = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_temp_below, submessage_arena);
    }
    set_has_wait_temp_below();
    instruction_oneof_.wait_temp_below_ = wait_temp_below;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_TEMP_BELOW)
}
void Instruction::set_allocated_set_setpoint(::blox_test::Sequence::SetSetpoint* set_setpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (set_setpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_setpoint);
    if (message_arena != submessage_arena) {
      set_setpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_setpoint, submessage_arena);
    }
    set_has_set_setpoint();
    instruction_oneof_.set_setpoint_ = set_setpoint;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.SET_SETPOINT)
}
void Instruction::set_allocated_wait_setpoint(::blox_test::Sequence::WaitSetpoint* wait_setpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_setpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_setpoint);
    if (message_arena != submessage_arena) {
      wait_setpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_setpoint, submessage_arena);
    }
    set_has_wait_setpoint();
    instruction_oneof_.wait_setpoint_ = wait_setpoint;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_SETPOINT)
}
void Instruction::set_allocated_set_digital(::blox_test::Sequence::SetDigital* set_digital) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (set_digital) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_digital);
    if (message_arena != submessage_arena) {
      set_digital = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_digital, submessage_arena);
    }
    set_has_set_digital();
    instruction_oneof_.set_digital_ = set_digital;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.SET_DIGITAL)
}
void Instruction::set_allocated_wait_digital(::blox_test::Sequence::WaitDigital* wait_digital) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_digital) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_digital);
    if (message_arena != submessage_arena) {
      wait_digital = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_digital, submessage_arena);
    }
    set_has_wait_digital();
    instruction_oneof_.wait_digital_ = wait_digital;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_DIGITAL)
}
void Instruction::set_allocated_set_pwm(::blox_test::Sequence::SetPwm* set_pwm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (set_pwm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_pwm);
    if (message_arena != submessage_arena) {
      set_pwm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_pwm, submessage_arena);
    }
    set_has_set_pwm();
    instruction_oneof_.set_pwm_ = set_pwm;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.SET_PWM)
}
void Instruction::set_allocated_start_profile(::blox_test::Sequence::TargetProfile* start_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (start_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_profile);
    if (message_arena != submessage_arena) {
      start_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_profile, submessage_arena);
    }
    set_has_start_profile();
    instruction_oneof_.start_profile_ = start_profile;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.START_PROFILE)
}
void Instruction::set_allocated_wait_profile(::blox_test::Sequence::TargetProfile* wait_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_profile);
    if (message_arena != submessage_arena) {
      wait_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_profile, submessage_arena);
    }
    set_has_wait_profile();
    instruction_oneof_.wait_profile_ = wait_profile;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_PROFILE)
}
void Instruction::set_allocated_start_sequence(::blox_test::Sequence::TargetSequence* start_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (start_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_sequence);
    if (message_arena != submessage_arena) {
      start_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_sequence, submessage_arena);
    }
    set_has_start_sequence();
    instruction_oneof_.start_sequence_ = start_sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.START_SEQUENCE)
}
void Instruction::set_allocated_wait_sequence(::blox_test::Sequence::TargetSequence* wait_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instruction_oneof();
  if (wait_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_sequence);
    if (message_arena != submessage_arena) {
      wait_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_sequence, submessage_arena);
    }
    set_has_wait_sequence();
    instruction_oneof_.wait_sequence_ = wait_sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Sequence.Instruction.WAIT_SEQUENCE)
}
Instruction::Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.Instruction)
}
Instruction::Instruction(const Instruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_instruction_oneof();
  switch (from.instruction_oneof_case()) {
    case kRESTART: {
      _internal_mutable_restart()->::blox_test::Sequence::Restart::MergeFrom(from._internal_restart());
      break;
    }
    case kENABLE: {
      _internal_mutable_enable()->::blox_test::Sequence::EnableDisable::MergeFrom(from._internal_enable());
      break;
    }
    case kDISABLE: {
      _internal_mutable_disable()->::blox_test::Sequence::EnableDisable::MergeFrom(from._internal_disable());
      break;
    }
    case kWAITDURATION: {
      _internal_mutable_wait_duration()->::blox_test::Sequence::WaitDuration::MergeFrom(from._internal_wait_duration());
      break;
    }
    case kWAITUNTIL: {
      _internal_mutable_wait_until()->::blox_test::Sequence::WaitUntil::MergeFrom(from._internal_wait_until());
      break;
    }
    case kWAITTEMPBETWEEN: {
      _internal_mutable_wait_temp_between()->::blox_test::Sequence::WaitTemperatureRange::MergeFrom(from._internal_wait_temp_between());
      break;
    }
    case kWAITTEMPNOTBETWEEN: {
      _internal_mutable_wait_temp_not_between()->::blox_test::Sequence::WaitTemperatureRange::MergeFrom(from._internal_wait_temp_not_between());
      break;
    }
    case kWAITTEMPUNEXPECTED: {
      _internal_mutable_wait_temp_unexpected()->::blox_test::Sequence::WaitTemperatureRange::MergeFrom(from._internal_wait_temp_unexpected());
      break;
    }
    case kWAITTEMPABOVE: {
      _internal_mutable_wait_temp_above()->::blox_test::Sequence::WaitTemperatureBoundary::MergeFrom(from._internal_wait_temp_above());
      break;
    }
    case kWAITTEMPBELOW: {
      _internal_mutable_wait_temp_below()->::blox_test::Sequence::WaitTemperatureBoundary::MergeFrom(from._internal_wait_temp_below());
      break;
    }
    case kSETSETPOINT: {
      _internal_mutable_set_setpoint()->::blox_test::Sequence::SetSetpoint::MergeFrom(from._internal_set_setpoint());
      break;
    }
    case kWAITSETPOINT: {
      _internal_mutable_wait_setpoint()->::blox_test::Sequence::WaitSetpoint::MergeFrom(from._internal_wait_setpoint());
      break;
    }
    case kSETDIGITAL: {
      _internal_mutable_set_digital()->::blox_test::Sequence::SetDigital::MergeFrom(from._internal_set_digital());
      break;
    }
    case kWAITDIGITAL: {
      _internal_mutable_wait_digital()->::blox_test::Sequence::WaitDigital::MergeFrom(from._internal_wait_digital());
      break;
    }
    case kSETPWM: {
      _internal_mutable_set_pwm()->::blox_test::Sequence::SetPwm::MergeFrom(from._internal_set_pwm());
      break;
    }
    case kSTARTPROFILE: {
      _internal_mutable_start_profile()->::blox_test::Sequence::TargetProfile::MergeFrom(from._internal_start_profile());
      break;
    }
    case kWAITPROFILE: {
      _internal_mutable_wait_profile()->::blox_test::Sequence::TargetProfile::MergeFrom(from._internal_wait_profile());
      break;
    }
    case kSTARTSEQUENCE: {
      _internal_mutable_start_sequence()->::blox_test::Sequence::TargetSequence::MergeFrom(from._internal_start_sequence());
      break;
    }
    case kWAITSEQUENCE: {
      _internal_mutable_wait_sequence()->::blox_test::Sequence::TargetSequence::MergeFrom(from._internal_wait_sequence());
      break;
    }
    case INSTRUCTION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.Instruction)
}

inline void Instruction::SharedCtor() {
clear_has_instruction_oneof();
}

Instruction::~Instruction() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.Instruction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Instruction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_instruction_oneof()) {
    clear_instruction_oneof();
  }
}

void Instruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Instruction::clear_instruction_oneof() {
// @@protoc_insertion_point(one_of_clear_start:blox_test.Sequence.Instruction)
  switch (instruction_oneof_case()) {
    case kRESTART: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.restart_;
      }
      break;
    }
    case kENABLE: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.enable_;
      }
      break;
    }
    case kDISABLE: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.disable_;
      }
      break;
    }
    case kWAITDURATION: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_duration_;
      }
      break;
    }
    case kWAITUNTIL: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_until_;
      }
      break;
    }
    case kWAITTEMPBETWEEN: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_temp_between_;
      }
      break;
    }
    case kWAITTEMPNOTBETWEEN: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_temp_not_between_;
      }
      break;
    }
    case kWAITTEMPUNEXPECTED: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_temp_unexpected_;
      }
      break;
    }
    case kWAITTEMPABOVE: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_temp_above_;
      }
      break;
    }
    case kWAITTEMPBELOW: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_temp_below_;
      }
      break;
    }
    case kSETSETPOINT: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.set_setpoint_;
      }
      break;
    }
    case kWAITSETPOINT: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_setpoint_;
      }
      break;
    }
    case kSETDIGITAL: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.set_digital_;
      }
      break;
    }
    case kWAITDIGITAL: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_digital_;
      }
      break;
    }
    case kSETPWM: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.set_pwm_;
      }
      break;
    }
    case kSTARTPROFILE: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.start_profile_;
      }
      break;
    }
    case kWAITPROFILE: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_profile_;
      }
      break;
    }
    case kSTARTSEQUENCE: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.start_sequence_;
      }
      break;
    }
    case kWAITSEQUENCE: {
      if (GetArenaForAllocation() == nullptr) {
        delete instruction_oneof_.wait_sequence_;
      }
      break;
    }
    case INSTRUCTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTRUCTION_ONEOF_NOT_SET;
}


void Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.Instruction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_instruction_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instruction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox_test.Sequence.Restart RESTART = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_restart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.EnableDisable ENABLE = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.EnableDisable DISABLE = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_disable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitDuration WAIT_DURATION = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitUntil WAIT_UNTIL = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_until(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_BETWEEN = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_temp_between(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_NOT_BETWEEN = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_temp_not_between(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_UNEXPECTED = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_temp_unexpected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_ABOVE = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_temp_above(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_BELOW = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_temp_below(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.SetSetpoint SET_SETPOINT = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_setpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitSetpoint WAIT_SETPOINT = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_setpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.SetDigital SET_DIGITAL = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_digital(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.WaitDigital WAIT_DIGITAL = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_digital(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.SetPwm SET_PWM = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_pwm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.TargetProfile START_PROFILE = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.TargetProfile WAIT_PROFILE = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.TargetSequence START_SEQUENCE = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_sequence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.TargetSequence WAIT_SEQUENCE = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_sequence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instruction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.Instruction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox_test.Sequence.Restart RESTART = 1;
  if (_internal_has_restart()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::restart(this),
        _Internal::restart(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.EnableDisable ENABLE = 2;
  if (_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.EnableDisable DISABLE = 3;
  if (_internal_has_disable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::disable(this),
        _Internal::disable(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitDuration WAIT_DURATION = 4;
  if (_internal_has_wait_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::wait_duration(this),
        _Internal::wait_duration(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitUntil WAIT_UNTIL = 5;
  if (_internal_has_wait_until()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::wait_until(this),
        _Internal::wait_until(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_BETWEEN = 6;
  if (_internal_has_wait_temp_between()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::wait_temp_between(this),
        _Internal::wait_temp_between(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_NOT_BETWEEN = 7;
  if (_internal_has_wait_temp_not_between()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::wait_temp_not_between(this),
        _Internal::wait_temp_not_between(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_UNEXPECTED = 8;
  if (_internal_has_wait_temp_unexpected()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::wait_temp_unexpected(this),
        _Internal::wait_temp_unexpected(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_ABOVE = 9;
  if (_internal_has_wait_temp_above()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::wait_temp_above(this),
        _Internal::wait_temp_above(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_BELOW = 10;
  if (_internal_has_wait_temp_below()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::wait_temp_below(this),
        _Internal::wait_temp_below(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.SetSetpoint SET_SETPOINT = 11;
  if (_internal_has_set_setpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::set_setpoint(this),
        _Internal::set_setpoint(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitSetpoint WAIT_SETPOINT = 12;
  if (_internal_has_wait_setpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::wait_setpoint(this),
        _Internal::wait_setpoint(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.SetDigital SET_DIGITAL = 13;
  if (_internal_has_set_digital()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::set_digital(this),
        _Internal::set_digital(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.WaitDigital WAIT_DIGITAL = 14;
  if (_internal_has_wait_digital()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::wait_digital(this),
        _Internal::wait_digital(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.SetPwm SET_PWM = 15;
  if (_internal_has_set_pwm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::set_pwm(this),
        _Internal::set_pwm(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.TargetProfile START_PROFILE = 16;
  if (_internal_has_start_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::start_profile(this),
        _Internal::start_profile(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.TargetProfile WAIT_PROFILE = 17;
  if (_internal_has_wait_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::wait_profile(this),
        _Internal::wait_profile(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.TargetSequence START_SEQUENCE = 18;
  if (_internal_has_start_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::start_sequence(this),
        _Internal::start_sequence(this).GetCachedSize(), target, stream);
  }

  // .blox_test.Sequence.TargetSequence WAIT_SEQUENCE = 19;
  if (_internal_has_wait_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::wait_sequence(this),
        _Internal::wait_sequence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.Instruction)
  return target;
}

size_t Instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.Instruction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (instruction_oneof_case()) {
    // .blox_test.Sequence.Restart RESTART = 1;
    case kRESTART: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.restart_);
      break;
    }
    // .blox_test.Sequence.EnableDisable ENABLE = 2;
    case kENABLE: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.enable_);
      break;
    }
    // .blox_test.Sequence.EnableDisable DISABLE = 3;
    case kDISABLE: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.disable_);
      break;
    }
    // .blox_test.Sequence.WaitDuration WAIT_DURATION = 4;
    case kWAITDURATION: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_duration_);
      break;
    }
    // .blox_test.Sequence.WaitUntil WAIT_UNTIL = 5;
    case kWAITUNTIL: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_until_);
      break;
    }
    // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_BETWEEN = 6;
    case kWAITTEMPBETWEEN: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_temp_between_);
      break;
    }
    // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_NOT_BETWEEN = 7;
    case kWAITTEMPNOTBETWEEN: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_temp_not_between_);
      break;
    }
    // .blox_test.Sequence.WaitTemperatureRange WAIT_TEMP_UNEXPECTED = 8;
    case kWAITTEMPUNEXPECTED: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_temp_unexpected_);
      break;
    }
    // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_ABOVE = 9;
    case kWAITTEMPABOVE: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_temp_above_);
      break;
    }
    // .blox_test.Sequence.WaitTemperatureBoundary WAIT_TEMP_BELOW = 10;
    case kWAITTEMPBELOW: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_temp_below_);
      break;
    }
    // .blox_test.Sequence.SetSetpoint SET_SETPOINT = 11;
    case kSETSETPOINT: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.set_setpoint_);
      break;
    }
    // .blox_test.Sequence.WaitSetpoint WAIT_SETPOINT = 12;
    case kWAITSETPOINT: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_setpoint_);
      break;
    }
    // .blox_test.Sequence.SetDigital SET_DIGITAL = 13;
    case kSETDIGITAL: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.set_digital_);
      break;
    }
    // .blox_test.Sequence.WaitDigital WAIT_DIGITAL = 14;
    case kWAITDIGITAL: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_digital_);
      break;
    }
    // .blox_test.Sequence.SetPwm SET_PWM = 15;
    case kSETPWM: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.set_pwm_);
      break;
    }
    // .blox_test.Sequence.TargetProfile START_PROFILE = 16;
    case kSTARTPROFILE: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.start_profile_);
      break;
    }
    // .blox_test.Sequence.TargetProfile WAIT_PROFILE = 17;
    case kWAITPROFILE: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_profile_);
      break;
    }
    // .blox_test.Sequence.TargetSequence START_SEQUENCE = 18;
    case kSTARTSEQUENCE: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.start_sequence_);
      break;
    }
    // .blox_test.Sequence.TargetSequence WAIT_SEQUENCE = 19;
    case kWAITSEQUENCE: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instruction_oneof_.wait_sequence_);
      break;
    }
    case INSTRUCTION_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instruction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Instruction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instruction::GetClassData() const { return &_class_data_; }

void Instruction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Instruction *>(to)->MergeFrom(
      static_cast<const Instruction &>(from));
}


void Instruction::MergeFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.Instruction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.instruction_oneof_case()) {
    case kRESTART: {
      _internal_mutable_restart()->::blox_test::Sequence::Restart::MergeFrom(from._internal_restart());
      break;
    }
    case kENABLE: {
      _internal_mutable_enable()->::blox_test::Sequence::EnableDisable::MergeFrom(from._internal_enable());
      break;
    }
    case kDISABLE: {
      _internal_mutable_disable()->::blox_test::Sequence::EnableDisable::MergeFrom(from._internal_disable());
      break;
    }
    case kWAITDURATION: {
      _internal_mutable_wait_duration()->::blox_test::Sequence::WaitDuration::MergeFrom(from._internal_wait_duration());
      break;
    }
    case kWAITUNTIL: {
      _internal_mutable_wait_until()->::blox_test::Sequence::WaitUntil::MergeFrom(from._internal_wait_until());
      break;
    }
    case kWAITTEMPBETWEEN: {
      _internal_mutable_wait_temp_between()->::blox_test::Sequence::WaitTemperatureRange::MergeFrom(from._internal_wait_temp_between());
      break;
    }
    case kWAITTEMPNOTBETWEEN: {
      _internal_mutable_wait_temp_not_between()->::blox_test::Sequence::WaitTemperatureRange::MergeFrom(from._internal_wait_temp_not_between());
      break;
    }
    case kWAITTEMPUNEXPECTED: {
      _internal_mutable_wait_temp_unexpected()->::blox_test::Sequence::WaitTemperatureRange::MergeFrom(from._internal_wait_temp_unexpected());
      break;
    }
    case kWAITTEMPABOVE: {
      _internal_mutable_wait_temp_above()->::blox_test::Sequence::WaitTemperatureBoundary::MergeFrom(from._internal_wait_temp_above());
      break;
    }
    case kWAITTEMPBELOW: {
      _internal_mutable_wait_temp_below()->::blox_test::Sequence::WaitTemperatureBoundary::MergeFrom(from._internal_wait_temp_below());
      break;
    }
    case kSETSETPOINT: {
      _internal_mutable_set_setpoint()->::blox_test::Sequence::SetSetpoint::MergeFrom(from._internal_set_setpoint());
      break;
    }
    case kWAITSETPOINT: {
      _internal_mutable_wait_setpoint()->::blox_test::Sequence::WaitSetpoint::MergeFrom(from._internal_wait_setpoint());
      break;
    }
    case kSETDIGITAL: {
      _internal_mutable_set_digital()->::blox_test::Sequence::SetDigital::MergeFrom(from._internal_set_digital());
      break;
    }
    case kWAITDIGITAL: {
      _internal_mutable_wait_digital()->::blox_test::Sequence::WaitDigital::MergeFrom(from._internal_wait_digital());
      break;
    }
    case kSETPWM: {
      _internal_mutable_set_pwm()->::blox_test::Sequence::SetPwm::MergeFrom(from._internal_set_pwm());
      break;
    }
    case kSTARTPROFILE: {
      _internal_mutable_start_profile()->::blox_test::Sequence::TargetProfile::MergeFrom(from._internal_start_profile());
      break;
    }
    case kWAITPROFILE: {
      _internal_mutable_wait_profile()->::blox_test::Sequence::TargetProfile::MergeFrom(from._internal_wait_profile());
      break;
    }
    case kSTARTSEQUENCE: {
      _internal_mutable_start_sequence()->::blox_test::Sequence::TargetSequence::MergeFrom(from._internal_start_sequence());
      break;
    }
    case kWAITSEQUENCE: {
      _internal_mutable_wait_sequence()->::blox_test::Sequence::TargetSequence::MergeFrom(from._internal_wait_sequence());
      break;
    }
    case INSTRUCTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instruction::CopyFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {
  return true;
}

void Instruction::InternalSwap(Instruction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instruction_oneof_, other->instruction_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Instruction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[13]);
}

// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  instructions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blox_test.Sequence.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instructions_(from.instructions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Sequence.Block)
}

inline void Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(error_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.Sequence.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Sequence.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instructions_.Clear();
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1 [(.brewblox.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .blox_test.Sequence.Instruction instructions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool overrideState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          overridestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 activeInstruction = 4 [(.nanopb) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          activeinstruction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 activeInstructionStartedAt = 5 [(.nanopb) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          activeinstructionstartedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 disabledAt = 6 [(.nanopb) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          disabledat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 disabledDuration = 7 [(.nanopb) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          disabledduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.SequenceStatus status = 8 [(.brewblox.field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::blox_test::Sequence::SequenceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .blox_test.Sequence.SequenceError error = 9 [(.brewblox.field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::blox_test::Sequence::SequenceError>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Sequence.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1 [(.brewblox.field) = {
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // repeated .blox_test.Sequence.Instruction instructions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instructions_size()); i < n; i++) {
    const auto& repfield = this->_internal_instructions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool overrideState = 3;
  if (this->_internal_overridestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_overridestate(), target);
  }

  // uint32 activeInstruction = 4 [(.nanopb) = {
  if (this->_internal_activeinstruction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_activeinstruction(), target);
  }

  // uint32 activeInstructionStartedAt = 5 [(.nanopb) = {
  if (this->_internal_activeinstructionstartedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_activeinstructionstartedat(), target);
  }

  // uint32 disabledAt = 6 [(.nanopb) = {
  if (this->_internal_disabledat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_disabledat(), target);
  }

  // uint32 disabledDuration = 7 [(.nanopb) = {
  if (this->_internal_disabledduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_disabledduration(), target);
  }

  // .blox_test.Sequence.SequenceStatus status = 8 [(.brewblox.field) = {
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // .blox_test.Sequence.SequenceError error = 9 [(.brewblox.field) = {
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Sequence.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Sequence.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox_test.Sequence.Instruction instructions = 2;
  total_size += 1UL * this->_internal_instructions_size();
  for (const auto& msg : this->instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool enabled = 1 [(.brewblox.field) = {
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool overrideState = 3;
  if (this->_internal_overridestate() != 0) {
    total_size += 1 + 1;
  }

  // uint32 activeInstruction = 4 [(.nanopb) = {
  if (this->_internal_activeinstruction() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activeinstruction());
  }

  // uint32 activeInstructionStartedAt = 5 [(.nanopb) = {
  if (this->_internal_activeinstructionstartedat() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activeinstructionstartedat());
  }

  // uint32 disabledAt = 6 [(.nanopb) = {
  if (this->_internal_disabledat() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disabledat());
  }

  // uint32 disabledDuration = 7 [(.nanopb) = {
  if (this->_internal_disabledduration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disabledduration());
  }

  // .blox_test.Sequence.SequenceStatus status = 8 [(.brewblox.field) = {
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .blox_test.Sequence.SequenceError error = 9 [(.brewblox.field) = {
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Sequence.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  instructions_.MergeFrom(from.instructions_);
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_overridestate() != 0) {
    _internal_set_overridestate(from._internal_overridestate());
  }
  if (from._internal_activeinstruction() != 0) {
    _internal_set_activeinstruction(from._internal_activeinstruction());
  }
  if (from._internal_activeinstructionstartedat() != 0) {
    _internal_set_activeinstructionstartedat(from._internal_activeinstructionstartedat());
  }
  if (from._internal_disabledat() != 0) {
    _internal_set_disabledat(from._internal_disabledat());
  }
  if (from._internal_disabledduration() != 0) {
    _internal_set_disabledduration(from._internal_disabledduration());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Sequence.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  instructions_.InternalSwap(&other->instructions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, error_)
      + sizeof(Block::error_)
      - PROTOBUF_FIELD_OFFSET(Block, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Sequence_5ftest_2eproto_getter, &descriptor_table_Sequence_5ftest_2eproto_once,
      file_level_metadata_Sequence_5ftest_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Sequence
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::Restart*
Arena::CreateMaybeMessage< ::blox_test::Sequence::Restart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::Restart >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::EnableDisable*
Arena::CreateMaybeMessage< ::blox_test::Sequence::EnableDisable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::EnableDisable >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::WaitDuration*
Arena::CreateMaybeMessage< ::blox_test::Sequence::WaitDuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::WaitDuration >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::WaitUntil*
Arena::CreateMaybeMessage< ::blox_test::Sequence::WaitUntil >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::WaitUntil >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::WaitTemperatureRange*
Arena::CreateMaybeMessage< ::blox_test::Sequence::WaitTemperatureRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::WaitTemperatureRange >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::WaitTemperatureBoundary*
Arena::CreateMaybeMessage< ::blox_test::Sequence::WaitTemperatureBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::WaitTemperatureBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::SetSetpoint*
Arena::CreateMaybeMessage< ::blox_test::Sequence::SetSetpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::SetSetpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::WaitSetpoint*
Arena::CreateMaybeMessage< ::blox_test::Sequence::WaitSetpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::WaitSetpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::SetDigital*
Arena::CreateMaybeMessage< ::blox_test::Sequence::SetDigital >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::SetDigital >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::WaitDigital*
Arena::CreateMaybeMessage< ::blox_test::Sequence::WaitDigital >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::WaitDigital >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::SetPwm*
Arena::CreateMaybeMessage< ::blox_test::Sequence::SetPwm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::SetPwm >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::TargetProfile*
Arena::CreateMaybeMessage< ::blox_test::Sequence::TargetProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::TargetProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::TargetSequence*
Arena::CreateMaybeMessage< ::blox_test::Sequence::TargetSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::TargetSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::Instruction*
Arena::CreateMaybeMessage< ::blox_test::Sequence::Instruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::Instruction >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Sequence::Block*
Arena::CreateMaybeMessage< ::blox_test::Sequence::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Sequence::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
