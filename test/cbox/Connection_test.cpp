/*
 * Copyright 2018 BrewPi B.V.
 *
 * This file is part of Brewblox.
 *
 * Brewblox is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * BrewPi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BrewPi.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "TestHelpers.hpp"
#include "spark/Connection.hpp"
#include "spark/ConnectionPool.hpp"
#include "spark/ConnectionSourceStringStream.hpp"
#include <catch.hpp>
#include <cstdio>
#include <sstream>

// TODO(Bob) separate test suite for platform code
using namespace platform::particle;

// echo test function, writes read message
void echo(ResponseWriter& out, const std::string& message)
{
    out.write(message);
    out.commit();
}

SCENARIO("Connections are generated by connection sources and managed by a connection pool")
{
    GIVEN("A connection pool with a StringPairConnectionSource to generate new connections")
    {
        StringStreamConnectionSource source;
        ConnectionPool pool = {source};

        auto echoFunction = std::function<void(ResponseWriter&, const std::string&)>(echo);

        WHEN("No new connections are available. Calling map has no effect")
        {
            pool.process(echoFunction);
            CHECK(pool.size() == 0);
        }

        WHEN("A new connection is generated by the connection source")
        {
            auto in = std::make_shared<cbox::StringStreamAutoClear>();
            auto out = std::make_shared<std::stringstream>();
            source.add(in, out);

            THEN("it is added to the connection pool when map is called, and the map function is performed")
            {
                CHECK(pool.size() == 0);
                pool.process(echoFunction);
                CHECK(pool.size() == 1);

                AND_WHEN("New data is added to the connection it is processed when map is called")
                {
                    *in << "test";
                    INFO(in->str());
                    pool.process(echoFunction);

                    CHECK(out->str() == "<handshake>test");
                    CHECK(pool.size() == 1); // still only one connection

                    AND_WHEN("more data comes in, it is processed too")
                    {
                        *in << " some more";
                        pool.process(echoFunction);

                        CHECK(out->str() == "<handshake>test some more");
                        CHECK(pool.size() == 1); // still only one connection
                    }
                }

                WHEN("the connection is disconnected, it is removed from the pool")
                {
                    pool.updateConnections();
                    CHECK(pool.size() == 1);
                    *in << "should not arrive";
                    in->setstate(std::stringstream::badbit); // signals a disconnect
                    pool.process(echoFunction);
                    CHECK(pool.size() == 0);
                    CHECK(out->str() == "<handshake>");
                }

                WHEN("A second connection is generated by the connection source")
                {
                    auto in2 = std::make_shared<cbox::StringStreamAutoClear>();
                    auto out2 = std::make_shared<std::stringstream>();
                    source.add(in2, out2);

                    THEN("it is added to the pool on the next update")
                    {
                        CHECK(pool.size() == 1);
                        pool.updateConnections();
                        CHECK(pool.size() == 2);
                    }

                    THEN("It is added in the map function automatically before it is executed")
                    {
                        *in2 << "conn 2 test";
                        CHECK(pool.size() == 1);
                        CHECK(out2->str() == "");
                        pool.process(echoFunction);
                        CHECK(pool.size() == 2);
                        CHECK(out2->str() == "<handshake>conn 2 test");
                    }

                    AND_WHEN("Both connections disconnect, the pool is empty again")
                    {
                        pool.updateConnections();
                        CHECK(pool.size() == 2);
                        in->setstate(std::stringstream::badbit);  // signals a disconnect
                        in2->setstate(std::stringstream::badbit); // signals a disconnect
                        INFO("Bad1: " << in->bad());
                        INFO("Bad2: " << in2->bad());
                        pool.updateConnections();
                        CHECK(pool.size() == 0);
                    }
                }
            }
        }

        AND_WHEN("A second connection is opened")
        {
            auto in1 = std::make_shared<cbox::StringStreamAutoClear>();
            auto out1 = std::make_shared<std::stringstream>();
            source.add(in1, out1);

            auto in2 = std::make_shared<cbox::StringStreamAutoClear>();
            auto out2 = std::make_shared<std::stringstream>();
            source.add(in2, out2);

            auto echoAndLogFunction = [&pool](ResponseWriter& out, const std::string& message) {
                pool.writeLog("log_" + message);
                out.write(message);
            };

            pool.process(echoAndLogFunction);
            pool.process(echoAndLogFunction);
            CHECK(pool.size() == 2);

            WHEN("A log occurs while processing a message")
            {
                *in1 << "test1";
                pool.process(echoAndLogFunction);
                THEN("It is sent to all connections")
                {
                    CHECK(out1->str() == "<handshake><log_test1>test1");
                    CHECK(out2->str() == "<handshake><log_test1>");
                }
            }

            WHEN("A log occurs outside of processing a message")
            {
                pool.writeLog("log2");
                *in1 << "test1";
                pool.process(echoFunction);
                THEN("It is sent over all connections")
                {
                    CHECK(out1->str() == "<handshake><log2>test1");
                    CHECK(out2->str() == "<handshake><log2>");
                }
            }

            WHEN("The connection pool is stopped")
            {
                pool.stopAll();
                THEN("All connections are stopped and dropped")
                {
                    CHECK(in1->bad());
                    CHECK(in2->bad());
                    CHECK(pool.size() == 0);
                }

                THEN("Restarting the connection pool doesn't revive old connections")
                {
                    pool.startAll();
                    CHECK(in1->bad());
                    CHECK(in2->bad());
                    CHECK(pool.size() == 0);
                }
            }
        }
    }
}
