## -*- Makefile -*-

CFLAGS = -g
CCFLAGS = $(CFLAGS)
CXXFLAGS = $(CFLAGS)

ROOT_DIR = $(shell git rev-parse --show-toplevel)

# lib/blocks
INCLUDE_DIRS += $(ROOT_DIR)/lib/blocks/inc
CPPSRC += $(wildcard $(ROOT_DIR)/lib/blocks/src/*.cpp)

# lib/cbox
INCLUDE_DIRS += $(ROOT_DIR)/lib/cbox/inc
CPPSRC += $(wildcard $(ROOT_DIR)/lib/cbox/src/*.cpp)

# lib/control
INCLUDE_DIRS += $(ROOT_DIR)/lib/control/inc
# CPPSRC += $(call here_files,lib/control/src,*.cpp)
CPPSRC += $(wildcard $(ROOT_DIR)/lib/control/src/*.cpp)

# lib/hal - only build stubs
INCLUDE_DIRS += $(ROOT_DIR)/lib/lib_hal/inc
CPPSRC += $(wildcard $(ROOT_DIR)/platform/stub/*.cpp)

# lib/proto
INCLUDE_DIRS += $(ROOT_DIR)/lib/proto/inc
CSRC += $(wildcard $(ROOT_DIR)/lib/proto/inc/proto/*.pb.c)

# test/proto
# protobuf sources generated by google protobuf for tests
INCLUDE_DIRS += $(ROOT_DIR)/test/proto/inc
CCSRC += $(wildcard $(ROOT_DIR)/test/proto/inc/proto/*.pb.cc)

# platform
INCLUDE_DIRS += $(ROOT_DIR)/platform
INCLUDE_DIRS += $(ROOT_DIR)/platform/d4d_display/inc
INCLUDE_DIRS += $(ROOT_DIR)/platform/spark/modules/eGUI/D4D
INCLUDE_DIRS += $(ROOT_DIR)/platform/spark/modules/Buzzer
INCLUDE_DIRS += $(ROOT_DIR)/platform/spark/modules/mdns/src

# add board files (tests use emulated hardware)
INCLUDE_DIRS += $(ROOT_DIR)/platform/spark/modules/Board
CPPSRC += $(wildcard $(ROOT_DIR)/platform/spark/modules/Board/*.cpp)

# device-os nanopb
INCLUDE_DIRS += $(ROOT_DIR)/external_libs/device-os/third_party/nanopb/nanopb
CSRC += $(wildcard $(ROOT_DIR)/external_libs/device-os/third_party/nanopb/nanopb/*.c)

# tests
CPPSRC += $(wildcard $(ROOT_DIR)/test/brewblox-particle/*.cpp)
CPPSRC += test/cbox/TestHelpers.cpp

# app/brewblox-particle
INCLUDE_DIRS += $(ROOT_DIR)/app/brewblox-particle/inc

# Only include source files without external dependencies
CPPSRC += app/brewblox-particle/src/brewblox_particle.cpp
CPPSRC += app/brewblox-particle/src/AppTicks.cpp
CPPSRC += app/brewblox-particle/src/Spark2PinsBlock.cpp
CPPSRC += app/brewblox-particle/src/Spark3PinsBlock.cpp
CPPSRC += app/brewblox-particle/src/SparkIoBase.cpp

# enable message id's
CFLAGS += -DPB_MSGID=1

# catch test
INCLUDE_DIRS += $(ROOT_DIR)/external_libs/device-os/third_party/catch2/catch2/single_include/catch2

# spark HAL includes
CPPFLAGS += -isystem $(ROOT_DIR)/external_libs/device-os/hal/inc
CPPFLAGS += -isystem $(ROOT_DIR)/external_libs/device-os/hal/shared
CPPFLAGS += -isystem $(ROOT_DIR)/external_libs/device-os/services/inc
CPPFLAGS += -isystem $(ROOT_DIR)/external_libs/device-os/hal/src/gcc
CPPFLAGS += -isystem $(ROOT_DIR)/external_libs/device-os/hal/src/newhal
CPPFLAGS += -isystem $(ROOT_DIR)/external_libs/device-os/wiring/inc
CPPFLAGS += -isystem $(ROOT_DIR)/external_libs/cnl/include

CPPSRC += external_libs/device-os/hal/src/gcc/gpio_hal.cpp
CPPSRC += external_libs/device-os/hal/src/gcc/eeprom_hal.cpp
CPPSRC += external_libs/device-os/hal/src/gcc/filesystem.cpp
CPPSRC += external_libs/device-os/test/unit_tests/communication/hal_stubs.cpp

CFLAGS += -DPLATFORM_ID=3

# include boost
CPPFLAGS += -isystem $(BOOST_ROOT)

CFLAGS += $(patsubst %,-I%,$(INCLUDE_DIRS)) -I.
CFLAGS += -ffunction-sections -Wall
CFLAGS += -Wno-deprecated
CFLAGS += -Wnull-dereference
CPPFLAGS += -fdiagnostics-show-template-tree -fno-elide-type # GCC8 required
CFLAGS += -Wextra
CFLAGS += -Wpedantic -Wvla -Wswitch-enum -fvar-tracking-assignments
CFLAGS += -Wduplicated-cond -Wduplicated-branches -rdynamic
CPPFLAGS += -Wextra-semi

# Flag compiler error for [-Wdeprecated-declarations]
CFLAGS += -Werror=deprecated-declarations

# Generate dependency files automatically.
CFLAGS += -MD -MP -MF $@.d
CFLAGS += -DDEBUG_BUILD
# OSX includes sys/wait.h which defines "wait"
CFLAGS += -D_SYS_WAIT_H_ -D_SYS_WAIT_H

CPPFLAGS += -std=gnu++17
CFLAGS += -pthread


# compile with coverage
CFLAGS += -g -fprofile-arcs -ftest-coverage
LDFLAGS += -lgcov

# compile with coverage and sanitizer (commented because cnl doesn't work well with it)
# include $(ROOT_DIR)/test/checkers.mk # sanitizer and gcov

# the following warnings can help find opportunities for impromevent in virtual functions
# Warn when virtual functions are overriden without override/override final specifier (requires gcc 5.1)
# CPPFLAGS += -Wsuggest-override
# Warn when functions and classes can be marked final
# CPPFLAGS += -Wsuggest-final-types
# CPPFLAGS += -Wsuggest-final-methods

# include google protobuf dependencies
CPPFLAGS += $(shell pkg-config --cflags protobuf)
LDFLAGS += $(shell pkg-config --libs protobuf)

# don't generate warnings for system headers
CFLAGS += -Wno-system-headers

GIT_VERSION = $(shell cd $(ROOT_DIR); git rev-parse --short=8 HEAD)
$(info using $(GIT_VERSION) as version)
CFLAGS += -DGIT_VERSION="\"$(GIT_VERSION)\""

GIT_DATE = $(shell cd $(ROOT_DIR); git log -1 --format=%cd --date=short)
$(info using $(GIT_DATE) as release date)
CFLAGS += -DGIT_DATE="\"$(GIT_DATE)\""

PROTO_VERSION = $(shell cd $(ROOT_DIR)/external_libs/brewblox-proto; git rev-parse --short=8 HEAD)
$(info using $(PROTO_VERSION) as protocol version)
CFLAGS += -DPROTO_VERSION="\"$(PROTO_VERSION)\""

PROTO_DATE = $(shell cd $(ROOT_DIR)/external_libs/brewblox-proto; git log -1 --format=%cd --date=short)
$(info using $(GIT_DATE) as protocol date)
CFLAGS += -DPROTO_DATE="\"$(PROTO_DATE)\""

include ../targets.mk
