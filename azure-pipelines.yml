resources:
  repositories:
    - repository: self
  containers:
    - container: firmware-compiler
      image: brewblox/firmware-compiler:latest
    - container: simulator-compiler
      image: brewblox/simulator-compiler:latest

pool:
  vmImage: "Ubuntu-20.04"

trigger:
  tags:
    include:
      - "*"
  branches:
    include:
      - "*"
pr:
  branches:
    include:
      - "*"

jobs:
  #########################################################
  # Tests
  #########################################################
  - job: Tests

    steps:
      - checkout: self
      
      - script: git submodule update --init --recursive --depth 1
        displayName: Checkout submodules

      - script: bash build/compile-proto.sh
        target: firmware-compiler
        displayName: Compile proto

      - script: bash build/build-tests.sh
        target: firmware-compiler
        displayName: Build tests

      - script: bash build/run-tests-with-coverage.sh
        target: firmware-compiler
        displayName: Run tests

      - task: PublishCodeCoverageResults@1
        inputs:
          summaryFileLocation: build/coverage/coverage.xml
          codeCoverageTool: 'cobertura'

  #########################################################
  # Build AMD64
  #########################################################
  - job: BuildAMD64

    steps:
      - checkout: self
      
      - script: git submodule update --init --recursive --depth 1
        displayName: Checkout submodules

      - script: bash build/compile-proto.sh
        target: simulator-compiler
        displayName: Compile proto

      - script: bash build/build-sim-native.sh
        target: simulator-compiler
        displayName: Build executable

      - publish: build/target/brewblox-gcc
        artifact: AMD64
  
  #########################################################
  # Build ARM32
  #########################################################
  - job: BuildARM32
    pool: 
      name: Default
      demands:
        - Agent.OSArchitecture -equals ARM

    # The build agent comes with compiler dependencies pre-installed
    # No need to run scripts in container
    steps:
      - checkout: self
  
      - script: git submodule update --init --recursive --depth 1
        displayName: Checkout submodules

      - script: bash build/compile-proto.sh
        displayName: Compile proto

      - script: bash build/build-sim-native.sh
        displayName: Build executable

      - publish: build/target/brewblox-gcc
        artifact: ARM32

  #########################################################
  # Build ARM64
  #########################################################
  - job: BuildARM64
    pool: 
      name: Default
      demands:
        - Agent.OSArchitecture -equals ARM64

    # The build agent comes with compiler dependencies pre-installed
    # No need to run scripts in container
    steps:
      - checkout: self
  
      - script: git submodule update --init --recursive --depth 1
        displayName: Checkout submodules

      - script: bash build/compile-proto.sh
        displayName: Compile proto

      - script: bash build/build-sim-native.sh
        displayName: Build executable

      - publish: build/target/brewblox-gcc
        artifact: ARM64

  #########################################################
  # Build P1
  #########################################################
  - job: BuildP1

    steps:
      - checkout: self

      - script: git submodule update --init --recursive --depth 1
        displayName: Checkout submodules

      - script: bash build/compile-proto.sh
        target: firmware-compiler
        displayName: Compile proto

      - script: make APP=brewblox PLATFORM=p1
        target: firmware-compiler
        workingDirectory: build
        displayName: Build p1

      - publish: build/target/brewblox-p1
        artifact: P1

  #########################################################
  # Build Photon
  #########################################################
  - job: BuildPhoton

    steps:
      - checkout: self

      - script: git submodule update --init --recursive --depth 1
        displayName: Checkout submodules

      - script: bash build/compile-proto.sh
        target: firmware-compiler
        displayName: Compile proto

      - script: make APP=brewblox PLATFORM=photon
        target: firmware-compiler
        workingDirectory: build
        displayName: Build photon

      - publish: build/target/brewblox-photon
        artifact: Photon

  #########################################################
  # Deploy
  #########################################################
  - job: Deploy

    dependsOn:
      - Tests
      - BuildAMD64
      - BuildARM32
      - BuildARM64
      - BuildP1
      - BuildPhoton

    variables:
      # Variables imported from brewblox group:
      # DOCKER_USER
      # DOCKER_PASSWORD
      - group: brewblox

    steps:
      - bash: |
          BRANCH=$(echo $(Build.SourceBranch) | grep -oP "^refs/heads/\K.*")
          TAG=$(echo $BRANCH | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "##vso[task.setvariable variable=BRANCH]$BRANCH"
          echo "##vso[task.setvariable variable=TAG]$TAG"
        displayName: Export build variables

      - bash: |
          curl -fsSL https://raw.githubusercontent.com/BrewBlox/deployed-images/develop/prepare_buildx.sh | bash
        displayName: Prepare buildx
        condition: and(succeeded(), variables.BRANCH)

      - bash: |
          echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USER) --password-stdin
        displayName: Docker login
        condition: and(succeeded(), variables.BRANCH)

      # Download all published artifacts
      - download: current

      - bash: |
          set -e
          mkdir -p ${SRC}
          cp "$(Pipeline.Workspace)"/AMD64/brewblox-gcc ${SRC}/brewblox-amd64.sim
          cp "$(Pipeline.Workspace)"/ARM32/brewblox-gcc ${SRC}/brewblox-arm32.sim
          cp "$(Pipeline.Workspace)"/ARM64/brewblox-gcc ${SRC}/brewblox-arm64.sim
          cp "$(Pipeline.Workspace)"/P1/brewblox-p1.bin ${SRC}/brewblox-p1.bin
          cp "$(Pipeline.Workspace)"/Photon/brewblox-photon.bin ${SRC}/brewblox-photon.bin
          bash docker/firmware-bin/before_build.sh
        displayName: Prepare firmware-bin source files
        env:
          SRC: docker/firmware-bin/source

      - bash: |
          export TAG=$(TAG)
          bash docker/firmware-bin/build.sh --push
        displayName: Build firmware-bin image
        condition: and(succeeded(), variables['BRANCH'])
