// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pid_test.proto

#include "Pid_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr Pid::Pid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strippedfields_()
  , _strippedfields_cached_byte_size_(0)
  , inputid_(0u)
  , outputid_(0u)
  , inputvalue_(0)
  , inputsetting_(0)
  , outputvalue_(0)
  , outputsetting_(0)
  , kp_(0)
  , ti_(0u)
  , td_(0u)
  , p_(0)
  , enabled_(false)
  , active_(false)
  , boilmodeactive_(false)
  , i_(0)
  , d_(0)
  , error_(0)
  , integral_(0)
  , derivative_(0)
  , drivenoutputid_(0u)
  , integralreset_(0)
  , boilpointadjust_(0)
  , boilminoutput_(0)
  , derivativefilter_(0)
{}
struct PidDefaultTypeInternal {
  constexpr PidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PidDefaultTypeInternal() {}
  union {
    Pid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PidDefaultTypeInternal _Pid_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Pid_5ftest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Pid_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Pid_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Pid_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::Pid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::Pid, inputid_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, outputid_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, inputvalue_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, inputsetting_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, outputvalue_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, outputsetting_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, enabled_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, active_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, kp_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, ti_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, td_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, p_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, i_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, d_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, error_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, integral_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, derivative_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, drivenoutputid_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, integralreset_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, boilpointadjust_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, boilminoutput_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, boilmodeactive_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, derivativefilter_),
  PROTOBUF_FIELD_OFFSET(::blox::Pid, strippedfields_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Pid)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_Pid_default_instance_),
};

const char descriptor_table_protodef_Pid_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Pid_test.proto\022\004blox\032\023brewblox_test.pr"
  "oto\032\021nanopb_test.proto\032\035SetpointSensorPa"
  "ir_test.proto\"\331\007\n\003Pid\022\034\n\007inputId\030\001 \001(\rB\013"
  "\212\265\030\002\030\004\222\?\0028\020\022\035\n\010outputId\030\002 \001(\rB\013\212\265\030\002\030\005\222\?\002"
  "8\020\0222\n\ninputValue\030\005 \001(\021B\036\212\265\030\0020\001\212\265\030\002\010\001\212\265\030\003"
  "\020\200 \222\?\0028 \212\265\030\002(\001\0224\n\014inputSetting\030\006 \001(\021B\036\212\265"
  "\030\0020\001\212\265\030\002\010\001\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\022-\n\013outputVa"
  "lue\030\007 \001(\021B\030\212\265\030\0020\001\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\022/\n\ro"
  "utputSetting\030\010 \001(\021B\030\212\265\030\0020\001\212\265\030\003\020\200 \222\?\0028 \212\265"
  "\030\002(\001\022\027\n\007enabled\030\013 \001(\010B\006\212\265\030\0020\001\022\034\n\006active\030"
  "\014 \001(\010B\014\212\265\030\0020\001\212\265\030\002(\001\022\036\n\002kp\030\r \001(\021B\022\212\265\030\002\010\002\212"
  "\265\030\003\020\200 \222\?\0028 \022\027\n\002ti\030\016 \001(\rB\013\212\265\030\002\010\003\222\?\0028\020\022\027\n\002"
  "td\030\017 \001(\rB\013\212\265\030\002\010\003\222\?\0028\020\022#\n\001p\030\020 \001(\021B\030\212\265\030\0020\001"
  "\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\022#\n\001i\030\021 \001(\021B\030\212\265\030\0020\001\212\265\030"
  "\003\020\200 \222\?\0028 \212\265\030\002(\001\022#\n\001d\030\022 \001(\021B\030\212\265\030\0020\001\212\265\030\003\020\200"
  " \222\?\0028 \212\265\030\002(\001\022-\n\005error\030\023 \001(\021B\036\212\265\030\0020\001\212\265\030\002\010"
  "\006\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\0222\n\010integral\030\024 \001(\021B \212"
  "\265\030\0020\001\212\265\030\002\010\014\212\265\030\005\020\200\200\204\007\222\?\0028 \212\265\030\002(\001\0223\n\nderiv"
  "ative\030\025 \001(\021B\037\212\265\030\0020\001\212\265\030\002\010\010\212\265\030\004\020\242\304\010\222\?\0028 \212\265"
  "\030\002(\001\022/\n\016drivenOutputId\030\026 \001(\rB\027\212\265\030\002\030\005\212\265\030\002"
  "@\001\222\?\0028\020\212\265\030\002(\001\022)\n\rintegralReset\030\027 \001(\021B\022\212\265"
  "\030\0020\001\212\265\030\003\020\200 \222\?\0028 \022+\n\017boilPointAdjust\030\030 \001("
  "\021B\022\212\265\030\002\010\006\212\265\030\003\020\200 \222\?\0028 \022#\n\rboilMinOutput\030\031"
  " \001(\021B\014\212\265\030\003\020\200 \222\?\0028 \022$\n\016boilModeActive\030\032 \001"
  "(\010B\014\212\265\030\0020\001\212\265\030\002(\001\0224\n\020derivativeFilter\030\033 \001"
  "(\0162\022.blox.FilterChoiceB\006\212\265\030\002(\001\022(\n\016stripp"
  "edFields\030c \003(\rB\020\212\265\030\002(\001\222\?\0028\020\222\?\002\020\004:\007\212\265\030\003\030\260"
  "\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Pid_5ftest_2eproto_deps[3] = {
  &::descriptor_table_SetpointSensorPair_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Pid_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Pid_5ftest_2eproto = {
  false, false, 1089, descriptor_table_protodef_Pid_5ftest_2eproto, "Pid_test.proto", 
  &descriptor_table_Pid_5ftest_2eproto_once, descriptor_table_Pid_5ftest_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_Pid_5ftest_2eproto::offsets,
  file_level_metadata_Pid_5ftest_2eproto, file_level_enum_descriptors_Pid_5ftest_2eproto, file_level_service_descriptors_Pid_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Pid_5ftest_2eproto_getter() {
  return &descriptor_table_Pid_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Pid_5ftest_2eproto(&descriptor_table_Pid_5ftest_2eproto);
namespace blox {

// ===================================================================

class Pid::_Internal {
 public:
};

Pid::Pid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  strippedfields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.Pid)
}
Pid::Pid(const Pid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      strippedfields_(from.strippedfields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inputid_, &from.inputid_,
    static_cast<size_t>(reinterpret_cast<char*>(&derivativefilter_) -
    reinterpret_cast<char*>(&inputid_)) + sizeof(derivativefilter_));
  // @@protoc_insertion_point(copy_constructor:blox.Pid)
}

inline void Pid::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inputid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&derivativefilter_) -
    reinterpret_cast<char*>(&inputid_)) + sizeof(derivativefilter_));
}

Pid::~Pid() {
  // @@protoc_insertion_point(destructor:blox.Pid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pid::ArenaDtor(void* object) {
  Pid* _this = reinterpret_cast< Pid* >(object);
  (void)_this;
}
void Pid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pid::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Pid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strippedfields_.Clear();
  ::memset(&inputid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&derivativefilter_) -
      reinterpret_cast<char*>(&inputid_)) + sizeof(derivativefilter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 inputId = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          inputid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outputId = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outputid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 inputValue = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          inputvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 inputSetting = 6 [(.nanopb_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          inputsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 outputValue = 7 [(.nanopb_test) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          outputvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 outputSetting = 8 [(.nanopb_test) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          outputsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 11 [(.brewblox_test) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 12 [(.brewblox_test) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 kp = 13 [(.nanopb_test) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          kp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ti = 14 [(.nanopb_test) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 td = 15 [(.nanopb_test) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          td_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 p = 16 [(.nanopb_test) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 i = 17 [(.nanopb_test) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 d = 18 [(.nanopb_test) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 error = 19 [(.nanopb_test) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 integral = 20 [(.nanopb_test) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          integral_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 derivative = 21 [(.nanopb_test) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 drivenOutputId = 22 [(.nanopb_test) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          drivenoutputid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 integralReset = 23 [(.nanopb_test) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          integralreset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 boilPointAdjust = 24 [(.nanopb_test) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          boilpointadjust_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 boilMinOutput = 25 [(.nanopb_test) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          boilminoutput_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool boilModeActive = 26 [(.brewblox_test) = {
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          boilmodeactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.FilterChoice derivativeFilter = 27 [(.brewblox_test) = {
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_derivativefilter(static_cast<::blox::FilterChoice>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_strippedfields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.Pid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 inputId = 1 [(.nanopb_test) = {
  if (this->_internal_inputid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_inputid(), target);
  }

  // uint32 outputId = 2 [(.nanopb_test) = {
  if (this->_internal_outputid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_outputid(), target);
  }

  // sint32 inputValue = 5 [(.nanopb_test) = {
  if (this->_internal_inputvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_inputvalue(), target);
  }

  // sint32 inputSetting = 6 [(.nanopb_test) = {
  if (this->_internal_inputsetting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_inputsetting(), target);
  }

  // sint32 outputValue = 7 [(.nanopb_test) = {
  if (this->_internal_outputvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_outputvalue(), target);
  }

  // sint32 outputSetting = 8 [(.nanopb_test) = {
  if (this->_internal_outputsetting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_outputsetting(), target);
  }

  // bool enabled = 11 [(.brewblox_test) = {
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enabled(), target);
  }

  // bool active = 12 [(.brewblox_test) = {
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_active(), target);
  }

  // sint32 kp = 13 [(.nanopb_test) = {
  if (this->_internal_kp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_kp(), target);
  }

  // uint32 ti = 14 [(.nanopb_test) = {
  if (this->_internal_ti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ti(), target);
  }

  // uint32 td = 15 [(.nanopb_test) = {
  if (this->_internal_td() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_td(), target);
  }

  // sint32 p = 16 [(.nanopb_test) = {
  if (this->_internal_p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(16, this->_internal_p(), target);
  }

  // sint32 i = 17 [(.nanopb_test) = {
  if (this->_internal_i() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(17, this->_internal_i(), target);
  }

  // sint32 d = 18 [(.nanopb_test) = {
  if (this->_internal_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(18, this->_internal_d(), target);
  }

  // sint32 error = 19 [(.nanopb_test) = {
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(19, this->_internal_error(), target);
  }

  // sint32 integral = 20 [(.nanopb_test) = {
  if (this->_internal_integral() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(20, this->_internal_integral(), target);
  }

  // sint32 derivative = 21 [(.nanopb_test) = {
  if (this->_internal_derivative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(21, this->_internal_derivative(), target);
  }

  // uint32 drivenOutputId = 22 [(.nanopb_test) = {
  if (this->_internal_drivenoutputid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_drivenoutputid(), target);
  }

  // sint32 integralReset = 23 [(.nanopb_test) = {
  if (this->_internal_integralreset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(23, this->_internal_integralreset(), target);
  }

  // sint32 boilPointAdjust = 24 [(.nanopb_test) = {
  if (this->_internal_boilpointadjust() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(24, this->_internal_boilpointadjust(), target);
  }

  // sint32 boilMinOutput = 25 [(.nanopb_test) = {
  if (this->_internal_boilminoutput() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(25, this->_internal_boilminoutput(), target);
  }

  // bool boilModeActive = 26 [(.brewblox_test) = {
  if (this->_internal_boilmodeactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_boilmodeactive(), target);
  }

  // .blox.FilterChoice derivativeFilter = 27 [(.brewblox_test) = {
  if (this->_internal_derivativefilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_derivativefilter(), target);
  }

  // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
  {
    int byte_size = _strippedfields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          99, _internal_strippedfields(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Pid)
  return target;
}

size_t Pid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Pid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->strippedfields_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _strippedfields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 inputId = 1 [(.nanopb_test) = {
  if (this->_internal_inputid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inputid());
  }

  // uint32 outputId = 2 [(.nanopb_test) = {
  if (this->_internal_outputid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outputid());
  }

  // sint32 inputValue = 5 [(.nanopb_test) = {
  if (this->_internal_inputvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_inputvalue());
  }

  // sint32 inputSetting = 6 [(.nanopb_test) = {
  if (this->_internal_inputsetting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_inputsetting());
  }

  // sint32 outputValue = 7 [(.nanopb_test) = {
  if (this->_internal_outputvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_outputvalue());
  }

  // sint32 outputSetting = 8 [(.nanopb_test) = {
  if (this->_internal_outputsetting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_outputsetting());
  }

  // sint32 kp = 13 [(.nanopb_test) = {
  if (this->_internal_kp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_kp());
  }

  // uint32 ti = 14 [(.nanopb_test) = {
  if (this->_internal_ti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ti());
  }

  // uint32 td = 15 [(.nanopb_test) = {
  if (this->_internal_td() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_td());
  }

  // sint32 p = 16 [(.nanopb_test) = {
  if (this->_internal_p() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_p());
  }

  // bool enabled = 11 [(.brewblox_test) = {
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool active = 12 [(.brewblox_test) = {
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  // bool boilModeActive = 26 [(.brewblox_test) = {
  if (this->_internal_boilmodeactive() != 0) {
    total_size += 2 + 1;
  }

  // sint32 i = 17 [(.nanopb_test) = {
  if (this->_internal_i() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_i());
  }

  // sint32 d = 18 [(.nanopb_test) = {
  if (this->_internal_d() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_d());
  }

  // sint32 error = 19 [(.nanopb_test) = {
  if (this->_internal_error() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_error());
  }

  // sint32 integral = 20 [(.nanopb_test) = {
  if (this->_internal_integral() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_integral());
  }

  // sint32 derivative = 21 [(.nanopb_test) = {
  if (this->_internal_derivative() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_derivative());
  }

  // uint32 drivenOutputId = 22 [(.nanopb_test) = {
  if (this->_internal_drivenoutputid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drivenoutputid());
  }

  // sint32 integralReset = 23 [(.nanopb_test) = {
  if (this->_internal_integralreset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_integralreset());
  }

  // sint32 boilPointAdjust = 24 [(.nanopb_test) = {
  if (this->_internal_boilpointadjust() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_boilpointadjust());
  }

  // sint32 boilMinOutput = 25 [(.nanopb_test) = {
  if (this->_internal_boilminoutput() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_boilminoutput());
  }

  // .blox.FilterChoice derivativeFilter = 27 [(.brewblox_test) = {
  if (this->_internal_derivativefilter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_derivativefilter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pid::GetClassData() const { return &_class_data_; }

void Pid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Pid *>(to)->MergeFrom(
      static_cast<const Pid &>(from));
}


void Pid::MergeFrom(const Pid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Pid)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strippedfields_.MergeFrom(from.strippedfields_);
  if (from._internal_inputid() != 0) {
    _internal_set_inputid(from._internal_inputid());
  }
  if (from._internal_outputid() != 0) {
    _internal_set_outputid(from._internal_outputid());
  }
  if (from._internal_inputvalue() != 0) {
    _internal_set_inputvalue(from._internal_inputvalue());
  }
  if (from._internal_inputsetting() != 0) {
    _internal_set_inputsetting(from._internal_inputsetting());
  }
  if (from._internal_outputvalue() != 0) {
    _internal_set_outputvalue(from._internal_outputvalue());
  }
  if (from._internal_outputsetting() != 0) {
    _internal_set_outputsetting(from._internal_outputsetting());
  }
  if (from._internal_kp() != 0) {
    _internal_set_kp(from._internal_kp());
  }
  if (from._internal_ti() != 0) {
    _internal_set_ti(from._internal_ti());
  }
  if (from._internal_td() != 0) {
    _internal_set_td(from._internal_td());
  }
  if (from._internal_p() != 0) {
    _internal_set_p(from._internal_p());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from._internal_boilmodeactive() != 0) {
    _internal_set_boilmodeactive(from._internal_boilmodeactive());
  }
  if (from._internal_i() != 0) {
    _internal_set_i(from._internal_i());
  }
  if (from._internal_d() != 0) {
    _internal_set_d(from._internal_d());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_integral() != 0) {
    _internal_set_integral(from._internal_integral());
  }
  if (from._internal_derivative() != 0) {
    _internal_set_derivative(from._internal_derivative());
  }
  if (from._internal_drivenoutputid() != 0) {
    _internal_set_drivenoutputid(from._internal_drivenoutputid());
  }
  if (from._internal_integralreset() != 0) {
    _internal_set_integralreset(from._internal_integralreset());
  }
  if (from._internal_boilpointadjust() != 0) {
    _internal_set_boilpointadjust(from._internal_boilpointadjust());
  }
  if (from._internal_boilminoutput() != 0) {
    _internal_set_boilminoutput(from._internal_boilminoutput());
  }
  if (from._internal_derivativefilter() != 0) {
    _internal_set_derivativefilter(from._internal_derivativefilter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pid::CopyFrom(const Pid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Pid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pid::IsInitialized() const {
  return true;
}

void Pid::InternalSwap(Pid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  strippedfields_.InternalSwap(&other->strippedfields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pid, derivativefilter_)
      + sizeof(Pid::derivativefilter_)
      - PROTOBUF_FIELD_OFFSET(Pid, inputid_)>(
          reinterpret_cast<char*>(&inputid_),
          reinterpret_cast<char*>(&other->inputid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Pid_5ftest_2eproto_getter, &descriptor_table_Pid_5ftest_2eproto_once,
      file_level_metadata_Pid_5ftest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::Pid* Arena::CreateMaybeMessage< ::blox::Pid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::Pid >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
