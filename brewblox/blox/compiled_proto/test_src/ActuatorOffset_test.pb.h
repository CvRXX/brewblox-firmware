// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorOffset_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActuatorOffset_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActuatorOffset_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "AnalogConstraints_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActuatorOffset_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActuatorOffset_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorOffset_5ftest_2eproto;
namespace blox {
class ActuatorOffset;
struct ActuatorOffsetDefaultTypeInternal;
extern ActuatorOffsetDefaultTypeInternal _ActuatorOffset_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::ActuatorOffset* Arena::CreateMaybeMessage<::blox::ActuatorOffset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

enum ActuatorOffset_ReferenceKind : int {
  ActuatorOffset_ReferenceKind_REF_SETTING = 0,
  ActuatorOffset_ReferenceKind_REF_VALUE = 1,
  ActuatorOffset_ReferenceKind_ActuatorOffset_ReferenceKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActuatorOffset_ReferenceKind_ActuatorOffset_ReferenceKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActuatorOffset_ReferenceKind_IsValid(int value);
constexpr ActuatorOffset_ReferenceKind ActuatorOffset_ReferenceKind_ReferenceKind_MIN = ActuatorOffset_ReferenceKind_REF_SETTING;
constexpr ActuatorOffset_ReferenceKind ActuatorOffset_ReferenceKind_ReferenceKind_MAX = ActuatorOffset_ReferenceKind_REF_VALUE;
constexpr int ActuatorOffset_ReferenceKind_ReferenceKind_ARRAYSIZE = ActuatorOffset_ReferenceKind_ReferenceKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActuatorOffset_ReferenceKind_descriptor();
template<typename T>
inline const std::string& ActuatorOffset_ReferenceKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActuatorOffset_ReferenceKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActuatorOffset_ReferenceKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActuatorOffset_ReferenceKind_descriptor(), enum_t_value);
}
inline bool ActuatorOffset_ReferenceKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActuatorOffset_ReferenceKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActuatorOffset_ReferenceKind>(
    ActuatorOffset_ReferenceKind_descriptor(), name, value);
}
// ===================================================================

class ActuatorOffset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.ActuatorOffset) */ {
 public:
  inline ActuatorOffset() : ActuatorOffset(nullptr) {}
  ~ActuatorOffset() override;
  explicit constexpr ActuatorOffset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorOffset(const ActuatorOffset& from);
  ActuatorOffset(ActuatorOffset&& from) noexcept
    : ActuatorOffset() {
    *this = ::std::move(from);
  }

  inline ActuatorOffset& operator=(const ActuatorOffset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorOffset& operator=(ActuatorOffset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorOffset& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorOffset* internal_default_instance() {
    return reinterpret_cast<const ActuatorOffset*>(
               &_ActuatorOffset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActuatorOffset& a, ActuatorOffset& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorOffset* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorOffset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorOffset* New() const final {
    return new ActuatorOffset();
  }

  ActuatorOffset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorOffset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorOffset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorOffset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorOffset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.ActuatorOffset";
  }
  protected:
  explicit ActuatorOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActuatorOffset_ReferenceKind ReferenceKind;
  static constexpr ReferenceKind REF_SETTING =
    ActuatorOffset_ReferenceKind_REF_SETTING;
  static constexpr ReferenceKind REF_VALUE =
    ActuatorOffset_ReferenceKind_REF_VALUE;
  static inline bool ReferenceKind_IsValid(int value) {
    return ActuatorOffset_ReferenceKind_IsValid(value);
  }
  static constexpr ReferenceKind ReferenceKind_MIN =
    ActuatorOffset_ReferenceKind_ReferenceKind_MIN;
  static constexpr ReferenceKind ReferenceKind_MAX =
    ActuatorOffset_ReferenceKind_ReferenceKind_MAX;
  static constexpr int ReferenceKind_ARRAYSIZE =
    ActuatorOffset_ReferenceKind_ReferenceKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReferenceKind_descriptor() {
    return ActuatorOffset_ReferenceKind_descriptor();
  }
  template<typename T>
  static inline const std::string& ReferenceKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReferenceKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReferenceKind_Name.");
    return ActuatorOffset_ReferenceKind_Name(enum_t_value);
  }
  static inline bool ReferenceKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReferenceKind* value) {
    return ActuatorOffset_ReferenceKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStrippedFieldsFieldNumber = 99,
    kConstrainedByFieldNumber = 8,
    kTargetIdFieldNumber = 1,
    kReferenceIdFieldNumber = 3,
    kReferenceSettingOrValueFieldNumber = 4,
    kSettingFieldNumber = 6,
    kValueFieldNumber = 7,
    kDrivenTargetIdFieldNumber = 9,
    kEnabledFieldNumber = 10,
    kDesiredSettingFieldNumber = 11,
  };
  // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_strippedfields();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 strippedfields(int index) const;
  void set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_strippedfields();

  // .blox.AnalogConstraints constrainedBy = 8;
  bool has_constrainedby() const;
  private:
  bool _internal_has_constrainedby() const;
  public:
  void clear_constrainedby();
  const ::blox::AnalogConstraints& constrainedby() const;
  PROTOBUF_MUST_USE_RESULT ::blox::AnalogConstraints* release_constrainedby();
  ::blox::AnalogConstraints* mutable_constrainedby();
  void set_allocated_constrainedby(::blox::AnalogConstraints* constrainedby);
  private:
  const ::blox::AnalogConstraints& _internal_constrainedby() const;
  ::blox::AnalogConstraints* _internal_mutable_constrainedby();
  public:
  void unsafe_arena_set_allocated_constrainedby(
      ::blox::AnalogConstraints* constrainedby);
  ::blox::AnalogConstraints* unsafe_arena_release_constrainedby();

  // uint32 targetId = 1 [(.nanopb_test) = {
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 referenceId = 3 [(.nanopb_test) = {
  void clear_referenceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 referenceid() const;
  void set_referenceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_referenceid() const;
  void _internal_set_referenceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .blox.ActuatorOffset.ReferenceKind referenceSettingOrValue = 4;
  void clear_referencesettingorvalue();
  ::blox::ActuatorOffset_ReferenceKind referencesettingorvalue() const;
  void set_referencesettingorvalue(::blox::ActuatorOffset_ReferenceKind value);
  private:
  ::blox::ActuatorOffset_ReferenceKind _internal_referencesettingorvalue() const;
  void _internal_set_referencesettingorvalue(::blox::ActuatorOffset_ReferenceKind value);
  public:

  // sint32 setting = 6 [(.nanopb_test) = {
  void clear_setting();
  ::PROTOBUF_NAMESPACE_ID::int32 setting() const;
  void set_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setting() const;
  void _internal_set_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 value = 7 [(.nanopb_test) = {
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 drivenTargetId = 9 [(.nanopb_test) = {
  void clear_driventargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 driventargetid() const;
  void set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_driventargetid() const;
  void _internal_set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enabled = 10;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // sint32 desiredSetting = 11 [(.nanopb_test) = {
  void clear_desiredsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 desiredsetting() const;
  void set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desiredsetting() const;
  void _internal_set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.ActuatorOffset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  ::blox::AnalogConstraints* constrainedby_;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 referenceid_;
  int referencesettingorvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 setting_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driventargetid_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 desiredsetting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorOffset_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActuatorOffset

// uint32 targetId = 1 [(.nanopb_test) = {
inline void ActuatorOffset::clear_targetid() {
  targetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::targetid() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.targetId)
  return _internal_targetid();
}
inline void ActuatorOffset::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  targetid_ = value;
}
inline void ActuatorOffset::set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.targetId)
}

// uint32 referenceId = 3 [(.nanopb_test) = {
inline void ActuatorOffset::clear_referenceid() {
  referenceid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::_internal_referenceid() const {
  return referenceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::referenceid() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.referenceId)
  return _internal_referenceid();
}
inline void ActuatorOffset::_internal_set_referenceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  referenceid_ = value;
}
inline void ActuatorOffset::set_referenceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_referenceid(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.referenceId)
}

// .blox.ActuatorOffset.ReferenceKind referenceSettingOrValue = 4;
inline void ActuatorOffset::clear_referencesettingorvalue() {
  referencesettingorvalue_ = 0;
}
inline ::blox::ActuatorOffset_ReferenceKind ActuatorOffset::_internal_referencesettingorvalue() const {
  return static_cast< ::blox::ActuatorOffset_ReferenceKind >(referencesettingorvalue_);
}
inline ::blox::ActuatorOffset_ReferenceKind ActuatorOffset::referencesettingorvalue() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.referenceSettingOrValue)
  return _internal_referencesettingorvalue();
}
inline void ActuatorOffset::_internal_set_referencesettingorvalue(::blox::ActuatorOffset_ReferenceKind value) {
  
  referencesettingorvalue_ = value;
}
inline void ActuatorOffset::set_referencesettingorvalue(::blox::ActuatorOffset_ReferenceKind value) {
  _internal_set_referencesettingorvalue(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.referenceSettingOrValue)
}

// sint32 setting = 6 [(.nanopb_test) = {
inline void ActuatorOffset::clear_setting() {
  setting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorOffset::_internal_setting() const {
  return setting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorOffset::setting() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.setting)
  return _internal_setting();
}
inline void ActuatorOffset::_internal_set_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  setting_ = value;
}
inline void ActuatorOffset::set_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.setting)
}

// sint32 value = 7 [(.nanopb_test) = {
inline void ActuatorOffset::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorOffset::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorOffset::value() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.value)
  return _internal_value();
}
inline void ActuatorOffset::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void ActuatorOffset::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.value)
}

// .blox.AnalogConstraints constrainedBy = 8;
inline bool ActuatorOffset::_internal_has_constrainedby() const {
  return this != internal_default_instance() && constrainedby_ != nullptr;
}
inline bool ActuatorOffset::has_constrainedby() const {
  return _internal_has_constrainedby();
}
inline const ::blox::AnalogConstraints& ActuatorOffset::_internal_constrainedby() const {
  const ::blox::AnalogConstraints* p = constrainedby_;
  return p != nullptr ? *p : reinterpret_cast<const ::blox::AnalogConstraints&>(
      ::blox::_AnalogConstraints_default_instance_);
}
inline const ::blox::AnalogConstraints& ActuatorOffset::constrainedby() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.constrainedBy)
  return _internal_constrainedby();
}
inline void ActuatorOffset::unsafe_arena_set_allocated_constrainedby(
    ::blox::AnalogConstraints* constrainedby) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  constrainedby_ = constrainedby;
  if (constrainedby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox.ActuatorOffset.constrainedBy)
}
inline ::blox::AnalogConstraints* ActuatorOffset::release_constrainedby() {
  
  ::blox::AnalogConstraints* temp = constrainedby_;
  constrainedby_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blox::AnalogConstraints* ActuatorOffset::unsafe_arena_release_constrainedby() {
  // @@protoc_insertion_point(field_release:blox.ActuatorOffset.constrainedBy)
  
  ::blox::AnalogConstraints* temp = constrainedby_;
  constrainedby_ = nullptr;
  return temp;
}
inline ::blox::AnalogConstraints* ActuatorOffset::_internal_mutable_constrainedby() {
  
  if (constrainedby_ == nullptr) {
    auto* p = CreateMaybeMessage<::blox::AnalogConstraints>(GetArenaForAllocation());
    constrainedby_ = p;
  }
  return constrainedby_;
}
inline ::blox::AnalogConstraints* ActuatorOffset::mutable_constrainedby() {
  ::blox::AnalogConstraints* _msg = _internal_mutable_constrainedby();
  // @@protoc_insertion_point(field_mutable:blox.ActuatorOffset.constrainedBy)
  return _msg;
}
inline void ActuatorOffset::set_allocated_constrainedby(::blox::AnalogConstraints* constrainedby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  if (constrainedby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby));
    if (message_arena != submessage_arena) {
      constrainedby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constrainedby, submessage_arena);
    }
    
  } else {
    
  }
  constrainedby_ = constrainedby;
  // @@protoc_insertion_point(field_set_allocated:blox.ActuatorOffset.constrainedBy)
}

// uint32 drivenTargetId = 9 [(.nanopb_test) = {
inline void ActuatorOffset::clear_driventargetid() {
  driventargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::_internal_driventargetid() const {
  return driventargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::driventargetid() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.drivenTargetId)
  return _internal_driventargetid();
}
inline void ActuatorOffset::_internal_set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driventargetid_ = value;
}
inline void ActuatorOffset::set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_driventargetid(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.drivenTargetId)
}

// bool enabled = 10;
inline void ActuatorOffset::clear_enabled() {
  enabled_ = false;
}
inline bool ActuatorOffset::_internal_enabled() const {
  return enabled_;
}
inline bool ActuatorOffset::enabled() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.enabled)
  return _internal_enabled();
}
inline void ActuatorOffset::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void ActuatorOffset::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.enabled)
}

// sint32 desiredSetting = 11 [(.nanopb_test) = {
inline void ActuatorOffset::clear_desiredsetting() {
  desiredsetting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorOffset::_internal_desiredsetting() const {
  return desiredsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorOffset::desiredsetting() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.desiredSetting)
  return _internal_desiredsetting();
}
inline void ActuatorOffset::_internal_set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  desiredsetting_ = value;
}
inline void ActuatorOffset::set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_desiredsetting(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.desiredSetting)
}

// repeated uint32 strippedFields = 99 [(.nanopb_test) = {
inline int ActuatorOffset::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int ActuatorOffset::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void ActuatorOffset::clear_strippedfields() {
  strippedfields_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOffset::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox.ActuatorOffset.strippedFields)
  return _internal_strippedfields(index);
}
inline void ActuatorOffset::set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox.ActuatorOffset.strippedFields)
}
inline void ActuatorOffset::_internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Add(value);
}
inline void ActuatorOffset::add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox.ActuatorOffset.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ActuatorOffset::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ActuatorOffset::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox.ActuatorOffset.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ActuatorOffset::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ActuatorOffset::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox.ActuatorOffset.strippedFields)
  return _internal_mutable_strippedfields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox::ActuatorOffset_ReferenceKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::ActuatorOffset_ReferenceKind>() {
  return ::blox::ActuatorOffset_ReferenceKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActuatorOffset_5ftest_2eproto
