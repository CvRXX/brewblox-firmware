// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorAnalogMock_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActuatorAnalogMock_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActuatorAnalogMock_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "AnalogConstraints_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActuatorAnalogMock_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActuatorAnalogMock_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorAnalogMock_5ftest_2eproto;
namespace blox {
class ActuatorAnalogMock;
struct ActuatorAnalogMockDefaultTypeInternal;
extern ActuatorAnalogMockDefaultTypeInternal _ActuatorAnalogMock_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::ActuatorAnalogMock* Arena::CreateMaybeMessage<::blox::ActuatorAnalogMock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

// ===================================================================

class ActuatorAnalogMock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.ActuatorAnalogMock) */ {
 public:
  inline ActuatorAnalogMock() : ActuatorAnalogMock(nullptr) {}
  ~ActuatorAnalogMock() override;
  explicit constexpr ActuatorAnalogMock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorAnalogMock(const ActuatorAnalogMock& from);
  ActuatorAnalogMock(ActuatorAnalogMock&& from) noexcept
    : ActuatorAnalogMock() {
    *this = ::std::move(from);
  }

  inline ActuatorAnalogMock& operator=(const ActuatorAnalogMock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorAnalogMock& operator=(ActuatorAnalogMock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorAnalogMock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorAnalogMock* internal_default_instance() {
    return reinterpret_cast<const ActuatorAnalogMock*>(
               &_ActuatorAnalogMock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActuatorAnalogMock& a, ActuatorAnalogMock& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorAnalogMock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorAnalogMock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorAnalogMock* New() const final {
    return new ActuatorAnalogMock();
  }

  ActuatorAnalogMock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorAnalogMock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorAnalogMock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorAnalogMock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorAnalogMock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.ActuatorAnalogMock";
  }
  protected:
  explicit ActuatorAnalogMock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrippedFieldsFieldNumber = 99,
    kConstrainedByFieldNumber = 8,
    kSettingFieldNumber = 1,
    kValueFieldNumber = 2,
    kMinSettingFieldNumber = 4,
    kMaxSettingFieldNumber = 5,
    kMinValueFieldNumber = 6,
    kMaxValueFieldNumber = 7,
    kDesiredSettingFieldNumber = 9,
  };
  // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_strippedfields();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 strippedfields(int index) const;
  void set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_strippedfields();

  // .blox.AnalogConstraints constrainedBy = 8;
  bool has_constrainedby() const;
  private:
  bool _internal_has_constrainedby() const;
  public:
  void clear_constrainedby();
  const ::blox::AnalogConstraints& constrainedby() const;
  PROTOBUF_MUST_USE_RESULT ::blox::AnalogConstraints* release_constrainedby();
  ::blox::AnalogConstraints* mutable_constrainedby();
  void set_allocated_constrainedby(::blox::AnalogConstraints* constrainedby);
  private:
  const ::blox::AnalogConstraints& _internal_constrainedby() const;
  ::blox::AnalogConstraints* _internal_mutable_constrainedby();
  public:
  void unsafe_arena_set_allocated_constrainedby(
      ::blox::AnalogConstraints* constrainedby);
  ::blox::AnalogConstraints* unsafe_arena_release_constrainedby();

  // sint32 setting = 1 [(.nanopb_test) = {
  void clear_setting();
  ::PROTOBUF_NAMESPACE_ID::int32 setting() const;
  void set_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setting() const;
  void _internal_set_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 value = 2 [(.nanopb_test) = {
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 minSetting = 4 [(.nanopb_test) = {
  void clear_minsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 minsetting() const;
  void set_minsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minsetting() const;
  void _internal_set_minsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 maxSetting = 5 [(.nanopb_test) = {
  void clear_maxsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 maxsetting() const;
  void set_maxsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxsetting() const;
  void _internal_set_maxsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 minValue = 6 [(.nanopb_test) = {
  void clear_minvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 minvalue() const;
  void set_minvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minvalue() const;
  void _internal_set_minvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 maxValue = 7 [(.nanopb_test) = {
  void clear_maxvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 maxvalue() const;
  void set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxvalue() const;
  void _internal_set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 desiredSetting = 9 [(.nanopb_test) = {
  void clear_desiredsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 desiredsetting() const;
  void set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desiredsetting() const;
  void _internal_set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.ActuatorAnalogMock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  ::blox::AnalogConstraints* constrainedby_;
  ::PROTOBUF_NAMESPACE_ID::int32 setting_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 minsetting_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxsetting_;
  ::PROTOBUF_NAMESPACE_ID::int32 minvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 desiredsetting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorAnalogMock_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActuatorAnalogMock

// sint32 setting = 1 [(.nanopb_test) = {
inline void ActuatorAnalogMock::clear_setting() {
  setting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::_internal_setting() const {
  return setting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::setting() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.setting)
  return _internal_setting();
}
inline void ActuatorAnalogMock::_internal_set_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  setting_ = value;
}
inline void ActuatorAnalogMock::set_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.setting)
}

// sint32 value = 2 [(.nanopb_test) = {
inline void ActuatorAnalogMock::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::value() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.value)
  return _internal_value();
}
inline void ActuatorAnalogMock::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void ActuatorAnalogMock::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.value)
}

// sint32 minSetting = 4 [(.nanopb_test) = {
inline void ActuatorAnalogMock::clear_minsetting() {
  minsetting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::_internal_minsetting() const {
  return minsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::minsetting() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.minSetting)
  return _internal_minsetting();
}
inline void ActuatorAnalogMock::_internal_set_minsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minsetting_ = value;
}
inline void ActuatorAnalogMock::set_minsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minsetting(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.minSetting)
}

// sint32 maxSetting = 5 [(.nanopb_test) = {
inline void ActuatorAnalogMock::clear_maxsetting() {
  maxsetting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::_internal_maxsetting() const {
  return maxsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::maxsetting() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.maxSetting)
  return _internal_maxsetting();
}
inline void ActuatorAnalogMock::_internal_set_maxsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxsetting_ = value;
}
inline void ActuatorAnalogMock::set_maxsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxsetting(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.maxSetting)
}

// sint32 minValue = 6 [(.nanopb_test) = {
inline void ActuatorAnalogMock::clear_minvalue() {
  minvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::_internal_minvalue() const {
  return minvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::minvalue() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.minValue)
  return _internal_minvalue();
}
inline void ActuatorAnalogMock::_internal_set_minvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minvalue_ = value;
}
inline void ActuatorAnalogMock::set_minvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minvalue(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.minValue)
}

// sint32 maxValue = 7 [(.nanopb_test) = {
inline void ActuatorAnalogMock::clear_maxvalue() {
  maxvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::_internal_maxvalue() const {
  return maxvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::maxvalue() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.maxValue)
  return _internal_maxvalue();
}
inline void ActuatorAnalogMock::_internal_set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxvalue_ = value;
}
inline void ActuatorAnalogMock::set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.maxValue)
}

// .blox.AnalogConstraints constrainedBy = 8;
inline bool ActuatorAnalogMock::_internal_has_constrainedby() const {
  return this != internal_default_instance() && constrainedby_ != nullptr;
}
inline bool ActuatorAnalogMock::has_constrainedby() const {
  return _internal_has_constrainedby();
}
inline const ::blox::AnalogConstraints& ActuatorAnalogMock::_internal_constrainedby() const {
  const ::blox::AnalogConstraints* p = constrainedby_;
  return p != nullptr ? *p : reinterpret_cast<const ::blox::AnalogConstraints&>(
      ::blox::_AnalogConstraints_default_instance_);
}
inline const ::blox::AnalogConstraints& ActuatorAnalogMock::constrainedby() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.constrainedBy)
  return _internal_constrainedby();
}
inline void ActuatorAnalogMock::unsafe_arena_set_allocated_constrainedby(
    ::blox::AnalogConstraints* constrainedby) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  constrainedby_ = constrainedby;
  if (constrainedby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox.ActuatorAnalogMock.constrainedBy)
}
inline ::blox::AnalogConstraints* ActuatorAnalogMock::release_constrainedby() {
  
  ::blox::AnalogConstraints* temp = constrainedby_;
  constrainedby_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blox::AnalogConstraints* ActuatorAnalogMock::unsafe_arena_release_constrainedby() {
  // @@protoc_insertion_point(field_release:blox.ActuatorAnalogMock.constrainedBy)
  
  ::blox::AnalogConstraints* temp = constrainedby_;
  constrainedby_ = nullptr;
  return temp;
}
inline ::blox::AnalogConstraints* ActuatorAnalogMock::_internal_mutable_constrainedby() {
  
  if (constrainedby_ == nullptr) {
    auto* p = CreateMaybeMessage<::blox::AnalogConstraints>(GetArenaForAllocation());
    constrainedby_ = p;
  }
  return constrainedby_;
}
inline ::blox::AnalogConstraints* ActuatorAnalogMock::mutable_constrainedby() {
  ::blox::AnalogConstraints* _msg = _internal_mutable_constrainedby();
  // @@protoc_insertion_point(field_mutable:blox.ActuatorAnalogMock.constrainedBy)
  return _msg;
}
inline void ActuatorAnalogMock::set_allocated_constrainedby(::blox::AnalogConstraints* constrainedby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  if (constrainedby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby));
    if (message_arena != submessage_arena) {
      constrainedby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constrainedby, submessage_arena);
    }
    
  } else {
    
  }
  constrainedby_ = constrainedby;
  // @@protoc_insertion_point(field_set_allocated:blox.ActuatorAnalogMock.constrainedBy)
}

// sint32 desiredSetting = 9 [(.nanopb_test) = {
inline void ActuatorAnalogMock::clear_desiredsetting() {
  desiredsetting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::_internal_desiredsetting() const {
  return desiredsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorAnalogMock::desiredsetting() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.desiredSetting)
  return _internal_desiredsetting();
}
inline void ActuatorAnalogMock::_internal_set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  desiredsetting_ = value;
}
inline void ActuatorAnalogMock::set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_desiredsetting(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.desiredSetting)
}

// repeated uint32 strippedFields = 99 [(.nanopb_test) = {
inline int ActuatorAnalogMock::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int ActuatorAnalogMock::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void ActuatorAnalogMock::clear_strippedfields() {
  strippedfields_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorAnalogMock::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorAnalogMock::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox.ActuatorAnalogMock.strippedFields)
  return _internal_strippedfields(index);
}
inline void ActuatorAnalogMock::set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox.ActuatorAnalogMock.strippedFields)
}
inline void ActuatorAnalogMock::_internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Add(value);
}
inline void ActuatorAnalogMock::add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox.ActuatorAnalogMock.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ActuatorAnalogMock::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ActuatorAnalogMock::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox.ActuatorAnalogMock.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ActuatorAnalogMock::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ActuatorAnalogMock::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox.ActuatorAnalogMock.strippedFields)
  return _internal_mutable_strippedfields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActuatorAnalogMock_5ftest_2eproto
