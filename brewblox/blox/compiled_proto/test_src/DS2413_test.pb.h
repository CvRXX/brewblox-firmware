// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS2413_test.proto

#ifndef PROTOBUF_INCLUDED_DS2413_5ftest_2eproto
#define PROTOBUF_INCLUDED_DS2413_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DS2413_5ftest_2eproto 

namespace protobuf_DS2413_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DS2413_5ftest_2eproto
namespace blox {
class DS2413;
class DS2413DefaultTypeInternal;
extern DS2413DefaultTypeInternal _DS2413_default_instance_;
class DS2413IoPin;
class DS2413IoPinDefaultTypeInternal;
extern DS2413IoPinDefaultTypeInternal _DS2413IoPin_default_instance_;
}  // namespace blox
namespace google {
namespace protobuf {
template<> ::blox::DS2413* Arena::CreateMaybeMessage<::blox::DS2413>(Arena*);
template<> ::blox::DS2413IoPin* Arena::CreateMaybeMessage<::blox::DS2413IoPin>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox {

// ===================================================================

class DS2413IoPin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.DS2413IoPin) */ {
 public:
  DS2413IoPin();
  virtual ~DS2413IoPin();

  DS2413IoPin(const DS2413IoPin& from);

  inline DS2413IoPin& operator=(const DS2413IoPin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DS2413IoPin(DS2413IoPin&& from) noexcept
    : DS2413IoPin() {
    *this = ::std::move(from);
  }

  inline DS2413IoPin& operator=(DS2413IoPin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DS2413IoPin& default_instance();

  enum PinCase {
    kA = 1,
    kB = 2,
    PIN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DS2413IoPin* internal_default_instance() {
    return reinterpret_cast<const DS2413IoPin*>(
               &_DS2413IoPin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DS2413IoPin* other);
  friend void swap(DS2413IoPin& a, DS2413IoPin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DS2413IoPin* New() const final {
    return CreateMaybeMessage<DS2413IoPin>(NULL);
  }

  DS2413IoPin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DS2413IoPin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DS2413IoPin& from);
  void MergeFrom(const DS2413IoPin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DS2413IoPin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .blox.IoChannel A = 1;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 1;
  private:
  const ::blox::IoChannel& _internal_a() const;
  public:
  const ::blox::IoChannel& a() const;
  ::blox::IoChannel* release_a();
  ::blox::IoChannel* mutable_a();
  void set_allocated_a(::blox::IoChannel* a);

  // .blox.IoChannel B = 2;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 2;
  private:
  const ::blox::IoChannel& _internal_b() const;
  public:
  const ::blox::IoChannel& b() const;
  ::blox::IoChannel* release_b();
  ::blox::IoChannel* mutable_b();
  void set_allocated_b(::blox::IoChannel* b);

  void clear_Pin();
  PinCase Pin_case() const;
  // @@protoc_insertion_point(class_scope:blox.DS2413IoPin)
 private:
  void set_has_a();
  void set_has_b();

  inline bool has_Pin() const;
  inline void clear_has_Pin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PinUnion {
    PinUnion() {}
    ::blox::IoChannel* a_;
    ::blox::IoChannel* b_;
  } Pin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_DS2413_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DS2413 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.DS2413) */ {
 public:
  DS2413();
  virtual ~DS2413();

  DS2413(const DS2413& from);

  inline DS2413& operator=(const DS2413& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DS2413(DS2413&& from) noexcept
    : DS2413() {
    *this = ::std::move(from);
  }

  inline DS2413& operator=(DS2413&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DS2413& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DS2413* internal_default_instance() {
    return reinterpret_cast<const DS2413*>(
               &_DS2413_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DS2413* other);
  friend void swap(DS2413& a, DS2413& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DS2413* New() const final {
    return CreateMaybeMessage<DS2413>(NULL);
  }

  DS2413* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DS2413>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DS2413& from);
  void MergeFrom(const DS2413& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DS2413* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blox.DS2413IoPin pins = 7 [(.nanopb_test) = {
  int pins_size() const;
  void clear_pins();
  static const int kPinsFieldNumber = 7;
  ::blox::DS2413IoPin* mutable_pins(int index);
  ::google::protobuf::RepeatedPtrField< ::blox::DS2413IoPin >*
      mutable_pins();
  const ::blox::DS2413IoPin& pins(int index) const;
  ::blox::DS2413IoPin* add_pins();
  const ::google::protobuf::RepeatedPtrField< ::blox::DS2413IoPin >&
      pins() const;

  // fixed64 address = 1 [(.brewblox_test) = {
  void clear_address();
  static const int kAddressFieldNumber = 1;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // bool connected = 6 [(.brewblox_test) = {
  void clear_connected();
  static const int kConnectedFieldNumber = 6;
  bool connected() const;
  void set_connected(bool value);

  // uint32 oneWireBusId = 8 [(.nanopb_test) = {
  void clear_onewirebusid();
  static const int kOneWireBusIdFieldNumber = 8;
  ::google::protobuf::uint32 onewirebusid() const;
  void set_onewirebusid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:blox.DS2413)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::blox::DS2413IoPin > pins_;
  ::google::protobuf::uint64 address_;
  bool connected_;
  ::google::protobuf::uint32 onewirebusid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DS2413_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DS2413IoPin

// .blox.IoChannel A = 1;
inline bool DS2413IoPin::has_a() const {
  return Pin_case() == kA;
}
inline void DS2413IoPin::set_has_a() {
  _oneof_case_[0] = kA;
}
inline const ::blox::IoChannel& DS2413IoPin::_internal_a() const {
  return *Pin_.a_;
}
inline ::blox::IoChannel* DS2413IoPin::release_a() {
  // @@protoc_insertion_point(field_release:blox.DS2413IoPin.A)
  if (has_a()) {
    clear_has_Pin();
      ::blox::IoChannel* temp = Pin_.a_;
    Pin_.a_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::blox::IoChannel& DS2413IoPin::a() const {
  // @@protoc_insertion_point(field_get:blox.DS2413IoPin.A)
  return has_a()
      ? *Pin_.a_
      : *reinterpret_cast< ::blox::IoChannel*>(&::blox::_IoChannel_default_instance_);
}
inline ::blox::IoChannel* DS2413IoPin::mutable_a() {
  if (!has_a()) {
    clear_Pin();
    set_has_a();
    Pin_.a_ = CreateMaybeMessage< ::blox::IoChannel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:blox.DS2413IoPin.A)
  return Pin_.a_;
}

// .blox.IoChannel B = 2;
inline bool DS2413IoPin::has_b() const {
  return Pin_case() == kB;
}
inline void DS2413IoPin::set_has_b() {
  _oneof_case_[0] = kB;
}
inline const ::blox::IoChannel& DS2413IoPin::_internal_b() const {
  return *Pin_.b_;
}
inline ::blox::IoChannel* DS2413IoPin::release_b() {
  // @@protoc_insertion_point(field_release:blox.DS2413IoPin.B)
  if (has_b()) {
    clear_has_Pin();
      ::blox::IoChannel* temp = Pin_.b_;
    Pin_.b_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::blox::IoChannel& DS2413IoPin::b() const {
  // @@protoc_insertion_point(field_get:blox.DS2413IoPin.B)
  return has_b()
      ? *Pin_.b_
      : *reinterpret_cast< ::blox::IoChannel*>(&::blox::_IoChannel_default_instance_);
}
inline ::blox::IoChannel* DS2413IoPin::mutable_b() {
  if (!has_b()) {
    clear_Pin();
    set_has_b();
    Pin_.b_ = CreateMaybeMessage< ::blox::IoChannel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:blox.DS2413IoPin.B)
  return Pin_.b_;
}

inline bool DS2413IoPin::has_Pin() const {
  return Pin_case() != PIN_NOT_SET;
}
inline void DS2413IoPin::clear_has_Pin() {
  _oneof_case_[0] = PIN_NOT_SET;
}
inline DS2413IoPin::PinCase DS2413IoPin::Pin_case() const {
  return DS2413IoPin::PinCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DS2413

// fixed64 address = 1 [(.brewblox_test) = {
inline void DS2413::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DS2413::address() const {
  // @@protoc_insertion_point(field_get:blox.DS2413.address)
  return address_;
}
inline void DS2413::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:blox.DS2413.address)
}

// bool connected = 6 [(.brewblox_test) = {
inline void DS2413::clear_connected() {
  connected_ = false;
}
inline bool DS2413::connected() const {
  // @@protoc_insertion_point(field_get:blox.DS2413.connected)
  return connected_;
}
inline void DS2413::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:blox.DS2413.connected)
}

// repeated .blox.DS2413IoPin pins = 7 [(.nanopb_test) = {
inline int DS2413::pins_size() const {
  return pins_.size();
}
inline void DS2413::clear_pins() {
  pins_.Clear();
}
inline ::blox::DS2413IoPin* DS2413::mutable_pins(int index) {
  // @@protoc_insertion_point(field_mutable:blox.DS2413.pins)
  return pins_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::blox::DS2413IoPin >*
DS2413::mutable_pins() {
  // @@protoc_insertion_point(field_mutable_list:blox.DS2413.pins)
  return &pins_;
}
inline const ::blox::DS2413IoPin& DS2413::pins(int index) const {
  // @@protoc_insertion_point(field_get:blox.DS2413.pins)
  return pins_.Get(index);
}
inline ::blox::DS2413IoPin* DS2413::add_pins() {
  // @@protoc_insertion_point(field_add:blox.DS2413.pins)
  return pins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blox::DS2413IoPin >&
DS2413::pins() const {
  // @@protoc_insertion_point(field_list:blox.DS2413.pins)
  return pins_;
}

// uint32 oneWireBusId = 8 [(.nanopb_test) = {
inline void DS2413::clear_onewirebusid() {
  onewirebusid_ = 0u;
}
inline ::google::protobuf::uint32 DS2413::onewirebusid() const {
  // @@protoc_insertion_point(field_get:blox.DS2413.oneWireBusId)
  return onewirebusid_;
}
inline void DS2413::set_onewirebusid(::google::protobuf::uint32 value) {
  
  onewirebusid_ = value;
  // @@protoc_insertion_point(field_set:blox.DS2413.oneWireBusId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DS2413_5ftest_2eproto
