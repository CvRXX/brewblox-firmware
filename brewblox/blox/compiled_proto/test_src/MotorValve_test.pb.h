// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MotorValve_test.proto

#ifndef PROTOBUF_INCLUDED_MotorValve_5ftest_2eproto
#define PROTOBUF_INCLUDED_MotorValve_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "DigitalConstraints_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MotorValve_5ftest_2eproto 

namespace protobuf_MotorValve_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MotorValve_5ftest_2eproto
namespace blox {
class MotorValve;
class MotorValveDefaultTypeInternal;
extern MotorValveDefaultTypeInternal _MotorValve_default_instance_;
}  // namespace blox
namespace google {
namespace protobuf {
template<> ::blox::MotorValve* Arena::CreateMaybeMessage<::blox::MotorValve>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox {

enum MotorValve_ValveState {
  MotorValve_ValveState_VALVE_UNKNOWN = 0,
  MotorValve_ValveState_VALVE_OPEN = 1,
  MotorValve_ValveState_VALVE_CLOSED = 2,
  MotorValve_ValveState_VALVE_OPENING = 3,
  MotorValve_ValveState_VALVE_CLOSING = 4,
  MotorValve_ValveState_VALVE_HALF_OPEN_IDLE = 5,
  MotorValve_ValveState_VALVE_INIT_IDLE = 6,
  MotorValve_ValveState_MotorValve_ValveState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MotorValve_ValveState_MotorValve_ValveState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MotorValve_ValveState_IsValid(int value);
const MotorValve_ValveState MotorValve_ValveState_ValveState_MIN = MotorValve_ValveState_VALVE_UNKNOWN;
const MotorValve_ValveState MotorValve_ValveState_ValveState_MAX = MotorValve_ValveState_VALVE_INIT_IDLE;
const int MotorValve_ValveState_ValveState_ARRAYSIZE = MotorValve_ValveState_ValveState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorValve_ValveState_descriptor();
inline const ::std::string& MotorValve_ValveState_Name(MotorValve_ValveState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorValve_ValveState_descriptor(), value);
}
inline bool MotorValve_ValveState_Parse(
    const ::std::string& name, MotorValve_ValveState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorValve_ValveState>(
    MotorValve_ValveState_descriptor(), name, value);
}
// ===================================================================

class MotorValve : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.MotorValve) */ {
 public:
  MotorValve();
  virtual ~MotorValve();

  MotorValve(const MotorValve& from);

  inline MotorValve& operator=(const MotorValve& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MotorValve(MotorValve&& from) noexcept
    : MotorValve() {
    *this = ::std::move(from);
  }

  inline MotorValve& operator=(MotorValve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorValve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotorValve* internal_default_instance() {
    return reinterpret_cast<const MotorValve*>(
               &_MotorValve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MotorValve* other);
  friend void swap(MotorValve& a, MotorValve& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotorValve* New() const final {
    return CreateMaybeMessage<MotorValve>(NULL);
  }

  MotorValve* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MotorValve>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MotorValve& from);
  void MergeFrom(const MotorValve& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorValve* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MotorValve_ValveState ValveState;
  static const ValveState VALVE_UNKNOWN =
    MotorValve_ValveState_VALVE_UNKNOWN;
  static const ValveState VALVE_OPEN =
    MotorValve_ValveState_VALVE_OPEN;
  static const ValveState VALVE_CLOSED =
    MotorValve_ValveState_VALVE_CLOSED;
  static const ValveState VALVE_OPENING =
    MotorValve_ValveState_VALVE_OPENING;
  static const ValveState VALVE_CLOSING =
    MotorValve_ValveState_VALVE_CLOSING;
  static const ValveState VALVE_HALF_OPEN_IDLE =
    MotorValve_ValveState_VALVE_HALF_OPEN_IDLE;
  static const ValveState VALVE_INIT_IDLE =
    MotorValve_ValveState_VALVE_INIT_IDLE;
  static inline bool ValveState_IsValid(int value) {
    return MotorValve_ValveState_IsValid(value);
  }
  static const ValveState ValveState_MIN =
    MotorValve_ValveState_ValveState_MIN;
  static const ValveState ValveState_MAX =
    MotorValve_ValveState_ValveState_MAX;
  static const int ValveState_ARRAYSIZE =
    MotorValve_ValveState_ValveState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValveState_descriptor() {
    return MotorValve_ValveState_descriptor();
  }
  static inline const ::std::string& ValveState_Name(ValveState value) {
    return MotorValve_ValveState_Name(value);
  }
  static inline bool ValveState_Parse(const ::std::string& name,
      ValveState* value) {
    return MotorValve_ValveState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
  int strippedfields_size() const;
  void clear_strippedfields();
  static const int kStrippedFieldsFieldNumber = 99;
  ::google::protobuf::uint32 strippedfields(int index) const;
  void set_strippedfields(int index, ::google::protobuf::uint32 value);
  void add_strippedfields(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      strippedfields() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_strippedfields();

  // .blox.DigitalConstraints constrainedBy = 5;
  bool has_constrainedby() const;
  void clear_constrainedby();
  static const int kConstrainedByFieldNumber = 5;
  private:
  const ::blox::DigitalConstraints& _internal_constrainedby() const;
  public:
  const ::blox::DigitalConstraints& constrainedby() const;
  ::blox::DigitalConstraints* release_constrainedby();
  ::blox::DigitalConstraints* mutable_constrainedby();
  void set_allocated_constrainedby(::blox::DigitalConstraints* constrainedby);

  // uint32 hwDevice = 1 [(.nanopb_test) = {
  void clear_hwdevice();
  static const int kHwDeviceFieldNumber = 1;
  ::google::protobuf::uint32 hwdevice() const;
  void set_hwdevice(::google::protobuf::uint32 value);

  // uint32 startChannel = 2 [(.nanopb_test) = {
  void clear_startchannel();
  static const int kStartChannelFieldNumber = 2;
  ::google::protobuf::uint32 startchannel() const;
  void set_startchannel(::google::protobuf::uint32 value);

  // .blox.DigitalState state = 3 [(.brewblox_test) = {
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::blox::DigitalState state() const;
  void set_state(::blox::DigitalState value);

  // .blox.MotorValve.ValveState valveState = 6 [(.brewblox_test) = {
  void clear_valvestate();
  static const int kValveStateFieldNumber = 6;
  ::blox::MotorValve_ValveState valvestate() const;
  void set_valvestate(::blox::MotorValve_ValveState value);

  // .blox.DigitalState desiredState = 7 [(.brewblox_test) = {
  void clear_desiredstate();
  static const int kDesiredStateFieldNumber = 7;
  ::blox::DigitalState desiredstate() const;
  void set_desiredstate(::blox::DigitalState value);

  // @@protoc_insertion_point(class_scope:blox.MotorValve)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > strippedfields_;
  mutable int _strippedfields_cached_byte_size_;
  ::blox::DigitalConstraints* constrainedby_;
  ::google::protobuf::uint32 hwdevice_;
  ::google::protobuf::uint32 startchannel_;
  int state_;
  int valvestate_;
  int desiredstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MotorValve_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotorValve

// uint32 hwDevice = 1 [(.nanopb_test) = {
inline void MotorValve::clear_hwdevice() {
  hwdevice_ = 0u;
}
inline ::google::protobuf::uint32 MotorValve::hwdevice() const {
  // @@protoc_insertion_point(field_get:blox.MotorValve.hwDevice)
  return hwdevice_;
}
inline void MotorValve::set_hwdevice(::google::protobuf::uint32 value) {
  
  hwdevice_ = value;
  // @@protoc_insertion_point(field_set:blox.MotorValve.hwDevice)
}

// uint32 startChannel = 2 [(.nanopb_test) = {
inline void MotorValve::clear_startchannel() {
  startchannel_ = 0u;
}
inline ::google::protobuf::uint32 MotorValve::startchannel() const {
  // @@protoc_insertion_point(field_get:blox.MotorValve.startChannel)
  return startchannel_;
}
inline void MotorValve::set_startchannel(::google::protobuf::uint32 value) {
  
  startchannel_ = value;
  // @@protoc_insertion_point(field_set:blox.MotorValve.startChannel)
}

// .blox.DigitalState state = 3 [(.brewblox_test) = {
inline void MotorValve::clear_state() {
  state_ = 0;
}
inline ::blox::DigitalState MotorValve::state() const {
  // @@protoc_insertion_point(field_get:blox.MotorValve.state)
  return static_cast< ::blox::DigitalState >(state_);
}
inline void MotorValve::set_state(::blox::DigitalState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:blox.MotorValve.state)
}

// .blox.DigitalConstraints constrainedBy = 5;
inline bool MotorValve::has_constrainedby() const {
  return this != internal_default_instance() && constrainedby_ != NULL;
}
inline const ::blox::DigitalConstraints& MotorValve::_internal_constrainedby() const {
  return *constrainedby_;
}
inline const ::blox::DigitalConstraints& MotorValve::constrainedby() const {
  const ::blox::DigitalConstraints* p = constrainedby_;
  // @@protoc_insertion_point(field_get:blox.MotorValve.constrainedBy)
  return p != NULL ? *p : *reinterpret_cast<const ::blox::DigitalConstraints*>(
      &::blox::_DigitalConstraints_default_instance_);
}
inline ::blox::DigitalConstraints* MotorValve::release_constrainedby() {
  // @@protoc_insertion_point(field_release:blox.MotorValve.constrainedBy)
  
  ::blox::DigitalConstraints* temp = constrainedby_;
  constrainedby_ = NULL;
  return temp;
}
inline ::blox::DigitalConstraints* MotorValve::mutable_constrainedby() {
  
  if (constrainedby_ == NULL) {
    auto* p = CreateMaybeMessage<::blox::DigitalConstraints>(GetArenaNoVirtual());
    constrainedby_ = p;
  }
  // @@protoc_insertion_point(field_mutable:blox.MotorValve.constrainedBy)
  return constrainedby_;
}
inline void MotorValve::set_allocated_constrainedby(::blox::DigitalConstraints* constrainedby) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(constrainedby_);
  }
  if (constrainedby) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      constrainedby = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constrainedby, submessage_arena);
    }
    
  } else {
    
  }
  constrainedby_ = constrainedby;
  // @@protoc_insertion_point(field_set_allocated:blox.MotorValve.constrainedBy)
}

// .blox.MotorValve.ValveState valveState = 6 [(.brewblox_test) = {
inline void MotorValve::clear_valvestate() {
  valvestate_ = 0;
}
inline ::blox::MotorValve_ValveState MotorValve::valvestate() const {
  // @@protoc_insertion_point(field_get:blox.MotorValve.valveState)
  return static_cast< ::blox::MotorValve_ValveState >(valvestate_);
}
inline void MotorValve::set_valvestate(::blox::MotorValve_ValveState value) {
  
  valvestate_ = value;
  // @@protoc_insertion_point(field_set:blox.MotorValve.valveState)
}

// .blox.DigitalState desiredState = 7 [(.brewblox_test) = {
inline void MotorValve::clear_desiredstate() {
  desiredstate_ = 0;
}
inline ::blox::DigitalState MotorValve::desiredstate() const {
  // @@protoc_insertion_point(field_get:blox.MotorValve.desiredState)
  return static_cast< ::blox::DigitalState >(desiredstate_);
}
inline void MotorValve::set_desiredstate(::blox::DigitalState value) {
  
  desiredstate_ = value;
  // @@protoc_insertion_point(field_set:blox.MotorValve.desiredState)
}

// repeated uint32 strippedFields = 99 [(.nanopb_test) = {
inline int MotorValve::strippedfields_size() const {
  return strippedfields_.size();
}
inline void MotorValve::clear_strippedfields() {
  strippedfields_.Clear();
}
inline ::google::protobuf::uint32 MotorValve::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox.MotorValve.strippedFields)
  return strippedfields_.Get(index);
}
inline void MotorValve::set_strippedfields(int index, ::google::protobuf::uint32 value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox.MotorValve.strippedFields)
}
inline void MotorValve::add_strippedfields(::google::protobuf::uint32 value) {
  strippedfields_.Add(value);
  // @@protoc_insertion_point(field_add:blox.MotorValve.strippedFields)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MotorValve::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox.MotorValve.strippedFields)
  return strippedfields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MotorValve::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox.MotorValve.strippedFields)
  return &strippedfields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blox::MotorValve_ValveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::MotorValve_ValveState>() {
  return ::blox::MotorValve_ValveState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MotorValve_5ftest_2eproto
