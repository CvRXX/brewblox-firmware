// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorLogic_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActuatorLogic_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActuatorLogic_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActuatorLogic_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActuatorLogic_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorLogic_5ftest_2eproto;
namespace blox {
class ActuatorLogic;
struct ActuatorLogicDefaultTypeInternal;
extern ActuatorLogicDefaultTypeInternal _ActuatorLogic_default_instance_;
class AnalogCompare;
struct AnalogCompareDefaultTypeInternal;
extern AnalogCompareDefaultTypeInternal _AnalogCompare_default_instance_;
class Compare;
struct CompareDefaultTypeInternal;
extern CompareDefaultTypeInternal _Compare_default_instance_;
class DigitalCompare;
struct DigitalCompareDefaultTypeInternal;
extern DigitalCompareDefaultTypeInternal _DigitalCompare_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::ActuatorLogic* Arena::CreateMaybeMessage<::blox::ActuatorLogic>(Arena*);
template<> ::blox::AnalogCompare* Arena::CreateMaybeMessage<::blox::AnalogCompare>(Arena*);
template<> ::blox::Compare* Arena::CreateMaybeMessage<::blox::Compare>(Arena*);
template<> ::blox::DigitalCompare* Arena::CreateMaybeMessage<::blox::DigitalCompare>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

enum Compare_Result : int {
  Compare_Result_RESULT_FALSE = 0,
  Compare_Result_RESULT_TRUE = 1,
  Compare_Result_RESULT_EMPTY = 2,
  Compare_Result_RESULT_EMPTY_SUBSTRING = 3,
  Compare_Result_RESULT_BLOCK_NOT_FOUND = 4,
  Compare_Result_RESULT_INVALID_DIGITAL_OP = 5,
  Compare_Result_RESULT_INVALID_ANALOG_OP = 6,
  Compare_Result_RESULT_UNDEFINED_DIGITAL_COMPARE = 8,
  Compare_Result_RESULT_UNDEFINED_ANALOG_COMPARE = 7,
  Compare_Result_RESULT_UNEXPECTED_OPEN_BRACKET = 11,
  Compare_Result_RESULT_UNEXPECTED_CLOSE_BRACKET = 9,
  Compare_Result_RESULT_UNEXPECTED_CHARACTER = 12,
  Compare_Result_RESULT_UNEXPECTED_COMPARISON = 13,
  Compare_Result_RESULT_UNEXPECTED_OPERATOR = 14,
  Compare_Result_RESULT_MISSING_CLOSE_BRACKET = 10,
  Compare_Result_Compare_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Compare_Result_Compare_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Compare_Result_IsValid(int value);
constexpr Compare_Result Compare_Result_Result_MIN = Compare_Result_RESULT_FALSE;
constexpr Compare_Result Compare_Result_Result_MAX = Compare_Result_RESULT_UNEXPECTED_OPERATOR;
constexpr int Compare_Result_Result_ARRAYSIZE = Compare_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_Result_descriptor();
template<typename T>
inline const std::string& Compare_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Compare_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Compare_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Compare_Result_descriptor(), enum_t_value);
}
inline bool Compare_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Compare_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Compare_Result>(
    Compare_Result_descriptor(), name, value);
}
enum Compare_DigitalOperator : int {
  Compare_DigitalOperator_OP_VALUE_IS = 0,
  Compare_DigitalOperator_OP_VALUE_IS_NOT = 1,
  Compare_DigitalOperator_OP_DESIRED_IS = 10,
  Compare_DigitalOperator_OP_DESIRED_IS_NOT = 11,
  Compare_DigitalOperator_Compare_DigitalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Compare_DigitalOperator_Compare_DigitalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Compare_DigitalOperator_IsValid(int value);
constexpr Compare_DigitalOperator Compare_DigitalOperator_DigitalOperator_MIN = Compare_DigitalOperator_OP_VALUE_IS;
constexpr Compare_DigitalOperator Compare_DigitalOperator_DigitalOperator_MAX = Compare_DigitalOperator_OP_DESIRED_IS_NOT;
constexpr int Compare_DigitalOperator_DigitalOperator_ARRAYSIZE = Compare_DigitalOperator_DigitalOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_DigitalOperator_descriptor();
template<typename T>
inline const std::string& Compare_DigitalOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Compare_DigitalOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Compare_DigitalOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Compare_DigitalOperator_descriptor(), enum_t_value);
}
inline bool Compare_DigitalOperator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Compare_DigitalOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Compare_DigitalOperator>(
    Compare_DigitalOperator_descriptor(), name, value);
}
enum Compare_AnalogOperator : int {
  Compare_AnalogOperator_OP_VALUE_LE = 0,
  Compare_AnalogOperator_OP_VALUE_GE = 1,
  Compare_AnalogOperator_OP_SETTING_LE = 10,
  Compare_AnalogOperator_OP_SETTING_GE = 11,
  Compare_AnalogOperator_Compare_AnalogOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Compare_AnalogOperator_Compare_AnalogOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Compare_AnalogOperator_IsValid(int value);
constexpr Compare_AnalogOperator Compare_AnalogOperator_AnalogOperator_MIN = Compare_AnalogOperator_OP_VALUE_LE;
constexpr Compare_AnalogOperator Compare_AnalogOperator_AnalogOperator_MAX = Compare_AnalogOperator_OP_SETTING_GE;
constexpr int Compare_AnalogOperator_AnalogOperator_ARRAYSIZE = Compare_AnalogOperator_AnalogOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_AnalogOperator_descriptor();
template<typename T>
inline const std::string& Compare_AnalogOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Compare_AnalogOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Compare_AnalogOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Compare_AnalogOperator_descriptor(), enum_t_value);
}
inline bool Compare_AnalogOperator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Compare_AnalogOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Compare_AnalogOperator>(
    Compare_AnalogOperator_descriptor(), name, value);
}
// ===================================================================

class Compare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.Compare) */ {
 public:
  inline Compare() : Compare(nullptr) {}
  ~Compare() override;
  explicit constexpr Compare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Compare(const Compare& from);
  Compare(Compare&& from) noexcept
    : Compare() {
    *this = ::std::move(from);
  }

  inline Compare& operator=(const Compare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Compare& operator=(Compare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Compare& default_instance() {
    return *internal_default_instance();
  }
  static inline const Compare* internal_default_instance() {
    return reinterpret_cast<const Compare*>(
               &_Compare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Compare& a, Compare& b) {
    a.Swap(&b);
  }
  inline void Swap(Compare* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Compare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Compare* New() const final {
    return new Compare();
  }

  Compare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Compare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Compare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Compare& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Compare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.Compare";
  }
  protected:
  explicit Compare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Compare_Result Result;
  static constexpr Result RESULT_FALSE =
    Compare_Result_RESULT_FALSE;
  static constexpr Result RESULT_TRUE =
    Compare_Result_RESULT_TRUE;
  static constexpr Result RESULT_EMPTY =
    Compare_Result_RESULT_EMPTY;
  static constexpr Result RESULT_EMPTY_SUBSTRING =
    Compare_Result_RESULT_EMPTY_SUBSTRING;
  static constexpr Result RESULT_BLOCK_NOT_FOUND =
    Compare_Result_RESULT_BLOCK_NOT_FOUND;
  static constexpr Result RESULT_INVALID_DIGITAL_OP =
    Compare_Result_RESULT_INVALID_DIGITAL_OP;
  static constexpr Result RESULT_INVALID_ANALOG_OP =
    Compare_Result_RESULT_INVALID_ANALOG_OP;
  static constexpr Result RESULT_UNDEFINED_DIGITAL_COMPARE =
    Compare_Result_RESULT_UNDEFINED_DIGITAL_COMPARE;
  static constexpr Result RESULT_UNDEFINED_ANALOG_COMPARE =
    Compare_Result_RESULT_UNDEFINED_ANALOG_COMPARE;
  static constexpr Result RESULT_UNEXPECTED_OPEN_BRACKET =
    Compare_Result_RESULT_UNEXPECTED_OPEN_BRACKET;
  static constexpr Result RESULT_UNEXPECTED_CLOSE_BRACKET =
    Compare_Result_RESULT_UNEXPECTED_CLOSE_BRACKET;
  static constexpr Result RESULT_UNEXPECTED_CHARACTER =
    Compare_Result_RESULT_UNEXPECTED_CHARACTER;
  static constexpr Result RESULT_UNEXPECTED_COMPARISON =
    Compare_Result_RESULT_UNEXPECTED_COMPARISON;
  static constexpr Result RESULT_UNEXPECTED_OPERATOR =
    Compare_Result_RESULT_UNEXPECTED_OPERATOR;
  static constexpr Result RESULT_MISSING_CLOSE_BRACKET =
    Compare_Result_RESULT_MISSING_CLOSE_BRACKET;
  static inline bool Result_IsValid(int value) {
    return Compare_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    Compare_Result_Result_MIN;
  static constexpr Result Result_MAX =
    Compare_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    Compare_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return Compare_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return Compare_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return Compare_Result_Parse(name, value);
  }

  typedef Compare_DigitalOperator DigitalOperator;
  static constexpr DigitalOperator OP_VALUE_IS =
    Compare_DigitalOperator_OP_VALUE_IS;
  static constexpr DigitalOperator OP_VALUE_IS_NOT =
    Compare_DigitalOperator_OP_VALUE_IS_NOT;
  static constexpr DigitalOperator OP_DESIRED_IS =
    Compare_DigitalOperator_OP_DESIRED_IS;
  static constexpr DigitalOperator OP_DESIRED_IS_NOT =
    Compare_DigitalOperator_OP_DESIRED_IS_NOT;
  static inline bool DigitalOperator_IsValid(int value) {
    return Compare_DigitalOperator_IsValid(value);
  }
  static constexpr DigitalOperator DigitalOperator_MIN =
    Compare_DigitalOperator_DigitalOperator_MIN;
  static constexpr DigitalOperator DigitalOperator_MAX =
    Compare_DigitalOperator_DigitalOperator_MAX;
  static constexpr int DigitalOperator_ARRAYSIZE =
    Compare_DigitalOperator_DigitalOperator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DigitalOperator_descriptor() {
    return Compare_DigitalOperator_descriptor();
  }
  template<typename T>
  static inline const std::string& DigitalOperator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DigitalOperator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DigitalOperator_Name.");
    return Compare_DigitalOperator_Name(enum_t_value);
  }
  static inline bool DigitalOperator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DigitalOperator* value) {
    return Compare_DigitalOperator_Parse(name, value);
  }

  typedef Compare_AnalogOperator AnalogOperator;
  static constexpr AnalogOperator OP_VALUE_LE =
    Compare_AnalogOperator_OP_VALUE_LE;
  static constexpr AnalogOperator OP_VALUE_GE =
    Compare_AnalogOperator_OP_VALUE_GE;
  static constexpr AnalogOperator OP_SETTING_LE =
    Compare_AnalogOperator_OP_SETTING_LE;
  static constexpr AnalogOperator OP_SETTING_GE =
    Compare_AnalogOperator_OP_SETTING_GE;
  static inline bool AnalogOperator_IsValid(int value) {
    return Compare_AnalogOperator_IsValid(value);
  }
  static constexpr AnalogOperator AnalogOperator_MIN =
    Compare_AnalogOperator_AnalogOperator_MIN;
  static constexpr AnalogOperator AnalogOperator_MAX =
    Compare_AnalogOperator_AnalogOperator_MAX;
  static constexpr int AnalogOperator_ARRAYSIZE =
    Compare_AnalogOperator_AnalogOperator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AnalogOperator_descriptor() {
    return Compare_AnalogOperator_descriptor();
  }
  template<typename T>
  static inline const std::string& AnalogOperator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AnalogOperator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AnalogOperator_Name.");
    return Compare_AnalogOperator_Name(enum_t_value);
  }
  static inline bool AnalogOperator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AnalogOperator* value) {
    return Compare_AnalogOperator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blox.Compare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorLogic_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DigitalCompare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.DigitalCompare) */ {
 public:
  inline DigitalCompare() : DigitalCompare(nullptr) {}
  ~DigitalCompare() override;
  explicit constexpr DigitalCompare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalCompare(const DigitalCompare& from);
  DigitalCompare(DigitalCompare&& from) noexcept
    : DigitalCompare() {
    *this = ::std::move(from);
  }

  inline DigitalCompare& operator=(const DigitalCompare& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalCompare& operator=(DigitalCompare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalCompare& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalCompare* internal_default_instance() {
    return reinterpret_cast<const DigitalCompare*>(
               &_DigitalCompare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DigitalCompare& a, DigitalCompare& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalCompare* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalCompare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalCompare* New() const final {
    return new DigitalCompare();
  }

  DigitalCompare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalCompare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalCompare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DigitalCompare& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalCompare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.DigitalCompare";
  }
  protected:
  explicit DigitalCompare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kResultFieldNumber = 2,
    kIdFieldNumber = 3,
    kRhsFieldNumber = 4,
  };
  // .blox.Compare.DigitalOperator op = 1;
  void clear_op();
  ::blox::Compare_DigitalOperator op() const;
  void set_op(::blox::Compare_DigitalOperator value);
  private:
  ::blox::Compare_DigitalOperator _internal_op() const;
  void _internal_set_op(::blox::Compare_DigitalOperator value);
  public:

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  void clear_result();
  ::blox::Compare_Result result() const;
  void set_result(::blox::Compare_Result value);
  private:
  ::blox::Compare_Result _internal_result() const;
  void _internal_set_result(::blox::Compare_Result value);
  public:

  // uint32 id = 3 [(.nanopb_test) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .blox.DigitalState rhs = 4;
  void clear_rhs();
  ::blox::DigitalState rhs() const;
  void set_rhs(::blox::DigitalState value);
  private:
  ::blox::DigitalState _internal_rhs() const;
  void _internal_set_rhs(::blox::DigitalState value);
  public:

  // @@protoc_insertion_point(class_scope:blox.DigitalCompare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int op_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int rhs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorLogic_5ftest_2eproto;
};
// -------------------------------------------------------------------

class AnalogCompare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.AnalogCompare) */ {
 public:
  inline AnalogCompare() : AnalogCompare(nullptr) {}
  ~AnalogCompare() override;
  explicit constexpr AnalogCompare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogCompare(const AnalogCompare& from);
  AnalogCompare(AnalogCompare&& from) noexcept
    : AnalogCompare() {
    *this = ::std::move(from);
  }

  inline AnalogCompare& operator=(const AnalogCompare& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogCompare& operator=(AnalogCompare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogCompare& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogCompare* internal_default_instance() {
    return reinterpret_cast<const AnalogCompare*>(
               &_AnalogCompare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnalogCompare& a, AnalogCompare& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogCompare* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogCompare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogCompare* New() const final {
    return new AnalogCompare();
  }

  AnalogCompare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogCompare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalogCompare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnalogCompare& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogCompare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.AnalogCompare";
  }
  protected:
  explicit AnalogCompare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kResultFieldNumber = 2,
    kIdFieldNumber = 3,
    kRhsFieldNumber = 4,
  };
  // .blox.Compare.AnalogOperator op = 1;
  void clear_op();
  ::blox::Compare_AnalogOperator op() const;
  void set_op(::blox::Compare_AnalogOperator value);
  private:
  ::blox::Compare_AnalogOperator _internal_op() const;
  void _internal_set_op(::blox::Compare_AnalogOperator value);
  public:

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  void clear_result();
  ::blox::Compare_Result result() const;
  void set_result(::blox::Compare_Result value);
  private:
  ::blox::Compare_Result _internal_result() const;
  void _internal_set_result(::blox::Compare_Result value);
  public:

  // uint32 id = 3 [(.nanopb_test) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 rhs = 4 [(.nanopb_test) = {
  void clear_rhs();
  ::PROTOBUF_NAMESPACE_ID::int32 rhs() const;
  void set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rhs() const;
  void _internal_set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.AnalogCompare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int op_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rhs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorLogic_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ActuatorLogic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.ActuatorLogic) */ {
 public:
  inline ActuatorLogic() : ActuatorLogic(nullptr) {}
  ~ActuatorLogic() override;
  explicit constexpr ActuatorLogic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorLogic(const ActuatorLogic& from);
  ActuatorLogic(ActuatorLogic&& from) noexcept
    : ActuatorLogic() {
    *this = ::std::move(from);
  }

  inline ActuatorLogic& operator=(const ActuatorLogic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorLogic& operator=(ActuatorLogic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorLogic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorLogic* internal_default_instance() {
    return reinterpret_cast<const ActuatorLogic*>(
               &_ActuatorLogic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActuatorLogic& a, ActuatorLogic& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorLogic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorLogic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorLogic* New() const final {
    return new ActuatorLogic();
  }

  ActuatorLogic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorLogic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorLogic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorLogic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorLogic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.ActuatorLogic";
  }
  protected:
  explicit ActuatorLogic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigitalFieldNumber = 6,
    kAnalogFieldNumber = 7,
    kExpressionFieldNumber = 5,
    kTargetIdFieldNumber = 1,
    kDrivenTargetIdFieldNumber = 2,
    kEnabledFieldNumber = 3,
    kResultFieldNumber = 4,
    kErrorPosFieldNumber = 8,
  };
  // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
  int digital_size() const;
  private:
  int _internal_digital_size() const;
  public:
  void clear_digital();
  ::blox::DigitalCompare* mutable_digital(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalCompare >*
      mutable_digital();
  private:
  const ::blox::DigitalCompare& _internal_digital(int index) const;
  ::blox::DigitalCompare* _internal_add_digital();
  public:
  const ::blox::DigitalCompare& digital(int index) const;
  ::blox::DigitalCompare* add_digital();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalCompare >&
      digital() const;

  // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
  int analog_size() const;
  private:
  int _internal_analog_size() const;
  public:
  void clear_analog();
  ::blox::AnalogCompare* mutable_analog(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogCompare >*
      mutable_analog();
  private:
  const ::blox::AnalogCompare& _internal_analog(int index) const;
  ::blox::AnalogCompare* _internal_add_analog();
  public:
  const ::blox::AnalogCompare& analog(int index) const;
  ::blox::AnalogCompare* add_analog();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogCompare >&
      analog() const;

  // string expression = 5 [(.nanopb_test) = {
  void clear_expression();
  const std::string& expression() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expression(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expression();
  PROTOBUF_MUST_USE_RESULT std::string* release_expression();
  void set_allocated_expression(std::string* expression);
  private:
  const std::string& _internal_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expression(const std::string& value);
  std::string* _internal_mutable_expression();
  public:

  // uint32 targetId = 1 [(.nanopb_test) = {
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 drivenTargetId = 2 [(.nanopb_test) = {
  void clear_driventargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 driventargetid() const;
  void set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_driventargetid() const;
  void _internal_set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enabled = 3;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .blox.Compare.Result result = 4 [(.brewblox_test) = {
  void clear_result();
  ::blox::Compare_Result result() const;
  void set_result(::blox::Compare_Result value);
  private:
  ::blox::Compare_Result _internal_result() const;
  void _internal_set_result(::blox::Compare_Result value);
  public:

  // uint32 errorPos = 8 [(.nanopb_test) = {
  void clear_errorpos();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorpos() const;
  void set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorpos() const;
  void _internal_set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.ActuatorLogic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalCompare > digital_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogCompare > analog_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expression_;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driventargetid_;
  bool enabled_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorpos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorLogic_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Compare

// -------------------------------------------------------------------

// DigitalCompare

// .blox.Compare.DigitalOperator op = 1;
inline void DigitalCompare::clear_op() {
  op_ = 0;
}
inline ::blox::Compare_DigitalOperator DigitalCompare::_internal_op() const {
  return static_cast< ::blox::Compare_DigitalOperator >(op_);
}
inline ::blox::Compare_DigitalOperator DigitalCompare::op() const {
  // @@protoc_insertion_point(field_get:blox.DigitalCompare.op)
  return _internal_op();
}
inline void DigitalCompare::_internal_set_op(::blox::Compare_DigitalOperator value) {
  
  op_ = value;
}
inline void DigitalCompare::set_op(::blox::Compare_DigitalOperator value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:blox.DigitalCompare.op)
}

// .blox.Compare.Result result = 2 [(.brewblox_test) = {
inline void DigitalCompare::clear_result() {
  result_ = 0;
}
inline ::blox::Compare_Result DigitalCompare::_internal_result() const {
  return static_cast< ::blox::Compare_Result >(result_);
}
inline ::blox::Compare_Result DigitalCompare::result() const {
  // @@protoc_insertion_point(field_get:blox.DigitalCompare.result)
  return _internal_result();
}
inline void DigitalCompare::_internal_set_result(::blox::Compare_Result value) {
  
  result_ = value;
}
inline void DigitalCompare::set_result(::blox::Compare_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:blox.DigitalCompare.result)
}

// uint32 id = 3 [(.nanopb_test) = {
inline void DigitalCompare::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCompare::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCompare::id() const {
  // @@protoc_insertion_point(field_get:blox.DigitalCompare.id)
  return _internal_id();
}
inline void DigitalCompare::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DigitalCompare::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox.DigitalCompare.id)
}

// .blox.DigitalState rhs = 4;
inline void DigitalCompare::clear_rhs() {
  rhs_ = 0;
}
inline ::blox::DigitalState DigitalCompare::_internal_rhs() const {
  return static_cast< ::blox::DigitalState >(rhs_);
}
inline ::blox::DigitalState DigitalCompare::rhs() const {
  // @@protoc_insertion_point(field_get:blox.DigitalCompare.rhs)
  return _internal_rhs();
}
inline void DigitalCompare::_internal_set_rhs(::blox::DigitalState value) {
  
  rhs_ = value;
}
inline void DigitalCompare::set_rhs(::blox::DigitalState value) {
  _internal_set_rhs(value);
  // @@protoc_insertion_point(field_set:blox.DigitalCompare.rhs)
}

// -------------------------------------------------------------------

// AnalogCompare

// .blox.Compare.AnalogOperator op = 1;
inline void AnalogCompare::clear_op() {
  op_ = 0;
}
inline ::blox::Compare_AnalogOperator AnalogCompare::_internal_op() const {
  return static_cast< ::blox::Compare_AnalogOperator >(op_);
}
inline ::blox::Compare_AnalogOperator AnalogCompare::op() const {
  // @@protoc_insertion_point(field_get:blox.AnalogCompare.op)
  return _internal_op();
}
inline void AnalogCompare::_internal_set_op(::blox::Compare_AnalogOperator value) {
  
  op_ = value;
}
inline void AnalogCompare::set_op(::blox::Compare_AnalogOperator value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:blox.AnalogCompare.op)
}

// .blox.Compare.Result result = 2 [(.brewblox_test) = {
inline void AnalogCompare::clear_result() {
  result_ = 0;
}
inline ::blox::Compare_Result AnalogCompare::_internal_result() const {
  return static_cast< ::blox::Compare_Result >(result_);
}
inline ::blox::Compare_Result AnalogCompare::result() const {
  // @@protoc_insertion_point(field_get:blox.AnalogCompare.result)
  return _internal_result();
}
inline void AnalogCompare::_internal_set_result(::blox::Compare_Result value) {
  
  result_ = value;
}
inline void AnalogCompare::set_result(::blox::Compare_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:blox.AnalogCompare.result)
}

// uint32 id = 3 [(.nanopb_test) = {
inline void AnalogCompare::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCompare::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCompare::id() const {
  // @@protoc_insertion_point(field_get:blox.AnalogCompare.id)
  return _internal_id();
}
inline void AnalogCompare::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void AnalogCompare::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox.AnalogCompare.id)
}

// sint32 rhs = 4 [(.nanopb_test) = {
inline void AnalogCompare::clear_rhs() {
  rhs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogCompare::_internal_rhs() const {
  return rhs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogCompare::rhs() const {
  // @@protoc_insertion_point(field_get:blox.AnalogCompare.rhs)
  return _internal_rhs();
}
inline void AnalogCompare::_internal_set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rhs_ = value;
}
inline void AnalogCompare::set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rhs(value);
  // @@protoc_insertion_point(field_set:blox.AnalogCompare.rhs)
}

// -------------------------------------------------------------------

// ActuatorLogic

// uint32 targetId = 1 [(.nanopb_test) = {
inline void ActuatorLogic::clear_targetid() {
  targetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorLogic::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorLogic::targetid() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.targetId)
  return _internal_targetid();
}
inline void ActuatorLogic::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  targetid_ = value;
}
inline void ActuatorLogic::set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorLogic.targetId)
}

// uint32 drivenTargetId = 2 [(.nanopb_test) = {
inline void ActuatorLogic::clear_driventargetid() {
  driventargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorLogic::_internal_driventargetid() const {
  return driventargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorLogic::driventargetid() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.drivenTargetId)
  return _internal_driventargetid();
}
inline void ActuatorLogic::_internal_set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driventargetid_ = value;
}
inline void ActuatorLogic::set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_driventargetid(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorLogic.drivenTargetId)
}

// bool enabled = 3;
inline void ActuatorLogic::clear_enabled() {
  enabled_ = false;
}
inline bool ActuatorLogic::_internal_enabled() const {
  return enabled_;
}
inline bool ActuatorLogic::enabled() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.enabled)
  return _internal_enabled();
}
inline void ActuatorLogic::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void ActuatorLogic::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorLogic.enabled)
}

// .blox.Compare.Result result = 4 [(.brewblox_test) = {
inline void ActuatorLogic::clear_result() {
  result_ = 0;
}
inline ::blox::Compare_Result ActuatorLogic::_internal_result() const {
  return static_cast< ::blox::Compare_Result >(result_);
}
inline ::blox::Compare_Result ActuatorLogic::result() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.result)
  return _internal_result();
}
inline void ActuatorLogic::_internal_set_result(::blox::Compare_Result value) {
  
  result_ = value;
}
inline void ActuatorLogic::set_result(::blox::Compare_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorLogic.result)
}

// string expression = 5 [(.nanopb_test) = {
inline void ActuatorLogic::clear_expression() {
  expression_.ClearToEmpty();
}
inline const std::string& ActuatorLogic::expression() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.expression)
  return _internal_expression();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActuatorLogic::set_expression(ArgT0&& arg0, ArgT... args) {
 
 expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox.ActuatorLogic.expression)
}
inline std::string* ActuatorLogic::mutable_expression() {
  std::string* _s = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:blox.ActuatorLogic.expression)
  return _s;
}
inline const std::string& ActuatorLogic::_internal_expression() const {
  return expression_.Get();
}
inline void ActuatorLogic::_internal_set_expression(const std::string& value) {
  
  expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActuatorLogic::_internal_mutable_expression() {
  
  return expression_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActuatorLogic::release_expression() {
  // @@protoc_insertion_point(field_release:blox.ActuatorLogic.expression)
  return expression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActuatorLogic::set_allocated_expression(std::string* expression) {
  if (expression != nullptr) {
    
  } else {
    
  }
  expression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expression,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blox.ActuatorLogic.expression)
}

// repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
inline int ActuatorLogic::_internal_digital_size() const {
  return digital_.size();
}
inline int ActuatorLogic::digital_size() const {
  return _internal_digital_size();
}
inline void ActuatorLogic::clear_digital() {
  digital_.Clear();
}
inline ::blox::DigitalCompare* ActuatorLogic::mutable_digital(int index) {
  // @@protoc_insertion_point(field_mutable:blox.ActuatorLogic.digital)
  return digital_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalCompare >*
ActuatorLogic::mutable_digital() {
  // @@protoc_insertion_point(field_mutable_list:blox.ActuatorLogic.digital)
  return &digital_;
}
inline const ::blox::DigitalCompare& ActuatorLogic::_internal_digital(int index) const {
  return digital_.Get(index);
}
inline const ::blox::DigitalCompare& ActuatorLogic::digital(int index) const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.digital)
  return _internal_digital(index);
}
inline ::blox::DigitalCompare* ActuatorLogic::_internal_add_digital() {
  return digital_.Add();
}
inline ::blox::DigitalCompare* ActuatorLogic::add_digital() {
  ::blox::DigitalCompare* _add = _internal_add_digital();
  // @@protoc_insertion_point(field_add:blox.ActuatorLogic.digital)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalCompare >&
ActuatorLogic::digital() const {
  // @@protoc_insertion_point(field_list:blox.ActuatorLogic.digital)
  return digital_;
}

// repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
inline int ActuatorLogic::_internal_analog_size() const {
  return analog_.size();
}
inline int ActuatorLogic::analog_size() const {
  return _internal_analog_size();
}
inline void ActuatorLogic::clear_analog() {
  analog_.Clear();
}
inline ::blox::AnalogCompare* ActuatorLogic::mutable_analog(int index) {
  // @@protoc_insertion_point(field_mutable:blox.ActuatorLogic.analog)
  return analog_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogCompare >*
ActuatorLogic::mutable_analog() {
  // @@protoc_insertion_point(field_mutable_list:blox.ActuatorLogic.analog)
  return &analog_;
}
inline const ::blox::AnalogCompare& ActuatorLogic::_internal_analog(int index) const {
  return analog_.Get(index);
}
inline const ::blox::AnalogCompare& ActuatorLogic::analog(int index) const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.analog)
  return _internal_analog(index);
}
inline ::blox::AnalogCompare* ActuatorLogic::_internal_add_analog() {
  return analog_.Add();
}
inline ::blox::AnalogCompare* ActuatorLogic::add_analog() {
  ::blox::AnalogCompare* _add = _internal_add_analog();
  // @@protoc_insertion_point(field_add:blox.ActuatorLogic.analog)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogCompare >&
ActuatorLogic::analog() const {
  // @@protoc_insertion_point(field_list:blox.ActuatorLogic.analog)
  return analog_;
}

// uint32 errorPos = 8 [(.nanopb_test) = {
inline void ActuatorLogic::clear_errorpos() {
  errorpos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorLogic::_internal_errorpos() const {
  return errorpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorLogic::errorpos() const {
  // @@protoc_insertion_point(field_get:blox.ActuatorLogic.errorPos)
  return _internal_errorpos();
}
inline void ActuatorLogic::_internal_set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errorpos_ = value;
}
inline void ActuatorLogic::set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorpos(value);
  // @@protoc_insertion_point(field_set:blox.ActuatorLogic.errorPos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox::Compare_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Compare_Result>() {
  return ::blox::Compare_Result_descriptor();
}
template <> struct is_proto_enum< ::blox::Compare_DigitalOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Compare_DigitalOperator>() {
  return ::blox::Compare_DigitalOperator_descriptor();
}
template <> struct is_proto_enum< ::blox::Compare_AnalogOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Compare_AnalogOperator>() {
  return ::blox::Compare_AnalogOperator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActuatorLogic_5ftest_2eproto
