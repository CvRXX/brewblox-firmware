// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorLogic_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActuatorLogic_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActuatorLogic_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActuatorLogic_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActuatorLogic_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorLogic_5ftest_2eproto;
namespace blox_test {
namespace ActuatorLogic {
class AnalogCompare;
class AnalogCompareDefaultTypeInternal;
extern AnalogCompareDefaultTypeInternal _AnalogCompare_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class DigitalCompare;
class DigitalCompareDefaultTypeInternal;
extern DigitalCompareDefaultTypeInternal _DigitalCompare_default_instance_;
}  // namespace ActuatorLogic
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::ActuatorLogic::AnalogCompare* Arena::CreateMaybeMessage<::blox_test::ActuatorLogic::AnalogCompare>(Arena*);
template<> ::blox_test::ActuatorLogic::Block* Arena::CreateMaybeMessage<::blox_test::ActuatorLogic::Block>(Arena*);
template<> ::blox_test::ActuatorLogic::DigitalCompare* Arena::CreateMaybeMessage<::blox_test::ActuatorLogic::DigitalCompare>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace ActuatorLogic {

enum Result : int {
  RESULT_FALSE = 0,
  RESULT_TRUE = 1,
  RESULT_EMPTY = 2,
  RESULT_EMPTY_SUBSTRING = 3,
  RESULT_BLOCK_NOT_FOUND = 4,
  RESULT_INVALID_DIGITAL_OP = 5,
  RESULT_INVALID_ANALOG_OP = 6,
  RESULT_UNDEFINED_DIGITAL_COMPARE = 8,
  RESULT_UNDEFINED_ANALOG_COMPARE = 7,
  RESULT_UNEXPECTED_OPEN_BRACKET = 11,
  RESULT_UNEXPECTED_CLOSE_BRACKET = 9,
  RESULT_UNEXPECTED_CHARACTER = 12,
  RESULT_UNEXPECTED_COMPARISON = 13,
  RESULT_UNEXPECTED_OPERATOR = 14,
  RESULT_MISSING_CLOSE_BRACKET = 10,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Result_IsValid(int value);
constexpr Result Result_MIN = RESULT_FALSE;
constexpr Result Result_MAX = RESULT_UNEXPECTED_OPERATOR;
constexpr int Result_ARRAYSIZE = Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor();
template<typename T>
inline const std::string& Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_descriptor(), enum_t_value);
}
inline bool Result_Parse(
    const std::string& name, Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
enum DigitalOperator : int {
  OP_VALUE_IS = 0,
  OP_VALUE_IS_NOT = 1,
  OP_DESIRED_IS = 10,
  OP_DESIRED_IS_NOT = 11,
  DigitalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DigitalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DigitalOperator_IsValid(int value);
constexpr DigitalOperator DigitalOperator_MIN = OP_VALUE_IS;
constexpr DigitalOperator DigitalOperator_MAX = OP_DESIRED_IS_NOT;
constexpr int DigitalOperator_ARRAYSIZE = DigitalOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DigitalOperator_descriptor();
template<typename T>
inline const std::string& DigitalOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DigitalOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DigitalOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DigitalOperator_descriptor(), enum_t_value);
}
inline bool DigitalOperator_Parse(
    const std::string& name, DigitalOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DigitalOperator>(
    DigitalOperator_descriptor(), name, value);
}
enum AnalogOperator : int {
  OP_VALUE_LE = 0,
  OP_VALUE_GE = 1,
  OP_SETTING_LE = 10,
  OP_SETTING_GE = 11,
  AnalogOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnalogOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnalogOperator_IsValid(int value);
constexpr AnalogOperator AnalogOperator_MIN = OP_VALUE_LE;
constexpr AnalogOperator AnalogOperator_MAX = OP_SETTING_GE;
constexpr int AnalogOperator_ARRAYSIZE = AnalogOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalogOperator_descriptor();
template<typename T>
inline const std::string& AnalogOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnalogOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnalogOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnalogOperator_descriptor(), enum_t_value);
}
inline bool AnalogOperator_Parse(
    const std::string& name, AnalogOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnalogOperator>(
    AnalogOperator_descriptor(), name, value);
}
// ===================================================================

class DigitalCompare PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.ActuatorLogic.DigitalCompare) */ {
 public:
  inline DigitalCompare() : DigitalCompare(nullptr) {};
  virtual ~DigitalCompare();

  DigitalCompare(const DigitalCompare& from);
  DigitalCompare(DigitalCompare&& from) noexcept
    : DigitalCompare() {
    *this = ::std::move(from);
  }

  inline DigitalCompare& operator=(const DigitalCompare& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalCompare& operator=(DigitalCompare&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalCompare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalCompare* internal_default_instance() {
    return reinterpret_cast<const DigitalCompare*>(
               &_DigitalCompare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DigitalCompare& a, DigitalCompare& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalCompare* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalCompare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalCompare* New() const final {
    return CreateMaybeMessage<DigitalCompare>(nullptr);
  }

  DigitalCompare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalCompare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalCompare& from);
  void MergeFrom(const DigitalCompare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalCompare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.ActuatorLogic.DigitalCompare";
  }
  protected:
  explicit DigitalCompare(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActuatorLogic_5ftest_2eproto);
    return ::descriptor_table_ActuatorLogic_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kResultFieldNumber = 2,
    kIdFieldNumber = 3,
    kRhsFieldNumber = 4,
  };
  // .blox_test.ActuatorLogic.DigitalOperator op = 1;
  void clear_op();
  ::blox_test::ActuatorLogic::DigitalOperator op() const;
  void set_op(::blox_test::ActuatorLogic::DigitalOperator value);
  private:
  ::blox_test::ActuatorLogic::DigitalOperator _internal_op() const;
  void _internal_set_op(::blox_test::ActuatorLogic::DigitalOperator value);
  public:

  // .blox_test.ActuatorLogic.Result result = 2 [(.brewblox.field) = {
  void clear_result();
  ::blox_test::ActuatorLogic::Result result() const;
  void set_result(::blox_test::ActuatorLogic::Result value);
  private:
  ::blox_test::ActuatorLogic::Result _internal_result() const;
  void _internal_set_result(::blox_test::ActuatorLogic::Result value);
  public:

  // uint32 id = 3 [(.nanopb) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .blox_test.IoArray.DigitalState rhs = 4;
  void clear_rhs();
  ::blox_test::IoArray::DigitalState rhs() const;
  void set_rhs(::blox_test::IoArray::DigitalState value);
  private:
  ::blox_test::IoArray::DigitalState _internal_rhs() const;
  void _internal_set_rhs(::blox_test::IoArray::DigitalState value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.ActuatorLogic.DigitalCompare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int op_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int rhs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorLogic_5ftest_2eproto;
};
// -------------------------------------------------------------------

class AnalogCompare PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.ActuatorLogic.AnalogCompare) */ {
 public:
  inline AnalogCompare() : AnalogCompare(nullptr) {};
  virtual ~AnalogCompare();

  AnalogCompare(const AnalogCompare& from);
  AnalogCompare(AnalogCompare&& from) noexcept
    : AnalogCompare() {
    *this = ::std::move(from);
  }

  inline AnalogCompare& operator=(const AnalogCompare& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogCompare& operator=(AnalogCompare&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogCompare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogCompare* internal_default_instance() {
    return reinterpret_cast<const AnalogCompare*>(
               &_AnalogCompare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnalogCompare& a, AnalogCompare& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogCompare* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogCompare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogCompare* New() const final {
    return CreateMaybeMessage<AnalogCompare>(nullptr);
  }

  AnalogCompare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogCompare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogCompare& from);
  void MergeFrom(const AnalogCompare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogCompare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.ActuatorLogic.AnalogCompare";
  }
  protected:
  explicit AnalogCompare(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActuatorLogic_5ftest_2eproto);
    return ::descriptor_table_ActuatorLogic_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kResultFieldNumber = 2,
    kIdFieldNumber = 3,
    kRhsFieldNumber = 4,
  };
  // .blox_test.ActuatorLogic.AnalogOperator op = 1;
  void clear_op();
  ::blox_test::ActuatorLogic::AnalogOperator op() const;
  void set_op(::blox_test::ActuatorLogic::AnalogOperator value);
  private:
  ::blox_test::ActuatorLogic::AnalogOperator _internal_op() const;
  void _internal_set_op(::blox_test::ActuatorLogic::AnalogOperator value);
  public:

  // .blox_test.ActuatorLogic.Result result = 2 [(.brewblox.field) = {
  void clear_result();
  ::blox_test::ActuatorLogic::Result result() const;
  void set_result(::blox_test::ActuatorLogic::Result value);
  private:
  ::blox_test::ActuatorLogic::Result _internal_result() const;
  void _internal_set_result(::blox_test::ActuatorLogic::Result value);
  public:

  // uint32 id = 3 [(.nanopb) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 rhs = 4 [(.nanopb) = {
  void clear_rhs();
  ::PROTOBUF_NAMESPACE_ID::int32 rhs() const;
  void set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rhs() const;
  void _internal_set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.ActuatorLogic.AnalogCompare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int op_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rhs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorLogic_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.ActuatorLogic.Block) */ {
 public:
  inline Block() : Block(nullptr) {};
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.ActuatorLogic.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActuatorLogic_5ftest_2eproto);
    return ::descriptor_table_ActuatorLogic_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigitalFieldNumber = 6,
    kAnalogFieldNumber = 7,
    kExpressionFieldNumber = 5,
    kTargetIdFieldNumber = 1,
    kDrivenTargetIdFieldNumber = 2,
    kEnabledFieldNumber = 3,
    kResultFieldNumber = 4,
    kErrorPosFieldNumber = 8,
  };
  // repeated .blox_test.ActuatorLogic.DigitalCompare digital = 6 [(.nanopb) = {
  int digital_size() const;
  private:
  int _internal_digital_size() const;
  public:
  void clear_digital();
  ::blox_test::ActuatorLogic::DigitalCompare* mutable_digital(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::DigitalCompare >*
      mutable_digital();
  private:
  const ::blox_test::ActuatorLogic::DigitalCompare& _internal_digital(int index) const;
  ::blox_test::ActuatorLogic::DigitalCompare* _internal_add_digital();
  public:
  const ::blox_test::ActuatorLogic::DigitalCompare& digital(int index) const;
  ::blox_test::ActuatorLogic::DigitalCompare* add_digital();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::DigitalCompare >&
      digital() const;

  // repeated .blox_test.ActuatorLogic.AnalogCompare analog = 7 [(.nanopb) = {
  int analog_size() const;
  private:
  int _internal_analog_size() const;
  public:
  void clear_analog();
  ::blox_test::ActuatorLogic::AnalogCompare* mutable_analog(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::AnalogCompare >*
      mutable_analog();
  private:
  const ::blox_test::ActuatorLogic::AnalogCompare& _internal_analog(int index) const;
  ::blox_test::ActuatorLogic::AnalogCompare* _internal_add_analog();
  public:
  const ::blox_test::ActuatorLogic::AnalogCompare& analog(int index) const;
  ::blox_test::ActuatorLogic::AnalogCompare* add_analog();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::AnalogCompare >&
      analog() const;

  // string expression = 5 [(.nanopb) = {
  void clear_expression();
  const std::string& expression() const;
  void set_expression(const std::string& value);
  void set_expression(std::string&& value);
  void set_expression(const char* value);
  void set_expression(const char* value, size_t size);
  std::string* mutable_expression();
  std::string* release_expression();
  void set_allocated_expression(std::string* expression);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_expression();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expression(
      std::string* expression);
  private:
  const std::string& _internal_expression() const;
  void _internal_set_expression(const std::string& value);
  std::string* _internal_mutable_expression();
  public:

  // uint32 targetId = 1 [(.nanopb) = {
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 drivenTargetId = 2 [(.nanopb) = {
  void clear_driventargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 driventargetid() const;
  void set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_driventargetid() const;
  void _internal_set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enabled = 3;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .blox_test.ActuatorLogic.Result result = 4 [(.brewblox.field) = {
  void clear_result();
  ::blox_test::ActuatorLogic::Result result() const;
  void set_result(::blox_test::ActuatorLogic::Result value);
  private:
  ::blox_test::ActuatorLogic::Result _internal_result() const;
  void _internal_set_result(::blox_test::ActuatorLogic::Result value);
  public:

  // uint32 errorPos = 8 [(.nanopb) = {
  void clear_errorpos();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorpos() const;
  void set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorpos() const;
  void _internal_set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.ActuatorLogic.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::DigitalCompare > digital_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::AnalogCompare > analog_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expression_;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driventargetid_;
  bool enabled_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorpos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorLogic_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DigitalCompare

// .blox_test.ActuatorLogic.DigitalOperator op = 1;
inline void DigitalCompare::clear_op() {
  op_ = 0;
}
inline ::blox_test::ActuatorLogic::DigitalOperator DigitalCompare::_internal_op() const {
  return static_cast< ::blox_test::ActuatorLogic::DigitalOperator >(op_);
}
inline ::blox_test::ActuatorLogic::DigitalOperator DigitalCompare::op() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.DigitalCompare.op)
  return _internal_op();
}
inline void DigitalCompare::_internal_set_op(::blox_test::ActuatorLogic::DigitalOperator value) {
  
  op_ = value;
}
inline void DigitalCompare::set_op(::blox_test::ActuatorLogic::DigitalOperator value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.DigitalCompare.op)
}

// .blox_test.ActuatorLogic.Result result = 2 [(.brewblox.field) = {
inline void DigitalCompare::clear_result() {
  result_ = 0;
}
inline ::blox_test::ActuatorLogic::Result DigitalCompare::_internal_result() const {
  return static_cast< ::blox_test::ActuatorLogic::Result >(result_);
}
inline ::blox_test::ActuatorLogic::Result DigitalCompare::result() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.DigitalCompare.result)
  return _internal_result();
}
inline void DigitalCompare::_internal_set_result(::blox_test::ActuatorLogic::Result value) {
  
  result_ = value;
}
inline void DigitalCompare::set_result(::blox_test::ActuatorLogic::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.DigitalCompare.result)
}

// uint32 id = 3 [(.nanopb) = {
inline void DigitalCompare::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCompare::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCompare::id() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.DigitalCompare.id)
  return _internal_id();
}
inline void DigitalCompare::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void DigitalCompare::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.DigitalCompare.id)
}

// .blox_test.IoArray.DigitalState rhs = 4;
inline void DigitalCompare::clear_rhs() {
  rhs_ = 0;
}
inline ::blox_test::IoArray::DigitalState DigitalCompare::_internal_rhs() const {
  return static_cast< ::blox_test::IoArray::DigitalState >(rhs_);
}
inline ::blox_test::IoArray::DigitalState DigitalCompare::rhs() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.DigitalCompare.rhs)
  return _internal_rhs();
}
inline void DigitalCompare::_internal_set_rhs(::blox_test::IoArray::DigitalState value) {
  
  rhs_ = value;
}
inline void DigitalCompare::set_rhs(::blox_test::IoArray::DigitalState value) {
  _internal_set_rhs(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.DigitalCompare.rhs)
}

// -------------------------------------------------------------------

// AnalogCompare

// .blox_test.ActuatorLogic.AnalogOperator op = 1;
inline void AnalogCompare::clear_op() {
  op_ = 0;
}
inline ::blox_test::ActuatorLogic::AnalogOperator AnalogCompare::_internal_op() const {
  return static_cast< ::blox_test::ActuatorLogic::AnalogOperator >(op_);
}
inline ::blox_test::ActuatorLogic::AnalogOperator AnalogCompare::op() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.AnalogCompare.op)
  return _internal_op();
}
inline void AnalogCompare::_internal_set_op(::blox_test::ActuatorLogic::AnalogOperator value) {
  
  op_ = value;
}
inline void AnalogCompare::set_op(::blox_test::ActuatorLogic::AnalogOperator value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.AnalogCompare.op)
}

// .blox_test.ActuatorLogic.Result result = 2 [(.brewblox.field) = {
inline void AnalogCompare::clear_result() {
  result_ = 0;
}
inline ::blox_test::ActuatorLogic::Result AnalogCompare::_internal_result() const {
  return static_cast< ::blox_test::ActuatorLogic::Result >(result_);
}
inline ::blox_test::ActuatorLogic::Result AnalogCompare::result() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.AnalogCompare.result)
  return _internal_result();
}
inline void AnalogCompare::_internal_set_result(::blox_test::ActuatorLogic::Result value) {
  
  result_ = value;
}
inline void AnalogCompare::set_result(::blox_test::ActuatorLogic::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.AnalogCompare.result)
}

// uint32 id = 3 [(.nanopb) = {
inline void AnalogCompare::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCompare::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCompare::id() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.AnalogCompare.id)
  return _internal_id();
}
inline void AnalogCompare::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void AnalogCompare::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.AnalogCompare.id)
}

// sint32 rhs = 4 [(.nanopb) = {
inline void AnalogCompare::clear_rhs() {
  rhs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogCompare::_internal_rhs() const {
  return rhs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogCompare::rhs() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.AnalogCompare.rhs)
  return _internal_rhs();
}
inline void AnalogCompare::_internal_set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rhs_ = value;
}
inline void AnalogCompare::set_rhs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rhs(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.AnalogCompare.rhs)
}

// -------------------------------------------------------------------

// Block

// uint32 targetId = 1 [(.nanopb) = {
inline void Block::clear_targetid() {
  targetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::targetid() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.targetId)
  return _internal_targetid();
}
inline void Block::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  targetid_ = value;
}
inline void Block::set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.Block.targetId)
}

// uint32 drivenTargetId = 2 [(.nanopb) = {
inline void Block::clear_driventargetid() {
  driventargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_driventargetid() const {
  return driventargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::driventargetid() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.drivenTargetId)
  return _internal_driventargetid();
}
inline void Block::_internal_set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driventargetid_ = value;
}
inline void Block::set_driventargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_driventargetid(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.Block.drivenTargetId)
}

// bool enabled = 3;
inline void Block::clear_enabled() {
  enabled_ = false;
}
inline bool Block::_internal_enabled() const {
  return enabled_;
}
inline bool Block::enabled() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.enabled)
  return _internal_enabled();
}
inline void Block::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Block::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.Block.enabled)
}

// .blox_test.ActuatorLogic.Result result = 4 [(.brewblox.field) = {
inline void Block::clear_result() {
  result_ = 0;
}
inline ::blox_test::ActuatorLogic::Result Block::_internal_result() const {
  return static_cast< ::blox_test::ActuatorLogic::Result >(result_);
}
inline ::blox_test::ActuatorLogic::Result Block::result() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.result)
  return _internal_result();
}
inline void Block::_internal_set_result(::blox_test::ActuatorLogic::Result value) {
  
  result_ = value;
}
inline void Block::set_result(::blox_test::ActuatorLogic::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.Block.result)
}

// string expression = 5 [(.nanopb) = {
inline void Block::clear_expression() {
  expression_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::expression() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.expression)
  return _internal_expression();
}
inline void Block::set_expression(const std::string& value) {
  _internal_set_expression(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.Block.expression)
}
inline std::string* Block::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:blox_test.ActuatorLogic.Block.expression)
  return _internal_mutable_expression();
}
inline const std::string& Block::_internal_expression() const {
  return expression_.Get();
}
inline void Block::_internal_set_expression(const std::string& value) {
  
  expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_expression(std::string&& value) {
  
  expression_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.ActuatorLogic.Block.expression)
}
inline void Block::set_expression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.ActuatorLogic.Block.expression)
}
inline void Block::set_expression(const char* value,
    size_t size) {
  
  expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.ActuatorLogic.Block.expression)
}
inline std::string* Block::_internal_mutable_expression() {
  
  return expression_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_expression() {
  // @@protoc_insertion_point(field_release:blox_test.ActuatorLogic.Block.expression)
  return expression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_expression(std::string* expression) {
  if (expression != nullptr) {
    
  } else {
    
  }
  expression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expression,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.ActuatorLogic.Block.expression)
}
inline std::string* Block::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.ActuatorLogic.Block.expression)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return expression_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_expression(
    std::string* expression) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (expression != nullptr) {
    
  } else {
    
  }
  expression_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      expression, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.ActuatorLogic.Block.expression)
}

// repeated .blox_test.ActuatorLogic.DigitalCompare digital = 6 [(.nanopb) = {
inline int Block::_internal_digital_size() const {
  return digital_.size();
}
inline int Block::digital_size() const {
  return _internal_digital_size();
}
inline void Block::clear_digital() {
  digital_.Clear();
}
inline ::blox_test::ActuatorLogic::DigitalCompare* Block::mutable_digital(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.ActuatorLogic.Block.digital)
  return digital_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::DigitalCompare >*
Block::mutable_digital() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.ActuatorLogic.Block.digital)
  return &digital_;
}
inline const ::blox_test::ActuatorLogic::DigitalCompare& Block::_internal_digital(int index) const {
  return digital_.Get(index);
}
inline const ::blox_test::ActuatorLogic::DigitalCompare& Block::digital(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.digital)
  return _internal_digital(index);
}
inline ::blox_test::ActuatorLogic::DigitalCompare* Block::_internal_add_digital() {
  return digital_.Add();
}
inline ::blox_test::ActuatorLogic::DigitalCompare* Block::add_digital() {
  // @@protoc_insertion_point(field_add:blox_test.ActuatorLogic.Block.digital)
  return _internal_add_digital();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::DigitalCompare >&
Block::digital() const {
  // @@protoc_insertion_point(field_list:blox_test.ActuatorLogic.Block.digital)
  return digital_;
}

// repeated .blox_test.ActuatorLogic.AnalogCompare analog = 7 [(.nanopb) = {
inline int Block::_internal_analog_size() const {
  return analog_.size();
}
inline int Block::analog_size() const {
  return _internal_analog_size();
}
inline void Block::clear_analog() {
  analog_.Clear();
}
inline ::blox_test::ActuatorLogic::AnalogCompare* Block::mutable_analog(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.ActuatorLogic.Block.analog)
  return analog_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::AnalogCompare >*
Block::mutable_analog() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.ActuatorLogic.Block.analog)
  return &analog_;
}
inline const ::blox_test::ActuatorLogic::AnalogCompare& Block::_internal_analog(int index) const {
  return analog_.Get(index);
}
inline const ::blox_test::ActuatorLogic::AnalogCompare& Block::analog(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.analog)
  return _internal_analog(index);
}
inline ::blox_test::ActuatorLogic::AnalogCompare* Block::_internal_add_analog() {
  return analog_.Add();
}
inline ::blox_test::ActuatorLogic::AnalogCompare* Block::add_analog() {
  // @@protoc_insertion_point(field_add:blox_test.ActuatorLogic.Block.analog)
  return _internal_add_analog();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::ActuatorLogic::AnalogCompare >&
Block::analog() const {
  // @@protoc_insertion_point(field_list:blox_test.ActuatorLogic.Block.analog)
  return analog_;
}

// uint32 errorPos = 8 [(.nanopb) = {
inline void Block::clear_errorpos() {
  errorpos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_errorpos() const {
  return errorpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::errorpos() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorLogic.Block.errorPos)
  return _internal_errorpos();
}
inline void Block::_internal_set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errorpos_ = value;
}
inline void Block::set_errorpos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorpos(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorLogic.Block.errorPos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActuatorLogic
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::ActuatorLogic::Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::ActuatorLogic::Result>() {
  return ::blox_test::ActuatorLogic::Result_descriptor();
}
template <> struct is_proto_enum< ::blox_test::ActuatorLogic::DigitalOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::ActuatorLogic::DigitalOperator>() {
  return ::blox_test::ActuatorLogic::DigitalOperator_descriptor();
}
template <> struct is_proto_enum< ::blox_test::ActuatorLogic::AnalogOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::ActuatorLogic::AnalogOperator>() {
  return ::blox_test::ActuatorLogic::AnalogOperator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActuatorLogic_5ftest_2eproto
