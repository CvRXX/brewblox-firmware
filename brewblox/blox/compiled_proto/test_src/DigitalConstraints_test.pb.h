// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DigitalConstraints_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DigitalConstraints_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DigitalConstraints_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DigitalConstraints_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DigitalConstraints_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DigitalConstraints_5ftest_2eproto;
namespace blox {
class DigitalConstraint;
struct DigitalConstraintDefaultTypeInternal;
extern DigitalConstraintDefaultTypeInternal _DigitalConstraint_default_instance_;
class DigitalConstraints;
struct DigitalConstraintsDefaultTypeInternal;
extern DigitalConstraintsDefaultTypeInternal _DigitalConstraints_default_instance_;
class Mutexed;
struct MutexedDefaultTypeInternal;
extern MutexedDefaultTypeInternal _Mutexed_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::DigitalConstraint* Arena::CreateMaybeMessage<::blox::DigitalConstraint>(Arena*);
template<> ::blox::DigitalConstraints* Arena::CreateMaybeMessage<::blox::DigitalConstraints>(Arena*);
template<> ::blox::Mutexed* Arena::CreateMaybeMessage<::blox::Mutexed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

// ===================================================================

class Mutexed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.Mutexed) */ {
 public:
  inline Mutexed() : Mutexed(nullptr) {}
  ~Mutexed() override;
  explicit constexpr Mutexed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mutexed(const Mutexed& from);
  Mutexed(Mutexed&& from) noexcept
    : Mutexed() {
    *this = ::std::move(from);
  }

  inline Mutexed& operator=(const Mutexed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutexed& operator=(Mutexed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mutexed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mutexed* internal_default_instance() {
    return reinterpret_cast<const Mutexed*>(
               &_Mutexed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Mutexed& a, Mutexed& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutexed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutexed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutexed* New() const final {
    return new Mutexed();
  }

  Mutexed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutexed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mutexed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mutexed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutexed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.Mutexed";
  }
  protected:
  explicit Mutexed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutexIdFieldNumber = 1,
    kExtraHoldTimeFieldNumber = 2,
    kHasCustomHoldTimeFieldNumber = 3,
    kHasLockFieldNumber = 4,
  };
  // uint32 mutexId = 1 [(.nanopb_test) = {
  void clear_mutexid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mutexid() const;
  void set_mutexid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mutexid() const;
  void _internal_set_mutexid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 extraHoldTime = 2 [(.nanopb_test) = {
  void clear_extraholdtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 extraholdtime() const;
  void set_extraholdtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extraholdtime() const;
  void _internal_set_extraholdtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool hasCustomHoldTime = 3;
  void clear_hascustomholdtime();
  bool hascustomholdtime() const;
  void set_hascustomholdtime(bool value);
  private:
  bool _internal_hascustomholdtime() const;
  void _internal_set_hascustomholdtime(bool value);
  public:

  // bool hasLock = 4 [(.brewblox_test) = {
  void clear_haslock();
  bool haslock() const;
  void set_haslock(bool value);
  private:
  bool _internal_haslock() const;
  void _internal_set_haslock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blox.Mutexed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mutexid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extraholdtime_;
  bool hascustomholdtime_;
  bool haslock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalConstraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DigitalConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.DigitalConstraint) */ {
 public:
  inline DigitalConstraint() : DigitalConstraint(nullptr) {}
  ~DigitalConstraint() override;
  explicit constexpr DigitalConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalConstraint(const DigitalConstraint& from);
  DigitalConstraint(DigitalConstraint&& from) noexcept
    : DigitalConstraint() {
    *this = ::std::move(from);
  }

  inline DigitalConstraint& operator=(const DigitalConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalConstraint& operator=(DigitalConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalConstraint& default_instance() {
    return *internal_default_instance();
  }
  enum ConstraintCase {
    kMinOff = 1,
    kMinOn = 2,
    kMutexed = 4,
    kDelayedOff = 5,
    kDelayedOn = 6,
    kMutex = 3,
    CONSTRAINT_NOT_SET = 0,
  };

  static inline const DigitalConstraint* internal_default_instance() {
    return reinterpret_cast<const DigitalConstraint*>(
               &_DigitalConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DigitalConstraint& a, DigitalConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalConstraint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalConstraint* New() const final {
    return new DigitalConstraint();
  }

  DigitalConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DigitalConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.DigitalConstraint";
  }
  protected:
  explicit DigitalConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitingFieldNumber = 100,
    kRemainingFieldNumber = 101,
    kMinOffFieldNumber = 1,
    kMinOnFieldNumber = 2,
    kMutexedFieldNumber = 4,
    kDelayedOffFieldNumber = 5,
    kDelayedOnFieldNumber = 6,
    kMutexFieldNumber = 3,
  };
  // uint32 limiting = 100 [(.nanopb_test) = {
  void clear_limiting();
  ::PROTOBUF_NAMESPACE_ID::uint32 limiting() const;
  void set_limiting(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limiting() const;
  void _internal_set_limiting(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 remaining = 101 [(.nanopb_test) = {
  void clear_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 remaining() const;
  void set_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remaining() const;
  void _internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 minOff = 1 [(.nanopb_test) = {
  bool has_minoff() const;
  private:
  bool _internal_has_minoff() const;
  public:
  void clear_minoff();
  ::PROTOBUF_NAMESPACE_ID::uint32 minoff() const;
  void set_minoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minoff() const;
  void _internal_set_minoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 minOn = 2 [(.nanopb_test) = {
  bool has_minon() const;
  private:
  bool _internal_has_minon() const;
  public:
  void clear_minon();
  ::PROTOBUF_NAMESPACE_ID::uint32 minon() const;
  void set_minon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minon() const;
  void _internal_set_minon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .blox.Mutexed mutexed = 4;
  bool has_mutexed() const;
  private:
  bool _internal_has_mutexed() const;
  public:
  void clear_mutexed();
  const ::blox::Mutexed& mutexed() const;
  PROTOBUF_MUST_USE_RESULT ::blox::Mutexed* release_mutexed();
  ::blox::Mutexed* mutable_mutexed();
  void set_allocated_mutexed(::blox::Mutexed* mutexed);
  private:
  const ::blox::Mutexed& _internal_mutexed() const;
  ::blox::Mutexed* _internal_mutable_mutexed();
  public:
  void unsafe_arena_set_allocated_mutexed(
      ::blox::Mutexed* mutexed);
  ::blox::Mutexed* unsafe_arena_release_mutexed();

  // uint32 delayedOff = 5 [(.nanopb_test) = {
  bool has_delayedoff() const;
  private:
  bool _internal_has_delayedoff() const;
  public:
  void clear_delayedoff();
  ::PROTOBUF_NAMESPACE_ID::uint32 delayedoff() const;
  void set_delayedoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delayedoff() const;
  void _internal_set_delayedoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 delayedOn = 6 [(.nanopb_test) = {
  bool has_delayedon() const;
  private:
  bool _internal_has_delayedon() const;
  public:
  void clear_delayedon();
  ::PROTOBUF_NAMESPACE_ID::uint32 delayedon() const;
  void set_delayedon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delayedon() const;
  void _internal_set_delayedon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mutex = 3 [(.nanopb_test) = {
  bool has_mutex() const;
  private:
  bool _internal_has_mutex() const;
  public:
  void clear_mutex();
  ::PROTOBUF_NAMESPACE_ID::uint32 mutex() const;
  void set_mutex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mutex() const;
  void _internal_set_mutex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_constraint();
  ConstraintCase constraint_case() const;
  // @@protoc_insertion_point(class_scope:blox.DigitalConstraint)
 private:
  class _Internal;
  void set_has_minoff();
  void set_has_minon();
  void set_has_mutexed();
  void set_has_delayedoff();
  void set_has_delayedon();
  void set_has_mutex();

  inline bool has_constraint() const;
  inline void clear_has_constraint();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limiting_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remaining_;
  union ConstraintUnion {
    constexpr ConstraintUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 minoff_;
    ::PROTOBUF_NAMESPACE_ID::uint32 minon_;
    ::blox::Mutexed* mutexed_;
    ::PROTOBUF_NAMESPACE_ID::uint32 delayedoff_;
    ::PROTOBUF_NAMESPACE_ID::uint32 delayedon_;
    ::PROTOBUF_NAMESPACE_ID::uint32 mutex_;
  } constraint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_DigitalConstraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DigitalConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.DigitalConstraints) */ {
 public:
  inline DigitalConstraints() : DigitalConstraints(nullptr) {}
  ~DigitalConstraints() override;
  explicit constexpr DigitalConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalConstraints(const DigitalConstraints& from);
  DigitalConstraints(DigitalConstraints&& from) noexcept
    : DigitalConstraints() {
    *this = ::std::move(from);
  }

  inline DigitalConstraints& operator=(const DigitalConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalConstraints& operator=(DigitalConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalConstraints* internal_default_instance() {
    return reinterpret_cast<const DigitalConstraints*>(
               &_DigitalConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DigitalConstraints& a, DigitalConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalConstraints* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalConstraints* New() const final {
    return new DigitalConstraints();
  }

  DigitalConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DigitalConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalConstraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.DigitalConstraints";
  }
  protected:
  explicit DigitalConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 1,
  };
  // repeated .blox.DigitalConstraint constraints = 1 [(.nanopb_test) = {
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::blox::DigitalConstraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalConstraint >*
      mutable_constraints();
  private:
  const ::blox::DigitalConstraint& _internal_constraints(int index) const;
  ::blox::DigitalConstraint* _internal_add_constraints();
  public:
  const ::blox::DigitalConstraint& constraints(int index) const;
  ::blox::DigitalConstraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalConstraint >&
      constraints() const;

  // @@protoc_insertion_point(class_scope:blox.DigitalConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalConstraint > constraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalConstraints_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mutexed

// uint32 mutexId = 1 [(.nanopb_test) = {
inline void Mutexed::clear_mutexid() {
  mutexid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mutexed::_internal_mutexid() const {
  return mutexid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mutexed::mutexid() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.mutexId)
  return _internal_mutexid();
}
inline void Mutexed::_internal_set_mutexid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mutexid_ = value;
}
inline void Mutexed::set_mutexid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mutexid(value);
  // @@protoc_insertion_point(field_set:blox.Mutexed.mutexId)
}

// uint32 extraHoldTime = 2 [(.nanopb_test) = {
inline void Mutexed::clear_extraholdtime() {
  extraholdtime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mutexed::_internal_extraholdtime() const {
  return extraholdtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mutexed::extraholdtime() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.extraHoldTime)
  return _internal_extraholdtime();
}
inline void Mutexed::_internal_set_extraholdtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  extraholdtime_ = value;
}
inline void Mutexed::set_extraholdtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extraholdtime(value);
  // @@protoc_insertion_point(field_set:blox.Mutexed.extraHoldTime)
}

// bool hasCustomHoldTime = 3;
inline void Mutexed::clear_hascustomholdtime() {
  hascustomholdtime_ = false;
}
inline bool Mutexed::_internal_hascustomholdtime() const {
  return hascustomholdtime_;
}
inline bool Mutexed::hascustomholdtime() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.hasCustomHoldTime)
  return _internal_hascustomholdtime();
}
inline void Mutexed::_internal_set_hascustomholdtime(bool value) {
  
  hascustomholdtime_ = value;
}
inline void Mutexed::set_hascustomholdtime(bool value) {
  _internal_set_hascustomholdtime(value);
  // @@protoc_insertion_point(field_set:blox.Mutexed.hasCustomHoldTime)
}

// bool hasLock = 4 [(.brewblox_test) = {
inline void Mutexed::clear_haslock() {
  haslock_ = false;
}
inline bool Mutexed::_internal_haslock() const {
  return haslock_;
}
inline bool Mutexed::haslock() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.hasLock)
  return _internal_haslock();
}
inline void Mutexed::_internal_set_haslock(bool value) {
  
  haslock_ = value;
}
inline void Mutexed::set_haslock(bool value) {
  _internal_set_haslock(value);
  // @@protoc_insertion_point(field_set:blox.Mutexed.hasLock)
}

// -------------------------------------------------------------------

// DigitalConstraint

// uint32 minOff = 1 [(.nanopb_test) = {
inline bool DigitalConstraint::_internal_has_minoff() const {
  return constraint_case() == kMinOff;
}
inline bool DigitalConstraint::has_minoff() const {
  return _internal_has_minoff();
}
inline void DigitalConstraint::set_has_minoff() {
  _oneof_case_[0] = kMinOff;
}
inline void DigitalConstraint::clear_minoff() {
  if (_internal_has_minoff()) {
    constraint_.minoff_ = 0u;
    clear_has_constraint();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::_internal_minoff() const {
  if (_internal_has_minoff()) {
    return constraint_.minoff_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_minoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_minoff()) {
    clear_constraint();
    set_has_minoff();
  }
  constraint_.minoff_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::minoff() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.minOff)
  return _internal_minoff();
}
inline void DigitalConstraint::set_minoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minoff(value);
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.minOff)
}

// uint32 minOn = 2 [(.nanopb_test) = {
inline bool DigitalConstraint::_internal_has_minon() const {
  return constraint_case() == kMinOn;
}
inline bool DigitalConstraint::has_minon() const {
  return _internal_has_minon();
}
inline void DigitalConstraint::set_has_minon() {
  _oneof_case_[0] = kMinOn;
}
inline void DigitalConstraint::clear_minon() {
  if (_internal_has_minon()) {
    constraint_.minon_ = 0u;
    clear_has_constraint();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::_internal_minon() const {
  if (_internal_has_minon()) {
    return constraint_.minon_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_minon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_minon()) {
    clear_constraint();
    set_has_minon();
  }
  constraint_.minon_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::minon() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.minOn)
  return _internal_minon();
}
inline void DigitalConstraint::set_minon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minon(value);
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.minOn)
}

// .blox.Mutexed mutexed = 4;
inline bool DigitalConstraint::_internal_has_mutexed() const {
  return constraint_case() == kMutexed;
}
inline bool DigitalConstraint::has_mutexed() const {
  return _internal_has_mutexed();
}
inline void DigitalConstraint::set_has_mutexed() {
  _oneof_case_[0] = kMutexed;
}
inline void DigitalConstraint::clear_mutexed() {
  if (_internal_has_mutexed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete constraint_.mutexed_;
    }
    clear_has_constraint();
  }
}
inline ::blox::Mutexed* DigitalConstraint::release_mutexed() {
  // @@protoc_insertion_point(field_release:blox.DigitalConstraint.mutexed)
  if (_internal_has_mutexed()) {
    clear_has_constraint();
      ::blox::Mutexed* temp = constraint_.mutexed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.mutexed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox::Mutexed& DigitalConstraint::_internal_mutexed() const {
  return _internal_has_mutexed()
      ? *constraint_.mutexed_
      : reinterpret_cast< ::blox::Mutexed&>(::blox::_Mutexed_default_instance_);
}
inline const ::blox::Mutexed& DigitalConstraint::mutexed() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.mutexed)
  return _internal_mutexed();
}
inline ::blox::Mutexed* DigitalConstraint::unsafe_arena_release_mutexed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox.DigitalConstraint.mutexed)
  if (_internal_has_mutexed()) {
    clear_has_constraint();
    ::blox::Mutexed* temp = constraint_.mutexed_;
    constraint_.mutexed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DigitalConstraint::unsafe_arena_set_allocated_mutexed(::blox::Mutexed* mutexed) {
  clear_constraint();
  if (mutexed) {
    set_has_mutexed();
    constraint_.mutexed_ = mutexed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox.DigitalConstraint.mutexed)
}
inline ::blox::Mutexed* DigitalConstraint::_internal_mutable_mutexed() {
  if (!_internal_has_mutexed()) {
    clear_constraint();
    set_has_mutexed();
    constraint_.mutexed_ = CreateMaybeMessage< ::blox::Mutexed >(GetArenaForAllocation());
  }
  return constraint_.mutexed_;
}
inline ::blox::Mutexed* DigitalConstraint::mutable_mutexed() {
  ::blox::Mutexed* _msg = _internal_mutable_mutexed();
  // @@protoc_insertion_point(field_mutable:blox.DigitalConstraint.mutexed)
  return _msg;
}

// uint32 delayedOff = 5 [(.nanopb_test) = {
inline bool DigitalConstraint::_internal_has_delayedoff() const {
  return constraint_case() == kDelayedOff;
}
inline bool DigitalConstraint::has_delayedoff() const {
  return _internal_has_delayedoff();
}
inline void DigitalConstraint::set_has_delayedoff() {
  _oneof_case_[0] = kDelayedOff;
}
inline void DigitalConstraint::clear_delayedoff() {
  if (_internal_has_delayedoff()) {
    constraint_.delayedoff_ = 0u;
    clear_has_constraint();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::_internal_delayedoff() const {
  if (_internal_has_delayedoff()) {
    return constraint_.delayedoff_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_delayedoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_delayedoff()) {
    clear_constraint();
    set_has_delayedoff();
  }
  constraint_.delayedoff_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::delayedoff() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.delayedOff)
  return _internal_delayedoff();
}
inline void DigitalConstraint::set_delayedoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delayedoff(value);
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.delayedOff)
}

// uint32 delayedOn = 6 [(.nanopb_test) = {
inline bool DigitalConstraint::_internal_has_delayedon() const {
  return constraint_case() == kDelayedOn;
}
inline bool DigitalConstraint::has_delayedon() const {
  return _internal_has_delayedon();
}
inline void DigitalConstraint::set_has_delayedon() {
  _oneof_case_[0] = kDelayedOn;
}
inline void DigitalConstraint::clear_delayedon() {
  if (_internal_has_delayedon()) {
    constraint_.delayedon_ = 0u;
    clear_has_constraint();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::_internal_delayedon() const {
  if (_internal_has_delayedon()) {
    return constraint_.delayedon_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_delayedon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_delayedon()) {
    clear_constraint();
    set_has_delayedon();
  }
  constraint_.delayedon_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::delayedon() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.delayedOn)
  return _internal_delayedon();
}
inline void DigitalConstraint::set_delayedon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delayedon(value);
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.delayedOn)
}

// uint32 mutex = 3 [(.nanopb_test) = {
inline bool DigitalConstraint::_internal_has_mutex() const {
  return constraint_case() == kMutex;
}
inline bool DigitalConstraint::has_mutex() const {
  return _internal_has_mutex();
}
inline void DigitalConstraint::set_has_mutex() {
  _oneof_case_[0] = kMutex;
}
inline void DigitalConstraint::clear_mutex() {
  if (_internal_has_mutex()) {
    constraint_.mutex_ = 0u;
    clear_has_constraint();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::_internal_mutex() const {
  if (_internal_has_mutex()) {
    return constraint_.mutex_;
  }
  return 0u;
}
inline void DigitalConstraint::_internal_set_mutex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_mutex()) {
    clear_constraint();
    set_has_mutex();
  }
  constraint_.mutex_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::mutex() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.mutex)
  return _internal_mutex();
}
inline void DigitalConstraint::set_mutex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mutex(value);
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.mutex)
}

// uint32 limiting = 100 [(.nanopb_test) = {
inline void DigitalConstraint::clear_limiting() {
  limiting_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::_internal_limiting() const {
  return limiting_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::limiting() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.limiting)
  return _internal_limiting();
}
inline void DigitalConstraint::_internal_set_limiting(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limiting_ = value;
}
inline void DigitalConstraint::set_limiting(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limiting(value);
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.limiting)
}

// uint32 remaining = 101 [(.nanopb_test) = {
inline void DigitalConstraint::clear_remaining() {
  remaining_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::_internal_remaining() const {
  return remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalConstraint::remaining() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.remaining)
  return _internal_remaining();
}
inline void DigitalConstraint::_internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remaining_ = value;
}
inline void DigitalConstraint::set_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.remaining)
}

inline bool DigitalConstraint::has_constraint() const {
  return constraint_case() != CONSTRAINT_NOT_SET;
}
inline void DigitalConstraint::clear_has_constraint() {
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}
inline DigitalConstraint::ConstraintCase DigitalConstraint::constraint_case() const {
  return DigitalConstraint::ConstraintCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DigitalConstraints

// repeated .blox.DigitalConstraint constraints = 1 [(.nanopb_test) = {
inline int DigitalConstraints::_internal_constraints_size() const {
  return constraints_.size();
}
inline int DigitalConstraints::constraints_size() const {
  return _internal_constraints_size();
}
inline void DigitalConstraints::clear_constraints() {
  constraints_.Clear();
}
inline ::blox::DigitalConstraint* DigitalConstraints::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blox.DigitalConstraints.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalConstraint >*
DigitalConstraints::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blox.DigitalConstraints.constraints)
  return &constraints_;
}
inline const ::blox::DigitalConstraint& DigitalConstraints::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::blox::DigitalConstraint& DigitalConstraints::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraints.constraints)
  return _internal_constraints(index);
}
inline ::blox::DigitalConstraint* DigitalConstraints::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::blox::DigitalConstraint* DigitalConstraints::add_constraints() {
  ::blox::DigitalConstraint* _add = _internal_add_constraints();
  // @@protoc_insertion_point(field_add:blox.DigitalConstraints.constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::DigitalConstraint >&
DigitalConstraints::constraints() const {
  // @@protoc_insertion_point(field_list:blox.DigitalConstraints.constraints)
  return constraints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DigitalConstraints_5ftest_2eproto
