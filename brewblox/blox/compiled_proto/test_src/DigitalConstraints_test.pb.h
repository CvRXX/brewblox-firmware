// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DigitalConstraints_test.proto

#ifndef PROTOBUF_INCLUDED_DigitalConstraints_5ftest_2eproto
#define PROTOBUF_INCLUDED_DigitalConstraints_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DigitalConstraints_5ftest_2eproto 

namespace protobuf_DigitalConstraints_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DigitalConstraints_5ftest_2eproto
namespace blox {
class DigitalConstraint;
class DigitalConstraintDefaultTypeInternal;
extern DigitalConstraintDefaultTypeInternal _DigitalConstraint_default_instance_;
class DigitalConstraints;
class DigitalConstraintsDefaultTypeInternal;
extern DigitalConstraintsDefaultTypeInternal _DigitalConstraints_default_instance_;
class Mutexed;
class MutexedDefaultTypeInternal;
extern MutexedDefaultTypeInternal _Mutexed_default_instance_;
}  // namespace blox
namespace google {
namespace protobuf {
template<> ::blox::DigitalConstraint* Arena::CreateMaybeMessage<::blox::DigitalConstraint>(Arena*);
template<> ::blox::DigitalConstraints* Arena::CreateMaybeMessage<::blox::DigitalConstraints>(Arena*);
template<> ::blox::Mutexed* Arena::CreateMaybeMessage<::blox::Mutexed>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox {

// ===================================================================

class Mutexed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.Mutexed) */ {
 public:
  Mutexed();
  virtual ~Mutexed();

  Mutexed(const Mutexed& from);

  inline Mutexed& operator=(const Mutexed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mutexed(Mutexed&& from) noexcept
    : Mutexed() {
    *this = ::std::move(from);
  }

  inline Mutexed& operator=(Mutexed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mutexed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mutexed* internal_default_instance() {
    return reinterpret_cast<const Mutexed*>(
               &_Mutexed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Mutexed* other);
  friend void swap(Mutexed& a, Mutexed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mutexed* New() const final {
    return CreateMaybeMessage<Mutexed>(NULL);
  }

  Mutexed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mutexed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mutexed& from);
  void MergeFrom(const Mutexed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutexed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 mutexId = 1 [(.nanopb_test) = {
  void clear_mutexid();
  static const int kMutexIdFieldNumber = 1;
  ::google::protobuf::uint32 mutexid() const;
  void set_mutexid(::google::protobuf::uint32 value);

  // uint32 extraHoldTime = 2 [(.nanopb_test) = {
  void clear_extraholdtime();
  static const int kExtraHoldTimeFieldNumber = 2;
  ::google::protobuf::uint32 extraholdtime() const;
  void set_extraholdtime(::google::protobuf::uint32 value);

  // bool hasCustomHoldTime = 3;
  void clear_hascustomholdtime();
  static const int kHasCustomHoldTimeFieldNumber = 3;
  bool hascustomholdtime() const;
  void set_hascustomholdtime(bool value);

  // bool hasLock = 4 [(.brewblox_test) = {
  void clear_haslock();
  static const int kHasLockFieldNumber = 4;
  bool haslock() const;
  void set_haslock(bool value);

  // @@protoc_insertion_point(class_scope:blox.Mutexed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mutexid_;
  ::google::protobuf::uint32 extraholdtime_;
  bool hascustomholdtime_;
  bool haslock_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DigitalConstraints_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.DigitalConstraint) */ {
 public:
  DigitalConstraint();
  virtual ~DigitalConstraint();

  DigitalConstraint(const DigitalConstraint& from);

  inline DigitalConstraint& operator=(const DigitalConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalConstraint(DigitalConstraint&& from) noexcept
    : DigitalConstraint() {
    *this = ::std::move(from);
  }

  inline DigitalConstraint& operator=(DigitalConstraint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalConstraint& default_instance();

  enum ConstraintCase {
    kMinOff = 1,
    kMinOn = 2,
    kMutexed = 4,
    kDelayedOff = 5,
    kDelayedOn = 6,
    kMutex = 3,
    CONSTRAINT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalConstraint* internal_default_instance() {
    return reinterpret_cast<const DigitalConstraint*>(
               &_DigitalConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DigitalConstraint* other);
  friend void swap(DigitalConstraint& a, DigitalConstraint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalConstraint* New() const final {
    return CreateMaybeMessage<DigitalConstraint>(NULL);
  }

  DigitalConstraint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalConstraint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalConstraint& from);
  void MergeFrom(const DigitalConstraint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 limiting = 100 [(.nanopb_test) = {
  void clear_limiting();
  static const int kLimitingFieldNumber = 100;
  ::google::protobuf::uint32 limiting() const;
  void set_limiting(::google::protobuf::uint32 value);

  // uint32 remaining = 101 [(.nanopb_test) = {
  void clear_remaining();
  static const int kRemainingFieldNumber = 101;
  ::google::protobuf::uint32 remaining() const;
  void set_remaining(::google::protobuf::uint32 value);

  // uint32 minOff = 1 [(.nanopb_test) = {
  private:
  bool has_minoff() const;
  public:
  void clear_minoff();
  static const int kMinOffFieldNumber = 1;
  ::google::protobuf::uint32 minoff() const;
  void set_minoff(::google::protobuf::uint32 value);

  // uint32 minOn = 2 [(.nanopb_test) = {
  private:
  bool has_minon() const;
  public:
  void clear_minon();
  static const int kMinOnFieldNumber = 2;
  ::google::protobuf::uint32 minon() const;
  void set_minon(::google::protobuf::uint32 value);

  // .blox.Mutexed mutexed = 4;
  bool has_mutexed() const;
  void clear_mutexed();
  static const int kMutexedFieldNumber = 4;
  private:
  const ::blox::Mutexed& _internal_mutexed() const;
  public:
  const ::blox::Mutexed& mutexed() const;
  ::blox::Mutexed* release_mutexed();
  ::blox::Mutexed* mutable_mutexed();
  void set_allocated_mutexed(::blox::Mutexed* mutexed);

  // uint32 delayedOff = 5 [(.nanopb_test) = {
  private:
  bool has_delayedoff() const;
  public:
  void clear_delayedoff();
  static const int kDelayedOffFieldNumber = 5;
  ::google::protobuf::uint32 delayedoff() const;
  void set_delayedoff(::google::protobuf::uint32 value);

  // uint32 delayedOn = 6 [(.nanopb_test) = {
  private:
  bool has_delayedon() const;
  public:
  void clear_delayedon();
  static const int kDelayedOnFieldNumber = 6;
  ::google::protobuf::uint32 delayedon() const;
  void set_delayedon(::google::protobuf::uint32 value);

  // uint32 mutex = 3 [(.nanopb_test) = {
  private:
  bool has_mutex() const;
  public:
  void clear_mutex();
  static const int kMutexFieldNumber = 3;
  ::google::protobuf::uint32 mutex() const;
  void set_mutex(::google::protobuf::uint32 value);

  void clear_constraint();
  ConstraintCase constraint_case() const;
  // @@protoc_insertion_point(class_scope:blox.DigitalConstraint)
 private:
  void set_has_minoff();
  void set_has_minon();
  void set_has_mutexed();
  void set_has_delayedoff();
  void set_has_delayedon();
  void set_has_mutex();

  inline bool has_constraint() const;
  inline void clear_has_constraint();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 limiting_;
  ::google::protobuf::uint32 remaining_;
  union ConstraintUnion {
    ConstraintUnion() {}
    ::google::protobuf::uint32 minoff_;
    ::google::protobuf::uint32 minon_;
    ::blox::Mutexed* mutexed_;
    ::google::protobuf::uint32 delayedoff_;
    ::google::protobuf::uint32 delayedon_;
    ::google::protobuf::uint32 mutex_;
  } constraint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_DigitalConstraints_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalConstraints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.DigitalConstraints) */ {
 public:
  DigitalConstraints();
  virtual ~DigitalConstraints();

  DigitalConstraints(const DigitalConstraints& from);

  inline DigitalConstraints& operator=(const DigitalConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalConstraints(DigitalConstraints&& from) noexcept
    : DigitalConstraints() {
    *this = ::std::move(from);
  }

  inline DigitalConstraints& operator=(DigitalConstraints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalConstraints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalConstraints* internal_default_instance() {
    return reinterpret_cast<const DigitalConstraints*>(
               &_DigitalConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DigitalConstraints* other);
  friend void swap(DigitalConstraints& a, DigitalConstraints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalConstraints* New() const final {
    return CreateMaybeMessage<DigitalConstraints>(NULL);
  }

  DigitalConstraints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalConstraints>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalConstraints& from);
  void MergeFrom(const DigitalConstraints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalConstraints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blox.DigitalConstraint constraints = 1 [(.nanopb_test) = {
  int constraints_size() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 1;
  ::blox::DigitalConstraint* mutable_constraints(int index);
  ::google::protobuf::RepeatedPtrField< ::blox::DigitalConstraint >*
      mutable_constraints();
  const ::blox::DigitalConstraint& constraints(int index) const;
  ::blox::DigitalConstraint* add_constraints();
  const ::google::protobuf::RepeatedPtrField< ::blox::DigitalConstraint >&
      constraints() const;

  // @@protoc_insertion_point(class_scope:blox.DigitalConstraints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::blox::DigitalConstraint > constraints_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DigitalConstraints_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mutexed

// uint32 mutexId = 1 [(.nanopb_test) = {
inline void Mutexed::clear_mutexid() {
  mutexid_ = 0u;
}
inline ::google::protobuf::uint32 Mutexed::mutexid() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.mutexId)
  return mutexid_;
}
inline void Mutexed::set_mutexid(::google::protobuf::uint32 value) {
  
  mutexid_ = value;
  // @@protoc_insertion_point(field_set:blox.Mutexed.mutexId)
}

// uint32 extraHoldTime = 2 [(.nanopb_test) = {
inline void Mutexed::clear_extraholdtime() {
  extraholdtime_ = 0u;
}
inline ::google::protobuf::uint32 Mutexed::extraholdtime() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.extraHoldTime)
  return extraholdtime_;
}
inline void Mutexed::set_extraholdtime(::google::protobuf::uint32 value) {
  
  extraholdtime_ = value;
  // @@protoc_insertion_point(field_set:blox.Mutexed.extraHoldTime)
}

// bool hasCustomHoldTime = 3;
inline void Mutexed::clear_hascustomholdtime() {
  hascustomholdtime_ = false;
}
inline bool Mutexed::hascustomholdtime() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.hasCustomHoldTime)
  return hascustomholdtime_;
}
inline void Mutexed::set_hascustomholdtime(bool value) {
  
  hascustomholdtime_ = value;
  // @@protoc_insertion_point(field_set:blox.Mutexed.hasCustomHoldTime)
}

// bool hasLock = 4 [(.brewblox_test) = {
inline void Mutexed::clear_haslock() {
  haslock_ = false;
}
inline bool Mutexed::haslock() const {
  // @@protoc_insertion_point(field_get:blox.Mutexed.hasLock)
  return haslock_;
}
inline void Mutexed::set_haslock(bool value) {
  
  haslock_ = value;
  // @@protoc_insertion_point(field_set:blox.Mutexed.hasLock)
}

// -------------------------------------------------------------------

// DigitalConstraint

// uint32 minOff = 1 [(.nanopb_test) = {
inline bool DigitalConstraint::has_minoff() const {
  return constraint_case() == kMinOff;
}
inline void DigitalConstraint::set_has_minoff() {
  _oneof_case_[0] = kMinOff;
}
inline void DigitalConstraint::clear_minoff() {
  if (has_minoff()) {
    constraint_.minoff_ = 0u;
    clear_has_constraint();
  }
}
inline ::google::protobuf::uint32 DigitalConstraint::minoff() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.minOff)
  if (has_minoff()) {
    return constraint_.minoff_;
  }
  return 0u;
}
inline void DigitalConstraint::set_minoff(::google::protobuf::uint32 value) {
  if (!has_minoff()) {
    clear_constraint();
    set_has_minoff();
  }
  constraint_.minoff_ = value;
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.minOff)
}

// uint32 minOn = 2 [(.nanopb_test) = {
inline bool DigitalConstraint::has_minon() const {
  return constraint_case() == kMinOn;
}
inline void DigitalConstraint::set_has_minon() {
  _oneof_case_[0] = kMinOn;
}
inline void DigitalConstraint::clear_minon() {
  if (has_minon()) {
    constraint_.minon_ = 0u;
    clear_has_constraint();
  }
}
inline ::google::protobuf::uint32 DigitalConstraint::minon() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.minOn)
  if (has_minon()) {
    return constraint_.minon_;
  }
  return 0u;
}
inline void DigitalConstraint::set_minon(::google::protobuf::uint32 value) {
  if (!has_minon()) {
    clear_constraint();
    set_has_minon();
  }
  constraint_.minon_ = value;
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.minOn)
}

// .blox.Mutexed mutexed = 4;
inline bool DigitalConstraint::has_mutexed() const {
  return constraint_case() == kMutexed;
}
inline void DigitalConstraint::set_has_mutexed() {
  _oneof_case_[0] = kMutexed;
}
inline void DigitalConstraint::clear_mutexed() {
  if (has_mutexed()) {
    delete constraint_.mutexed_;
    clear_has_constraint();
  }
}
inline const ::blox::Mutexed& DigitalConstraint::_internal_mutexed() const {
  return *constraint_.mutexed_;
}
inline ::blox::Mutexed* DigitalConstraint::release_mutexed() {
  // @@protoc_insertion_point(field_release:blox.DigitalConstraint.mutexed)
  if (has_mutexed()) {
    clear_has_constraint();
      ::blox::Mutexed* temp = constraint_.mutexed_;
    constraint_.mutexed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::blox::Mutexed& DigitalConstraint::mutexed() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.mutexed)
  return has_mutexed()
      ? *constraint_.mutexed_
      : *reinterpret_cast< ::blox::Mutexed*>(&::blox::_Mutexed_default_instance_);
}
inline ::blox::Mutexed* DigitalConstraint::mutable_mutexed() {
  if (!has_mutexed()) {
    clear_constraint();
    set_has_mutexed();
    constraint_.mutexed_ = CreateMaybeMessage< ::blox::Mutexed >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:blox.DigitalConstraint.mutexed)
  return constraint_.mutexed_;
}

// uint32 delayedOff = 5 [(.nanopb_test) = {
inline bool DigitalConstraint::has_delayedoff() const {
  return constraint_case() == kDelayedOff;
}
inline void DigitalConstraint::set_has_delayedoff() {
  _oneof_case_[0] = kDelayedOff;
}
inline void DigitalConstraint::clear_delayedoff() {
  if (has_delayedoff()) {
    constraint_.delayedoff_ = 0u;
    clear_has_constraint();
  }
}
inline ::google::protobuf::uint32 DigitalConstraint::delayedoff() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.delayedOff)
  if (has_delayedoff()) {
    return constraint_.delayedoff_;
  }
  return 0u;
}
inline void DigitalConstraint::set_delayedoff(::google::protobuf::uint32 value) {
  if (!has_delayedoff()) {
    clear_constraint();
    set_has_delayedoff();
  }
  constraint_.delayedoff_ = value;
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.delayedOff)
}

// uint32 delayedOn = 6 [(.nanopb_test) = {
inline bool DigitalConstraint::has_delayedon() const {
  return constraint_case() == kDelayedOn;
}
inline void DigitalConstraint::set_has_delayedon() {
  _oneof_case_[0] = kDelayedOn;
}
inline void DigitalConstraint::clear_delayedon() {
  if (has_delayedon()) {
    constraint_.delayedon_ = 0u;
    clear_has_constraint();
  }
}
inline ::google::protobuf::uint32 DigitalConstraint::delayedon() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.delayedOn)
  if (has_delayedon()) {
    return constraint_.delayedon_;
  }
  return 0u;
}
inline void DigitalConstraint::set_delayedon(::google::protobuf::uint32 value) {
  if (!has_delayedon()) {
    clear_constraint();
    set_has_delayedon();
  }
  constraint_.delayedon_ = value;
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.delayedOn)
}

// uint32 mutex = 3 [(.nanopb_test) = {
inline bool DigitalConstraint::has_mutex() const {
  return constraint_case() == kMutex;
}
inline void DigitalConstraint::set_has_mutex() {
  _oneof_case_[0] = kMutex;
}
inline void DigitalConstraint::clear_mutex() {
  if (has_mutex()) {
    constraint_.mutex_ = 0u;
    clear_has_constraint();
  }
}
inline ::google::protobuf::uint32 DigitalConstraint::mutex() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.mutex)
  if (has_mutex()) {
    return constraint_.mutex_;
  }
  return 0u;
}
inline void DigitalConstraint::set_mutex(::google::protobuf::uint32 value) {
  if (!has_mutex()) {
    clear_constraint();
    set_has_mutex();
  }
  constraint_.mutex_ = value;
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.mutex)
}

// uint32 limiting = 100 [(.nanopb_test) = {
inline void DigitalConstraint::clear_limiting() {
  limiting_ = 0u;
}
inline ::google::protobuf::uint32 DigitalConstraint::limiting() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.limiting)
  return limiting_;
}
inline void DigitalConstraint::set_limiting(::google::protobuf::uint32 value) {
  
  limiting_ = value;
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.limiting)
}

// uint32 remaining = 101 [(.nanopb_test) = {
inline void DigitalConstraint::clear_remaining() {
  remaining_ = 0u;
}
inline ::google::protobuf::uint32 DigitalConstraint::remaining() const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraint.remaining)
  return remaining_;
}
inline void DigitalConstraint::set_remaining(::google::protobuf::uint32 value) {
  
  remaining_ = value;
  // @@protoc_insertion_point(field_set:blox.DigitalConstraint.remaining)
}

inline bool DigitalConstraint::has_constraint() const {
  return constraint_case() != CONSTRAINT_NOT_SET;
}
inline void DigitalConstraint::clear_has_constraint() {
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}
inline DigitalConstraint::ConstraintCase DigitalConstraint::constraint_case() const {
  return DigitalConstraint::ConstraintCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DigitalConstraints

// repeated .blox.DigitalConstraint constraints = 1 [(.nanopb_test) = {
inline int DigitalConstraints::constraints_size() const {
  return constraints_.size();
}
inline void DigitalConstraints::clear_constraints() {
  constraints_.Clear();
}
inline ::blox::DigitalConstraint* DigitalConstraints::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blox.DigitalConstraints.constraints)
  return constraints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::blox::DigitalConstraint >*
DigitalConstraints::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blox.DigitalConstraints.constraints)
  return &constraints_;
}
inline const ::blox::DigitalConstraint& DigitalConstraints::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blox.DigitalConstraints.constraints)
  return constraints_.Get(index);
}
inline ::blox::DigitalConstraint* DigitalConstraints::add_constraints() {
  // @@protoc_insertion_point(field_add:blox.DigitalConstraints.constraints)
  return constraints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blox::DigitalConstraint >&
DigitalConstraints::constraints() const {
  // @@protoc_insertion_point(field_list:blox.DigitalConstraints.constraints)
  return constraints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DigitalConstraints_5ftest_2eproto
