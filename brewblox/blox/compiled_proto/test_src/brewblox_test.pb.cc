// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brewblox_test.proto

#include "brewblox_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_brewblox_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldOpts_brewblox_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_brewblox_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageOpts_brewblox_5ftest_2eproto;
namespace brewblox {
class MessageOptsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageOpts> _instance;
} _MessageOpts_default_instance_;
class FieldOptsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldOpts> _instance;
} _FieldOpts_default_instance_;
}  // namespace brewblox
static void InitDefaultsscc_info_FieldOpts_brewblox_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brewblox::_FieldOpts_default_instance_;
    new (ptr) ::brewblox::FieldOpts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brewblox::FieldOpts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldOpts_brewblox_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldOpts_brewblox_5ftest_2eproto}, {}};

static void InitDefaultsscc_info_MessageOpts_brewblox_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brewblox::_MessageOpts_default_instance_;
    new (ptr) ::brewblox::MessageOpts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brewblox::MessageOpts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageOpts_brewblox_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageOpts_brewblox_5ftest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_brewblox_5ftest_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_brewblox_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_brewblox_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_brewblox_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::brewblox::MessageOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::brewblox::MessageOpts, objtype_),
  PROTOBUF_FIELD_OFFSET(::brewblox::MessageOpts, impl_),
  PROTOBUF_FIELD_OFFSET(::brewblox::MessageOpts, subtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, unit_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, scale_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, objtype_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, hexed_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, readonly_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, logged_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, hexstr_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, driven_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, ignored_),
  PROTOBUF_FIELD_OFFSET(::brewblox::FieldOpts, bitfield_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::brewblox::MessageOpts)},
  { 8, -1, sizeof(::brewblox::FieldOpts)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::brewblox::_MessageOpts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::brewblox::_FieldOpts_default_instance_),
};

const char descriptor_table_protodef_brewblox_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023brewblox_test.proto\022\010brewblox\032 google/"
  "protobuf/descriptor.proto\032\021nanopb_test.p"
  "roto\"|\n\013MessageOpts\022$\n\007objtype\030\003 \001(\0162\023.b"
  "rewblox.BlockType\022(\n\004impl\030\t \003(\0162\023.brewbl"
  "ox.BlockTypeB\005\222\?\002\020\005\022\026\n\007subtype\030\013 \001(\rB\005\222\?"
  "\0028\020:\005\222\?\0020\001\"\335\001\n\tFieldOpts\022 \n\004unit\030\001 \001(\0162\022"
  ".brewblox.UnitType\022\r\n\005scale\030\002 \001(\r\022$\n\007obj"
  "type\030\003 \001(\0162\023.brewblox.BlockType\022\r\n\005hexed"
  "\030\004 \001(\010\022\020\n\010readonly\030\005 \001(\010\022\016\n\006logged\030\006 \001(\010"
  "\022\016\n\006hexstr\030\007 \001(\010\022\016\n\006driven\030\010 \001(\010\022\017\n\007igno"
  "red\030\t \001(\010\022\020\n\010bitfield\030\n \001(\010:\005\222\?\0020\001*\214\002\n\010U"
  "nitType\022\n\n\006NotSet\020\000\022\013\n\007Celsius\020\001\022\022\n\016Inve"
  "rseCelsius\020\002\022\n\n\006Second\020\003\022\n\n\006Minute\020\004\022\010\n\004"
  "Hour\020\005\022\020\n\014DeltaCelsius\020\006\022\031\n\025DeltaCelsius"
  "PerSecond\020\007\022\031\n\025DeltaCelsiusPerMinute\020\010\022\027"
  "\n\023DeltaCelsiusPerHour\020\t\022\032\n\026DeltaCelsiusM"
  "ultSecond\020\n\022\032\n\026DeltaCelsiusMultMinute\020\013\022"
  "\030\n\024DeltaCelsiusMultHour\020\014*\212\007\n\tBlockType\022"
  "\013\n\007Invalid\020\000\022\031\n\025ProcessValueInterface\020\001\022"
  "\027\n\023TempSensorInterface\020\002\022\037\n\033SetpointSens"
  "orPairInterface\020\004\022\033\n\027ActuatorAnalogInter"
  "face\020\005\022\034\n\030ActuatorDigitalInterface\020\006\022\025\n\021"
  "BalancerInterface\020\007\022\022\n\016MutexInterface\020\010\022"
  "\032\n\026OneWireDeviceInterface\020\t\022\024\n\020IoArrayIn"
  "terface\020\n\022\023\n\017DS2408Interface\020\013\022\027\n\023OneWir"
  "eBusInterface\020\014\022\025\n\021IoModuleInterface\020\r\022\037"
  "\n\033OneWireDeviceBlockInterface\020\016\022\010\n\003Any\020\377"
  "\001\022\014\n\007SysInfo\020\200\002\022\n\n\005Ticks\020\201\002\022\017\n\nOneWireBu"
  "s\020\202\002\022\016\n\tBoardPins\020\203\002\022\023\n\016TempSensorMock\020\255"
  "\002\022\026\n\021TempSensorOneWire\020\256\002\022\027\n\022SetpointSen"
  "sorPair\020\257\002\022\010\n\003Pid\020\260\002\022\027\n\022ActuatorAnalogMo"
  "ck\020\261\002\022\020\n\013ActuatorPin\020\262\002\022\020\n\013ActuatorPwm\020\263"
  "\002\022\023\n\016ActuatorOffset\020\264\002\022\r\n\010Balancer\020\265\002\022\n\n"
  "\005Mutex\020\266\002\022\024\n\017SetpointProfile\020\267\002\022\021\n\014WiFiS"
  "ettings\020\270\002\022\022\n\rTouchSettings\020\271\002\022\024\n\017Displa"
  "ySettings\020\272\002\022\013\n\006DS2413\020\273\002\022\024\n\017ActuatorOne"
  "Wire\020\274\002\022\013\n\006DS2408\020\275\002\022\024\n\017DigitalActuator\020"
  "\276\002\022\017\n\nSpark3Pins\020\277\002\022\017\n\nSpark2Pins\020\300\002\022\017\n\n"
  "MotorValve\020\301\002\022\022\n\rActuatorLogic\020\302\002\022\r\n\010Moc"
  "kPins\020\303\002\022\024\n\017TempSensorCombi\020\304\002\022\026\n\021OneWir"
  "eGpioModule\020\305\002:J\n\005field\022\035.google.protobu"
  "f.FieldOptions\030\321\206\003 \001(\0132\023.brewblox.FieldO"
  "ptsB\005\222\?\002\030\003:L\n\003msg\022\037.google.protobuf.Mess"
  "ageOptions\030\321\206\003 \001(\0132\025.brewblox.MessageOpt"
  "sB\005\222\?\002\030\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_brewblox_5ftest_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_brewblox_5ftest_2eproto_sccs[2] = {
  &scc_info_FieldOpts_brewblox_5ftest_2eproto.base,
  &scc_info_MessageOpts_brewblox_5ftest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_brewblox_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brewblox_5ftest_2eproto = {
  false, false, descriptor_table_protodef_brewblox_5ftest_2eproto, "brewblox_test.proto", 1776,
  &descriptor_table_brewblox_5ftest_2eproto_once, descriptor_table_brewblox_5ftest_2eproto_sccs, descriptor_table_brewblox_5ftest_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_brewblox_5ftest_2eproto::offsets,
  file_level_metadata_brewblox_5ftest_2eproto, 2, file_level_enum_descriptors_brewblox_5ftest_2eproto, file_level_service_descriptors_brewblox_5ftest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_brewblox_5ftest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_brewblox_5ftest_2eproto)), true);
namespace brewblox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brewblox_5ftest_2eproto);
  return file_level_enum_descriptors_brewblox_5ftest_2eproto[0];
}
bool UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brewblox_5ftest_2eproto);
  return file_level_enum_descriptors_brewblox_5ftest_2eproto[1];
}
bool BlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MessageOpts::InitAsDefaultInstance() {
}
class MessageOpts::_Internal {
 public:
};

MessageOpts::MessageOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  impl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:brewblox.MessageOpts)
}
MessageOpts::MessageOpts(const MessageOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      impl_(from.impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&objtype_, &from.objtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&objtype_)) + sizeof(subtype_));
  // @@protoc_insertion_point(copy_constructor:brewblox.MessageOpts)
}

void MessageOpts::SharedCtor() {
  ::memset(&objtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtype_) -
      reinterpret_cast<char*>(&objtype_)) + sizeof(subtype_));
}

MessageOpts::~MessageOpts() {
  // @@protoc_insertion_point(destructor:brewblox.MessageOpts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessageOpts::ArenaDtor(void* object) {
  MessageOpts* _this = reinterpret_cast< MessageOpts* >(object);
  (void)_this;
}
void MessageOpts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageOpts& MessageOpts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageOpts_brewblox_5ftest_2eproto.base);
  return *internal_default_instance();
}


void MessageOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:brewblox.MessageOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impl_.Clear();
  ::memset(&objtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtype_) -
      reinterpret_cast<char*>(&objtype_)) + sizeof(subtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .brewblox.BlockType objtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objtype(static_cast<::brewblox::BlockType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .brewblox.BlockType impl = 9 [(.nanopb) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_impl(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_impl(static_cast<::brewblox::BlockType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 subtype = 11 [(.nanopb) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageOpts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brewblox.MessageOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .brewblox.BlockType objtype = 3;
  if (this->objtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_objtype(), target);
  }

  // repeated .brewblox.BlockType impl = 9 [(.nanopb) = {
  {
    int byte_size = _impl_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, impl_, byte_size, target);
    }
  }

  // uint32 subtype = 11 [(.nanopb) = {
  if (this->subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_subtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brewblox.MessageOpts)
  return target;
}

size_t MessageOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brewblox.MessageOpts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .brewblox.BlockType impl = 9 [(.nanopb) = {
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_impl_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_impl(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _impl_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .brewblox.BlockType objtype = 3;
  if (this->objtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_objtype());
  }

  // uint32 subtype = 11 [(.nanopb) = {
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brewblox.MessageOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brewblox.MessageOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brewblox.MessageOpts)
    MergeFrom(*source);
  }
}

void MessageOpts::MergeFrom(const MessageOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brewblox.MessageOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  impl_.MergeFrom(from.impl_);
  if (from.objtype() != 0) {
    _internal_set_objtype(from._internal_objtype());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
}

void MessageOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brewblox.MessageOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageOpts::CopyFrom(const MessageOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brewblox.MessageOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOpts::IsInitialized() const {
  return true;
}

void MessageOpts::InternalSwap(MessageOpts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  impl_.InternalSwap(&other->impl_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOpts, subtype_)
      + sizeof(MessageOpts::subtype_)
      - PROTOBUF_FIELD_OFFSET(MessageOpts, objtype_)>(
          reinterpret_cast<char*>(&objtype_),
          reinterpret_cast<char*>(&other->objtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOpts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldOpts::InitAsDefaultInstance() {
}
class FieldOpts::_Internal {
 public:
};

FieldOpts::FieldOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:brewblox.FieldOpts)
}
FieldOpts::FieldOpts(const FieldOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_, &from.unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitfield_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(bitfield_));
  // @@protoc_insertion_point(copy_constructor:brewblox.FieldOpts)
}

void FieldOpts::SharedCtor() {
  ::memset(&unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitfield_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(bitfield_));
}

FieldOpts::~FieldOpts() {
  // @@protoc_insertion_point(destructor:brewblox.FieldOpts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FieldOpts::ArenaDtor(void* object) {
  FieldOpts* _this = reinterpret_cast< FieldOpts* >(object);
  (void)_this;
}
void FieldOpts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldOpts& FieldOpts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldOpts_brewblox_5ftest_2eproto.base);
  return *internal_default_instance();
}


void FieldOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:brewblox.FieldOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitfield_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(bitfield_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .brewblox.UnitType unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::brewblox::UnitType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .brewblox.BlockType objtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objtype(static_cast<::brewblox::BlockType>(val));
        } else goto handle_unusual;
        continue;
      // bool hexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool readonly = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          readonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool logged = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hexstr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hexstr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool driven = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          driven_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignored = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ignored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bitfield = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bitfield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldOpts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brewblox.FieldOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .brewblox.UnitType unit = 1;
  if (this->unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_unit(), target);
  }

  // uint32 scale = 2;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scale(), target);
  }

  // .brewblox.BlockType objtype = 3;
  if (this->objtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_objtype(), target);
  }

  // bool hexed = 4;
  if (this->hexed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hexed(), target);
  }

  // bool readonly = 5;
  if (this->readonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_readonly(), target);
  }

  // bool logged = 6;
  if (this->logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_logged(), target);
  }

  // bool hexstr = 7;
  if (this->hexstr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hexstr(), target);
  }

  // bool driven = 8;
  if (this->driven() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_driven(), target);
  }

  // bool ignored = 9;
  if (this->ignored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ignored(), target);
  }

  // bool bitfield = 10;
  if (this->bitfield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_bitfield(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brewblox.FieldOpts)
  return target;
}

size_t FieldOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brewblox.FieldOpts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .brewblox.UnitType unit = 1;
  if (this->unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  // uint32 scale = 2;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scale());
  }

  // .brewblox.BlockType objtype = 3;
  if (this->objtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_objtype());
  }

  // bool hexed = 4;
  if (this->hexed() != 0) {
    total_size += 1 + 1;
  }

  // bool readonly = 5;
  if (this->readonly() != 0) {
    total_size += 1 + 1;
  }

  // bool logged = 6;
  if (this->logged() != 0) {
    total_size += 1 + 1;
  }

  // bool hexstr = 7;
  if (this->hexstr() != 0) {
    total_size += 1 + 1;
  }

  // bool driven = 8;
  if (this->driven() != 0) {
    total_size += 1 + 1;
  }

  // bool ignored = 9;
  if (this->ignored() != 0) {
    total_size += 1 + 1;
  }

  // bool bitfield = 10;
  if (this->bitfield() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brewblox.FieldOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brewblox.FieldOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brewblox.FieldOpts)
    MergeFrom(*source);
  }
}

void FieldOpts::MergeFrom(const FieldOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brewblox.FieldOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.objtype() != 0) {
    _internal_set_objtype(from._internal_objtype());
  }
  if (from.hexed() != 0) {
    _internal_set_hexed(from._internal_hexed());
  }
  if (from.readonly() != 0) {
    _internal_set_readonly(from._internal_readonly());
  }
  if (from.logged() != 0) {
    _internal_set_logged(from._internal_logged());
  }
  if (from.hexstr() != 0) {
    _internal_set_hexstr(from._internal_hexstr());
  }
  if (from.driven() != 0) {
    _internal_set_driven(from._internal_driven());
  }
  if (from.ignored() != 0) {
    _internal_set_ignored(from._internal_ignored());
  }
  if (from.bitfield() != 0) {
    _internal_set_bitfield(from._internal_bitfield());
  }
}

void FieldOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brewblox.FieldOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldOpts::CopyFrom(const FieldOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brewblox.FieldOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldOpts::IsInitialized() const {
  return true;
}

void FieldOpts::InternalSwap(FieldOpts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldOpts, bitfield_)
      + sizeof(FieldOpts::bitfield_)
      - PROTOBUF_FIELD_OFFSET(FieldOpts, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldOpts::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::brewblox::FieldOpts >, 11, false >
  field(kFieldFieldNumber, ::brewblox::FieldOpts::default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::brewblox::MessageOpts >, 11, false >
  msg(kMsgFieldNumber, ::brewblox::MessageOpts::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace brewblox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brewblox::MessageOpts* Arena::CreateMaybeMessage< ::brewblox::MessageOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brewblox::MessageOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::brewblox::FieldOpts* Arena::CreateMaybeMessage< ::brewblox::FieldOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brewblox::FieldOpts >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
