// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorPwm_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActuatorPwm_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActuatorPwm_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "Constraints_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActuatorPwm_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActuatorPwm_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorPwm_5ftest_2eproto;
namespace blox_test {
namespace ActuatorPwm {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace ActuatorPwm
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::ActuatorPwm::Block* Arena::CreateMaybeMessage<::blox_test::ActuatorPwm::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace ActuatorPwm {

// ===================================================================

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.ActuatorPwm.Block) */ {
 public:
  inline Block() : Block(nullptr) {};
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.ActuatorPwm.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActuatorPwm_5ftest_2eproto);
    return ::descriptor_table_ActuatorPwm_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrippedFieldsFieldNumber = 99,
    kConstrainedByFieldNumber = 6,
    kActuatorIdFieldNumber = 1,
    kPeriodFieldNumber = 3,
    kSettingFieldNumber = 4,
    kValueFieldNumber = 5,
    kDrivenActuatorIdFieldNumber = 7,
    kEnabledFieldNumber = 8,
    kDesiredSettingFieldNumber = 9,
  };
  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_strippedfields();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 strippedfields(int index) const;
  void set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_strippedfields();

  // .blox_test.Constraints.AnalogConstraints constrainedBy = 6;
  bool has_constrainedby() const;
  private:
  bool _internal_has_constrainedby() const;
  public:
  void clear_constrainedby();
  const ::blox_test::Constraints::AnalogConstraints& constrainedby() const;
  ::blox_test::Constraints::AnalogConstraints* release_constrainedby();
  ::blox_test::Constraints::AnalogConstraints* mutable_constrainedby();
  void set_allocated_constrainedby(::blox_test::Constraints::AnalogConstraints* constrainedby);
  private:
  const ::blox_test::Constraints::AnalogConstraints& _internal_constrainedby() const;
  ::blox_test::Constraints::AnalogConstraints* _internal_mutable_constrainedby();
  public:
  void unsafe_arena_set_allocated_constrainedby(
      ::blox_test::Constraints::AnalogConstraints* constrainedby);
  ::blox_test::Constraints::AnalogConstraints* unsafe_arena_release_constrainedby();

  // uint32 actuatorId = 1 [(.nanopb) = {
  void clear_actuatorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actuatorid() const;
  void set_actuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actuatorid() const;
  void _internal_set_actuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 period = 3 [(.brewblox.field) = {
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 setting = 4 [(.nanopb) = {
  void clear_setting();
  ::PROTOBUF_NAMESPACE_ID::int32 setting() const;
  void set_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setting() const;
  void _internal_set_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 value = 5 [(.nanopb) = {
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 drivenActuatorId = 7 [(.nanopb) = {
  void clear_drivenactuatorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 drivenactuatorid() const;
  void set_drivenactuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drivenactuatorid() const;
  void _internal_set_drivenactuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enabled = 8;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // sint32 desiredSetting = 9 [(.nanopb) = {
  void clear_desiredsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 desiredsetting() const;
  void set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desiredsetting() const;
  void _internal_set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.ActuatorPwm.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  ::blox_test::Constraints::AnalogConstraints* constrainedby_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actuatorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::int32 setting_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drivenactuatorid_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 desiredsetting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorPwm_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// uint32 actuatorId = 1 [(.nanopb) = {
inline void Block::clear_actuatorid() {
  actuatorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_actuatorid() const {
  return actuatorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::actuatorid() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.actuatorId)
  return _internal_actuatorid();
}
inline void Block::_internal_set_actuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actuatorid_ = value;
}
inline void Block::set_actuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actuatorid(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.actuatorId)
}

// uint32 period = 3 [(.brewblox.field) = {
inline void Block::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::period() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.period)
  return _internal_period();
}
inline void Block::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void Block::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.period)
}

// sint32 setting = 4 [(.nanopb) = {
inline void Block::clear_setting() {
  setting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::_internal_setting() const {
  return setting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::setting() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.setting)
  return _internal_setting();
}
inline void Block::_internal_set_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  setting_ = value;
}
inline void Block::set_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.setting)
}

// sint32 value = 5 [(.nanopb) = {
inline void Block::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::value() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.value)
  return _internal_value();
}
inline void Block::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Block::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.value)
}

// .blox_test.Constraints.AnalogConstraints constrainedBy = 6;
inline bool Block::_internal_has_constrainedby() const {
  return this != internal_default_instance() && constrainedby_ != nullptr;
}
inline bool Block::has_constrainedby() const {
  return _internal_has_constrainedby();
}
inline const ::blox_test::Constraints::AnalogConstraints& Block::_internal_constrainedby() const {
  const ::blox_test::Constraints::AnalogConstraints* p = constrainedby_;
  return p != nullptr ? *p : *reinterpret_cast<const ::blox_test::Constraints::AnalogConstraints*>(
      &::blox_test::Constraints::_AnalogConstraints_default_instance_);
}
inline const ::blox_test::Constraints::AnalogConstraints& Block::constrainedby() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.constrainedBy)
  return _internal_constrainedby();
}
inline void Block::unsafe_arena_set_allocated_constrainedby(
    ::blox_test::Constraints::AnalogConstraints* constrainedby) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  constrainedby_ = constrainedby;
  if (constrainedby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.ActuatorPwm.Block.constrainedBy)
}
inline ::blox_test::Constraints::AnalogConstraints* Block::release_constrainedby() {
  auto temp = unsafe_arena_release_constrainedby();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blox_test::Constraints::AnalogConstraints* Block::unsafe_arena_release_constrainedby() {
  // @@protoc_insertion_point(field_release:blox_test.ActuatorPwm.Block.constrainedBy)
  
  ::blox_test::Constraints::AnalogConstraints* temp = constrainedby_;
  constrainedby_ = nullptr;
  return temp;
}
inline ::blox_test::Constraints::AnalogConstraints* Block::_internal_mutable_constrainedby() {
  
  if (constrainedby_ == nullptr) {
    auto* p = CreateMaybeMessage<::blox_test::Constraints::AnalogConstraints>(GetArena());
    constrainedby_ = p;
  }
  return constrainedby_;
}
inline ::blox_test::Constraints::AnalogConstraints* Block::mutable_constrainedby() {
  // @@protoc_insertion_point(field_mutable:blox_test.ActuatorPwm.Block.constrainedBy)
  return _internal_mutable_constrainedby();
}
inline void Block::set_allocated_constrainedby(::blox_test::Constraints::AnalogConstraints* constrainedby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  if (constrainedby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby)->GetArena();
    if (message_arena != submessage_arena) {
      constrainedby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constrainedby, submessage_arena);
    }
    
  } else {
    
  }
  constrainedby_ = constrainedby;
  // @@protoc_insertion_point(field_set_allocated:blox_test.ActuatorPwm.Block.constrainedBy)
}

// uint32 drivenActuatorId = 7 [(.nanopb) = {
inline void Block::clear_drivenactuatorid() {
  drivenactuatorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_drivenactuatorid() const {
  return drivenactuatorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::drivenactuatorid() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.drivenActuatorId)
  return _internal_drivenactuatorid();
}
inline void Block::_internal_set_drivenactuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  drivenactuatorid_ = value;
}
inline void Block::set_drivenactuatorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drivenactuatorid(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.drivenActuatorId)
}

// bool enabled = 8;
inline void Block::clear_enabled() {
  enabled_ = false;
}
inline bool Block::_internal_enabled() const {
  return enabled_;
}
inline bool Block::enabled() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.enabled)
  return _internal_enabled();
}
inline void Block::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Block::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.enabled)
}

// sint32 desiredSetting = 9 [(.nanopb) = {
inline void Block::clear_desiredsetting() {
  desiredsetting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::_internal_desiredsetting() const {
  return desiredsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::desiredsetting() const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.desiredSetting)
  return _internal_desiredsetting();
}
inline void Block::_internal_set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  desiredsetting_ = value;
}
inline void Block::set_desiredsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_desiredsetting(value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.desiredSetting)
}

// repeated uint32 strippedFields = 99 [(.nanopb) = {
inline int Block::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int Block::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void Block::clear_strippedfields() {
  strippedfields_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.ActuatorPwm.Block.strippedFields)
  return _internal_strippedfields(index);
}
inline void Block::set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox_test.ActuatorPwm.Block.strippedFields)
}
inline void Block::_internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Add(value);
}
inline void Block::add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox_test.ActuatorPwm.Block.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Block::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Block::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox_test.ActuatorPwm.Block.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Block::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Block::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.ActuatorPwm.Block.strippedFields)
  return _internal_mutable_strippedfields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ActuatorPwm
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActuatorPwm_5ftest_2eproto
