// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Spark2Pins_test.proto

#include "Spark2Pins_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr Spark2PinsIoPin::Spark2PinsIoPin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Spark2PinsIoPinDefaultTypeInternal {
  constexpr Spark2PinsIoPinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Spark2PinsIoPinDefaultTypeInternal() {}
  union {
    Spark2PinsIoPin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Spark2PinsIoPinDefaultTypeInternal _Spark2PinsIoPin_default_instance_;
constexpr Spark2Pins::Spark2Pins(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pins_()
  , soundalarm_(false)
  , hardware_(0)
{}
struct Spark2PinsDefaultTypeInternal {
  constexpr Spark2PinsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Spark2PinsDefaultTypeInternal() {}
  union {
    Spark2Pins _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Spark2PinsDefaultTypeInternal _Spark2Pins_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Spark2Pins_5ftest_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Spark2Pins_5ftest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Spark2Pins_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Spark2Pins_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::Spark2PinsIoPin, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox::Spark2PinsIoPin, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::blox::Spark2PinsIoPin, Pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::Spark2Pins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::Spark2Pins, pins_),
  PROTOBUF_FIELD_OFFSET(::blox::Spark2Pins, soundalarm_),
  PROTOBUF_FIELD_OFFSET(::blox::Spark2Pins, hardware_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Spark2PinsIoPin)},
  { 10, -1, sizeof(::blox::Spark2Pins)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_Spark2PinsIoPin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_Spark2Pins_default_instance_),
};

const char descriptor_table_protodef_Spark2Pins_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Spark2Pins_test.proto\022\004blox\032\023brewblox_"
  "test.proto\032\021nanopb_test.proto\032\022IoArray_t"
  "est.proto\"\250\001\n\017Spark2PinsIoPin\022\"\n\007bottom1"
  "\030\001 \001(\0132\017.blox.IoChannelH\000\022\"\n\007bottom2\030\002 \001"
  "(\0132\017.blox.IoChannelH\000\022\"\n\007bottom3\030\003 \001(\0132\017"
  ".blox.IoChannelH\000\022\"\n\007bottom0\030\004 \001(\0132\017.blo"
  "x.IoChannelH\000B\005\n\003Pin\"\325\001\n\nSpark2Pins\0225\n\004p"
  "ins\030\001 \003(\0132\025.blox.Spark2PinsIoPinB\020\222\?\002\020\004\222"
  "\?\002x\001\212\265\030\002(\001\022\022\n\nsoundAlarm\030\005 \001(\010\0223\n\010hardwa"
  "re\030\010 \001(\0162\031.blox.Spark2Pins.HardwareB\006\212\265\030"
  "\002(\001\"8\n\010Hardware\022\016\n\nHW_UNKNOWN\020\000\022\r\n\tHW_SP"
  "ARK1\020\001\022\r\n\tHW_SPARK2\020\002:\r\212\265\030\003\030\300\002\212\265\030\002H\nb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Spark2Pins_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Spark2Pins_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Spark2Pins_5ftest_2eproto = {
  false, false, 484, descriptor_table_protodef_Spark2Pins_5ftest_2eproto, "Spark2Pins_test.proto", 
  &descriptor_table_Spark2Pins_5ftest_2eproto_once, descriptor_table_Spark2Pins_5ftest_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_Spark2Pins_5ftest_2eproto::offsets,
  file_level_metadata_Spark2Pins_5ftest_2eproto, file_level_enum_descriptors_Spark2Pins_5ftest_2eproto, file_level_service_descriptors_Spark2Pins_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Spark2Pins_5ftest_2eproto_getter() {
  return &descriptor_table_Spark2Pins_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Spark2Pins_5ftest_2eproto(&descriptor_table_Spark2Pins_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Spark2Pins_Hardware_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Spark2Pins_5ftest_2eproto);
  return file_level_enum_descriptors_Spark2Pins_5ftest_2eproto[0];
}
bool Spark2Pins_Hardware_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Spark2Pins_Hardware Spark2Pins::HW_UNKNOWN;
constexpr Spark2Pins_Hardware Spark2Pins::HW_SPARK1;
constexpr Spark2Pins_Hardware Spark2Pins::HW_SPARK2;
constexpr Spark2Pins_Hardware Spark2Pins::Hardware_MIN;
constexpr Spark2Pins_Hardware Spark2Pins::Hardware_MAX;
constexpr int Spark2Pins::Hardware_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Spark2PinsIoPin::_Internal {
 public:
  static const ::blox::IoChannel& bottom1(const Spark2PinsIoPin* msg);
  static const ::blox::IoChannel& bottom2(const Spark2PinsIoPin* msg);
  static const ::blox::IoChannel& bottom3(const Spark2PinsIoPin* msg);
  static const ::blox::IoChannel& bottom0(const Spark2PinsIoPin* msg);
};

const ::blox::IoChannel&
Spark2PinsIoPin::_Internal::bottom1(const Spark2PinsIoPin* msg) {
  return *msg->Pin_.bottom1_;
}
const ::blox::IoChannel&
Spark2PinsIoPin::_Internal::bottom2(const Spark2PinsIoPin* msg) {
  return *msg->Pin_.bottom2_;
}
const ::blox::IoChannel&
Spark2PinsIoPin::_Internal::bottom3(const Spark2PinsIoPin* msg) {
  return *msg->Pin_.bottom3_;
}
const ::blox::IoChannel&
Spark2PinsIoPin::_Internal::bottom0(const Spark2PinsIoPin* msg) {
  return *msg->Pin_.bottom0_;
}
void Spark2PinsIoPin::set_allocated_bottom1(::blox::IoChannel* bottom1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (bottom1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom1));
    if (message_arena != submessage_arena) {
      bottom1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom1, submessage_arena);
    }
    set_has_bottom1();
    Pin_.bottom1_ = bottom1;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.Spark2PinsIoPin.bottom1)
}
void Spark2PinsIoPin::clear_bottom1() {
  if (_internal_has_bottom1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.bottom1_;
    }
    clear_has_Pin();
  }
}
void Spark2PinsIoPin::set_allocated_bottom2(::blox::IoChannel* bottom2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (bottom2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom2));
    if (message_arena != submessage_arena) {
      bottom2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom2, submessage_arena);
    }
    set_has_bottom2();
    Pin_.bottom2_ = bottom2;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.Spark2PinsIoPin.bottom2)
}
void Spark2PinsIoPin::clear_bottom2() {
  if (_internal_has_bottom2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.bottom2_;
    }
    clear_has_Pin();
  }
}
void Spark2PinsIoPin::set_allocated_bottom3(::blox::IoChannel* bottom3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (bottom3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom3));
    if (message_arena != submessage_arena) {
      bottom3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom3, submessage_arena);
    }
    set_has_bottom3();
    Pin_.bottom3_ = bottom3;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.Spark2PinsIoPin.bottom3)
}
void Spark2PinsIoPin::clear_bottom3() {
  if (_internal_has_bottom3()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.bottom3_;
    }
    clear_has_Pin();
  }
}
void Spark2PinsIoPin::set_allocated_bottom0(::blox::IoChannel* bottom0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (bottom0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom0));
    if (message_arena != submessage_arena) {
      bottom0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom0, submessage_arena);
    }
    set_has_bottom0();
    Pin_.bottom0_ = bottom0;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.Spark2PinsIoPin.bottom0)
}
void Spark2PinsIoPin::clear_bottom0() {
  if (_internal_has_bottom0()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.bottom0_;
    }
    clear_has_Pin();
  }
}
Spark2PinsIoPin::Spark2PinsIoPin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.Spark2PinsIoPin)
}
Spark2PinsIoPin::Spark2PinsIoPin(const Spark2PinsIoPin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Pin();
  switch (from.Pin_case()) {
    case kBottom1: {
      _internal_mutable_bottom1()->::blox::IoChannel::MergeFrom(from._internal_bottom1());
      break;
    }
    case kBottom2: {
      _internal_mutable_bottom2()->::blox::IoChannel::MergeFrom(from._internal_bottom2());
      break;
    }
    case kBottom3: {
      _internal_mutable_bottom3()->::blox::IoChannel::MergeFrom(from._internal_bottom3());
      break;
    }
    case kBottom0: {
      _internal_mutable_bottom0()->::blox::IoChannel::MergeFrom(from._internal_bottom0());
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox.Spark2PinsIoPin)
}

inline void Spark2PinsIoPin::SharedCtor() {
clear_has_Pin();
}

Spark2PinsIoPin::~Spark2PinsIoPin() {
  // @@protoc_insertion_point(destructor:blox.Spark2PinsIoPin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Spark2PinsIoPin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Pin()) {
    clear_Pin();
  }
}

void Spark2PinsIoPin::ArenaDtor(void* object) {
  Spark2PinsIoPin* _this = reinterpret_cast< Spark2PinsIoPin* >(object);
  (void)_this;
}
void Spark2PinsIoPin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Spark2PinsIoPin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Spark2PinsIoPin::clear_Pin() {
// @@protoc_insertion_point(one_of_clear_start:blox.Spark2PinsIoPin)
  switch (Pin_case()) {
    case kBottom1: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.bottom1_;
      }
      break;
    }
    case kBottom2: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.bottom2_;
      }
      break;
    }
    case kBottom3: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.bottom3_;
      }
      break;
    }
    case kBottom0: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.bottom0_;
      }
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PIN_NOT_SET;
}


void Spark2PinsIoPin::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Spark2PinsIoPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Pin();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Spark2PinsIoPin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox.IoChannel bottom1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel bottom2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel bottom3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel bottom0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Spark2PinsIoPin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.Spark2PinsIoPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.IoChannel bottom1 = 1;
  if (_internal_has_bottom1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bottom1(this), target, stream);
  }

  // .blox.IoChannel bottom2 = 2;
  if (_internal_has_bottom2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bottom2(this), target, stream);
  }

  // .blox.IoChannel bottom3 = 3;
  if (_internal_has_bottom3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bottom3(this), target, stream);
  }

  // .blox.IoChannel bottom0 = 4;
  if (_internal_has_bottom0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bottom0(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Spark2PinsIoPin)
  return target;
}

size_t Spark2PinsIoPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Spark2PinsIoPin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Pin_case()) {
    // .blox.IoChannel bottom1 = 1;
    case kBottom1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.bottom1_);
      break;
    }
    // .blox.IoChannel bottom2 = 2;
    case kBottom2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.bottom2_);
      break;
    }
    // .blox.IoChannel bottom3 = 3;
    case kBottom3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.bottom3_);
      break;
    }
    // .blox.IoChannel bottom0 = 4;
    case kBottom0: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.bottom0_);
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Spark2PinsIoPin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Spark2PinsIoPin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Spark2PinsIoPin::GetClassData() const { return &_class_data_; }

void Spark2PinsIoPin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Spark2PinsIoPin *>(to)->MergeFrom(
      static_cast<const Spark2PinsIoPin &>(from));
}


void Spark2PinsIoPin::MergeFrom(const Spark2PinsIoPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Spark2PinsIoPin)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Pin_case()) {
    case kBottom1: {
      _internal_mutable_bottom1()->::blox::IoChannel::MergeFrom(from._internal_bottom1());
      break;
    }
    case kBottom2: {
      _internal_mutable_bottom2()->::blox::IoChannel::MergeFrom(from._internal_bottom2());
      break;
    }
    case kBottom3: {
      _internal_mutable_bottom3()->::blox::IoChannel::MergeFrom(from._internal_bottom3());
      break;
    }
    case kBottom0: {
      _internal_mutable_bottom0()->::blox::IoChannel::MergeFrom(from._internal_bottom0());
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Spark2PinsIoPin::CopyFrom(const Spark2PinsIoPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Spark2PinsIoPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spark2PinsIoPin::IsInitialized() const {
  return true;
}

void Spark2PinsIoPin::InternalSwap(Spark2PinsIoPin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Pin_, other->Pin_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Spark2PinsIoPin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Spark2Pins_5ftest_2eproto_getter, &descriptor_table_Spark2Pins_5ftest_2eproto_once,
      file_level_metadata_Spark2Pins_5ftest_2eproto[0]);
}

// ===================================================================

class Spark2Pins::_Internal {
 public:
};

Spark2Pins::Spark2Pins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.Spark2Pins)
}
Spark2Pins::Spark2Pins(const Spark2Pins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pins_(from.pins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&soundalarm_, &from.soundalarm_,
    static_cast<size_t>(reinterpret_cast<char*>(&hardware_) -
    reinterpret_cast<char*>(&soundalarm_)) + sizeof(hardware_));
  // @@protoc_insertion_point(copy_constructor:blox.Spark2Pins)
}

inline void Spark2Pins::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soundalarm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hardware_) -
    reinterpret_cast<char*>(&soundalarm_)) + sizeof(hardware_));
}

Spark2Pins::~Spark2Pins() {
  // @@protoc_insertion_point(destructor:blox.Spark2Pins)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Spark2Pins::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Spark2Pins::ArenaDtor(void* object) {
  Spark2Pins* _this = reinterpret_cast< Spark2Pins* >(object);
  (void)_this;
}
void Spark2Pins::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Spark2Pins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Spark2Pins::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Spark2Pins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pins_.Clear();
  ::memset(&soundalarm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hardware_) -
      reinterpret_cast<char*>(&soundalarm_)) + sizeof(hardware_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Spark2Pins::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox.Spark2PinsIoPin pins = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool soundAlarm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          soundalarm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.Spark2Pins.Hardware hardware = 8 [(.brewblox_test) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hardware(static_cast<::blox::Spark2Pins_Hardware>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Spark2Pins::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.Spark2Pins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.Spark2PinsIoPin pins = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pins(i), target, stream);
  }

  // bool soundAlarm = 5;
  if (this->_internal_soundalarm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_soundalarm(), target);
  }

  // .blox.Spark2Pins.Hardware hardware = 8 [(.brewblox_test) = {
  if (this->_internal_hardware() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_hardware(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Spark2Pins)
  return target;
}

size_t Spark2Pins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Spark2Pins)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.Spark2PinsIoPin pins = 1 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_pins_size();
  for (const auto& msg : this->pins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool soundAlarm = 5;
  if (this->_internal_soundalarm() != 0) {
    total_size += 1 + 1;
  }

  // .blox.Spark2Pins.Hardware hardware = 8 [(.brewblox_test) = {
  if (this->_internal_hardware() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hardware());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Spark2Pins::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Spark2Pins::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Spark2Pins::GetClassData() const { return &_class_data_; }

void Spark2Pins::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Spark2Pins *>(to)->MergeFrom(
      static_cast<const Spark2Pins &>(from));
}


void Spark2Pins::MergeFrom(const Spark2Pins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Spark2Pins)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pins_.MergeFrom(from.pins_);
  if (from._internal_soundalarm() != 0) {
    _internal_set_soundalarm(from._internal_soundalarm());
  }
  if (from._internal_hardware() != 0) {
    _internal_set_hardware(from._internal_hardware());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Spark2Pins::CopyFrom(const Spark2Pins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Spark2Pins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spark2Pins::IsInitialized() const {
  return true;
}

void Spark2Pins::InternalSwap(Spark2Pins* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pins_.InternalSwap(&other->pins_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Spark2Pins, hardware_)
      + sizeof(Spark2Pins::hardware_)
      - PROTOBUF_FIELD_OFFSET(Spark2Pins, soundalarm_)>(
          reinterpret_cast<char*>(&soundalarm_),
          reinterpret_cast<char*>(&other->soundalarm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Spark2Pins::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Spark2Pins_5ftest_2eproto_getter, &descriptor_table_Spark2Pins_5ftest_2eproto_once,
      file_level_metadata_Spark2Pins_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::Spark2PinsIoPin* Arena::CreateMaybeMessage< ::blox::Spark2PinsIoPin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::Spark2PinsIoPin >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::Spark2Pins* Arena::CreateMaybeMessage< ::blox::Spark2Pins >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::Spark2Pins >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
