// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SetpointSensorPair_test.proto

#include "SetpointSensorPair_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace blox_test {
namespace SetpointSensorPair {
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
}  // namespace SetpointSensorPair
}  // namespace blox_test
static void InitDefaultsscc_info_Block_SetpointSensorPair_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::SetpointSensorPair::_Block_default_instance_;
    new (ptr) ::blox_test::SetpointSensorPair::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::SetpointSensorPair::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Block_SetpointSensorPair_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Block_SetpointSensorPair_5ftest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SetpointSensorPair_5ftest_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SetpointSensorPair_5ftest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SetpointSensorPair_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SetpointSensorPair_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, sensorid_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, setting_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, value_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, settingenabled_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, storedsetting_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, filter_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, filterthreshold_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, valueunfiltered_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, resetfilter_),
  PROTOBUF_FIELD_OFFSET(::blox_test::SetpointSensorPair::Block, strippedfields_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox_test::SetpointSensorPair::Block)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::SetpointSensorPair::_Block_default_instance_),
};

const char descriptor_table_protodef_SetpointSensorPair_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035SetpointSensorPair_test.proto\022\034blox_te"
  "st.SetpointSensorPair\032\023brewblox_test.pro"
  "to\032\021nanopb_test.proto\"\305\003\n\005Block\022\035\n\010senso"
  "rId\030\002 \001(\rB\013\212\265\030\002\030\002\222\?\0028\020\022/\n\007setting\030\005 \001(\021B"
  "\036\212\265\030\0020\001\212\265\030\002\010\001\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\022-\n\005value"
  "\030\006 \001(\021B\036\212\265\030\0020\001\212\265\030\002\010\001\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\022\026"
  "\n\016settingEnabled\030\007 \001(\010\022/\n\rstoredSetting\030"
  "\010 \001(\021B\030\212\265\030\0020\000\212\265\030\002\010\001\212\265\030\003\020\200 \222\?\0028 \022:\n\006filte"
  "r\030\t \001(\0162*.blox_test.SetpointSensorPair.F"
  "ilterChoice\022+\n\017filterThreshold\030\n \001(\021B\022\212\265"
  "\030\002\010\006\212\265\030\003\020\200 \222\?\0028 \0227\n\017valueUnfiltered\030\013 \001("
  "\021B\036\212\265\030\0020\001\212\265\030\002\010\001\212\265\030\003\020\200 \222\?\0028 \212\265\030\002(\001\022\023\n\013res"
  "etFilter\030\014 \001(\010\022(\n\016strippedFields\030c \003(\rB\020"
  "\212\265\030\002(\001\222\?\0028\020\222\?\002\020\003:\023\212\265\030\003\030\257\002\212\265\030\002H\001\212\265\030\002H\004*~\n"
  "\014FilterChoice\022\017\n\013FILTER_NONE\020\000\022\016\n\nFILTER"
  "_15s\020\001\022\016\n\nFILTER_45s\020\002\022\016\n\nFILTER_90s\020\003\022\r"
  "\n\tFILTER_3m\020\004\022\016\n\nFILTER_10m\020\005\022\016\n\nFILTER_"
  "30m\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SetpointSensorPair_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SetpointSensorPair_5ftest_2eproto_sccs[1] = {
  &scc_info_Block_SetpointSensorPair_5ftest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SetpointSensorPair_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SetpointSensorPair_5ftest_2eproto = {
  false, false, descriptor_table_protodef_SetpointSensorPair_5ftest_2eproto, "SetpointSensorPair_test.proto", 693,
  &descriptor_table_SetpointSensorPair_5ftest_2eproto_once, descriptor_table_SetpointSensorPair_5ftest_2eproto_sccs, descriptor_table_SetpointSensorPair_5ftest_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_SetpointSensorPair_5ftest_2eproto::offsets,
  file_level_metadata_SetpointSensorPair_5ftest_2eproto, 1, file_level_enum_descriptors_SetpointSensorPair_5ftest_2eproto, file_level_service_descriptors_SetpointSensorPair_5ftest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SetpointSensorPair_5ftest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SetpointSensorPair_5ftest_2eproto)), true);
namespace blox_test {
namespace SetpointSensorPair {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterChoice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SetpointSensorPair_5ftest_2eproto);
  return file_level_enum_descriptors_SetpointSensorPair_5ftest_2eproto[0];
}
bool FilterChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Block::InitAsDefaultInstance() {
}
class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strippedfields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.SetpointSensorPair.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      strippedfields_(from.strippedfields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sensorid_, &from.sensorid_,
    static_cast<size_t>(reinterpret_cast<char*>(&valueunfiltered_) -
    reinterpret_cast<char*>(&sensorid_)) + sizeof(valueunfiltered_));
  // @@protoc_insertion_point(copy_constructor:blox_test.SetpointSensorPair.Block)
}

void Block::SharedCtor() {
  ::memset(&sensorid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valueunfiltered_) -
      reinterpret_cast<char*>(&sensorid_)) + sizeof(valueunfiltered_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.SetpointSensorPair.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_SetpointSensorPair_5ftest_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.SetpointSensorPair.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strippedfields_.Clear();
  ::memset(&sensorid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valueunfiltered_) -
      reinterpret_cast<char*>(&sensorid_)) + sizeof(valueunfiltered_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sensorId = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sensorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 setting = 5 [(.nanopb) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 value = 6 [(.nanopb) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool settingEnabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          settingenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 storedSetting = 8 [(.nanopb) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          storedsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox_test.SetpointSensorPair.FilterChoice filter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filter(static_cast<::blox_test::SetpointSensorPair::FilterChoice>(val));
        } else goto handle_unusual;
        continue;
      // sint32 filterThreshold = 10 [(.nanopb) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          filterthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 valueUnfiltered = 11 [(.nanopb) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          valueunfiltered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool resetFilter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          resetfilter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 strippedFields = 99 [(.nanopb) = {
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_strippedfields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.SetpointSensorPair.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensorId = 2 [(.nanopb) = {
  if (this->sensorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sensorid(), target);
  }

  // sint32 setting = 5 [(.nanopb) = {
  if (this->setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_setting(), target);
  }

  // sint32 value = 6 [(.nanopb) = {
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_value(), target);
  }

  // bool settingEnabled = 7;
  if (this->settingenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_settingenabled(), target);
  }

  // sint32 storedSetting = 8 [(.nanopb) = {
  if (this->storedsetting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_storedsetting(), target);
  }

  // .blox_test.SetpointSensorPair.FilterChoice filter = 9;
  if (this->filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_filter(), target);
  }

  // sint32 filterThreshold = 10 [(.nanopb) = {
  if (this->filterthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_filterthreshold(), target);
  }

  // sint32 valueUnfiltered = 11 [(.nanopb) = {
  if (this->valueunfiltered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_valueunfiltered(), target);
  }

  // bool resetFilter = 12;
  if (this->resetfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_resetfilter(), target);
  }

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  {
    int byte_size = _strippedfields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          99, _internal_strippedfields(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.SetpointSensorPair.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.SetpointSensorPair.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 strippedFields = 99 [(.nanopb) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->strippedfields_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _strippedfields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 sensorId = 2 [(.nanopb) = {
  if (this->sensorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensorid());
  }

  // sint32 setting = 5 [(.nanopb) = {
  if (this->setting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_setting());
  }

  // sint32 value = 6 [(.nanopb) = {
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_value());
  }

  // sint32 storedSetting = 8 [(.nanopb) = {
  if (this->storedsetting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_storedsetting());
  }

  // .blox_test.SetpointSensorPair.FilterChoice filter = 9;
  if (this->filter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
  }

  // bool settingEnabled = 7;
  if (this->settingenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool resetFilter = 12;
  if (this->resetfilter() != 0) {
    total_size += 1 + 1;
  }

  // sint32 filterThreshold = 10 [(.nanopb) = {
  if (this->filterthreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_filterthreshold());
  }

  // sint32 valueUnfiltered = 11 [(.nanopb) = {
  if (this->valueunfiltered() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_valueunfiltered());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.SetpointSensorPair.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.SetpointSensorPair.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.SetpointSensorPair.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.SetpointSensorPair.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strippedfields_.MergeFrom(from.strippedfields_);
  if (from.sensorid() != 0) {
    _internal_set_sensorid(from._internal_sensorid());
  }
  if (from.setting() != 0) {
    _internal_set_setting(from._internal_setting());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.storedsetting() != 0) {
    _internal_set_storedsetting(from._internal_storedsetting());
  }
  if (from.filter() != 0) {
    _internal_set_filter(from._internal_filter());
  }
  if (from.settingenabled() != 0) {
    _internal_set_settingenabled(from._internal_settingenabled());
  }
  if (from.resetfilter() != 0) {
    _internal_set_resetfilter(from._internal_resetfilter());
  }
  if (from.filterthreshold() != 0) {
    _internal_set_filterthreshold(from._internal_filterthreshold());
  }
  if (from.valueunfiltered() != 0) {
    _internal_set_valueunfiltered(from._internal_valueunfiltered());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.SetpointSensorPair.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.SetpointSensorPair.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  strippedfields_.InternalSwap(&other->strippedfields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, valueunfiltered_)
      + sizeof(Block::valueunfiltered_)
      - PROTOBUF_FIELD_OFFSET(Block, sensorid_)>(
          reinterpret_cast<char*>(&sensorid_),
          reinterpret_cast<char*>(&other->sensorid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SetpointSensorPair
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::SetpointSensorPair::Block* Arena::CreateMaybeMessage< ::blox_test::SetpointSensorPair::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::SetpointSensorPair::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
