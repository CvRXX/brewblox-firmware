// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Balancer_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Balancer_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Balancer_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Balancer_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Balancer_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Balancer_5ftest_2eproto;
namespace blox_test {
namespace Balancer {
class BalancedActuator;
class BalancedActuatorDefaultTypeInternal;
extern BalancedActuatorDefaultTypeInternal _BalancedActuator_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace Balancer
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::Balancer::BalancedActuator* Arena::CreateMaybeMessage<::blox_test::Balancer::BalancedActuator>(Arena*);
template<> ::blox_test::Balancer::Block* Arena::CreateMaybeMessage<::blox_test::Balancer::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace Balancer {

// ===================================================================

class BalancedActuator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Balancer.BalancedActuator) */ {
 public:
  inline BalancedActuator() : BalancedActuator(nullptr) {};
  virtual ~BalancedActuator();

  BalancedActuator(const BalancedActuator& from);
  BalancedActuator(BalancedActuator&& from) noexcept
    : BalancedActuator() {
    *this = ::std::move(from);
  }

  inline BalancedActuator& operator=(const BalancedActuator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BalancedActuator& operator=(BalancedActuator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BalancedActuator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BalancedActuator* internal_default_instance() {
    return reinterpret_cast<const BalancedActuator*>(
               &_BalancedActuator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BalancedActuator& a, BalancedActuator& b) {
    a.Swap(&b);
  }
  inline void Swap(BalancedActuator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BalancedActuator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BalancedActuator* New() const final {
    return CreateMaybeMessage<BalancedActuator>(nullptr);
  }

  BalancedActuator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BalancedActuator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BalancedActuator& from);
  void MergeFrom(const BalancedActuator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BalancedActuator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Balancer.BalancedActuator";
  }
  protected:
  explicit BalancedActuator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Balancer_5ftest_2eproto);
    return ::descriptor_table_Balancer_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRequestedFieldNumber = 2,
    kGrantedFieldNumber = 3,
  };
  // uint32 id = 1 [(.nanopb) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 requested = 2 [(.nanopb) = {
  void clear_requested();
  ::PROTOBUF_NAMESPACE_ID::int32 requested() const;
  void set_requested(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requested() const;
  void _internal_set_requested(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 granted = 3 [(.nanopb) = {
  void clear_granted();
  ::PROTOBUF_NAMESPACE_ID::int32 granted() const;
  void set_granted(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_granted() const;
  void _internal_set_granted(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.Balancer.BalancedActuator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 requested_;
  ::PROTOBUF_NAMESPACE_ID::int32 granted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Balancer_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.Balancer.Block) */ {
 public:
  inline Block() : Block(nullptr) {};
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.Balancer.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Balancer_5ftest_2eproto);
    return ::descriptor_table_Balancer_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
  };
  // repeated .blox_test.Balancer.BalancedActuator clients = 1 [(.brewblox.field) = {
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::blox_test::Balancer::BalancedActuator* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Balancer::BalancedActuator >*
      mutable_clients();
  private:
  const ::blox_test::Balancer::BalancedActuator& _internal_clients(int index) const;
  ::blox_test::Balancer::BalancedActuator* _internal_add_clients();
  public:
  const ::blox_test::Balancer::BalancedActuator& clients(int index) const;
  ::blox_test::Balancer::BalancedActuator* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Balancer::BalancedActuator >&
      clients() const;

  // @@protoc_insertion_point(class_scope:blox_test.Balancer.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Balancer::BalancedActuator > clients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Balancer_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BalancedActuator

// uint32 id = 1 [(.nanopb) = {
inline void BalancedActuator::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BalancedActuator::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BalancedActuator::id() const {
  // @@protoc_insertion_point(field_get:blox_test.Balancer.BalancedActuator.id)
  return _internal_id();
}
inline void BalancedActuator::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void BalancedActuator::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox_test.Balancer.BalancedActuator.id)
}

// sint32 requested = 2 [(.nanopb) = {
inline void BalancedActuator::clear_requested() {
  requested_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BalancedActuator::_internal_requested() const {
  return requested_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BalancedActuator::requested() const {
  // @@protoc_insertion_point(field_get:blox_test.Balancer.BalancedActuator.requested)
  return _internal_requested();
}
inline void BalancedActuator::_internal_set_requested(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requested_ = value;
}
inline void BalancedActuator::set_requested(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requested(value);
  // @@protoc_insertion_point(field_set:blox_test.Balancer.BalancedActuator.requested)
}

// sint32 granted = 3 [(.nanopb) = {
inline void BalancedActuator::clear_granted() {
  granted_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BalancedActuator::_internal_granted() const {
  return granted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BalancedActuator::granted() const {
  // @@protoc_insertion_point(field_get:blox_test.Balancer.BalancedActuator.granted)
  return _internal_granted();
}
inline void BalancedActuator::_internal_set_granted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  granted_ = value;
}
inline void BalancedActuator::set_granted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_granted(value);
  // @@protoc_insertion_point(field_set:blox_test.Balancer.BalancedActuator.granted)
}

// -------------------------------------------------------------------

// Block

// repeated .blox_test.Balancer.BalancedActuator clients = 1 [(.brewblox.field) = {
inline int Block::_internal_clients_size() const {
  return clients_.size();
}
inline int Block::clients_size() const {
  return _internal_clients_size();
}
inline void Block::clear_clients() {
  clients_.Clear();
}
inline ::blox_test::Balancer::BalancedActuator* Block::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.Balancer.Block.clients)
  return clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Balancer::BalancedActuator >*
Block::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.Balancer.Block.clients)
  return &clients_;
}
inline const ::blox_test::Balancer::BalancedActuator& Block::_internal_clients(int index) const {
  return clients_.Get(index);
}
inline const ::blox_test::Balancer::BalancedActuator& Block::clients(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.Balancer.Block.clients)
  return _internal_clients(index);
}
inline ::blox_test::Balancer::BalancedActuator* Block::_internal_add_clients() {
  return clients_.Add();
}
inline ::blox_test::Balancer::BalancedActuator* Block::add_clients() {
  // @@protoc_insertion_point(field_add:blox_test.Balancer.Block.clients)
  return _internal_add_clients();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::Balancer::BalancedActuator >&
Block::clients() const {
  // @@protoc_insertion_point(field_list:blox_test.Balancer.Block.clients)
  return clients_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Balancer
}  // namespace blox_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Balancer_5ftest_2eproto
