// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MockPins_test.proto

#include "MockPins_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr MockPins::MockPins(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , pins_(false){}
struct MockPinsDefaultTypeInternal {
  constexpr MockPinsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MockPinsDefaultTypeInternal() {}
  union {
    MockPins _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MockPinsDefaultTypeInternal _MockPins_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MockPins_5ftest_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MockPins_5ftest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MockPins_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MockPins_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::MockPins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::MockPins, channels_),
  PROTOBUF_FIELD_OFFSET(::blox::MockPins, pins_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::MockPins)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_MockPins_default_instance_),
};

const char descriptor_table_protodef_MockPins_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MockPins_test.proto\022\004blox\032\023brewblox_te"
  "st.proto\032\021nanopb_test.proto\032\022IoArray_tes"
  "t.proto\"i\n\010MockPins\0223\n\010channels\030\002 \003(\0132\017."
  "blox.IoChannelB\020\222\?\002\020\010\222\?\002x\001\212\265\030\002(\001\022\031\n\004pins"
  "\030Z \001(\010B\013\212\265\030\002H\001\222\?\002\030\003:\r\212\265\030\003\030\303\002\212\265\030\002H\n*\324\001\n\022M"
  "ockPinsChannelIds\022\026\n\022MOCKPINS_CHAN_NONE\020"
  "\000\022\023\n\017MOCKPINS_CHAN_A\020\001\022\023\n\017MOCKPINS_CHAN_"
  "B\020\002\022\023\n\017MOCKPINS_CHAN_C\020\003\022\023\n\017MOCKPINS_CHA"
  "N_D\020\004\022\023\n\017MOCKPINS_CHAN_E\020\005\022\023\n\017MOCKPINS_C"
  "HAN_F\020\006\022\023\n\017MOCKPINS_CHAN_G\020\007\022\023\n\017MOCKPINS"
  "_CHAN_H\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MockPins_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MockPins_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MockPins_5ftest_2eproto = {
  false, false, 417, descriptor_table_protodef_MockPins_5ftest_2eproto, "MockPins_test.proto", 
  &descriptor_table_MockPins_5ftest_2eproto_once, descriptor_table_MockPins_5ftest_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_MockPins_5ftest_2eproto::offsets,
  file_level_metadata_MockPins_5ftest_2eproto, file_level_enum_descriptors_MockPins_5ftest_2eproto, file_level_service_descriptors_MockPins_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MockPins_5ftest_2eproto_getter() {
  return &descriptor_table_MockPins_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MockPins_5ftest_2eproto(&descriptor_table_MockPins_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MockPinsChannelIds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MockPins_5ftest_2eproto);
  return file_level_enum_descriptors_MockPins_5ftest_2eproto[0];
}
bool MockPinsChannelIds_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MockPins::_Internal {
 public:
};

void MockPins::clear_channels() {
  channels_.Clear();
}
MockPins::MockPins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.MockPins)
}
MockPins::MockPins(const MockPins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pins_ = from.pins_;
  // @@protoc_insertion_point(copy_constructor:blox.MockPins)
}

inline void MockPins::SharedCtor() {
pins_ = false;
}

MockPins::~MockPins() {
  // @@protoc_insertion_point(destructor:blox.MockPins)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MockPins::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MockPins::ArenaDtor(void* object) {
  MockPins* _this = reinterpret_cast< MockPins* >(object);
  (void)_this;
}
void MockPins::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MockPins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MockPins::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.MockPins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  pins_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MockPins::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox.IoChannel channels = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool pins = 90 [(.nanopb_test) = {
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          pins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MockPins::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.MockPins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.IoChannel channels = 2 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_channels(i), target, stream);
  }

  // bool pins = 90 [(.nanopb_test) = {
  if (this->_internal_pins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(90, this->_internal_pins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.MockPins)
  return target;
}

size_t MockPins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.MockPins)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.IoChannel channels = 2 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool pins = 90 [(.nanopb_test) = {
  if (this->_internal_pins() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MockPins::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MockPins::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MockPins::GetClassData() const { return &_class_data_; }

void MockPins::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MockPins *>(to)->MergeFrom(
      static_cast<const MockPins &>(from));
}


void MockPins::MergeFrom(const MockPins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.MockPins)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_pins() != 0) {
    _internal_set_pins(from._internal_pins());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MockPins::CopyFrom(const MockPins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.MockPins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MockPins::IsInitialized() const {
  return true;
}

void MockPins::InternalSwap(MockPins* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  swap(pins_, other->pins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MockPins::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MockPins_5ftest_2eproto_getter, &descriptor_table_MockPins_5ftest_2eproto_once,
      file_level_metadata_MockPins_5ftest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::MockPins* Arena::CreateMaybeMessage< ::blox::MockPins >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::MockPins >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
