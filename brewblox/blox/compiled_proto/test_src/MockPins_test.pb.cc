// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MockPins_test.proto

#include "MockPins_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr MockPinsIoPin::MockPinsIoPin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MockPinsIoPinDefaultTypeInternal {
  constexpr MockPinsIoPinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MockPinsIoPinDefaultTypeInternal() {}
  union {
    MockPinsIoPin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MockPinsIoPinDefaultTypeInternal _MockPinsIoPin_default_instance_;
constexpr MockPins::MockPins(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pins_(){}
struct MockPinsDefaultTypeInternal {
  constexpr MockPinsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MockPinsDefaultTypeInternal() {}
  union {
    MockPins _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MockPinsDefaultTypeInternal _MockPins_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MockPins_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MockPins_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MockPins_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MockPins_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::MockPinsIoPin, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox::MockPinsIoPin, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::blox::MockPinsIoPin, Pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::MockPins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::MockPins, pins_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::MockPinsIoPin)},
  { 14, -1, sizeof(::blox::MockPins)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_MockPinsIoPin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_MockPins_default_instance_),
};

const char descriptor_table_protodef_MockPins_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MockPins_test.proto\022\004blox\032\023brewblox_te"
  "st.proto\032\021nanopb_test.proto\032\022IoArray_tes"
  "t.proto\"\246\002\n\rMockPinsIoPin\022 \n\005mock1\030\001 \001(\013"
  "2\017.blox.IoChannelH\000\022 \n\005mock2\030\002 \001(\0132\017.blo"
  "x.IoChannelH\000\022 \n\005mock3\030\003 \001(\0132\017.blox.IoCh"
  "annelH\000\022 \n\005mock4\030\004 \001(\0132\017.blox.IoChannelH"
  "\000\022 \n\005mock5\030\005 \001(\0132\017.blox.IoChannelH\000\022 \n\005m"
  "ock6\030\006 \001(\0132\017.blox.IoChannelH\000\022 \n\005mock7\030\007"
  " \001(\0132\017.blox.IoChannelH\000\022 \n\005mock8\030\010 \001(\0132\017"
  ".blox.IoChannelH\000B\005\n\003Pin\"N\n\010MockPins\0223\n\004"
  "pins\030\001 \003(\0132\023.blox.MockPinsIoPinB\020\222\?\002\020\010\222\?"
  "\002x\001\212\265\030\002(\001:\r\212\265\030\003\030\303\002\212\265\030\002H\nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MockPins_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MockPins_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MockPins_5ftest_2eproto = {
  false, false, 472, descriptor_table_protodef_MockPins_5ftest_2eproto, "MockPins_test.proto", 
  &descriptor_table_MockPins_5ftest_2eproto_once, descriptor_table_MockPins_5ftest_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_MockPins_5ftest_2eproto::offsets,
  file_level_metadata_MockPins_5ftest_2eproto, file_level_enum_descriptors_MockPins_5ftest_2eproto, file_level_service_descriptors_MockPins_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MockPins_5ftest_2eproto_getter() {
  return &descriptor_table_MockPins_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MockPins_5ftest_2eproto(&descriptor_table_MockPins_5ftest_2eproto);
namespace blox {

// ===================================================================

class MockPinsIoPin::_Internal {
 public:
  static const ::blox::IoChannel& mock1(const MockPinsIoPin* msg);
  static const ::blox::IoChannel& mock2(const MockPinsIoPin* msg);
  static const ::blox::IoChannel& mock3(const MockPinsIoPin* msg);
  static const ::blox::IoChannel& mock4(const MockPinsIoPin* msg);
  static const ::blox::IoChannel& mock5(const MockPinsIoPin* msg);
  static const ::blox::IoChannel& mock6(const MockPinsIoPin* msg);
  static const ::blox::IoChannel& mock7(const MockPinsIoPin* msg);
  static const ::blox::IoChannel& mock8(const MockPinsIoPin* msg);
};

const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock1(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock1_;
}
const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock2(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock2_;
}
const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock3(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock3_;
}
const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock4(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock4_;
}
const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock5(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock5_;
}
const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock6(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock6_;
}
const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock7(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock7_;
}
const ::blox::IoChannel&
MockPinsIoPin::_Internal::mock8(const MockPinsIoPin* msg) {
  return *msg->Pin_.mock8_;
}
void MockPinsIoPin::set_allocated_mock1(::blox::IoChannel* mock1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock1));
    if (message_arena != submessage_arena) {
      mock1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock1, submessage_arena);
    }
    set_has_mock1();
    Pin_.mock1_ = mock1;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock1)
}
void MockPinsIoPin::clear_mock1() {
  if (_internal_has_mock1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock1_;
    }
    clear_has_Pin();
  }
}
void MockPinsIoPin::set_allocated_mock2(::blox::IoChannel* mock2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock2));
    if (message_arena != submessage_arena) {
      mock2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock2, submessage_arena);
    }
    set_has_mock2();
    Pin_.mock2_ = mock2;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock2)
}
void MockPinsIoPin::clear_mock2() {
  if (_internal_has_mock2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock2_;
    }
    clear_has_Pin();
  }
}
void MockPinsIoPin::set_allocated_mock3(::blox::IoChannel* mock3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock3));
    if (message_arena != submessage_arena) {
      mock3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock3, submessage_arena);
    }
    set_has_mock3();
    Pin_.mock3_ = mock3;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock3)
}
void MockPinsIoPin::clear_mock3() {
  if (_internal_has_mock3()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock3_;
    }
    clear_has_Pin();
  }
}
void MockPinsIoPin::set_allocated_mock4(::blox::IoChannel* mock4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock4));
    if (message_arena != submessage_arena) {
      mock4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock4, submessage_arena);
    }
    set_has_mock4();
    Pin_.mock4_ = mock4;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock4)
}
void MockPinsIoPin::clear_mock4() {
  if (_internal_has_mock4()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock4_;
    }
    clear_has_Pin();
  }
}
void MockPinsIoPin::set_allocated_mock5(::blox::IoChannel* mock5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock5));
    if (message_arena != submessage_arena) {
      mock5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock5, submessage_arena);
    }
    set_has_mock5();
    Pin_.mock5_ = mock5;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock5)
}
void MockPinsIoPin::clear_mock5() {
  if (_internal_has_mock5()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock5_;
    }
    clear_has_Pin();
  }
}
void MockPinsIoPin::set_allocated_mock6(::blox::IoChannel* mock6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock6));
    if (message_arena != submessage_arena) {
      mock6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock6, submessage_arena);
    }
    set_has_mock6();
    Pin_.mock6_ = mock6;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock6)
}
void MockPinsIoPin::clear_mock6() {
  if (_internal_has_mock6()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock6_;
    }
    clear_has_Pin();
  }
}
void MockPinsIoPin::set_allocated_mock7(::blox::IoChannel* mock7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock7));
    if (message_arena != submessage_arena) {
      mock7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock7, submessage_arena);
    }
    set_has_mock7();
    Pin_.mock7_ = mock7;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock7)
}
void MockPinsIoPin::clear_mock7() {
  if (_internal_has_mock7()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock7_;
    }
    clear_has_Pin();
  }
}
void MockPinsIoPin::set_allocated_mock8(::blox::IoChannel* mock8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (mock8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock8));
    if (message_arena != submessage_arena) {
      mock8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock8, submessage_arena);
    }
    set_has_mock8();
    Pin_.mock8_ = mock8;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.MockPinsIoPin.mock8)
}
void MockPinsIoPin::clear_mock8() {
  if (_internal_has_mock8()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.mock8_;
    }
    clear_has_Pin();
  }
}
MockPinsIoPin::MockPinsIoPin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.MockPinsIoPin)
}
MockPinsIoPin::MockPinsIoPin(const MockPinsIoPin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Pin();
  switch (from.Pin_case()) {
    case kMock1: {
      _internal_mutable_mock1()->::blox::IoChannel::MergeFrom(from._internal_mock1());
      break;
    }
    case kMock2: {
      _internal_mutable_mock2()->::blox::IoChannel::MergeFrom(from._internal_mock2());
      break;
    }
    case kMock3: {
      _internal_mutable_mock3()->::blox::IoChannel::MergeFrom(from._internal_mock3());
      break;
    }
    case kMock4: {
      _internal_mutable_mock4()->::blox::IoChannel::MergeFrom(from._internal_mock4());
      break;
    }
    case kMock5: {
      _internal_mutable_mock5()->::blox::IoChannel::MergeFrom(from._internal_mock5());
      break;
    }
    case kMock6: {
      _internal_mutable_mock6()->::blox::IoChannel::MergeFrom(from._internal_mock6());
      break;
    }
    case kMock7: {
      _internal_mutable_mock7()->::blox::IoChannel::MergeFrom(from._internal_mock7());
      break;
    }
    case kMock8: {
      _internal_mutable_mock8()->::blox::IoChannel::MergeFrom(from._internal_mock8());
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox.MockPinsIoPin)
}

inline void MockPinsIoPin::SharedCtor() {
clear_has_Pin();
}

MockPinsIoPin::~MockPinsIoPin() {
  // @@protoc_insertion_point(destructor:blox.MockPinsIoPin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MockPinsIoPin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Pin()) {
    clear_Pin();
  }
}

void MockPinsIoPin::ArenaDtor(void* object) {
  MockPinsIoPin* _this = reinterpret_cast< MockPinsIoPin* >(object);
  (void)_this;
}
void MockPinsIoPin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MockPinsIoPin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MockPinsIoPin::clear_Pin() {
// @@protoc_insertion_point(one_of_clear_start:blox.MockPinsIoPin)
  switch (Pin_case()) {
    case kMock1: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock1_;
      }
      break;
    }
    case kMock2: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock2_;
      }
      break;
    }
    case kMock3: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock3_;
      }
      break;
    }
    case kMock4: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock4_;
      }
      break;
    }
    case kMock5: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock5_;
      }
      break;
    }
    case kMock6: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock6_;
      }
      break;
    }
    case kMock7: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock7_;
      }
      break;
    }
    case kMock8: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.mock8_;
      }
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PIN_NOT_SET;
}


void MockPinsIoPin::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.MockPinsIoPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Pin();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MockPinsIoPin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox.IoChannel mock1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel mock2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel mock3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel mock4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel mock5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel mock6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel mock7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel mock8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MockPinsIoPin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.MockPinsIoPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.IoChannel mock1 = 1;
  if (_internal_has_mock1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mock1(this), target, stream);
  }

  // .blox.IoChannel mock2 = 2;
  if (_internal_has_mock2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mock2(this), target, stream);
  }

  // .blox.IoChannel mock3 = 3;
  if (_internal_has_mock3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mock3(this), target, stream);
  }

  // .blox.IoChannel mock4 = 4;
  if (_internal_has_mock4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mock4(this), target, stream);
  }

  // .blox.IoChannel mock5 = 5;
  if (_internal_has_mock5()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mock5(this), target, stream);
  }

  // .blox.IoChannel mock6 = 6;
  if (_internal_has_mock6()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mock6(this), target, stream);
  }

  // .blox.IoChannel mock7 = 7;
  if (_internal_has_mock7()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mock7(this), target, stream);
  }

  // .blox.IoChannel mock8 = 8;
  if (_internal_has_mock8()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mock8(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.MockPinsIoPin)
  return target;
}

size_t MockPinsIoPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.MockPinsIoPin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Pin_case()) {
    // .blox.IoChannel mock1 = 1;
    case kMock1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock1_);
      break;
    }
    // .blox.IoChannel mock2 = 2;
    case kMock2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock2_);
      break;
    }
    // .blox.IoChannel mock3 = 3;
    case kMock3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock3_);
      break;
    }
    // .blox.IoChannel mock4 = 4;
    case kMock4: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock4_);
      break;
    }
    // .blox.IoChannel mock5 = 5;
    case kMock5: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock5_);
      break;
    }
    // .blox.IoChannel mock6 = 6;
    case kMock6: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock6_);
      break;
    }
    // .blox.IoChannel mock7 = 7;
    case kMock7: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock7_);
      break;
    }
    // .blox.IoChannel mock8 = 8;
    case kMock8: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.mock8_);
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MockPinsIoPin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MockPinsIoPin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MockPinsIoPin::GetClassData() const { return &_class_data_; }

void MockPinsIoPin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MockPinsIoPin *>(to)->MergeFrom(
      static_cast<const MockPinsIoPin &>(from));
}


void MockPinsIoPin::MergeFrom(const MockPinsIoPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.MockPinsIoPin)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Pin_case()) {
    case kMock1: {
      _internal_mutable_mock1()->::blox::IoChannel::MergeFrom(from._internal_mock1());
      break;
    }
    case kMock2: {
      _internal_mutable_mock2()->::blox::IoChannel::MergeFrom(from._internal_mock2());
      break;
    }
    case kMock3: {
      _internal_mutable_mock3()->::blox::IoChannel::MergeFrom(from._internal_mock3());
      break;
    }
    case kMock4: {
      _internal_mutable_mock4()->::blox::IoChannel::MergeFrom(from._internal_mock4());
      break;
    }
    case kMock5: {
      _internal_mutable_mock5()->::blox::IoChannel::MergeFrom(from._internal_mock5());
      break;
    }
    case kMock6: {
      _internal_mutable_mock6()->::blox::IoChannel::MergeFrom(from._internal_mock6());
      break;
    }
    case kMock7: {
      _internal_mutable_mock7()->::blox::IoChannel::MergeFrom(from._internal_mock7());
      break;
    }
    case kMock8: {
      _internal_mutable_mock8()->::blox::IoChannel::MergeFrom(from._internal_mock8());
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MockPinsIoPin::CopyFrom(const MockPinsIoPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.MockPinsIoPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MockPinsIoPin::IsInitialized() const {
  return true;
}

void MockPinsIoPin::InternalSwap(MockPinsIoPin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Pin_, other->Pin_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MockPinsIoPin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MockPins_5ftest_2eproto_getter, &descriptor_table_MockPins_5ftest_2eproto_once,
      file_level_metadata_MockPins_5ftest_2eproto[0]);
}

// ===================================================================

class MockPins::_Internal {
 public:
};

MockPins::MockPins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.MockPins)
}
MockPins::MockPins(const MockPins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pins_(from.pins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox.MockPins)
}

inline void MockPins::SharedCtor() {
}

MockPins::~MockPins() {
  // @@protoc_insertion_point(destructor:blox.MockPins)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MockPins::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MockPins::ArenaDtor(void* object) {
  MockPins* _this = reinterpret_cast< MockPins* >(object);
  (void)_this;
}
void MockPins::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MockPins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MockPins::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.MockPins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pins_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MockPins::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox.MockPinsIoPin pins = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MockPins::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.MockPins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.MockPinsIoPin pins = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pins(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.MockPins)
  return target;
}

size_t MockPins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.MockPins)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.MockPinsIoPin pins = 1 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_pins_size();
  for (const auto& msg : this->pins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MockPins::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MockPins::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MockPins::GetClassData() const { return &_class_data_; }

void MockPins::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MockPins *>(to)->MergeFrom(
      static_cast<const MockPins &>(from));
}


void MockPins::MergeFrom(const MockPins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.MockPins)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pins_.MergeFrom(from.pins_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MockPins::CopyFrom(const MockPins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.MockPins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MockPins::IsInitialized() const {
  return true;
}

void MockPins::InternalSwap(MockPins* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pins_.InternalSwap(&other->pins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MockPins::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MockPins_5ftest_2eproto_getter, &descriptor_table_MockPins_5ftest_2eproto_once,
      file_level_metadata_MockPins_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::MockPinsIoPin* Arena::CreateMaybeMessage< ::blox::MockPinsIoPin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::MockPinsIoPin >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::MockPins* Arena::CreateMaybeMessage< ::blox::MockPins >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::MockPins >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
