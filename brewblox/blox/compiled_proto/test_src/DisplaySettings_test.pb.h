// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DisplaySettings_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DisplaySettings_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DisplaySettings_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DisplaySettings_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DisplaySettings_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DisplaySettings_5ftest_2eproto;
namespace blox {
class DisplaySettings;
struct DisplaySettingsDefaultTypeInternal;
extern DisplaySettingsDefaultTypeInternal _DisplaySettings_default_instance_;
class Widget;
struct WidgetDefaultTypeInternal;
extern WidgetDefaultTypeInternal _Widget_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::DisplaySettings* Arena::CreateMaybeMessage<::blox::DisplaySettings>(Arena*);
template<> ::blox::Widget* Arena::CreateMaybeMessage<::blox::Widget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

enum DisplaySettings_TemperatureUnit : int {
  DisplaySettings_TemperatureUnit_TEMP_CELSIUS = 0,
  DisplaySettings_TemperatureUnit_TEMP_FAHRENHEIT = 1,
  DisplaySettings_TemperatureUnit_DisplaySettings_TemperatureUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DisplaySettings_TemperatureUnit_DisplaySettings_TemperatureUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DisplaySettings_TemperatureUnit_IsValid(int value);
constexpr DisplaySettings_TemperatureUnit DisplaySettings_TemperatureUnit_TemperatureUnit_MIN = DisplaySettings_TemperatureUnit_TEMP_CELSIUS;
constexpr DisplaySettings_TemperatureUnit DisplaySettings_TemperatureUnit_TemperatureUnit_MAX = DisplaySettings_TemperatureUnit_TEMP_FAHRENHEIT;
constexpr int DisplaySettings_TemperatureUnit_TemperatureUnit_ARRAYSIZE = DisplaySettings_TemperatureUnit_TemperatureUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisplaySettings_TemperatureUnit_descriptor();
template<typename T>
inline const std::string& DisplaySettings_TemperatureUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisplaySettings_TemperatureUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisplaySettings_TemperatureUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DisplaySettings_TemperatureUnit_descriptor(), enum_t_value);
}
inline bool DisplaySettings_TemperatureUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DisplaySettings_TemperatureUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DisplaySettings_TemperatureUnit>(
    DisplaySettings_TemperatureUnit_descriptor(), name, value);
}
// ===================================================================

class Widget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.Widget) */ {
 public:
  inline Widget() : Widget(nullptr) {}
  ~Widget() override;
  explicit constexpr Widget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Widget(const Widget& from);
  Widget(Widget&& from) noexcept
    : Widget() {
    *this = ::std::move(from);
  }

  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }
  inline Widget& operator=(Widget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Widget& default_instance() {
    return *internal_default_instance();
  }
  enum WidgetTypeCase {
    kTempSensor = 10,
    kSetpointSensorPair = 11,
    kActuatorAnalog = 12,
    kPid = 14,
    WIDGETTYPE_NOT_SET = 0,
  };

  static inline const Widget* internal_default_instance() {
    return reinterpret_cast<const Widget*>(
               &_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Widget& a, Widget& b) {
    a.Swap(&b);
  }
  inline void Swap(Widget* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Widget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Widget* New() const final {
    return new Widget();
  }

  Widget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Widget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Widget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Widget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Widget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.Widget";
  }
  protected:
  explicit Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
    kNameFieldNumber = 3,
    kPosFieldNumber = 1,
    kTempSensorFieldNumber = 10,
    kSetpointSensorPairFieldNumber = 11,
    kActuatorAnalogFieldNumber = 12,
    kPidFieldNumber = 14,
  };
  // bytes color = 2 [(.nanopb_test) = {
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string name = 3 [(.nanopb_test) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pos = 1 [(.nanopb_test) = {
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tempSensor = 10 [(.nanopb_test) = {
  bool has_tempsensor() const;
  private:
  bool _internal_has_tempsensor() const;
  public:
  void clear_tempsensor();
  ::PROTOBUF_NAMESPACE_ID::uint32 tempsensor() const;
  void set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tempsensor() const;
  void _internal_set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 setpointSensorPair = 11 [(.nanopb_test) = {
  bool has_setpointsensorpair() const;
  private:
  bool _internal_has_setpointsensorpair() const;
  public:
  void clear_setpointsensorpair();
  ::PROTOBUF_NAMESPACE_ID::uint32 setpointsensorpair() const;
  void set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setpointsensorpair() const;
  void _internal_set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 actuatorAnalog = 12 [(.nanopb_test) = {
  bool has_actuatoranalog() const;
  private:
  bool _internal_has_actuatoranalog() const;
  public:
  void clear_actuatoranalog();
  ::PROTOBUF_NAMESPACE_ID::uint32 actuatoranalog() const;
  void set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actuatoranalog() const;
  void _internal_set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pid = 14 [(.nanopb_test) = {
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_WidgetType();
  WidgetTypeCase WidgetType_case() const;
  // @@protoc_insertion_point(class_scope:blox.Widget)
 private:
  class _Internal;
  void set_has_tempsensor();
  void set_has_setpointsensorpair();
  void set_has_actuatoranalog();
  void set_has_pid();

  inline bool has_WidgetType() const;
  inline void clear_has_WidgetType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_;
  union WidgetTypeUnion {
    constexpr WidgetTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 tempsensor_;
    ::PROTOBUF_NAMESPACE_ID::uint32 setpointsensorpair_;
    ::PROTOBUF_NAMESPACE_ID::uint32 actuatoranalog_;
    ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  } WidgetType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_DisplaySettings_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DisplaySettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.DisplaySettings) */ {
 public:
  inline DisplaySettings() : DisplaySettings(nullptr) {}
  ~DisplaySettings() override;
  explicit constexpr DisplaySettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplaySettings(const DisplaySettings& from);
  DisplaySettings(DisplaySettings&& from) noexcept
    : DisplaySettings() {
    *this = ::std::move(from);
  }

  inline DisplaySettings& operator=(const DisplaySettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplaySettings& operator=(DisplaySettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisplaySettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplaySettings* internal_default_instance() {
    return reinterpret_cast<const DisplaySettings*>(
               &_DisplaySettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DisplaySettings& a, DisplaySettings& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplaySettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplaySettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplaySettings* New() const final {
    return new DisplaySettings();
  }

  DisplaySettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplaySettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisplaySettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DisplaySettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplaySettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.DisplaySettings";
  }
  protected:
  explicit DisplaySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DisplaySettings_TemperatureUnit TemperatureUnit;
  static constexpr TemperatureUnit TEMP_CELSIUS =
    DisplaySettings_TemperatureUnit_TEMP_CELSIUS;
  static constexpr TemperatureUnit TEMP_FAHRENHEIT =
    DisplaySettings_TemperatureUnit_TEMP_FAHRENHEIT;
  static inline bool TemperatureUnit_IsValid(int value) {
    return DisplaySettings_TemperatureUnit_IsValid(value);
  }
  static constexpr TemperatureUnit TemperatureUnit_MIN =
    DisplaySettings_TemperatureUnit_TemperatureUnit_MIN;
  static constexpr TemperatureUnit TemperatureUnit_MAX =
    DisplaySettings_TemperatureUnit_TemperatureUnit_MAX;
  static constexpr int TemperatureUnit_ARRAYSIZE =
    DisplaySettings_TemperatureUnit_TemperatureUnit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TemperatureUnit_descriptor() {
    return DisplaySettings_TemperatureUnit_descriptor();
  }
  template<typename T>
  static inline const std::string& TemperatureUnit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TemperatureUnit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TemperatureUnit_Name.");
    return DisplaySettings_TemperatureUnit_Name(enum_t_value);
  }
  static inline bool TemperatureUnit_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TemperatureUnit* value) {
    return DisplaySettings_TemperatureUnit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetsFieldNumber = 1,
    kNameFieldNumber = 2,
    kTimeZoneFieldNumber = 5,
    kTempUnitFieldNumber = 3,
    kBrightnessFieldNumber = 4,
  };
  // repeated .blox.Widget widgets = 1 [(.nanopb_test) = {
  int widgets_size() const;
  private:
  int _internal_widgets_size() const;
  public:
  void clear_widgets();
  ::blox::Widget* mutable_widgets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::Widget >*
      mutable_widgets();
  private:
  const ::blox::Widget& _internal_widgets(int index) const;
  ::blox::Widget* _internal_add_widgets();
  public:
  const ::blox::Widget& widgets(int index) const;
  ::blox::Widget* add_widgets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::Widget >&
      widgets() const;

  // string name = 2 [(.nanopb_test) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string timeZone = 5 [(.nanopb_test) = {
  void clear_timezone();
  const std::string& timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timezone();
  PROTOBUF_MUST_USE_RESULT std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // .blox.DisplaySettings.TemperatureUnit tempUnit = 3;
  void clear_tempunit();
  ::blox::DisplaySettings_TemperatureUnit tempunit() const;
  void set_tempunit(::blox::DisplaySettings_TemperatureUnit value);
  private:
  ::blox::DisplaySettings_TemperatureUnit _internal_tempunit() const;
  void _internal_set_tempunit(::blox::DisplaySettings_TemperatureUnit value);
  public:

  // uint32 brightness = 4 [(.nanopb_test) = {
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::uint32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.DisplaySettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::Widget > widgets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  int tempunit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 brightness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DisplaySettings_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Widget

// uint32 pos = 1 [(.nanopb_test) = {
inline void Widget::clear_pos() {
  pos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::pos() const {
  // @@protoc_insertion_point(field_get:blox.Widget.pos)
  return _internal_pos();
}
inline void Widget::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_ = value;
}
inline void Widget::set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:blox.Widget.pos)
}

// bytes color = 2 [(.nanopb_test) = {
inline void Widget::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& Widget::color() const {
  // @@protoc_insertion_point(field_get:blox.Widget.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Widget::set_color(ArgT0&& arg0, ArgT... args) {
 
 color_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox.Widget.color)
}
inline std::string* Widget::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:blox.Widget.color)
  return _s;
}
inline const std::string& Widget::_internal_color() const {
  return color_.Get();
}
inline void Widget::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Widget::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Widget::release_color() {
  // @@protoc_insertion_point(field_release:blox.Widget.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Widget::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blox.Widget.color)
}

// string name = 3 [(.nanopb_test) = {
inline void Widget::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Widget::name() const {
  // @@protoc_insertion_point(field_get:blox.Widget.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Widget::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox.Widget.name)
}
inline std::string* Widget::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blox.Widget.name)
  return _s;
}
inline const std::string& Widget::_internal_name() const {
  return name_.Get();
}
inline void Widget::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Widget::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Widget::release_name() {
  // @@protoc_insertion_point(field_release:blox.Widget.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Widget::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blox.Widget.name)
}

// uint32 tempSensor = 10 [(.nanopb_test) = {
inline bool Widget::_internal_has_tempsensor() const {
  return WidgetType_case() == kTempSensor;
}
inline bool Widget::has_tempsensor() const {
  return _internal_has_tempsensor();
}
inline void Widget::set_has_tempsensor() {
  _oneof_case_[0] = kTempSensor;
}
inline void Widget::clear_tempsensor() {
  if (_internal_has_tempsensor()) {
    WidgetType_.tempsensor_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_tempsensor() const {
  if (_internal_has_tempsensor()) {
    return WidgetType_.tempsensor_;
  }
  return 0u;
}
inline void Widget::_internal_set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_tempsensor()) {
    clear_WidgetType();
    set_has_tempsensor();
  }
  WidgetType_.tempsensor_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::tempsensor() const {
  // @@protoc_insertion_point(field_get:blox.Widget.tempSensor)
  return _internal_tempsensor();
}
inline void Widget::set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tempsensor(value);
  // @@protoc_insertion_point(field_set:blox.Widget.tempSensor)
}

// uint32 setpointSensorPair = 11 [(.nanopb_test) = {
inline bool Widget::_internal_has_setpointsensorpair() const {
  return WidgetType_case() == kSetpointSensorPair;
}
inline bool Widget::has_setpointsensorpair() const {
  return _internal_has_setpointsensorpair();
}
inline void Widget::set_has_setpointsensorpair() {
  _oneof_case_[0] = kSetpointSensorPair;
}
inline void Widget::clear_setpointsensorpair() {
  if (_internal_has_setpointsensorpair()) {
    WidgetType_.setpointsensorpair_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_setpointsensorpair() const {
  if (_internal_has_setpointsensorpair()) {
    return WidgetType_.setpointsensorpair_;
  }
  return 0u;
}
inline void Widget::_internal_set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_setpointsensorpair()) {
    clear_WidgetType();
    set_has_setpointsensorpair();
  }
  WidgetType_.setpointsensorpair_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::setpointsensorpair() const {
  // @@protoc_insertion_point(field_get:blox.Widget.setpointSensorPair)
  return _internal_setpointsensorpair();
}
inline void Widget::set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setpointsensorpair(value);
  // @@protoc_insertion_point(field_set:blox.Widget.setpointSensorPair)
}

// uint32 actuatorAnalog = 12 [(.nanopb_test) = {
inline bool Widget::_internal_has_actuatoranalog() const {
  return WidgetType_case() == kActuatorAnalog;
}
inline bool Widget::has_actuatoranalog() const {
  return _internal_has_actuatoranalog();
}
inline void Widget::set_has_actuatoranalog() {
  _oneof_case_[0] = kActuatorAnalog;
}
inline void Widget::clear_actuatoranalog() {
  if (_internal_has_actuatoranalog()) {
    WidgetType_.actuatoranalog_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_actuatoranalog() const {
  if (_internal_has_actuatoranalog()) {
    return WidgetType_.actuatoranalog_;
  }
  return 0u;
}
inline void Widget::_internal_set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_actuatoranalog()) {
    clear_WidgetType();
    set_has_actuatoranalog();
  }
  WidgetType_.actuatoranalog_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::actuatoranalog() const {
  // @@protoc_insertion_point(field_get:blox.Widget.actuatorAnalog)
  return _internal_actuatoranalog();
}
inline void Widget::set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actuatoranalog(value);
  // @@protoc_insertion_point(field_set:blox.Widget.actuatorAnalog)
}

// uint32 pid = 14 [(.nanopb_test) = {
inline bool Widget::_internal_has_pid() const {
  return WidgetType_case() == kPid;
}
inline bool Widget::has_pid() const {
  return _internal_has_pid();
}
inline void Widget::set_has_pid() {
  _oneof_case_[0] = kPid;
}
inline void Widget::clear_pid() {
  if (_internal_has_pid()) {
    WidgetType_.pid_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_pid() const {
  if (_internal_has_pid()) {
    return WidgetType_.pid_;
  }
  return 0u;
}
inline void Widget::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_pid()) {
    clear_WidgetType();
    set_has_pid();
  }
  WidgetType_.pid_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::pid() const {
  // @@protoc_insertion_point(field_get:blox.Widget.pid)
  return _internal_pid();
}
inline void Widget::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:blox.Widget.pid)
}

inline bool Widget::has_WidgetType() const {
  return WidgetType_case() != WIDGETTYPE_NOT_SET;
}
inline void Widget::clear_has_WidgetType() {
  _oneof_case_[0] = WIDGETTYPE_NOT_SET;
}
inline Widget::WidgetTypeCase Widget::WidgetType_case() const {
  return Widget::WidgetTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DisplaySettings

// repeated .blox.Widget widgets = 1 [(.nanopb_test) = {
inline int DisplaySettings::_internal_widgets_size() const {
  return widgets_.size();
}
inline int DisplaySettings::widgets_size() const {
  return _internal_widgets_size();
}
inline void DisplaySettings::clear_widgets() {
  widgets_.Clear();
}
inline ::blox::Widget* DisplaySettings::mutable_widgets(int index) {
  // @@protoc_insertion_point(field_mutable:blox.DisplaySettings.widgets)
  return widgets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::Widget >*
DisplaySettings::mutable_widgets() {
  // @@protoc_insertion_point(field_mutable_list:blox.DisplaySettings.widgets)
  return &widgets_;
}
inline const ::blox::Widget& DisplaySettings::_internal_widgets(int index) const {
  return widgets_.Get(index);
}
inline const ::blox::Widget& DisplaySettings::widgets(int index) const {
  // @@protoc_insertion_point(field_get:blox.DisplaySettings.widgets)
  return _internal_widgets(index);
}
inline ::blox::Widget* DisplaySettings::_internal_add_widgets() {
  return widgets_.Add();
}
inline ::blox::Widget* DisplaySettings::add_widgets() {
  ::blox::Widget* _add = _internal_add_widgets();
  // @@protoc_insertion_point(field_add:blox.DisplaySettings.widgets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::Widget >&
DisplaySettings::widgets() const {
  // @@protoc_insertion_point(field_list:blox.DisplaySettings.widgets)
  return widgets_;
}

// string name = 2 [(.nanopb_test) = {
inline void DisplaySettings::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DisplaySettings::name() const {
  // @@protoc_insertion_point(field_get:blox.DisplaySettings.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplaySettings::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox.DisplaySettings.name)
}
inline std::string* DisplaySettings::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blox.DisplaySettings.name)
  return _s;
}
inline const std::string& DisplaySettings::_internal_name() const {
  return name_.Get();
}
inline void DisplaySettings::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplaySettings::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplaySettings::release_name() {
  // @@protoc_insertion_point(field_release:blox.DisplaySettings.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplaySettings::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blox.DisplaySettings.name)
}

// .blox.DisplaySettings.TemperatureUnit tempUnit = 3;
inline void DisplaySettings::clear_tempunit() {
  tempunit_ = 0;
}
inline ::blox::DisplaySettings_TemperatureUnit DisplaySettings::_internal_tempunit() const {
  return static_cast< ::blox::DisplaySettings_TemperatureUnit >(tempunit_);
}
inline ::blox::DisplaySettings_TemperatureUnit DisplaySettings::tempunit() const {
  // @@protoc_insertion_point(field_get:blox.DisplaySettings.tempUnit)
  return _internal_tempunit();
}
inline void DisplaySettings::_internal_set_tempunit(::blox::DisplaySettings_TemperatureUnit value) {
  
  tempunit_ = value;
}
inline void DisplaySettings::set_tempunit(::blox::DisplaySettings_TemperatureUnit value) {
  _internal_set_tempunit(value);
  // @@protoc_insertion_point(field_set:blox.DisplaySettings.tempUnit)
}

// uint32 brightness = 4 [(.nanopb_test) = {
inline void DisplaySettings::clear_brightness() {
  brightness_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisplaySettings::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisplaySettings::brightness() const {
  // @@protoc_insertion_point(field_get:blox.DisplaySettings.brightness)
  return _internal_brightness();
}
inline void DisplaySettings::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  brightness_ = value;
}
inline void DisplaySettings::set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:blox.DisplaySettings.brightness)
}

// string timeZone = 5 [(.nanopb_test) = {
inline void DisplaySettings::clear_timezone() {
  timezone_.ClearToEmpty();
}
inline const std::string& DisplaySettings::timezone() const {
  // @@protoc_insertion_point(field_get:blox.DisplaySettings.timeZone)
  return _internal_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplaySettings::set_timezone(ArgT0&& arg0, ArgT... args) {
 
 timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blox.DisplaySettings.timeZone)
}
inline std::string* DisplaySettings::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:blox.DisplaySettings.timeZone)
  return _s;
}
inline const std::string& DisplaySettings::_internal_timezone() const {
  return timezone_.Get();
}
inline void DisplaySettings::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplaySettings::_internal_mutable_timezone() {
  
  return timezone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplaySettings::release_timezone() {
  // @@protoc_insertion_point(field_release:blox.DisplaySettings.timeZone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplaySettings::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blox.DisplaySettings.timeZone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox::DisplaySettings_TemperatureUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::DisplaySettings_TemperatureUnit>() {
  return ::blox::DisplaySettings_TemperatureUnit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DisplaySettings_5ftest_2eproto
