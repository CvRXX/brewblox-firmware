// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DisplaySettings_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DisplaySettings_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DisplaySettings_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DisplaySettings_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DisplaySettings_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DisplaySettings_5ftest_2eproto;
namespace blox_test {
namespace DisplaySettings {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Widget;
class WidgetDefaultTypeInternal;
extern WidgetDefaultTypeInternal _Widget_default_instance_;
}  // namespace DisplaySettings
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::DisplaySettings::Block* Arena::CreateMaybeMessage<::blox_test::DisplaySettings::Block>(Arena*);
template<> ::blox_test::DisplaySettings::Widget* Arena::CreateMaybeMessage<::blox_test::DisplaySettings::Widget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace DisplaySettings {

enum TemperatureUnit : int {
  TEMP_CELSIUS = 0,
  TEMP_FAHRENHEIT = 1,
  TemperatureUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TemperatureUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TemperatureUnit_IsValid(int value);
constexpr TemperatureUnit TemperatureUnit_MIN = TEMP_CELSIUS;
constexpr TemperatureUnit TemperatureUnit_MAX = TEMP_FAHRENHEIT;
constexpr int TemperatureUnit_ARRAYSIZE = TemperatureUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TemperatureUnit_descriptor();
template<typename T>
inline const std::string& TemperatureUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TemperatureUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TemperatureUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TemperatureUnit_descriptor(), enum_t_value);
}
inline bool TemperatureUnit_Parse(
    const std::string& name, TemperatureUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TemperatureUnit>(
    TemperatureUnit_descriptor(), name, value);
}
// ===================================================================

class Widget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.DisplaySettings.Widget) */ {
 public:
  inline Widget() : Widget(nullptr) {};
  virtual ~Widget();

  Widget(const Widget& from);
  Widget(Widget&& from) noexcept
    : Widget() {
    *this = ::std::move(from);
  }

  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }
  inline Widget& operator=(Widget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Widget& default_instance();

  enum WidgetTypeCase {
    kTempSensor = 10,
    kSetpointSensorPair = 11,
    kActuatorAnalog = 12,
    kPid = 14,
    WIDGETTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Widget* internal_default_instance() {
    return reinterpret_cast<const Widget*>(
               &_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Widget& a, Widget& b) {
    a.Swap(&b);
  }
  inline void Swap(Widget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Widget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Widget* New() const final {
    return CreateMaybeMessage<Widget>(nullptr);
  }

  Widget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Widget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Widget& from);
  void MergeFrom(const Widget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Widget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.DisplaySettings.Widget";
  }
  protected:
  explicit Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DisplaySettings_5ftest_2eproto);
    return ::descriptor_table_DisplaySettings_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
    kNameFieldNumber = 3,
    kPosFieldNumber = 1,
    kTempSensorFieldNumber = 10,
    kSetpointSensorPairFieldNumber = 11,
    kActuatorAnalogFieldNumber = 12,
    kPidFieldNumber = 14,
  };
  // bytes color = 2 [(.nanopb) = {
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const void* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_color();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_color(
      std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string name = 3 [(.nanopb) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pos = 1 [(.nanopb) = {
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tempSensor = 10 [(.nanopb) = {
  private:
  bool _internal_has_tempsensor() const;
  public:
  void clear_tempsensor();
  ::PROTOBUF_NAMESPACE_ID::uint32 tempsensor() const;
  void set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tempsensor() const;
  void _internal_set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 setpointSensorPair = 11 [(.nanopb) = {
  private:
  bool _internal_has_setpointsensorpair() const;
  public:
  void clear_setpointsensorpair();
  ::PROTOBUF_NAMESPACE_ID::uint32 setpointsensorpair() const;
  void set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setpointsensorpair() const;
  void _internal_set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 actuatorAnalog = 12 [(.nanopb) = {
  private:
  bool _internal_has_actuatoranalog() const;
  public:
  void clear_actuatoranalog();
  ::PROTOBUF_NAMESPACE_ID::uint32 actuatoranalog() const;
  void set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actuatoranalog() const;
  void _internal_set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pid = 14 [(.nanopb) = {
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_WidgetType();
  WidgetTypeCase WidgetType_case() const;
  // @@protoc_insertion_point(class_scope:blox_test.DisplaySettings.Widget)
 private:
  class _Internal;
  void set_has_tempsensor();
  void set_has_setpointsensorpair();
  void set_has_actuatoranalog();
  void set_has_pid();

  inline bool has_WidgetType() const;
  inline void clear_has_WidgetType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_;
  union WidgetTypeUnion {
    WidgetTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 tempsensor_;
    ::PROTOBUF_NAMESPACE_ID::uint32 setpointsensorpair_;
    ::PROTOBUF_NAMESPACE_ID::uint32 actuatoranalog_;
    ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  } WidgetType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_DisplaySettings_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.DisplaySettings.Block) */ {
 public:
  inline Block() : Block(nullptr) {};
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.DisplaySettings.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DisplaySettings_5ftest_2eproto);
    return ::descriptor_table_DisplaySettings_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetsFieldNumber = 1,
    kNameFieldNumber = 2,
    kTimeZoneFieldNumber = 5,
    kTempUnitFieldNumber = 3,
    kBrightnessFieldNumber = 4,
  };
  // repeated .blox_test.DisplaySettings.Widget widgets = 1 [(.nanopb) = {
  int widgets_size() const;
  private:
  int _internal_widgets_size() const;
  public:
  void clear_widgets();
  ::blox_test::DisplaySettings::Widget* mutable_widgets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::DisplaySettings::Widget >*
      mutable_widgets();
  private:
  const ::blox_test::DisplaySettings::Widget& _internal_widgets(int index) const;
  ::blox_test::DisplaySettings::Widget* _internal_add_widgets();
  public:
  const ::blox_test::DisplaySettings::Widget& widgets(int index) const;
  ::blox_test::DisplaySettings::Widget* add_widgets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::DisplaySettings::Widget >&
      widgets() const;

  // string name = 2 [(.nanopb) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string timeZone = 5 [(.nanopb) = {
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timezone();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timezone(
      std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // .blox_test.DisplaySettings.TemperatureUnit tempUnit = 3;
  void clear_tempunit();
  ::blox_test::DisplaySettings::TemperatureUnit tempunit() const;
  void set_tempunit(::blox_test::DisplaySettings::TemperatureUnit value);
  private:
  ::blox_test::DisplaySettings::TemperatureUnit _internal_tempunit() const;
  void _internal_set_tempunit(::blox_test::DisplaySettings::TemperatureUnit value);
  public:

  // uint32 brightness = 4 [(.nanopb) = {
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::uint32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.DisplaySettings.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::DisplaySettings::Widget > widgets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  int tempunit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 brightness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DisplaySettings_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Widget

// uint32 pos = 1 [(.nanopb) = {
inline void Widget::clear_pos() {
  pos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::pos() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Widget.pos)
  return _internal_pos();
}
inline void Widget::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_ = value;
}
inline void Widget::set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Widget.pos)
}

// bytes color = 2 [(.nanopb) = {
inline void Widget::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Widget::color() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Widget.color)
  return _internal_color();
}
inline void Widget::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Widget.color)
}
inline std::string* Widget::mutable_color() {
  // @@protoc_insertion_point(field_mutable:blox_test.DisplaySettings.Widget.color)
  return _internal_mutable_color();
}
inline const std::string& Widget::_internal_color() const {
  return color_.Get();
}
inline void Widget::_internal_set_color(const std::string& value) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Widget::set_color(std::string&& value) {
  
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.DisplaySettings.Widget.color)
}
inline void Widget::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.DisplaySettings.Widget.color)
}
inline void Widget::set_color(const void* value,
    size_t size) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.DisplaySettings.Widget.color)
}
inline std::string* Widget::_internal_mutable_color() {
  
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Widget::release_color() {
  // @@protoc_insertion_point(field_release:blox_test.DisplaySettings.Widget.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Widget::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.DisplaySettings.Widget.color)
}
inline std::string* Widget::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.DisplaySettings.Widget.color)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return color_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Widget::unsafe_arena_set_allocated_color(
    std::string* color) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (color != nullptr) {
    
  } else {
    
  }
  color_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      color, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.DisplaySettings.Widget.color)
}

// string name = 3 [(.nanopb) = {
inline void Widget::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Widget::name() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Widget.name)
  return _internal_name();
}
inline void Widget::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Widget.name)
}
inline std::string* Widget::mutable_name() {
  // @@protoc_insertion_point(field_mutable:blox_test.DisplaySettings.Widget.name)
  return _internal_mutable_name();
}
inline const std::string& Widget::_internal_name() const {
  return name_.Get();
}
inline void Widget::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Widget::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.DisplaySettings.Widget.name)
}
inline void Widget::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.DisplaySettings.Widget.name)
}
inline void Widget::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.DisplaySettings.Widget.name)
}
inline std::string* Widget::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Widget::release_name() {
  // @@protoc_insertion_point(field_release:blox_test.DisplaySettings.Widget.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Widget::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.DisplaySettings.Widget.name)
}
inline std::string* Widget::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.DisplaySettings.Widget.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Widget::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.DisplaySettings.Widget.name)
}

// uint32 tempSensor = 10 [(.nanopb) = {
inline bool Widget::_internal_has_tempsensor() const {
  return WidgetType_case() == kTempSensor;
}
inline void Widget::set_has_tempsensor() {
  _oneof_case_[0] = kTempSensor;
}
inline void Widget::clear_tempsensor() {
  if (_internal_has_tempsensor()) {
    WidgetType_.tempsensor_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_tempsensor() const {
  if (_internal_has_tempsensor()) {
    return WidgetType_.tempsensor_;
  }
  return 0u;
}
inline void Widget::_internal_set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_tempsensor()) {
    clear_WidgetType();
    set_has_tempsensor();
  }
  WidgetType_.tempsensor_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::tempsensor() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Widget.tempSensor)
  return _internal_tempsensor();
}
inline void Widget::set_tempsensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tempsensor(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Widget.tempSensor)
}

// uint32 setpointSensorPair = 11 [(.nanopb) = {
inline bool Widget::_internal_has_setpointsensorpair() const {
  return WidgetType_case() == kSetpointSensorPair;
}
inline void Widget::set_has_setpointsensorpair() {
  _oneof_case_[0] = kSetpointSensorPair;
}
inline void Widget::clear_setpointsensorpair() {
  if (_internal_has_setpointsensorpair()) {
    WidgetType_.setpointsensorpair_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_setpointsensorpair() const {
  if (_internal_has_setpointsensorpair()) {
    return WidgetType_.setpointsensorpair_;
  }
  return 0u;
}
inline void Widget::_internal_set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_setpointsensorpair()) {
    clear_WidgetType();
    set_has_setpointsensorpair();
  }
  WidgetType_.setpointsensorpair_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::setpointsensorpair() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Widget.setpointSensorPair)
  return _internal_setpointsensorpair();
}
inline void Widget::set_setpointsensorpair(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setpointsensorpair(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Widget.setpointSensorPair)
}

// uint32 actuatorAnalog = 12 [(.nanopb) = {
inline bool Widget::_internal_has_actuatoranalog() const {
  return WidgetType_case() == kActuatorAnalog;
}
inline void Widget::set_has_actuatoranalog() {
  _oneof_case_[0] = kActuatorAnalog;
}
inline void Widget::clear_actuatoranalog() {
  if (_internal_has_actuatoranalog()) {
    WidgetType_.actuatoranalog_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_actuatoranalog() const {
  if (_internal_has_actuatoranalog()) {
    return WidgetType_.actuatoranalog_;
  }
  return 0u;
}
inline void Widget::_internal_set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_actuatoranalog()) {
    clear_WidgetType();
    set_has_actuatoranalog();
  }
  WidgetType_.actuatoranalog_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::actuatoranalog() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Widget.actuatorAnalog)
  return _internal_actuatoranalog();
}
inline void Widget::set_actuatoranalog(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actuatoranalog(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Widget.actuatorAnalog)
}

// uint32 pid = 14 [(.nanopb) = {
inline bool Widget::_internal_has_pid() const {
  return WidgetType_case() == kPid;
}
inline void Widget::set_has_pid() {
  _oneof_case_[0] = kPid;
}
inline void Widget::clear_pid() {
  if (_internal_has_pid()) {
    WidgetType_.pid_ = 0u;
    clear_has_WidgetType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::_internal_pid() const {
  if (_internal_has_pid()) {
    return WidgetType_.pid_;
  }
  return 0u;
}
inline void Widget::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_pid()) {
    clear_WidgetType();
    set_has_pid();
  }
  WidgetType_.pid_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Widget::pid() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Widget.pid)
  return _internal_pid();
}
inline void Widget::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Widget.pid)
}

inline bool Widget::has_WidgetType() const {
  return WidgetType_case() != WIDGETTYPE_NOT_SET;
}
inline void Widget::clear_has_WidgetType() {
  _oneof_case_[0] = WIDGETTYPE_NOT_SET;
}
inline Widget::WidgetTypeCase Widget::WidgetType_case() const {
  return Widget::WidgetTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Block

// repeated .blox_test.DisplaySettings.Widget widgets = 1 [(.nanopb) = {
inline int Block::_internal_widgets_size() const {
  return widgets_.size();
}
inline int Block::widgets_size() const {
  return _internal_widgets_size();
}
inline void Block::clear_widgets() {
  widgets_.Clear();
}
inline ::blox_test::DisplaySettings::Widget* Block::mutable_widgets(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.DisplaySettings.Block.widgets)
  return widgets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::DisplaySettings::Widget >*
Block::mutable_widgets() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.DisplaySettings.Block.widgets)
  return &widgets_;
}
inline const ::blox_test::DisplaySettings::Widget& Block::_internal_widgets(int index) const {
  return widgets_.Get(index);
}
inline const ::blox_test::DisplaySettings::Widget& Block::widgets(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Block.widgets)
  return _internal_widgets(index);
}
inline ::blox_test::DisplaySettings::Widget* Block::_internal_add_widgets() {
  return widgets_.Add();
}
inline ::blox_test::DisplaySettings::Widget* Block::add_widgets() {
  // @@protoc_insertion_point(field_add:blox_test.DisplaySettings.Block.widgets)
  return _internal_add_widgets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::DisplaySettings::Widget >&
Block::widgets() const {
  // @@protoc_insertion_point(field_list:blox_test.DisplaySettings.Block.widgets)
  return widgets_;
}

// string name = 2 [(.nanopb) = {
inline void Block::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::name() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Block.name)
  return _internal_name();
}
inline void Block::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Block.name)
}
inline std::string* Block::mutable_name() {
  // @@protoc_insertion_point(field_mutable:blox_test.DisplaySettings.Block.name)
  return _internal_mutable_name();
}
inline const std::string& Block::_internal_name() const {
  return name_.Get();
}
inline void Block::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.DisplaySettings.Block.name)
}
inline void Block::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.DisplaySettings.Block.name)
}
inline void Block::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.DisplaySettings.Block.name)
}
inline std::string* Block::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_name() {
  // @@protoc_insertion_point(field_release:blox_test.DisplaySettings.Block.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.DisplaySettings.Block.name)
}
inline std::string* Block::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.DisplaySettings.Block.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.DisplaySettings.Block.name)
}

// .blox_test.DisplaySettings.TemperatureUnit tempUnit = 3;
inline void Block::clear_tempunit() {
  tempunit_ = 0;
}
inline ::blox_test::DisplaySettings::TemperatureUnit Block::_internal_tempunit() const {
  return static_cast< ::blox_test::DisplaySettings::TemperatureUnit >(tempunit_);
}
inline ::blox_test::DisplaySettings::TemperatureUnit Block::tempunit() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Block.tempUnit)
  return _internal_tempunit();
}
inline void Block::_internal_set_tempunit(::blox_test::DisplaySettings::TemperatureUnit value) {
  
  tempunit_ = value;
}
inline void Block::set_tempunit(::blox_test::DisplaySettings::TemperatureUnit value) {
  _internal_set_tempunit(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Block.tempUnit)
}

// uint32 brightness = 4 [(.nanopb) = {
inline void Block::clear_brightness() {
  brightness_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block::brightness() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Block.brightness)
  return _internal_brightness();
}
inline void Block::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  brightness_ = value;
}
inline void Block::set_brightness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Block.brightness)
}

// string timeZone = 5 [(.nanopb) = {
inline void Block::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::timezone() const {
  // @@protoc_insertion_point(field_get:blox_test.DisplaySettings.Block.timeZone)
  return _internal_timezone();
}
inline void Block::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:blox_test.DisplaySettings.Block.timeZone)
}
inline std::string* Block::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:blox_test.DisplaySettings.Block.timeZone)
  return _internal_mutable_timezone();
}
inline const std::string& Block::_internal_timezone() const {
  return timezone_.Get();
}
inline void Block::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_timezone(std::string&& value) {
  
  timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.DisplaySettings.Block.timeZone)
}
inline void Block::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.DisplaySettings.Block.timeZone)
}
inline void Block::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.DisplaySettings.Block.timeZone)
}
inline std::string* Block::_internal_mutable_timezone() {
  
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_timezone() {
  // @@protoc_insertion_point(field_release:blox_test.DisplaySettings.Block.timeZone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.DisplaySettings.Block.timeZone)
}
inline std::string* Block::unsafe_arena_release_timezone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.DisplaySettings.Block.timeZone)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return timezone_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_timezone(
    std::string* timezone) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timezone, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.DisplaySettings.Block.timeZone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DisplaySettings
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::DisplaySettings::TemperatureUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::DisplaySettings::TemperatureUnit>() {
  return ::blox_test::DisplaySettings::TemperatureUnit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DisplaySettings_5ftest_2eproto
