// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnalogConstraints_test.proto

#include "AnalogConstraints_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr Balanced::Balanced(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balancerid_(0u)
  , granted_(0u)
  , id_(0u){}
struct BalancedDefaultTypeInternal {
  constexpr BalancedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BalancedDefaultTypeInternal() {}
  union {
    Balanced _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BalancedDefaultTypeInternal _Balanced_default_instance_;
constexpr AnalogConstraint::AnalogConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limiting_(false)
  , _oneof_case_{}{}
struct AnalogConstraintDefaultTypeInternal {
  constexpr AnalogConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalogConstraintDefaultTypeInternal() {}
  union {
    AnalogConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalogConstraintDefaultTypeInternal _AnalogConstraint_default_instance_;
constexpr AnalogConstraints::AnalogConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constraints_(){}
struct AnalogConstraintsDefaultTypeInternal {
  constexpr AnalogConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalogConstraintsDefaultTypeInternal() {}
  union {
    AnalogConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalogConstraintsDefaultTypeInternal _AnalogConstraints_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AnalogConstraints_5ftest_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AnalogConstraints_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AnalogConstraints_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AnalogConstraints_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::Balanced, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::Balanced, balancerid_),
  PROTOBUF_FIELD_OFFSET(::blox::Balanced, granted_),
  PROTOBUF_FIELD_OFFSET(::blox::Balanced, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::AnalogConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox::AnalogConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::blox::AnalogConstraint, limiting_),
  PROTOBUF_FIELD_OFFSET(::blox::AnalogConstraint, constraint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::AnalogConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::AnalogConstraints, constraints_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Balanced)},
  { 8, -1, sizeof(::blox::AnalogConstraint)},
  { 18, -1, sizeof(::blox::AnalogConstraints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_Balanced_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_AnalogConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_AnalogConstraints_default_instance_),
};

const char descriptor_table_protodef_AnalogConstraints_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034AnalogConstraints_test.proto\022\004blox\032\023br"
  "ewblox_test.proto\032\021nanopb_test.proto\"d\n\010"
  "Balanced\022\037\n\nbalancerId\030\001 \001(\rB\013\212\265\030\002\030\007\222\?\0028"
  "\020\022\036\n\007granted\030\002 \001(\rB\r\212\265\030\003\020\200 \212\265\030\002(\001\022\027\n\002id\030"
  "\003 \001(\rB\013\212\265\030\002(\001\222\?\0028\010\"\230\001\n\020AnalogConstraint\022"
  "\033\n\003min\030\001 \001(\021B\014\212\265\030\003\020\200 \222\?\0028 H\000\022\033\n\003max\030\002 \001("
  "\021B\014\212\265\030\003\020\200 \222\?\0028 H\000\022\"\n\010balanced\030\003 \001(\0132\016.bl"
  "ox.BalancedH\000\022\030\n\010limiting\030d \001(\010B\006\212\265\030\002(\001B"
  "\014\n\nconstraint\"G\n\021AnalogConstraints\0222\n\013co"
  "nstraints\030\001 \003(\0132\026.blox.AnalogConstraintB"
  "\005\222\?\002\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AnalogConstraints_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AnalogConstraints_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AnalogConstraints_5ftest_2eproto = {
  false, false, 414, descriptor_table_protodef_AnalogConstraints_5ftest_2eproto, "AnalogConstraints_test.proto", 
  &descriptor_table_AnalogConstraints_5ftest_2eproto_once, descriptor_table_AnalogConstraints_5ftest_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_AnalogConstraints_5ftest_2eproto::offsets,
  file_level_metadata_AnalogConstraints_5ftest_2eproto, file_level_enum_descriptors_AnalogConstraints_5ftest_2eproto, file_level_service_descriptors_AnalogConstraints_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_AnalogConstraints_5ftest_2eproto_getter() {
  return &descriptor_table_AnalogConstraints_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AnalogConstraints_5ftest_2eproto(&descriptor_table_AnalogConstraints_5ftest_2eproto);
namespace blox {

// ===================================================================

class Balanced::_Internal {
 public:
};

Balanced::Balanced(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.Balanced)
}
Balanced::Balanced(const Balanced& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&balancerid_, &from.balancerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:blox.Balanced)
}

inline void Balanced::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&balancerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
}

Balanced::~Balanced() {
  // @@protoc_insertion_point(destructor:blox.Balanced)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Balanced::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Balanced::ArenaDtor(void* object) {
  Balanced* _this = reinterpret_cast< Balanced* >(object);
  (void)_this;
}
void Balanced::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balanced::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balanced::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Balanced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&balancerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balanced::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 balancerId = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          balancerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 granted = 2 [(.brewblox_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Balanced::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.Balanced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 balancerId = 1 [(.nanopb_test) = {
  if (this->_internal_balancerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_balancerid(), target);
  }

  // uint32 granted = 2 [(.brewblox_test) = {
  if (this->_internal_granted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_granted(), target);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Balanced)
  return target;
}

size_t Balanced::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Balanced)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 balancerId = 1 [(.nanopb_test) = {
  if (this->_internal_balancerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_balancerid());
  }

  // uint32 granted = 2 [(.brewblox_test) = {
  if (this->_internal_granted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_granted());
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balanced::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balanced::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balanced::GetClassData() const { return &_class_data_; }

void Balanced::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Balanced *>(to)->MergeFrom(
      static_cast<const Balanced &>(from));
}


void Balanced::MergeFrom(const Balanced& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Balanced)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_balancerid() != 0) {
    _internal_set_balancerid(from._internal_balancerid());
  }
  if (from._internal_granted() != 0) {
    _internal_set_granted(from._internal_granted());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balanced::CopyFrom(const Balanced& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Balanced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balanced::IsInitialized() const {
  return true;
}

void Balanced::InternalSwap(Balanced* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Balanced, id_)
      + sizeof(Balanced::id_)
      - PROTOBUF_FIELD_OFFSET(Balanced, balancerid_)>(
          reinterpret_cast<char*>(&balancerid_),
          reinterpret_cast<char*>(&other->balancerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Balanced::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AnalogConstraints_5ftest_2eproto_getter, &descriptor_table_AnalogConstraints_5ftest_2eproto_once,
      file_level_metadata_AnalogConstraints_5ftest_2eproto[0]);
}

// ===================================================================

class AnalogConstraint::_Internal {
 public:
  static const ::blox::Balanced& balanced(const AnalogConstraint* msg);
};

const ::blox::Balanced&
AnalogConstraint::_Internal::balanced(const AnalogConstraint* msg) {
  return *msg->constraint_.balanced_;
}
void AnalogConstraint::set_allocated_balanced(::blox::Balanced* balanced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_constraint();
  if (balanced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::blox::Balanced>::GetOwningArena(balanced);
    if (message_arena != submessage_arena) {
      balanced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balanced, submessage_arena);
    }
    set_has_balanced();
    constraint_.balanced_ = balanced;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.AnalogConstraint.balanced)
}
AnalogConstraint::AnalogConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.AnalogConstraint)
}
AnalogConstraint::AnalogConstraint(const AnalogConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limiting_ = from.limiting_;
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kMin: {
      _internal_set_min(from._internal_min());
      break;
    }
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kBalanced: {
      _internal_mutable_balanced()->::blox::Balanced::MergeFrom(from._internal_balanced());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox.AnalogConstraint)
}

inline void AnalogConstraint::SharedCtor() {
limiting_ = false;
clear_has_constraint();
}

AnalogConstraint::~AnalogConstraint() {
  // @@protoc_insertion_point(destructor:blox.AnalogConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnalogConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_constraint()) {
    clear_constraint();
  }
}

void AnalogConstraint::ArenaDtor(void* object) {
  AnalogConstraint* _this = reinterpret_cast< AnalogConstraint* >(object);
  (void)_this;
}
void AnalogConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalogConstraint::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:blox.AnalogConstraint)
  switch (constraint_case()) {
    case kMin: {
      // No need to clear
      break;
    }
    case kMax: {
      // No need to clear
      break;
    }
    case kBalanced: {
      if (GetArenaForAllocation() == nullptr) {
        delete constraint_.balanced_;
      }
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void AnalogConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.AnalogConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limiting_ = false;
  clear_constraint();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 min = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 max = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.Balanced balanced = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_balanced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool limiting = 100 [(.brewblox_test) = {
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.AnalogConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 min = 1 [(.nanopb_test) = {
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_min(), target);
  }

  // sint32 max = 2 [(.nanopb_test) = {
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_max(), target);
  }

  // .blox.Balanced balanced = 3;
  if (_internal_has_balanced()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::balanced(this), target, stream);
  }

  // bool limiting = 100 [(.brewblox_test) = {
  if (this->_internal_limiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_limiting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.AnalogConstraint)
  return target;
}

size_t AnalogConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.AnalogConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool limiting = 100 [(.brewblox_test) = {
  if (this->_internal_limiting() != 0) {
    total_size += 2 + 1;
  }

  switch (constraint_case()) {
    // sint32 min = 1 [(.nanopb_test) = {
    case kMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_min());
      break;
    }
    // sint32 max = 2 [(.nanopb_test) = {
    case kMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_max());
      break;
    }
    // .blox.Balanced balanced = 3;
    case kBalanced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.balanced_);
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalogConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalogConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalogConstraint::GetClassData() const { return &_class_data_; }

void AnalogConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnalogConstraint *>(to)->MergeFrom(
      static_cast<const AnalogConstraint &>(from));
}


void AnalogConstraint::MergeFrom(const AnalogConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.AnalogConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limiting() != 0) {
    _internal_set_limiting(from._internal_limiting());
  }
  switch (from.constraint_case()) {
    case kMin: {
      _internal_set_min(from._internal_min());
      break;
    }
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kBalanced: {
      _internal_mutable_balanced()->::blox::Balanced::MergeFrom(from._internal_balanced());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogConstraint::CopyFrom(const AnalogConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.AnalogConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogConstraint::IsInitialized() const {
  return true;
}

void AnalogConstraint::InternalSwap(AnalogConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(limiting_, other->limiting_);
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AnalogConstraints_5ftest_2eproto_getter, &descriptor_table_AnalogConstraints_5ftest_2eproto_once,
      file_level_metadata_AnalogConstraints_5ftest_2eproto[1]);
}

// ===================================================================

class AnalogConstraints::_Internal {
 public:
};

AnalogConstraints::AnalogConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  constraints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.AnalogConstraints)
}
AnalogConstraints::AnalogConstraints(const AnalogConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox.AnalogConstraints)
}

inline void AnalogConstraints::SharedCtor() {
}

AnalogConstraints::~AnalogConstraints() {
  // @@protoc_insertion_point(destructor:blox.AnalogConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnalogConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnalogConstraints::ArenaDtor(void* object) {
  AnalogConstraints* _this = reinterpret_cast< AnalogConstraints* >(object);
  (void)_this;
}
void AnalogConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalogConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.AnalogConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox.AnalogConstraint constraints = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogConstraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.AnalogConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.AnalogConstraint constraints = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_constraints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.AnalogConstraints)
  return target;
}

size_t AnalogConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.AnalogConstraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.AnalogConstraint constraints = 1 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalogConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalogConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalogConstraints::GetClassData() const { return &_class_data_; }

void AnalogConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnalogConstraints *>(to)->MergeFrom(
      static_cast<const AnalogConstraints &>(from));
}


void AnalogConstraints::MergeFrom(const AnalogConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.AnalogConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogConstraints::CopyFrom(const AnalogConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.AnalogConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogConstraints::IsInitialized() const {
  return true;
}

void AnalogConstraints::InternalSwap(AnalogConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  constraints_.InternalSwap(&other->constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AnalogConstraints_5ftest_2eproto_getter, &descriptor_table_AnalogConstraints_5ftest_2eproto_once,
      file_level_metadata_AnalogConstraints_5ftest_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::Balanced* Arena::CreateMaybeMessage< ::blox::Balanced >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::Balanced >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::AnalogConstraint* Arena::CreateMaybeMessage< ::blox::AnalogConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::AnalogConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::AnalogConstraints* Arena::CreateMaybeMessage< ::blox::AnalogConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::AnalogConstraints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
