// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneWireGpioModule_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OneWireGpioModule_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OneWireGpioModule_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OneWireGpioModule_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OneWireGpioModule_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OneWireGpioModule_5ftest_2eproto;
namespace blox {
class GpioChannel;
struct GpioChannelDefaultTypeInternal;
extern GpioChannelDefaultTypeInternal _GpioChannel_default_instance_;
class OneWireGpioModule;
struct OneWireGpioModuleDefaultTypeInternal;
extern OneWireGpioModuleDefaultTypeInternal _OneWireGpioModule_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::GpioChannel* Arena::CreateMaybeMessage<::blox::GpioChannel>(Arena*);
template<> ::blox::OneWireGpioModule* Arena::CreateMaybeMessage<::blox::OneWireGpioModule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

// ===================================================================

class GpioChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.GpioChannel) */ {
 public:
  inline GpioChannel() : GpioChannel(nullptr) {}
  ~GpioChannel() override;
  explicit constexpr GpioChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpioChannel(const GpioChannel& from);
  GpioChannel(GpioChannel&& from) noexcept
    : GpioChannel() {
    *this = ::std::move(from);
  }

  inline GpioChannel& operator=(const GpioChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpioChannel& operator=(GpioChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpioChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpioChannel* internal_default_instance() {
    return reinterpret_cast<const GpioChannel*>(
               &_GpioChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpioChannel& a, GpioChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(GpioChannel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpioChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpioChannel* New() const final {
    return new GpioChannel();
  }

  GpioChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpioChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpioChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpioChannel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.GpioChannel";
  }
  protected:
  explicit GpioChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConfigFieldNumber = 2,
    kPinsFieldNumber = 3,
    kWhenActiveFieldNumber = 4,
    kWhenInactiveFieldNumber = 5,
    kPwmDutyFieldNumber = 6,
  };
  // uint32 id = 1 [(.nanopb_test) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .blox.ChannelConfig config = 2;
  void clear_config();
  ::blox::ChannelConfig config() const;
  void set_config(::blox::ChannelConfig value);
  private:
  ::blox::ChannelConfig _internal_config() const;
  void _internal_set_config(::blox::ChannelConfig value);
  public:

  // uint32 pins = 3 [(.nanopb_test) = {
  void clear_pins();
  ::PROTOBUF_NAMESPACE_ID::uint32 pins() const;
  void set_pins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pins() const;
  void _internal_set_pins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 whenActive = 4 [(.nanopb_test) = {
  void clear_whenactive();
  ::PROTOBUF_NAMESPACE_ID::uint32 whenactive() const;
  void set_whenactive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_whenactive() const;
  void _internal_set_whenactive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 whenInactive = 5 [(.nanopb_test) = {
  void clear_wheninactive();
  ::PROTOBUF_NAMESPACE_ID::uint32 wheninactive() const;
  void set_wheninactive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wheninactive() const;
  void _internal_set_wheninactive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pwmDuty = 6 [(.nanopb_test) = {
  void clear_pwmduty();
  ::PROTOBUF_NAMESPACE_ID::uint32 pwmduty() const;
  void set_pwmduty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pwmduty() const;
  void _internal_set_pwmduty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.GpioChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 whenactive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wheninactive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pwmduty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OneWireGpioModule_5ftest_2eproto;
};
// -------------------------------------------------------------------

class OneWireGpioModule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.OneWireGpioModule) */ {
 public:
  inline OneWireGpioModule() : OneWireGpioModule(nullptr) {}
  ~OneWireGpioModule() override;
  explicit constexpr OneWireGpioModule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneWireGpioModule(const OneWireGpioModule& from);
  OneWireGpioModule(OneWireGpioModule&& from) noexcept
    : OneWireGpioModule() {
    *this = ::std::move(from);
  }

  inline OneWireGpioModule& operator=(const OneWireGpioModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneWireGpioModule& operator=(OneWireGpioModule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneWireGpioModule& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneWireGpioModule* internal_default_instance() {
    return reinterpret_cast<const OneWireGpioModule*>(
               &_OneWireGpioModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OneWireGpioModule& a, OneWireGpioModule& b) {
    a.Swap(&b);
  }
  inline void Swap(OneWireGpioModule* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneWireGpioModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneWireGpioModule* New() const final {
    return new OneWireGpioModule();
  }

  OneWireGpioModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneWireGpioModule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneWireGpioModule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OneWireGpioModule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneWireGpioModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.OneWireGpioModule";
  }
  protected:
  explicit OneWireGpioModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kModulePositionFieldNumber = 2,
    kStatusFieldNumber = 3,
    kDriveFieldNumber = 4,
    kOverCurrentFieldNumber = 5,
    kOpenLoadFieldNumber = 6,
  };
  // repeated .blox.GpioChannel channels = 1 [(.nanopb_test) = {
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::blox::GpioChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::GpioChannel >*
      mutable_channels();
  private:
  const ::blox::GpioChannel& _internal_channels(int index) const;
  ::blox::GpioChannel* _internal_add_channels();
  public:
  const ::blox::GpioChannel& channels(int index) const;
  ::blox::GpioChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::GpioChannel >&
      channels() const;

  // uint32 modulePosition = 2 [(.nanopb_test) = {
  void clear_moduleposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 moduleposition() const;
  void set_moduleposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_moduleposition() const;
  void _internal_set_moduleposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 3 [(.nanopb_test) = {
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 drive = 4 [(.nanopb_test) = {
  void clear_drive();
  ::PROTOBUF_NAMESPACE_ID::uint32 drive() const;
  void set_drive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drive() const;
  void _internal_set_drive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 overCurrent = 5 [(.nanopb_test) = {
  void clear_overcurrent();
  ::PROTOBUF_NAMESPACE_ID::uint32 overcurrent() const;
  void set_overcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_overcurrent() const;
  void _internal_set_overcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 openLoad = 6 [(.nanopb_test) = {
  void clear_openload();
  ::PROTOBUF_NAMESPACE_ID::uint32 openload() const;
  void set_openload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_openload() const;
  void _internal_set_openload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.OneWireGpioModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::GpioChannel > channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 moduleposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 overcurrent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 openload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OneWireGpioModule_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpioChannel

// uint32 id = 1 [(.nanopb_test) = {
inline void GpioChannel::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::id() const {
  // @@protoc_insertion_point(field_get:blox.GpioChannel.id)
  return _internal_id();
}
inline void GpioChannel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GpioChannel::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox.GpioChannel.id)
}

// .blox.ChannelConfig config = 2;
inline void GpioChannel::clear_config() {
  config_ = 0;
}
inline ::blox::ChannelConfig GpioChannel::_internal_config() const {
  return static_cast< ::blox::ChannelConfig >(config_);
}
inline ::blox::ChannelConfig GpioChannel::config() const {
  // @@protoc_insertion_point(field_get:blox.GpioChannel.config)
  return _internal_config();
}
inline void GpioChannel::_internal_set_config(::blox::ChannelConfig value) {
  
  config_ = value;
}
inline void GpioChannel::set_config(::blox::ChannelConfig value) {
  _internal_set_config(value);
  // @@protoc_insertion_point(field_set:blox.GpioChannel.config)
}

// uint32 pins = 3 [(.nanopb_test) = {
inline void GpioChannel::clear_pins() {
  pins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::_internal_pins() const {
  return pins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::pins() const {
  // @@protoc_insertion_point(field_get:blox.GpioChannel.pins)
  return _internal_pins();
}
inline void GpioChannel::_internal_set_pins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pins_ = value;
}
inline void GpioChannel::set_pins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pins(value);
  // @@protoc_insertion_point(field_set:blox.GpioChannel.pins)
}

// uint32 whenActive = 4 [(.nanopb_test) = {
inline void GpioChannel::clear_whenactive() {
  whenactive_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::_internal_whenactive() const {
  return whenactive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::whenactive() const {
  // @@protoc_insertion_point(field_get:blox.GpioChannel.whenActive)
  return _internal_whenactive();
}
inline void GpioChannel::_internal_set_whenactive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  whenactive_ = value;
}
inline void GpioChannel::set_whenactive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_whenactive(value);
  // @@protoc_insertion_point(field_set:blox.GpioChannel.whenActive)
}

// uint32 whenInactive = 5 [(.nanopb_test) = {
inline void GpioChannel::clear_wheninactive() {
  wheninactive_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::_internal_wheninactive() const {
  return wheninactive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::wheninactive() const {
  // @@protoc_insertion_point(field_get:blox.GpioChannel.whenInactive)
  return _internal_wheninactive();
}
inline void GpioChannel::_internal_set_wheninactive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wheninactive_ = value;
}
inline void GpioChannel::set_wheninactive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wheninactive(value);
  // @@protoc_insertion_point(field_set:blox.GpioChannel.whenInactive)
}

// uint32 pwmDuty = 6 [(.nanopb_test) = {
inline void GpioChannel::clear_pwmduty() {
  pwmduty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::_internal_pwmduty() const {
  return pwmduty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioChannel::pwmduty() const {
  // @@protoc_insertion_point(field_get:blox.GpioChannel.pwmDuty)
  return _internal_pwmduty();
}
inline void GpioChannel::_internal_set_pwmduty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pwmduty_ = value;
}
inline void GpioChannel::set_pwmduty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pwmduty(value);
  // @@protoc_insertion_point(field_set:blox.GpioChannel.pwmDuty)
}

// -------------------------------------------------------------------

// OneWireGpioModule

// repeated .blox.GpioChannel channels = 1 [(.nanopb_test) = {
inline int OneWireGpioModule::_internal_channels_size() const {
  return channels_.size();
}
inline int OneWireGpioModule::channels_size() const {
  return _internal_channels_size();
}
inline void OneWireGpioModule::clear_channels() {
  channels_.Clear();
}
inline ::blox::GpioChannel* OneWireGpioModule::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:blox.OneWireGpioModule.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::GpioChannel >*
OneWireGpioModule::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:blox.OneWireGpioModule.channels)
  return &channels_;
}
inline const ::blox::GpioChannel& OneWireGpioModule::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::blox::GpioChannel& OneWireGpioModule::channels(int index) const {
  // @@protoc_insertion_point(field_get:blox.OneWireGpioModule.channels)
  return _internal_channels(index);
}
inline ::blox::GpioChannel* OneWireGpioModule::_internal_add_channels() {
  return channels_.Add();
}
inline ::blox::GpioChannel* OneWireGpioModule::add_channels() {
  ::blox::GpioChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:blox.OneWireGpioModule.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::GpioChannel >&
OneWireGpioModule::channels() const {
  // @@protoc_insertion_point(field_list:blox.OneWireGpioModule.channels)
  return channels_;
}

// uint32 modulePosition = 2 [(.nanopb_test) = {
inline void OneWireGpioModule::clear_moduleposition() {
  moduleposition_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::_internal_moduleposition() const {
  return moduleposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::moduleposition() const {
  // @@protoc_insertion_point(field_get:blox.OneWireGpioModule.modulePosition)
  return _internal_moduleposition();
}
inline void OneWireGpioModule::_internal_set_moduleposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  moduleposition_ = value;
}
inline void OneWireGpioModule::set_moduleposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_moduleposition(value);
  // @@protoc_insertion_point(field_set:blox.OneWireGpioModule.modulePosition)
}

// uint32 status = 3 [(.nanopb_test) = {
inline void OneWireGpioModule::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::status() const {
  // @@protoc_insertion_point(field_get:blox.OneWireGpioModule.status)
  return _internal_status();
}
inline void OneWireGpioModule::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void OneWireGpioModule::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:blox.OneWireGpioModule.status)
}

// uint32 drive = 4 [(.nanopb_test) = {
inline void OneWireGpioModule::clear_drive() {
  drive_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::_internal_drive() const {
  return drive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::drive() const {
  // @@protoc_insertion_point(field_get:blox.OneWireGpioModule.drive)
  return _internal_drive();
}
inline void OneWireGpioModule::_internal_set_drive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  drive_ = value;
}
inline void OneWireGpioModule::set_drive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drive(value);
  // @@protoc_insertion_point(field_set:blox.OneWireGpioModule.drive)
}

// uint32 overCurrent = 5 [(.nanopb_test) = {
inline void OneWireGpioModule::clear_overcurrent() {
  overcurrent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::_internal_overcurrent() const {
  return overcurrent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::overcurrent() const {
  // @@protoc_insertion_point(field_get:blox.OneWireGpioModule.overCurrent)
  return _internal_overcurrent();
}
inline void OneWireGpioModule::_internal_set_overcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  overcurrent_ = value;
}
inline void OneWireGpioModule::set_overcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_overcurrent(value);
  // @@protoc_insertion_point(field_set:blox.OneWireGpioModule.overCurrent)
}

// uint32 openLoad = 6 [(.nanopb_test) = {
inline void OneWireGpioModule::clear_openload() {
  openload_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::_internal_openload() const {
  return openload_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneWireGpioModule::openload() const {
  // @@protoc_insertion_point(field_get:blox.OneWireGpioModule.openLoad)
  return _internal_openload();
}
inline void OneWireGpioModule::_internal_set_openload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  openload_ = value;
}
inline void OneWireGpioModule::set_openload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_openload(value);
  // @@protoc_insertion_point(field_set:blox.OneWireGpioModule.openLoad)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OneWireGpioModule_5ftest_2eproto
