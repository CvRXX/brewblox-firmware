// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS2408_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DS2408_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DS2408_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DS2408_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DS2408_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DS2408_5ftest_2eproto;
namespace blox {
class DS2408;
struct DS2408DefaultTypeInternal;
extern DS2408DefaultTypeInternal _DS2408_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::DS2408* Arena::CreateMaybeMessage<::blox::DS2408>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

enum DS2408_PinConnectMode : int {
  DS2408_PinConnectMode_CONNECT_VALVE = 0,
  DS2408_PinConnectMode_CONNECT_ACTUATOR = 1,
  DS2408_PinConnectMode_DS2408_PinConnectMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DS2408_PinConnectMode_DS2408_PinConnectMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DS2408_PinConnectMode_IsValid(int value);
constexpr DS2408_PinConnectMode DS2408_PinConnectMode_PinConnectMode_MIN = DS2408_PinConnectMode_CONNECT_VALVE;
constexpr DS2408_PinConnectMode DS2408_PinConnectMode_PinConnectMode_MAX = DS2408_PinConnectMode_CONNECT_ACTUATOR;
constexpr int DS2408_PinConnectMode_PinConnectMode_ARRAYSIZE = DS2408_PinConnectMode_PinConnectMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DS2408_PinConnectMode_descriptor();
template<typename T>
inline const std::string& DS2408_PinConnectMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DS2408_PinConnectMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DS2408_PinConnectMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DS2408_PinConnectMode_descriptor(), enum_t_value);
}
inline bool DS2408_PinConnectMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DS2408_PinConnectMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DS2408_PinConnectMode>(
    DS2408_PinConnectMode_descriptor(), name, value);
}
enum DS2408ChannelIds : int {
  DS2408_CHAN_NONE = 0,
  DS2408_CHAN_A = 1,
  DS2408_CHAN_B = 2,
  DS2408_CHAN_C = 3,
  DS2408_CHAN_D = 4,
  DS2408_CHAN_E = 5,
  DS2408_CHAN_F = 6,
  DS2408_CHAN_G = 7,
  DS2408_CHAN_H = 8,
  DS2408_VALVE_NONE = 0,
  DS2408_VALVE_A = 5,
  DS2408_VALVE_B = 1,
  DS2408ChannelIds_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DS2408ChannelIds_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DS2408ChannelIds_IsValid(int value);
constexpr DS2408ChannelIds DS2408ChannelIds_MIN = DS2408_CHAN_NONE;
constexpr DS2408ChannelIds DS2408ChannelIds_MAX = DS2408_CHAN_H;
constexpr int DS2408ChannelIds_ARRAYSIZE = DS2408ChannelIds_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DS2408ChannelIds_descriptor();
template<typename T>
inline const std::string& DS2408ChannelIds_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DS2408ChannelIds>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DS2408ChannelIds_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DS2408ChannelIds_descriptor(), enum_t_value);
}
inline bool DS2408ChannelIds_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DS2408ChannelIds* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DS2408ChannelIds>(
    DS2408ChannelIds_descriptor(), name, value);
}
// ===================================================================

class DS2408 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.DS2408) */ {
 public:
  inline DS2408() : DS2408(nullptr) {}
  ~DS2408() override;
  explicit constexpr DS2408(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DS2408(const DS2408& from);
  DS2408(DS2408&& from) noexcept
    : DS2408() {
    *this = ::std::move(from);
  }

  inline DS2408& operator=(const DS2408& from) {
    CopyFrom(from);
    return *this;
  }
  inline DS2408& operator=(DS2408&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DS2408& default_instance() {
    return *internal_default_instance();
  }
  static inline const DS2408* internal_default_instance() {
    return reinterpret_cast<const DS2408*>(
               &_DS2408_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DS2408& a, DS2408& b) {
    a.Swap(&b);
  }
  inline void Swap(DS2408* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DS2408* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DS2408* New() const final {
    return new DS2408();
  }

  DS2408* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DS2408>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DS2408& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DS2408& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DS2408* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.DS2408";
  }
  protected:
  explicit DS2408(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DS2408_PinConnectMode PinConnectMode;
  static constexpr PinConnectMode CONNECT_VALVE =
    DS2408_PinConnectMode_CONNECT_VALVE;
  static constexpr PinConnectMode CONNECT_ACTUATOR =
    DS2408_PinConnectMode_CONNECT_ACTUATOR;
  static inline bool PinConnectMode_IsValid(int value) {
    return DS2408_PinConnectMode_IsValid(value);
  }
  static constexpr PinConnectMode PinConnectMode_MIN =
    DS2408_PinConnectMode_PinConnectMode_MIN;
  static constexpr PinConnectMode PinConnectMode_MAX =
    DS2408_PinConnectMode_PinConnectMode_MAX;
  static constexpr int PinConnectMode_ARRAYSIZE =
    DS2408_PinConnectMode_PinConnectMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PinConnectMode_descriptor() {
    return DS2408_PinConnectMode_descriptor();
  }
  template<typename T>
  static inline const std::string& PinConnectMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PinConnectMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PinConnectMode_Name.");
    return DS2408_PinConnectMode_Name(enum_t_value);
  }
  static inline bool PinConnectMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PinConnectMode* value) {
    return DS2408_PinConnectMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 11,
    kAddressFieldNumber = 1,
    kConnectedFieldNumber = 6,
    kPinsFieldNumber = 90,
    kConnectModeFieldNumber = 9,
    kOneWireBusIdFieldNumber = 10,
  };
  // repeated .blox.IoChannel channels = 11 [(.nanopb_test) = {
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::blox::IoChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >*
      mutable_channels();
  private:
  const ::blox::IoChannel& _internal_channels(int index) const;
  ::blox::IoChannel* _internal_add_channels();
  public:
  const ::blox::IoChannel& channels(int index) const;
  ::blox::IoChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >&
      channels() const;

  // fixed64 address = 1 [(.brewblox_test) = {
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool connected = 6 [(.brewblox_test) = {
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // bool pins = 90 [(.nanopb_test) = {
  void clear_pins();
  bool pins() const;
  void set_pins(bool value);
  private:
  bool _internal_pins() const;
  void _internal_set_pins(bool value);
  public:

  // .blox.DS2408.PinConnectMode connectMode = 9;
  void clear_connectmode();
  ::blox::DS2408_PinConnectMode connectmode() const;
  void set_connectmode(::blox::DS2408_PinConnectMode value);
  private:
  ::blox::DS2408_PinConnectMode _internal_connectmode() const;
  void _internal_set_connectmode(::blox::DS2408_PinConnectMode value);
  public:

  // uint32 oneWireBusId = 10 [(.nanopb_test) = {
  void clear_onewirebusid();
  ::PROTOBUF_NAMESPACE_ID::uint32 onewirebusid() const;
  void set_onewirebusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_onewirebusid() const;
  void _internal_set_onewirebusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.DS2408)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel > channels_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  bool connected_;
  bool pins_;
  int connectmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 onewirebusid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DS2408_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DS2408

// fixed64 address = 1 [(.brewblox_test) = {
inline void DS2408::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DS2408::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DS2408::address() const {
  // @@protoc_insertion_point(field_get:blox.DS2408.address)
  return _internal_address();
}
inline void DS2408::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void DS2408::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:blox.DS2408.address)
}

// bool connected = 6 [(.brewblox_test) = {
inline void DS2408::clear_connected() {
  connected_ = false;
}
inline bool DS2408::_internal_connected() const {
  return connected_;
}
inline bool DS2408::connected() const {
  // @@protoc_insertion_point(field_get:blox.DS2408.connected)
  return _internal_connected();
}
inline void DS2408::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void DS2408::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:blox.DS2408.connected)
}

// .blox.DS2408.PinConnectMode connectMode = 9;
inline void DS2408::clear_connectmode() {
  connectmode_ = 0;
}
inline ::blox::DS2408_PinConnectMode DS2408::_internal_connectmode() const {
  return static_cast< ::blox::DS2408_PinConnectMode >(connectmode_);
}
inline ::blox::DS2408_PinConnectMode DS2408::connectmode() const {
  // @@protoc_insertion_point(field_get:blox.DS2408.connectMode)
  return _internal_connectmode();
}
inline void DS2408::_internal_set_connectmode(::blox::DS2408_PinConnectMode value) {
  
  connectmode_ = value;
}
inline void DS2408::set_connectmode(::blox::DS2408_PinConnectMode value) {
  _internal_set_connectmode(value);
  // @@protoc_insertion_point(field_set:blox.DS2408.connectMode)
}

// uint32 oneWireBusId = 10 [(.nanopb_test) = {
inline void DS2408::clear_onewirebusid() {
  onewirebusid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DS2408::_internal_onewirebusid() const {
  return onewirebusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DS2408::onewirebusid() const {
  // @@protoc_insertion_point(field_get:blox.DS2408.oneWireBusId)
  return _internal_onewirebusid();
}
inline void DS2408::_internal_set_onewirebusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  onewirebusid_ = value;
}
inline void DS2408::set_onewirebusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_onewirebusid(value);
  // @@protoc_insertion_point(field_set:blox.DS2408.oneWireBusId)
}

// repeated .blox.IoChannel channels = 11 [(.nanopb_test) = {
inline int DS2408::_internal_channels_size() const {
  return channels_.size();
}
inline int DS2408::channels_size() const {
  return _internal_channels_size();
}
inline ::blox::IoChannel* DS2408::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:blox.DS2408.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >*
DS2408::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:blox.DS2408.channels)
  return &channels_;
}
inline const ::blox::IoChannel& DS2408::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::blox::IoChannel& DS2408::channels(int index) const {
  // @@protoc_insertion_point(field_get:blox.DS2408.channels)
  return _internal_channels(index);
}
inline ::blox::IoChannel* DS2408::_internal_add_channels() {
  return channels_.Add();
}
inline ::blox::IoChannel* DS2408::add_channels() {
  ::blox::IoChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:blox.DS2408.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >&
DS2408::channels() const {
  // @@protoc_insertion_point(field_list:blox.DS2408.channels)
  return channels_;
}

// bool pins = 90 [(.nanopb_test) = {
inline void DS2408::clear_pins() {
  pins_ = false;
}
inline bool DS2408::_internal_pins() const {
  return pins_;
}
inline bool DS2408::pins() const {
  // @@protoc_insertion_point(field_get:blox.DS2408.pins)
  return _internal_pins();
}
inline void DS2408::_internal_set_pins(bool value) {
  
  pins_ = value;
}
inline void DS2408::set_pins(bool value) {
  _internal_set_pins(value);
  // @@protoc_insertion_point(field_set:blox.DS2408.pins)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox::DS2408_PinConnectMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::DS2408_PinConnectMode>() {
  return ::blox::DS2408_PinConnectMode_descriptor();
}
template <> struct is_proto_enum< ::blox::DS2408ChannelIds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::DS2408ChannelIds>() {
  return ::blox::DS2408ChannelIds_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DS2408_5ftest_2eproto
