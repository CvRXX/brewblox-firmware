// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DigitalConstraints_test.proto

#include "DigitalConstraints_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr Mutexed::Mutexed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mutexid_(0u)
  , extraholdtime_(0u)
  , hascustomholdtime_(false)
  , haslock_(false){}
struct MutexedDefaultTypeInternal {
  constexpr MutexedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MutexedDefaultTypeInternal() {}
  union {
    Mutexed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MutexedDefaultTypeInternal _Mutexed_default_instance_;
constexpr DigitalConstraint::DigitalConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limiting_(0u)
  , remaining_(0u)
  , _oneof_case_{}{}
struct DigitalConstraintDefaultTypeInternal {
  constexpr DigitalConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalConstraintDefaultTypeInternal() {}
  union {
    DigitalConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalConstraintDefaultTypeInternal _DigitalConstraint_default_instance_;
constexpr DigitalConstraints::DigitalConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constraints_(){}
struct DigitalConstraintsDefaultTypeInternal {
  constexpr DigitalConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalConstraintsDefaultTypeInternal() {}
  union {
    DigitalConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalConstraintsDefaultTypeInternal _DigitalConstraints_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DigitalConstraints_5ftest_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DigitalConstraints_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DigitalConstraints_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DigitalConstraints_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::Mutexed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::Mutexed, mutexid_),
  PROTOBUF_FIELD_OFFSET(::blox::Mutexed, extraholdtime_),
  PROTOBUF_FIELD_OFFSET(::blox::Mutexed, hascustomholdtime_),
  PROTOBUF_FIELD_OFFSET(::blox::Mutexed, haslock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::DigitalConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox::DigitalConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::blox::DigitalConstraint, limiting_),
  PROTOBUF_FIELD_OFFSET(::blox::DigitalConstraint, remaining_),
  PROTOBUF_FIELD_OFFSET(::blox::DigitalConstraint, constraint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::DigitalConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::DigitalConstraints, constraints_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Mutexed)},
  { 9, -1, sizeof(::blox::DigitalConstraint)},
  { 23, -1, sizeof(::blox::DigitalConstraints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_Mutexed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_DigitalConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_DigitalConstraints_default_instance_),
};

const char descriptor_table_protodef_DigitalConstraints_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035DigitalConstraints_test.proto\022\004blox\032\023b"
  "rewblox_test.proto\032\021nanopb_test.proto\"\206\001"
  "\n\007Mutexed\022\034\n\007mutexId\030\001 \001(\rB\013\212\265\030\002\030\010\222\?\0028\020\022"
  ")\n\rextraHoldTime\030\002 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\002"
  "8 \022\031\n\021hasCustomHoldTime\030\003 \001(\010\022\027\n\007hasLock"
  "\030\004 \001(\010B\006\212\265\030\002(\001\"\313\002\n\021DigitalConstraint\022$\n\006"
  "minOff\030\001 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022#\n\005mi"
  "nOn\030\002 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022 \n\007mutex"
  "ed\030\004 \001(\0132\r.blox.MutexedH\000\022(\n\ndelayedOff\030"
  "\005 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022\'\n\tdelayedOn"
  "\030\006 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022\034\n\005mutex\030\003 "
  "\001(\rB\013\212\265\030\002\030\010\222\?\0028\020H\000\022\035\n\010limiting\030d \001(\rB\013\212\265"
  "\030\002H\001\222\?\002\030\003\022+\n\tremaining\030e \001(\rB\030\212\265\030\002\010\003\212\265\030\003"
  "\020\350\007\212\265\030\002(\001\222\?\0028 B\014\n\nconstraint\"I\n\022DigitalC"
  "onstraints\0223\n\013constraints\030\001 \003(\0132\027.blox.D"
  "igitalConstraintB\005\222\?\002\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DigitalConstraints_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DigitalConstraints_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DigitalConstraints_5ftest_2eproto = {
  false, false, 631, descriptor_table_protodef_DigitalConstraints_5ftest_2eproto, "DigitalConstraints_test.proto", 
  &descriptor_table_DigitalConstraints_5ftest_2eproto_once, descriptor_table_DigitalConstraints_5ftest_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_DigitalConstraints_5ftest_2eproto::offsets,
  file_level_metadata_DigitalConstraints_5ftest_2eproto, file_level_enum_descriptors_DigitalConstraints_5ftest_2eproto, file_level_service_descriptors_DigitalConstraints_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DigitalConstraints_5ftest_2eproto_getter() {
  return &descriptor_table_DigitalConstraints_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DigitalConstraints_5ftest_2eproto(&descriptor_table_DigitalConstraints_5ftest_2eproto);
namespace blox {

// ===================================================================

class Mutexed::_Internal {
 public:
};

Mutexed::Mutexed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.Mutexed)
}
Mutexed::Mutexed(const Mutexed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mutexid_, &from.mutexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&haslock_) -
    reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
  // @@protoc_insertion_point(copy_constructor:blox.Mutexed)
}

inline void Mutexed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mutexid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&haslock_) -
    reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
}

Mutexed::~Mutexed() {
  // @@protoc_insertion_point(destructor:blox.Mutexed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mutexed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mutexed::ArenaDtor(void* object) {
  Mutexed* _this = reinterpret_cast< Mutexed* >(object);
  (void)_this;
}
void Mutexed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mutexed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mutexed::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Mutexed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mutexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&haslock_) -
      reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mutexed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mutexId = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mutexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 extraHoldTime = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          extraholdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasCustomHoldTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hascustomholdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasLock = 4 [(.brewblox_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          haslock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mutexed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.Mutexed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mutexId = 1 [(.nanopb_test) = {
  if (this->_internal_mutexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mutexid(), target);
  }

  // uint32 extraHoldTime = 2 [(.nanopb_test) = {
  if (this->_internal_extraholdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extraholdtime(), target);
  }

  // bool hasCustomHoldTime = 3;
  if (this->_internal_hascustomholdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hascustomholdtime(), target);
  }

  // bool hasLock = 4 [(.brewblox_test) = {
  if (this->_internal_haslock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_haslock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Mutexed)
  return target;
}

size_t Mutexed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Mutexed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mutexId = 1 [(.nanopb_test) = {
  if (this->_internal_mutexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mutexid());
  }

  // uint32 extraHoldTime = 2 [(.nanopb_test) = {
  if (this->_internal_extraholdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extraholdtime());
  }

  // bool hasCustomHoldTime = 3;
  if (this->_internal_hascustomholdtime() != 0) {
    total_size += 1 + 1;
  }

  // bool hasLock = 4 [(.brewblox_test) = {
  if (this->_internal_haslock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mutexed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mutexed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mutexed::GetClassData() const { return &_class_data_; }

void Mutexed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Mutexed *>(to)->MergeFrom(
      static_cast<const Mutexed &>(from));
}


void Mutexed::MergeFrom(const Mutexed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Mutexed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mutexid() != 0) {
    _internal_set_mutexid(from._internal_mutexid());
  }
  if (from._internal_extraholdtime() != 0) {
    _internal_set_extraholdtime(from._internal_extraholdtime());
  }
  if (from._internal_hascustomholdtime() != 0) {
    _internal_set_hascustomholdtime(from._internal_hascustomholdtime());
  }
  if (from._internal_haslock() != 0) {
    _internal_set_haslock(from._internal_haslock());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mutexed::CopyFrom(const Mutexed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Mutexed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutexed::IsInitialized() const {
  return true;
}

void Mutexed::InternalSwap(Mutexed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mutexed, haslock_)
      + sizeof(Mutexed::haslock_)
      - PROTOBUF_FIELD_OFFSET(Mutexed, mutexid_)>(
          reinterpret_cast<char*>(&mutexid_),
          reinterpret_cast<char*>(&other->mutexid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mutexed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DigitalConstraints_5ftest_2eproto_getter, &descriptor_table_DigitalConstraints_5ftest_2eproto_once,
      file_level_metadata_DigitalConstraints_5ftest_2eproto[0]);
}

// ===================================================================

class DigitalConstraint::_Internal {
 public:
  static const ::blox::Mutexed& mutexed(const DigitalConstraint* msg);
};

const ::blox::Mutexed&
DigitalConstraint::_Internal::mutexed(const DigitalConstraint* msg) {
  return *msg->constraint_.mutexed_;
}
void DigitalConstraint::set_allocated_mutexed(::blox::Mutexed* mutexed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_constraint();
  if (mutexed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::blox::Mutexed>::GetOwningArena(mutexed);
    if (message_arena != submessage_arena) {
      mutexed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutexed, submessage_arena);
    }
    set_has_mutexed();
    constraint_.mutexed_ = mutexed;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DigitalConstraint.mutexed)
}
DigitalConstraint::DigitalConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.DigitalConstraint)
}
DigitalConstraint::DigitalConstraint(const DigitalConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&limiting_, &from.limiting_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_) -
    reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kMinOff: {
      _internal_set_minoff(from._internal_minoff());
      break;
    }
    case kMinOn: {
      _internal_set_minon(from._internal_minon());
      break;
    }
    case kMutexed: {
      _internal_mutable_mutexed()->::blox::Mutexed::MergeFrom(from._internal_mutexed());
      break;
    }
    case kDelayedOff: {
      _internal_set_delayedoff(from._internal_delayedoff());
      break;
    }
    case kDelayedOn: {
      _internal_set_delayedon(from._internal_delayedon());
      break;
    }
    case kMutex: {
      _internal_set_mutex(from._internal_mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox.DigitalConstraint)
}

inline void DigitalConstraint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limiting_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remaining_) -
    reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
clear_has_constraint();
}

DigitalConstraint::~DigitalConstraint() {
  // @@protoc_insertion_point(destructor:blox.DigitalConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_constraint()) {
    clear_constraint();
  }
}

void DigitalConstraint::ArenaDtor(void* object) {
  DigitalConstraint* _this = reinterpret_cast< DigitalConstraint* >(object);
  (void)_this;
}
void DigitalConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalConstraint::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:blox.DigitalConstraint)
  switch (constraint_case()) {
    case kMinOff: {
      // No need to clear
      break;
    }
    case kMinOn: {
      // No need to clear
      break;
    }
    case kMutexed: {
      if (GetArenaForAllocation() == nullptr) {
        delete constraint_.mutexed_;
      }
      break;
    }
    case kDelayedOff: {
      // No need to clear
      break;
    }
    case kDelayedOn: {
      // No need to clear
      break;
    }
    case kMutex: {
      // No need to clear
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void DigitalConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.DigitalConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limiting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_constraint();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 minOff = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_minoff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minOn = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_minon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mutex = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_mutex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.Mutexed mutexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutexed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delayedOff = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_delayedoff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delayedOn = 6 [(.nanopb_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_delayedon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limiting = 100 [(.nanopb_test) = {
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remaining = 101 [(.nanopb_test) = {
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.DigitalConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 minOff = 1 [(.nanopb_test) = {
  if (_internal_has_minoff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_minoff(), target);
  }

  // uint32 minOn = 2 [(.nanopb_test) = {
  if (_internal_has_minon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minon(), target);
  }

  // uint32 mutex = 3 [(.nanopb_test) = {
  if (_internal_has_mutex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mutex(), target);
  }

  // .blox.Mutexed mutexed = 4;
  if (_internal_has_mutexed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mutexed(this), target, stream);
  }

  // uint32 delayedOff = 5 [(.nanopb_test) = {
  if (_internal_has_delayedoff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_delayedoff(), target);
  }

  // uint32 delayedOn = 6 [(.nanopb_test) = {
  if (_internal_has_delayedon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_delayedon(), target);
  }

  // uint32 limiting = 100 [(.nanopb_test) = {
  if (this->_internal_limiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(100, this->_internal_limiting(), target);
  }

  // uint32 remaining = 101 [(.nanopb_test) = {
  if (this->_internal_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(101, this->_internal_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.DigitalConstraint)
  return target;
}

size_t DigitalConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.DigitalConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limiting = 100 [(.nanopb_test) = {
  if (this->_internal_limiting() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limiting());
  }

  // uint32 remaining = 101 [(.nanopb_test) = {
  if (this->_internal_remaining() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remaining());
  }

  switch (constraint_case()) {
    // uint32 minOff = 1 [(.nanopb_test) = {
    case kMinOff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minoff());
      break;
    }
    // uint32 minOn = 2 [(.nanopb_test) = {
    case kMinOn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minon());
      break;
    }
    // .blox.Mutexed mutexed = 4;
    case kMutexed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.mutexed_);
      break;
    }
    // uint32 delayedOff = 5 [(.nanopb_test) = {
    case kDelayedOff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delayedoff());
      break;
    }
    // uint32 delayedOn = 6 [(.nanopb_test) = {
    case kDelayedOn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delayedon());
      break;
    }
    // uint32 mutex = 3 [(.nanopb_test) = {
    case kMutex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalConstraint::GetClassData() const { return &_class_data_; }

void DigitalConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DigitalConstraint *>(to)->MergeFrom(
      static_cast<const DigitalConstraint &>(from));
}


void DigitalConstraint::MergeFrom(const DigitalConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.DigitalConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limiting() != 0) {
    _internal_set_limiting(from._internal_limiting());
  }
  if (from._internal_remaining() != 0) {
    _internal_set_remaining(from._internal_remaining());
  }
  switch (from.constraint_case()) {
    case kMinOff: {
      _internal_set_minoff(from._internal_minoff());
      break;
    }
    case kMinOn: {
      _internal_set_minon(from._internal_minon());
      break;
    }
    case kMutexed: {
      _internal_mutable_mutexed()->::blox::Mutexed::MergeFrom(from._internal_mutexed());
      break;
    }
    case kDelayedOff: {
      _internal_set_delayedoff(from._internal_delayedoff());
      break;
    }
    case kDelayedOn: {
      _internal_set_delayedon(from._internal_delayedon());
      break;
    }
    case kMutex: {
      _internal_set_mutex(from._internal_mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalConstraint::CopyFrom(const DigitalConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.DigitalConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalConstraint::IsInitialized() const {
  return true;
}

void DigitalConstraint::InternalSwap(DigitalConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalConstraint, remaining_)
      + sizeof(DigitalConstraint::remaining_)
      - PROTOBUF_FIELD_OFFSET(DigitalConstraint, limiting_)>(
          reinterpret_cast<char*>(&limiting_),
          reinterpret_cast<char*>(&other->limiting_));
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DigitalConstraints_5ftest_2eproto_getter, &descriptor_table_DigitalConstraints_5ftest_2eproto_once,
      file_level_metadata_DigitalConstraints_5ftest_2eproto[1]);
}

// ===================================================================

class DigitalConstraints::_Internal {
 public:
};

DigitalConstraints::DigitalConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  constraints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.DigitalConstraints)
}
DigitalConstraints::DigitalConstraints(const DigitalConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox.DigitalConstraints)
}

inline void DigitalConstraints::SharedCtor() {
}

DigitalConstraints::~DigitalConstraints() {
  // @@protoc_insertion_point(destructor:blox.DigitalConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigitalConstraints::ArenaDtor(void* object) {
  DigitalConstraints* _this = reinterpret_cast< DigitalConstraints* >(object);
  (void)_this;
}
void DigitalConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.DigitalConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox.DigitalConstraint constraints = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalConstraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.DigitalConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.DigitalConstraint constraints = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_constraints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.DigitalConstraints)
  return target;
}

size_t DigitalConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.DigitalConstraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.DigitalConstraint constraints = 1 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalConstraints::GetClassData() const { return &_class_data_; }

void DigitalConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DigitalConstraints *>(to)->MergeFrom(
      static_cast<const DigitalConstraints &>(from));
}


void DigitalConstraints::MergeFrom(const DigitalConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.DigitalConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalConstraints::CopyFrom(const DigitalConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.DigitalConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalConstraints::IsInitialized() const {
  return true;
}

void DigitalConstraints::InternalSwap(DigitalConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  constraints_.InternalSwap(&other->constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DigitalConstraints_5ftest_2eproto_getter, &descriptor_table_DigitalConstraints_5ftest_2eproto_once,
      file_level_metadata_DigitalConstraints_5ftest_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::Mutexed* Arena::CreateMaybeMessage< ::blox::Mutexed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::Mutexed >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::DigitalConstraint* Arena::CreateMaybeMessage< ::blox::DigitalConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::DigitalConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::DigitalConstraints* Arena::CreateMaybeMessage< ::blox::DigitalConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::DigitalConstraints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
