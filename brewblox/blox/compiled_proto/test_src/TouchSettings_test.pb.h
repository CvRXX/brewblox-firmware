// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TouchSettings_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TouchSettings_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TouchSettings_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TouchSettings_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TouchSettings_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TouchSettings_5ftest_2eproto;
namespace blox {
class TouchSettings;
struct TouchSettingsDefaultTypeInternal;
extern TouchSettingsDefaultTypeInternal _TouchSettings_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::TouchSettings* Arena::CreateMaybeMessage<::blox::TouchSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

enum TouchSettings_Calibrated : int {
  TouchSettings_Calibrated_CALIBRATED_NO = 0,
  TouchSettings_Calibrated_CALIBRATED_YES = 1,
  TouchSettings_Calibrated_CALIBRATED_NEW = 2,
  TouchSettings_Calibrated_TouchSettings_Calibrated_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TouchSettings_Calibrated_TouchSettings_Calibrated_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TouchSettings_Calibrated_IsValid(int value);
constexpr TouchSettings_Calibrated TouchSettings_Calibrated_Calibrated_MIN = TouchSettings_Calibrated_CALIBRATED_NO;
constexpr TouchSettings_Calibrated TouchSettings_Calibrated_Calibrated_MAX = TouchSettings_Calibrated_CALIBRATED_NEW;
constexpr int TouchSettings_Calibrated_Calibrated_ARRAYSIZE = TouchSettings_Calibrated_Calibrated_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TouchSettings_Calibrated_descriptor();
template<typename T>
inline const std::string& TouchSettings_Calibrated_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TouchSettings_Calibrated>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TouchSettings_Calibrated_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TouchSettings_Calibrated_descriptor(), enum_t_value);
}
inline bool TouchSettings_Calibrated_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TouchSettings_Calibrated* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TouchSettings_Calibrated>(
    TouchSettings_Calibrated_descriptor(), name, value);
}
// ===================================================================

class TouchSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.TouchSettings) */ {
 public:
  inline TouchSettings() : TouchSettings(nullptr) {}
  ~TouchSettings() override;
  explicit constexpr TouchSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TouchSettings(const TouchSettings& from);
  TouchSettings(TouchSettings&& from) noexcept
    : TouchSettings() {
    *this = ::std::move(from);
  }

  inline TouchSettings& operator=(const TouchSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TouchSettings& operator=(TouchSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TouchSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TouchSettings* internal_default_instance() {
    return reinterpret_cast<const TouchSettings*>(
               &_TouchSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TouchSettings& a, TouchSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TouchSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TouchSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TouchSettings* New() const final {
    return new TouchSettings();
  }

  TouchSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TouchSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TouchSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TouchSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TouchSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.TouchSettings";
  }
  protected:
  explicit TouchSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TouchSettings_Calibrated Calibrated;
  static constexpr Calibrated CALIBRATED_NO =
    TouchSettings_Calibrated_CALIBRATED_NO;
  static constexpr Calibrated CALIBRATED_YES =
    TouchSettings_Calibrated_CALIBRATED_YES;
  static constexpr Calibrated CALIBRATED_NEW =
    TouchSettings_Calibrated_CALIBRATED_NEW;
  static inline bool Calibrated_IsValid(int value) {
    return TouchSettings_Calibrated_IsValid(value);
  }
  static constexpr Calibrated Calibrated_MIN =
    TouchSettings_Calibrated_Calibrated_MIN;
  static constexpr Calibrated Calibrated_MAX =
    TouchSettings_Calibrated_Calibrated_MAX;
  static constexpr int Calibrated_ARRAYSIZE =
    TouchSettings_Calibrated_Calibrated_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Calibrated_descriptor() {
    return TouchSettings_Calibrated_descriptor();
  }
  template<typename T>
  static inline const std::string& Calibrated_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Calibrated>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Calibrated_Name.");
    return TouchSettings_Calibrated_Name(enum_t_value);
  }
  static inline bool Calibrated_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Calibrated* value) {
    return TouchSettings_Calibrated_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCalibratedFieldNumber = 1,
    kXOffsetFieldNumber = 2,
    kYOffsetFieldNumber = 3,
    kXBitsPerPixelX16FieldNumber = 4,
    kYBitsPerPixelX16FieldNumber = 5,
  };
  // .blox.TouchSettings.Calibrated calibrated = 1;
  void clear_calibrated();
  ::blox::TouchSettings_Calibrated calibrated() const;
  void set_calibrated(::blox::TouchSettings_Calibrated value);
  private:
  ::blox::TouchSettings_Calibrated _internal_calibrated() const;
  void _internal_set_calibrated(::blox::TouchSettings_Calibrated value);
  public:

  // int32 xOffset = 2 [(.nanopb_test) = {
  void clear_xoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 xoffset() const;
  void set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xoffset() const;
  void _internal_set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 yOffset = 3 [(.nanopb_test) = {
  void clear_yoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 yoffset() const;
  void set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yoffset() const;
  void _internal_set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 xBitsPerPixelX16 = 4 [(.nanopb_test) = {
  void clear_xbitsperpixelx16();
  ::PROTOBUF_NAMESPACE_ID::uint32 xbitsperpixelx16() const;
  void set_xbitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xbitsperpixelx16() const;
  void _internal_set_xbitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 yBitsPerPixelX16 = 5 [(.nanopb_test) = {
  void clear_ybitsperpixelx16();
  ::PROTOBUF_NAMESPACE_ID::uint32 ybitsperpixelx16() const;
  void set_ybitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ybitsperpixelx16() const;
  void _internal_set_ybitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.TouchSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int calibrated_;
  ::PROTOBUF_NAMESPACE_ID::int32 xoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 yoffset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xbitsperpixelx16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ybitsperpixelx16_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TouchSettings_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TouchSettings

// .blox.TouchSettings.Calibrated calibrated = 1;
inline void TouchSettings::clear_calibrated() {
  calibrated_ = 0;
}
inline ::blox::TouchSettings_Calibrated TouchSettings::_internal_calibrated() const {
  return static_cast< ::blox::TouchSettings_Calibrated >(calibrated_);
}
inline ::blox::TouchSettings_Calibrated TouchSettings::calibrated() const {
  // @@protoc_insertion_point(field_get:blox.TouchSettings.calibrated)
  return _internal_calibrated();
}
inline void TouchSettings::_internal_set_calibrated(::blox::TouchSettings_Calibrated value) {
  
  calibrated_ = value;
}
inline void TouchSettings::set_calibrated(::blox::TouchSettings_Calibrated value) {
  _internal_set_calibrated(value);
  // @@protoc_insertion_point(field_set:blox.TouchSettings.calibrated)
}

// int32 xOffset = 2 [(.nanopb_test) = {
inline void TouchSettings::clear_xoffset() {
  xoffset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TouchSettings::_internal_xoffset() const {
  return xoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TouchSettings::xoffset() const {
  // @@protoc_insertion_point(field_get:blox.TouchSettings.xOffset)
  return _internal_xoffset();
}
inline void TouchSettings::_internal_set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xoffset_ = value;
}
inline void TouchSettings::set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xoffset(value);
  // @@protoc_insertion_point(field_set:blox.TouchSettings.xOffset)
}

// int32 yOffset = 3 [(.nanopb_test) = {
inline void TouchSettings::clear_yoffset() {
  yoffset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TouchSettings::_internal_yoffset() const {
  return yoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TouchSettings::yoffset() const {
  // @@protoc_insertion_point(field_get:blox.TouchSettings.yOffset)
  return _internal_yoffset();
}
inline void TouchSettings::_internal_set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yoffset_ = value;
}
inline void TouchSettings::set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yoffset(value);
  // @@protoc_insertion_point(field_set:blox.TouchSettings.yOffset)
}

// uint32 xBitsPerPixelX16 = 4 [(.nanopb_test) = {
inline void TouchSettings::clear_xbitsperpixelx16() {
  xbitsperpixelx16_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TouchSettings::_internal_xbitsperpixelx16() const {
  return xbitsperpixelx16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TouchSettings::xbitsperpixelx16() const {
  // @@protoc_insertion_point(field_get:blox.TouchSettings.xBitsPerPixelX16)
  return _internal_xbitsperpixelx16();
}
inline void TouchSettings::_internal_set_xbitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  xbitsperpixelx16_ = value;
}
inline void TouchSettings::set_xbitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_xbitsperpixelx16(value);
  // @@protoc_insertion_point(field_set:blox.TouchSettings.xBitsPerPixelX16)
}

// uint32 yBitsPerPixelX16 = 5 [(.nanopb_test) = {
inline void TouchSettings::clear_ybitsperpixelx16() {
  ybitsperpixelx16_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TouchSettings::_internal_ybitsperpixelx16() const {
  return ybitsperpixelx16_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TouchSettings::ybitsperpixelx16() const {
  // @@protoc_insertion_point(field_get:blox.TouchSettings.yBitsPerPixelX16)
  return _internal_ybitsperpixelx16();
}
inline void TouchSettings::_internal_set_ybitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ybitsperpixelx16_ = value;
}
inline void TouchSettings::set_ybitsperpixelx16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ybitsperpixelx16(value);
  // @@protoc_insertion_point(field_set:blox.TouchSettings.yBitsPerPixelX16)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox::TouchSettings_Calibrated> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::TouchSettings_Calibrated>() {
  return ::blox::TouchSettings_Calibrated_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TouchSettings_5ftest_2eproto
