// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnalogConstraints_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AnalogConstraints_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AnalogConstraints_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AnalogConstraints_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AnalogConstraints_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AnalogConstraints_5ftest_2eproto;
namespace blox {
class AnalogConstraint;
struct AnalogConstraintDefaultTypeInternal;
extern AnalogConstraintDefaultTypeInternal _AnalogConstraint_default_instance_;
class AnalogConstraints;
struct AnalogConstraintsDefaultTypeInternal;
extern AnalogConstraintsDefaultTypeInternal _AnalogConstraints_default_instance_;
class Balanced;
struct BalancedDefaultTypeInternal;
extern BalancedDefaultTypeInternal _Balanced_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::AnalogConstraint* Arena::CreateMaybeMessage<::blox::AnalogConstraint>(Arena*);
template<> ::blox::AnalogConstraints* Arena::CreateMaybeMessage<::blox::AnalogConstraints>(Arena*);
template<> ::blox::Balanced* Arena::CreateMaybeMessage<::blox::Balanced>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

// ===================================================================

class Balanced final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.Balanced) */ {
 public:
  inline Balanced() : Balanced(nullptr) {}
  ~Balanced() override;
  explicit constexpr Balanced(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balanced(const Balanced& from);
  Balanced(Balanced&& from) noexcept
    : Balanced() {
    *this = ::std::move(from);
  }

  inline Balanced& operator=(const Balanced& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balanced& operator=(Balanced&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balanced& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balanced* internal_default_instance() {
    return reinterpret_cast<const Balanced*>(
               &_Balanced_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Balanced& a, Balanced& b) {
    a.Swap(&b);
  }
  inline void Swap(Balanced* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balanced* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Balanced* New() const final {
    return new Balanced();
  }

  Balanced* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Balanced>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balanced& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balanced& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balanced* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.Balanced";
  }
  protected:
  explicit Balanced(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancerIdFieldNumber = 1,
    kGrantedFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // uint32 balancerId = 1 [(.nanopb_test) = {
  void clear_balancerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 balancerid() const;
  void set_balancerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_balancerid() const;
  void _internal_set_balancerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 granted = 2 [(.brewblox_test) = {
  void clear_granted();
  ::PROTOBUF_NAMESPACE_ID::uint32 granted() const;
  void set_granted(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_granted() const;
  void _internal_set_granted(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 3 [(.nanopb_test) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.Balanced)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 balancerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 granted_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AnalogConstraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class AnalogConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.AnalogConstraint) */ {
 public:
  inline AnalogConstraint() : AnalogConstraint(nullptr) {}
  ~AnalogConstraint() override;
  explicit constexpr AnalogConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogConstraint(const AnalogConstraint& from);
  AnalogConstraint(AnalogConstraint&& from) noexcept
    : AnalogConstraint() {
    *this = ::std::move(from);
  }

  inline AnalogConstraint& operator=(const AnalogConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogConstraint& operator=(AnalogConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogConstraint& default_instance() {
    return *internal_default_instance();
  }
  enum ConstraintCase {
    kMin = 1,
    kMax = 2,
    kBalanced = 3,
    CONSTRAINT_NOT_SET = 0,
  };

  static inline const AnalogConstraint* internal_default_instance() {
    return reinterpret_cast<const AnalogConstraint*>(
               &_AnalogConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnalogConstraint& a, AnalogConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogConstraint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogConstraint* New() const final {
    return new AnalogConstraint();
  }

  AnalogConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalogConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnalogConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.AnalogConstraint";
  }
  protected:
  explicit AnalogConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitingFieldNumber = 100,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kBalancedFieldNumber = 3,
  };
  // bool limiting = 100 [(.brewblox_test) = {
  void clear_limiting();
  bool limiting() const;
  void set_limiting(bool value);
  private:
  bool _internal_limiting() const;
  void _internal_set_limiting(bool value);
  public:

  // sint32 min = 1 [(.nanopb_test) = {
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 max = 2 [(.nanopb_test) = {
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .blox.Balanced balanced = 3;
  bool has_balanced() const;
  private:
  bool _internal_has_balanced() const;
  public:
  void clear_balanced();
  const ::blox::Balanced& balanced() const;
  PROTOBUF_MUST_USE_RESULT ::blox::Balanced* release_balanced();
  ::blox::Balanced* mutable_balanced();
  void set_allocated_balanced(::blox::Balanced* balanced);
  private:
  const ::blox::Balanced& _internal_balanced() const;
  ::blox::Balanced* _internal_mutable_balanced();
  public:
  void unsafe_arena_set_allocated_balanced(
      ::blox::Balanced* balanced);
  ::blox::Balanced* unsafe_arena_release_balanced();

  void clear_constraint();
  ConstraintCase constraint_case() const;
  // @@protoc_insertion_point(class_scope:blox.AnalogConstraint)
 private:
  class _Internal;
  void set_has_min();
  void set_has_max();
  void set_has_balanced();

  inline bool has_constraint() const;
  inline void clear_has_constraint();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool limiting_;
  union ConstraintUnion {
    constexpr ConstraintUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 min_;
    ::PROTOBUF_NAMESPACE_ID::int32 max_;
    ::blox::Balanced* balanced_;
  } constraint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_AnalogConstraints_5ftest_2eproto;
};
// -------------------------------------------------------------------

class AnalogConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.AnalogConstraints) */ {
 public:
  inline AnalogConstraints() : AnalogConstraints(nullptr) {}
  ~AnalogConstraints() override;
  explicit constexpr AnalogConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogConstraints(const AnalogConstraints& from);
  AnalogConstraints(AnalogConstraints&& from) noexcept
    : AnalogConstraints() {
    *this = ::std::move(from);
  }

  inline AnalogConstraints& operator=(const AnalogConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogConstraints& operator=(AnalogConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogConstraints* internal_default_instance() {
    return reinterpret_cast<const AnalogConstraints*>(
               &_AnalogConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnalogConstraints& a, AnalogConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogConstraints* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogConstraints* New() const final {
    return new AnalogConstraints();
  }

  AnalogConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalogConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnalogConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogConstraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.AnalogConstraints";
  }
  protected:
  explicit AnalogConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 1,
  };
  // repeated .blox.AnalogConstraint constraints = 1 [(.nanopb_test) = {
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::blox::AnalogConstraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogConstraint >*
      mutable_constraints();
  private:
  const ::blox::AnalogConstraint& _internal_constraints(int index) const;
  ::blox::AnalogConstraint* _internal_add_constraints();
  public:
  const ::blox::AnalogConstraint& constraints(int index) const;
  ::blox::AnalogConstraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogConstraint >&
      constraints() const;

  // @@protoc_insertion_point(class_scope:blox.AnalogConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogConstraint > constraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AnalogConstraints_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Balanced

// uint32 balancerId = 1 [(.nanopb_test) = {
inline void Balanced::clear_balancerid() {
  balancerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Balanced::_internal_balancerid() const {
  return balancerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Balanced::balancerid() const {
  // @@protoc_insertion_point(field_get:blox.Balanced.balancerId)
  return _internal_balancerid();
}
inline void Balanced::_internal_set_balancerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  balancerid_ = value;
}
inline void Balanced::set_balancerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_balancerid(value);
  // @@protoc_insertion_point(field_set:blox.Balanced.balancerId)
}

// uint32 granted = 2 [(.brewblox_test) = {
inline void Balanced::clear_granted() {
  granted_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Balanced::_internal_granted() const {
  return granted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Balanced::granted() const {
  // @@protoc_insertion_point(field_get:blox.Balanced.granted)
  return _internal_granted();
}
inline void Balanced::_internal_set_granted(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  granted_ = value;
}
inline void Balanced::set_granted(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_granted(value);
  // @@protoc_insertion_point(field_set:blox.Balanced.granted)
}

// uint32 id = 3 [(.nanopb_test) = {
inline void Balanced::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Balanced::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Balanced::id() const {
  // @@protoc_insertion_point(field_get:blox.Balanced.id)
  return _internal_id();
}
inline void Balanced::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Balanced::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox.Balanced.id)
}

// -------------------------------------------------------------------

// AnalogConstraint

// sint32 min = 1 [(.nanopb_test) = {
inline bool AnalogConstraint::_internal_has_min() const {
  return constraint_case() == kMin;
}
inline bool AnalogConstraint::has_min() const {
  return _internal_has_min();
}
inline void AnalogConstraint::set_has_min() {
  _oneof_case_[0] = kMin;
}
inline void AnalogConstraint::clear_min() {
  if (_internal_has_min()) {
    constraint_.min_ = 0;
    clear_has_constraint();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogConstraint::_internal_min() const {
  if (_internal_has_min()) {
    return constraint_.min_;
  }
  return 0;
}
inline void AnalogConstraint::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_min()) {
    clear_constraint();
    set_has_min();
  }
  constraint_.min_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogConstraint::min() const {
  // @@protoc_insertion_point(field_get:blox.AnalogConstraint.min)
  return _internal_min();
}
inline void AnalogConstraint::set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:blox.AnalogConstraint.min)
}

// sint32 max = 2 [(.nanopb_test) = {
inline bool AnalogConstraint::_internal_has_max() const {
  return constraint_case() == kMax;
}
inline bool AnalogConstraint::has_max() const {
  return _internal_has_max();
}
inline void AnalogConstraint::set_has_max() {
  _oneof_case_[0] = kMax;
}
inline void AnalogConstraint::clear_max() {
  if (_internal_has_max()) {
    constraint_.max_ = 0;
    clear_has_constraint();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogConstraint::_internal_max() const {
  if (_internal_has_max()) {
    return constraint_.max_;
  }
  return 0;
}
inline void AnalogConstraint::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_max()) {
    clear_constraint();
    set_has_max();
  }
  constraint_.max_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogConstraint::max() const {
  // @@protoc_insertion_point(field_get:blox.AnalogConstraint.max)
  return _internal_max();
}
inline void AnalogConstraint::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:blox.AnalogConstraint.max)
}

// .blox.Balanced balanced = 3;
inline bool AnalogConstraint::_internal_has_balanced() const {
  return constraint_case() == kBalanced;
}
inline bool AnalogConstraint::has_balanced() const {
  return _internal_has_balanced();
}
inline void AnalogConstraint::set_has_balanced() {
  _oneof_case_[0] = kBalanced;
}
inline void AnalogConstraint::clear_balanced() {
  if (_internal_has_balanced()) {
    if (GetArenaForAllocation() == nullptr) {
      delete constraint_.balanced_;
    }
    clear_has_constraint();
  }
}
inline ::blox::Balanced* AnalogConstraint::release_balanced() {
  // @@protoc_insertion_point(field_release:blox.AnalogConstraint.balanced)
  if (_internal_has_balanced()) {
    clear_has_constraint();
      ::blox::Balanced* temp = constraint_.balanced_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.balanced_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blox::Balanced& AnalogConstraint::_internal_balanced() const {
  return _internal_has_balanced()
      ? *constraint_.balanced_
      : reinterpret_cast< ::blox::Balanced&>(::blox::_Balanced_default_instance_);
}
inline const ::blox::Balanced& AnalogConstraint::balanced() const {
  // @@protoc_insertion_point(field_get:blox.AnalogConstraint.balanced)
  return _internal_balanced();
}
inline ::blox::Balanced* AnalogConstraint::unsafe_arena_release_balanced() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox.AnalogConstraint.balanced)
  if (_internal_has_balanced()) {
    clear_has_constraint();
    ::blox::Balanced* temp = constraint_.balanced_;
    constraint_.balanced_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnalogConstraint::unsafe_arena_set_allocated_balanced(::blox::Balanced* balanced) {
  clear_constraint();
  if (balanced) {
    set_has_balanced();
    constraint_.balanced_ = balanced;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox.AnalogConstraint.balanced)
}
inline ::blox::Balanced* AnalogConstraint::_internal_mutable_balanced() {
  if (!_internal_has_balanced()) {
    clear_constraint();
    set_has_balanced();
    constraint_.balanced_ = CreateMaybeMessage< ::blox::Balanced >(GetArenaForAllocation());
  }
  return constraint_.balanced_;
}
inline ::blox::Balanced* AnalogConstraint::mutable_balanced() {
  ::blox::Balanced* _msg = _internal_mutable_balanced();
  // @@protoc_insertion_point(field_mutable:blox.AnalogConstraint.balanced)
  return _msg;
}

// bool limiting = 100 [(.brewblox_test) = {
inline void AnalogConstraint::clear_limiting() {
  limiting_ = false;
}
inline bool AnalogConstraint::_internal_limiting() const {
  return limiting_;
}
inline bool AnalogConstraint::limiting() const {
  // @@protoc_insertion_point(field_get:blox.AnalogConstraint.limiting)
  return _internal_limiting();
}
inline void AnalogConstraint::_internal_set_limiting(bool value) {
  
  limiting_ = value;
}
inline void AnalogConstraint::set_limiting(bool value) {
  _internal_set_limiting(value);
  // @@protoc_insertion_point(field_set:blox.AnalogConstraint.limiting)
}

inline bool AnalogConstraint::has_constraint() const {
  return constraint_case() != CONSTRAINT_NOT_SET;
}
inline void AnalogConstraint::clear_has_constraint() {
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}
inline AnalogConstraint::ConstraintCase AnalogConstraint::constraint_case() const {
  return AnalogConstraint::ConstraintCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AnalogConstraints

// repeated .blox.AnalogConstraint constraints = 1 [(.nanopb_test) = {
inline int AnalogConstraints::_internal_constraints_size() const {
  return constraints_.size();
}
inline int AnalogConstraints::constraints_size() const {
  return _internal_constraints_size();
}
inline void AnalogConstraints::clear_constraints() {
  constraints_.Clear();
}
inline ::blox::AnalogConstraint* AnalogConstraints::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blox.AnalogConstraints.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogConstraint >*
AnalogConstraints::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blox.AnalogConstraints.constraints)
  return &constraints_;
}
inline const ::blox::AnalogConstraint& AnalogConstraints::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::blox::AnalogConstraint& AnalogConstraints::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blox.AnalogConstraints.constraints)
  return _internal_constraints(index);
}
inline ::blox::AnalogConstraint* AnalogConstraints::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::blox::AnalogConstraint* AnalogConstraints::add_constraints() {
  ::blox::AnalogConstraint* _add = _internal_add_constraints();
  // @@protoc_insertion_point(field_add:blox.AnalogConstraints.constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::AnalogConstraint >&
AnalogConstraints::constraints() const {
  // @@protoc_insertion_point(field_list:blox.AnalogConstraints.constraints)
  return constraints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AnalogConstraints_5ftest_2eproto
