// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanopb_test.proto

#include "nanopb_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr NanoPBOptions::NanoPBOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_size_(0)
  , max_count_(0)
  , type_(0)

  , int_size_(0)

  , packed_struct_(false)
  , packed_enum_(false)
  , skip_message_(false)
  , no_unions_(false)
  , msgid_(0u)
  , anonymous_oneof_(false)
  , proto3_(false)
  , enum_to_string_(false)
  , fixed_length_(false)
  , max_length_(0)
  , long_names_(true){}
struct NanoPBOptionsDefaultTypeInternal {
  constexpr NanoPBOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NanoPBOptionsDefaultTypeInternal() {}
  union {
    NanoPBOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NanoPBOptionsDefaultTypeInternal _NanoPBOptions_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nanopb_5ftest_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nanopb_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nanopb_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nanopb_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, max_size_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, max_length_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, max_count_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, int_size_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, type_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, long_names_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, packed_struct_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, packed_enum_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, skip_message_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, no_unions_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, msgid_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, anonymous_oneof_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, proto3_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, enum_to_string_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, fixed_length_),
  0,
  13,
  1,
  3,
  2,
  14,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::NanoPBOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NanoPBOptions_default_instance_),
};

const char descriptor_table_protodef_nanopb_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021nanopb_test.proto\032 google/protobuf/des"
  "criptor.proto\"\243\003\n\rNanoPBOptions\022\020\n\010max_s"
  "ize\030\001 \001(\005\022\022\n\nmax_length\030\016 \001(\005\022\021\n\tmax_cou"
  "nt\030\002 \001(\005\022&\n\010int_size\030\007 \001(\0162\010.IntSize:\nIS"
  "_DEFAULT\022$\n\004type\030\003 \001(\0162\n.FieldType:\nFT_D"
  "EFAULT\022\030\n\nlong_names\030\004 \001(\010:\004true\022\034\n\rpack"
  "ed_struct\030\005 \001(\010:\005false\022\032\n\013packed_enum\030\n "
  "\001(\010:\005false\022\033\n\014skip_message\030\006 \001(\010:\005false\022"
  "\030\n\tno_unions\030\010 \001(\010:\005false\022\r\n\005msgid\030\t \001(\r"
  "\022\036\n\017anonymous_oneof\030\013 \001(\010:\005false\022\025\n\006prot"
  "o3\030\014 \001(\010:\005false\022\035\n\016enum_to_string\030\r \001(\010:"
  "\005false\022\033\n\014fixed_length\030\017 \001(\010:\005false*i\n\tF"
  "ieldType\022\016\n\nFT_DEFAULT\020\000\022\017\n\013FT_CALLBACK\020"
  "\001\022\016\n\nFT_POINTER\020\004\022\r\n\tFT_STATIC\020\002\022\r\n\tFT_I"
  "GNORE\020\003\022\r\n\tFT_INLINE\020\005*D\n\007IntSize\022\016\n\nIS_"
  "DEFAULT\020\000\022\010\n\004IS_8\020\010\022\t\n\005IS_16\020\020\022\t\n\005IS_32\020"
  " \022\t\n\005IS_64\020@:J\n\023nanopb_test_fileopt\022\034.go"
  "ogle.protobuf.FileOptions\030\362\007 \001(\0132\016.NanoP"
  "BOptions:L\n\022nanopb_test_msgopt\022\037.google."
  "protobuf.MessageOptions\030\362\007 \001(\0132\016.NanoPBO"
  "ptions:J\n\023nanopb_test_enumopt\022\034.google.p"
  "rotobuf.EnumOptions\030\362\007 \001(\0132\016.NanoPBOptio"
  "ns:C\n\013nanopb_test\022\035.google.protobuf.Fiel"
  "dOptions\030\362\007 \001(\0132\016.NanoPBOptionsB\037\n\035fi.ka"
  "psi.koti.jpa.nanopb_test"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nanopb_5ftest_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nanopb_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nanopb_5ftest_2eproto = {
  false, false, 984, descriptor_table_protodef_nanopb_5ftest_2eproto, "nanopb_test.proto", 
  &descriptor_table_nanopb_5ftest_2eproto_once, descriptor_table_nanopb_5ftest_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_nanopb_5ftest_2eproto::offsets,
  file_level_metadata_nanopb_5ftest_2eproto, file_level_enum_descriptors_nanopb_5ftest_2eproto, file_level_service_descriptors_nanopb_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_nanopb_5ftest_2eproto_getter() {
  return &descriptor_table_nanopb_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_nanopb_5ftest_2eproto(&descriptor_table_nanopb_5ftest_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_5ftest_2eproto);
  return file_level_enum_descriptors_nanopb_5ftest_2eproto[0];
}
bool FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_5ftest_2eproto);
  return file_level_enum_descriptors_nanopb_5ftest_2eproto[1];
}
bool IntSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NanoPBOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<NanoPBOptions>()._has_bits_);
  static void set_has_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_int_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_long_names(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_packed_struct(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packed_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_skip_message(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_no_unions(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_msgid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_anonymous_oneof(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_proto3(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enum_to_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fixed_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

NanoPBOptions::NanoPBOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:NanoPBOptions)
}
NanoPBOptions::NanoPBOptions(const NanoPBOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_size_, &from.max_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&long_names_) -
    reinterpret_cast<char*>(&max_size_)) + sizeof(long_names_));
  // @@protoc_insertion_point(copy_constructor:NanoPBOptions)
}

inline void NanoPBOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_length_) -
    reinterpret_cast<char*>(&max_size_)) + sizeof(max_length_));
long_names_ = true;
}

NanoPBOptions::~NanoPBOptions() {
  // @@protoc_insertion_point(destructor:NanoPBOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NanoPBOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NanoPBOptions::ArenaDtor(void* object) {
  NanoPBOptions* _this = reinterpret_cast< NanoPBOptions* >(object);
  (void)_this;
}
void NanoPBOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NanoPBOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NanoPBOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:NanoPBOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&max_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_unions_) -
        reinterpret_cast<char*>(&max_size_)) + sizeof(no_unions_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&msgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_length_) -
        reinterpret_cast<char*>(&msgid_)) + sizeof(max_length_));
    long_names_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NanoPBOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 max_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_size(&has_bits);
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_count(&has_bits);
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FieldType type = 3 [default = FT_DEFAULT];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FieldType_IsValid(val))) {
            _internal_set_type(static_cast<::FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool long_names = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_long_names(&has_bits);
          long_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool packed_struct = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_packed_struct(&has_bits);
          packed_struct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_message = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_skip_message(&has_bits);
          skip_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .IntSize int_size = 7 [default = IS_DEFAULT];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::IntSize_IsValid(val))) {
            _internal_set_int_size(static_cast<::IntSize>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool no_unions = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_no_unions(&has_bits);
          no_unions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msgid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_msgid(&has_bits);
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool packed_enum = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_packed_enum(&has_bits);
          packed_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool anonymous_oneof = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_anonymous_oneof(&has_bits);
          anonymous_oneof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool proto3 = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_proto3(&has_bits);
          proto3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enum_to_string = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_enum_to_string(&has_bits);
          enum_to_string_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_length(&has_bits);
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fixed_length = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_fixed_length(&has_bits);
          fixed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NanoPBOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoPBOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_size(), target);
  }

  // optional int32 max_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_count(), target);
  }

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional bool long_names = 4 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_long_names(), target);
  }

  // optional bool packed_struct = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_packed_struct(), target);
  }

  // optional bool skip_message = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_skip_message(), target);
  }

  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_int_size(), target);
  }

  // optional bool no_unions = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_no_unions(), target);
  }

  // optional uint32 msgid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_msgid(), target);
  }

  // optional bool packed_enum = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_packed_enum(), target);
  }

  // optional bool anonymous_oneof = 11 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_anonymous_oneof(), target);
  }

  // optional bool proto3 = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_proto3(), target);
  }

  // optional bool enum_to_string = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_enum_to_string(), target);
  }

  // optional int32 max_length = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_length(), target);
  }

  // optional bool fixed_length = 15 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_fixed_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NanoPBOptions)
  return target;
}

size_t NanoPBOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NanoPBOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 max_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_size());
    }

    // optional int32 max_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_count());
    }

    // optional .FieldType type = 3 [default = FT_DEFAULT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .IntSize int_size = 7 [default = IS_DEFAULT];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_int_size());
    }

    // optional bool packed_struct = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool packed_enum = 10 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool skip_message = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool no_unions = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 msgid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msgid());
    }

    // optional bool anonymous_oneof = 11 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool proto3 = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool enum_to_string = 13 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool fixed_length = 15 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 max_length = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_length());
    }

    // optional bool long_names = 4 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NanoPBOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NanoPBOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NanoPBOptions::GetClassData() const { return &_class_data_; }

void NanoPBOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NanoPBOptions *>(to)->MergeFrom(
      static_cast<const NanoPBOptions &>(from));
}


void NanoPBOptions::MergeFrom(const NanoPBOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NanoPBOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_size_ = from.max_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_count_ = from.max_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_size_ = from.int_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      packed_struct_ = from.packed_struct_;
    }
    if (cached_has_bits & 0x00000020u) {
      packed_enum_ = from.packed_enum_;
    }
    if (cached_has_bits & 0x00000040u) {
      skip_message_ = from.skip_message_;
    }
    if (cached_has_bits & 0x00000080u) {
      no_unions_ = from.no_unions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000200u) {
      anonymous_oneof_ = from.anonymous_oneof_;
    }
    if (cached_has_bits & 0x00000400u) {
      proto3_ = from.proto3_;
    }
    if (cached_has_bits & 0x00000800u) {
      enum_to_string_ = from.enum_to_string_;
    }
    if (cached_has_bits & 0x00001000u) {
      fixed_length_ = from.fixed_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_length_ = from.max_length_;
    }
    if (cached_has_bits & 0x00004000u) {
      long_names_ = from.long_names_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NanoPBOptions::CopyFrom(const NanoPBOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NanoPBOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NanoPBOptions::IsInitialized() const {
  return true;
}

void NanoPBOptions::InternalSwap(NanoPBOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NanoPBOptions, max_length_)
      + sizeof(NanoPBOptions::max_length_)
      - PROTOBUF_FIELD_OFFSET(NanoPBOptions, max_size_)>(
          reinterpret_cast<char*>(&max_size_),
          reinterpret_cast<char*>(&other->max_size_));
  swap(long_names_, other->long_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NanoPBOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nanopb_5ftest_2eproto_getter, &descriptor_table_nanopb_5ftest_2eproto_once,
      file_level_metadata_nanopb_5ftest_2eproto[0]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_test_fileopt(kNanopbTestFileoptFieldNumber, ::NanoPBOptions::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_test_msgopt(kNanopbTestMsgoptFieldNumber, ::NanoPBOptions::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_test_enumopt(kNanopbTestEnumoptFieldNumber, ::NanoPBOptions::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_test(kNanopbTestFieldNumber, ::NanoPBOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NanoPBOptions* Arena::CreateMaybeMessage< ::NanoPBOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NanoPBOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
