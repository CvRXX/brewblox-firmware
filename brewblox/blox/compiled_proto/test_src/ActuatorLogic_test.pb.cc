// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorLogic_test.proto

#include "ActuatorLogic_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ActuatorLogic_5ftest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ActuatorLogic_5ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AnalogCompare;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ActuatorLogic_5ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DigitalCompare;
}  // namespace protobuf_ActuatorLogic_5ftest_2eproto
namespace blox {
class CompareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Compare>
      _instance;
} _Compare_default_instance_;
class DigitalCompareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DigitalCompare>
      _instance;
} _DigitalCompare_default_instance_;
class AnalogCompareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalogCompare>
      _instance;
} _AnalogCompare_default_instance_;
class ActuatorLogicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActuatorLogic>
      _instance;
} _ActuatorLogic_default_instance_;
}  // namespace blox
namespace protobuf_ActuatorLogic_5ftest_2eproto {
static void InitDefaultsCompare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::_Compare_default_instance_;
    new (ptr) ::blox::Compare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::Compare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Compare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCompare}, {}};

static void InitDefaultsDigitalCompare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::_DigitalCompare_default_instance_;
    new (ptr) ::blox::DigitalCompare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::DigitalCompare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DigitalCompare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDigitalCompare}, {}};

static void InitDefaultsAnalogCompare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::_AnalogCompare_default_instance_;
    new (ptr) ::blox::AnalogCompare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::AnalogCompare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AnalogCompare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnalogCompare}, {}};

static void InitDefaultsActuatorLogic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::_ActuatorLogic_default_instance_;
    new (ptr) ::blox::ActuatorLogic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::ActuatorLogic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ActuatorLogic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsActuatorLogic}, {
      &protobuf_ActuatorLogic_5ftest_2eproto::scc_info_DigitalCompare.base,
      &protobuf_ActuatorLogic_5ftest_2eproto::scc_info_AnalogCompare.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Compare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DigitalCompare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalogCompare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActuatorLogic.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Compare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::DigitalCompare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::DigitalCompare, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::DigitalCompare, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::DigitalCompare, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::DigitalCompare, rhs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::AnalogCompare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::AnalogCompare, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::AnalogCompare, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::AnalogCompare, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::AnalogCompare, rhs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, targetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, driventargetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, expression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, digital_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, analog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::ActuatorLogic, errorpos_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Compare)},
  { 5, -1, sizeof(::blox::DigitalCompare)},
  { 14, -1, sizeof(::blox::AnalogCompare)},
  { 23, -1, sizeof(::blox::ActuatorLogic)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::_Compare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::_DigitalCompare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::_AnalogCompare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::_ActuatorLogic_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ActuatorLogic_test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030ActuatorLogic_test.proto\022\004blox\032\023brewbl"
      "ox_test.proto\032\021nanopb_test.proto\032\022IoArra"
      "y_test.proto\"\224\005\n\007Compare\"\313\003\n\006Result\022\020\n\014R"
      "ESULT_FALSE\020\000\022\017\n\013RESULT_TRUE\020\001\022\020\n\014RESULT"
      "_EMPTY\020\002\022\032\n\026RESULT_EMPTY_SUBSTRING\020\003\022\032\n\026"
      "RESULT_BLOCK_NOT_FOUND\020\004\022\035\n\031RESULT_INVAL"
      "ID_DIGITAL_OP\020\005\022\034\n\030RESULT_INVALID_ANALOG"
      "_OP\020\006\022$\n RESULT_UNDEFINED_DIGITAL_COMPAR"
      "E\020\010\022#\n\037RESULT_UNDEFINED_ANALOG_COMPARE\020\007"
      "\022\"\n\036RESULT_UNEXPECTED_OPEN_BRACKET\020\013\022#\n\037"
      "RESULT_UNEXPECTED_CLOSE_BRACKET\020\t\022\037\n\033RES"
      "ULT_UNEXPECTED_CHARACTER\020\014\022 \n\034RESULT_UNE"
      "XPECTED_COMPARISON\020\r\022\036\n\032RESULT_UNEXPECTE"
      "D_OPERATOR\020\016\022 \n\034RESULT_MISSING_CLOSE_BRA"
      "CKET\020\n\"a\n\017DigitalOperator\022\017\n\013OP_VALUE_IS"
      "\020\000\022\023\n\017OP_VALUE_IS_NOT\020\001\022\021\n\rOP_DESIRED_IS"
      "\020\n\022\025\n\021OP_DESIRED_IS_NOT\020\013\"X\n\016AnalogOpera"
      "tor\022\017\n\013OP_VALUE_LE\020\000\022\017\n\013OP_VALUE_GE\020\001\022\021\n"
      "\rOP_SETTING_LE\020\n\022\021\n\rOP_SETTING_GE\020\013\"\243\001\n\016"
      "DigitalCompare\022)\n\002op\030\001 \001(\0162\035.blox.Compar"
      "e.DigitalOperator\022,\n\006result\030\002 \001(\0162\024.blox"
      ".Compare.ResultB\006\212\265\030\002(\001\022\027\n\002id\030\003 \001(\rB\013\212\265\030"
      "\002\030\006\222\?\0028\020\022\037\n\003rhs\030\004 \001(\0162\022.blox.DigitalStat"
      "e\"\233\001\n\rAnalogCompare\022(\n\002op\030\001 \001(\0162\034.blox.C"
      "ompare.AnalogOperator\022,\n\006result\030\002 \001(\0162\024."
      "blox.Compare.ResultB\006\212\265\030\002(\001\022\027\n\002id\030\003 \001(\rB"
      "\013\212\265\030\002\030\001\222\?\0028\020\022\031\n\003rhs\030\004 \001(\021B\014\212\265\030\003\020\200 \222\?\0028 \""
      "\301\002\n\rActuatorLogic\022\035\n\010targetId\030\001 \001(\rB\013\212\265\030"
      "\002\030\006\222\?\0028\020\022/\n\016drivenTargetId\030\002 \001(\rB\027\212\265\030\002\030\006"
      "\222\?\0028\020\212\265\030\002@\001\212\265\030\002(\001\022\017\n\007enabled\030\003 \001(\010\0222\n\006re"
      "sult\030\004 \001(\0162\024.blox.Compare.ResultB\014\212\265\030\0020\001"
      "\212\265\030\002(\001\022\031\n\nexpression\030\005 \001(\tB\005\222\?\002p@\022,\n\007dig"
      "ital\030\006 \003(\0132\024.blox.DigitalCompareB\005\222\?\002\020\020\022"
      "*\n\006analog\030\007 \003(\0132\023.blox.AnalogCompareB\005\222\?"
      "\002\020\020\022\035\n\010errorPos\030\010 \001(\rB\013\212\265\030\002(\001\222\?\0028\010:\007\212\265\030\003"
      "\030\302\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActuatorLogic_test.proto", &protobuf_RegisterTypes);
  ::protobuf_brewblox_5ftest_2eproto::AddDescriptors();
  ::protobuf_nanopb_5ftest_2eproto::AddDescriptors();
  ::protobuf_IoArray_5ftest_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ActuatorLogic_5ftest_2eproto
namespace blox {
const ::google::protobuf::EnumDescriptor* Compare_Result_descriptor() {
  protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorLogic_5ftest_2eproto::file_level_enum_descriptors[0];
}
bool Compare_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Compare_Result Compare::RESULT_FALSE;
const Compare_Result Compare::RESULT_TRUE;
const Compare_Result Compare::RESULT_EMPTY;
const Compare_Result Compare::RESULT_EMPTY_SUBSTRING;
const Compare_Result Compare::RESULT_BLOCK_NOT_FOUND;
const Compare_Result Compare::RESULT_INVALID_DIGITAL_OP;
const Compare_Result Compare::RESULT_INVALID_ANALOG_OP;
const Compare_Result Compare::RESULT_UNDEFINED_DIGITAL_COMPARE;
const Compare_Result Compare::RESULT_UNDEFINED_ANALOG_COMPARE;
const Compare_Result Compare::RESULT_UNEXPECTED_OPEN_BRACKET;
const Compare_Result Compare::RESULT_UNEXPECTED_CLOSE_BRACKET;
const Compare_Result Compare::RESULT_UNEXPECTED_CHARACTER;
const Compare_Result Compare::RESULT_UNEXPECTED_COMPARISON;
const Compare_Result Compare::RESULT_UNEXPECTED_OPERATOR;
const Compare_Result Compare::RESULT_MISSING_CLOSE_BRACKET;
const Compare_Result Compare::Result_MIN;
const Compare_Result Compare::Result_MAX;
const int Compare::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Compare_DigitalOperator_descriptor() {
  protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorLogic_5ftest_2eproto::file_level_enum_descriptors[1];
}
bool Compare_DigitalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Compare_DigitalOperator Compare::OP_VALUE_IS;
const Compare_DigitalOperator Compare::OP_VALUE_IS_NOT;
const Compare_DigitalOperator Compare::OP_DESIRED_IS;
const Compare_DigitalOperator Compare::OP_DESIRED_IS_NOT;
const Compare_DigitalOperator Compare::DigitalOperator_MIN;
const Compare_DigitalOperator Compare::DigitalOperator_MAX;
const int Compare::DigitalOperator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Compare_AnalogOperator_descriptor() {
  protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorLogic_5ftest_2eproto::file_level_enum_descriptors[2];
}
bool Compare_AnalogOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Compare_AnalogOperator Compare::OP_VALUE_LE;
const Compare_AnalogOperator Compare::OP_VALUE_GE;
const Compare_AnalogOperator Compare::OP_SETTING_LE;
const Compare_AnalogOperator Compare::OP_SETTING_GE;
const Compare_AnalogOperator Compare::AnalogOperator_MIN;
const Compare_AnalogOperator Compare::AnalogOperator_MAX;
const int Compare::AnalogOperator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Compare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Compare::Compare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorLogic_5ftest_2eproto::scc_info_Compare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.Compare)
}
Compare::Compare(const Compare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox.Compare)
}

void Compare::SharedCtor() {
}

Compare::~Compare() {
  // @@protoc_insertion_point(destructor:blox.Compare)
  SharedDtor();
}

void Compare::SharedDtor() {
}

void Compare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Compare::descriptor() {
  ::protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Compare& Compare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorLogic_5ftest_2eproto::scc_info_Compare.base);
  return *internal_default_instance();
}


void Compare::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Compare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Compare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.Compare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:blox.Compare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.Compare)
  return false;
#undef DO_
}

void Compare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.Compare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.Compare)
}

::google::protobuf::uint8* Compare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.Compare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Compare)
  return target;
}

size_t Compare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Compare)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Compare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  const Compare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Compare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.Compare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.Compare)
    MergeFrom(*source);
  }
}

void Compare::MergeFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Compare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compare::CopyFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compare::IsInitialized() const {
  return true;
}

void Compare::Swap(Compare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Compare::InternalSwap(Compare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Compare::GetMetadata() const {
  protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DigitalCompare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigitalCompare::kOpFieldNumber;
const int DigitalCompare::kResultFieldNumber;
const int DigitalCompare::kIdFieldNumber;
const int DigitalCompare::kRhsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigitalCompare::DigitalCompare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorLogic_5ftest_2eproto::scc_info_DigitalCompare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.DigitalCompare)
}
DigitalCompare::DigitalCompare(const DigitalCompare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&rhs_) -
    reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  // @@protoc_insertion_point(copy_constructor:blox.DigitalCompare)
}

void DigitalCompare::SharedCtor() {
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rhs_) -
      reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
}

DigitalCompare::~DigitalCompare() {
  // @@protoc_insertion_point(destructor:blox.DigitalCompare)
  SharedDtor();
}

void DigitalCompare::SharedDtor() {
}

void DigitalCompare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DigitalCompare::descriptor() {
  ::protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DigitalCompare& DigitalCompare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorLogic_5ftest_2eproto::scc_info_DigitalCompare.base);
  return *internal_default_instance();
}


void DigitalCompare::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.DigitalCompare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rhs_) -
      reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  _internal_metadata_.Clear();
}

bool DigitalCompare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.DigitalCompare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .blox.Compare.DigitalOperator op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::blox::Compare_DigitalOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox.Compare.Result result = 2 [(.brewblox_test) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::blox::Compare_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 3 [(.nanopb_test) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox.DigitalState rhs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rhs(static_cast< ::blox::DigitalState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.DigitalCompare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.DigitalCompare)
  return false;
#undef DO_
}

void DigitalCompare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.DigitalCompare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.Compare.DigitalOperator op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // .blox.DigitalState rhs = 4;
  if (this->rhs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rhs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.DigitalCompare)
}

::google::protobuf::uint8* DigitalCompare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.DigitalCompare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.Compare.DigitalOperator op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // .blox.DigitalState rhs = 4;
  if (this->rhs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rhs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.DigitalCompare)
  return target;
}

size_t DigitalCompare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.DigitalCompare)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blox.Compare.DigitalOperator op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .blox.DigitalState rhs = 4;
  if (this->rhs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rhs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalCompare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.DigitalCompare)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalCompare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigitalCompare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.DigitalCompare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.DigitalCompare)
    MergeFrom(*source);
  }
}

void DigitalCompare::MergeFrom(const DigitalCompare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.DigitalCompare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rhs() != 0) {
    set_rhs(from.rhs());
  }
}

void DigitalCompare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.DigitalCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalCompare::CopyFrom(const DigitalCompare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.DigitalCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalCompare::IsInitialized() const {
  return true;
}

void DigitalCompare::Swap(DigitalCompare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigitalCompare::InternalSwap(DigitalCompare* other) {
  using std::swap;
  swap(op_, other->op_);
  swap(result_, other->result_);
  swap(id_, other->id_);
  swap(rhs_, other->rhs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DigitalCompare::GetMetadata() const {
  protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalogCompare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalogCompare::kOpFieldNumber;
const int AnalogCompare::kResultFieldNumber;
const int AnalogCompare::kIdFieldNumber;
const int AnalogCompare::kRhsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalogCompare::AnalogCompare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorLogic_5ftest_2eproto::scc_info_AnalogCompare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.AnalogCompare)
}
AnalogCompare::AnalogCompare(const AnalogCompare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&rhs_) -
    reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  // @@protoc_insertion_point(copy_constructor:blox.AnalogCompare)
}

void AnalogCompare::SharedCtor() {
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rhs_) -
      reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
}

AnalogCompare::~AnalogCompare() {
  // @@protoc_insertion_point(destructor:blox.AnalogCompare)
  SharedDtor();
}

void AnalogCompare::SharedDtor() {
}

void AnalogCompare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnalogCompare::descriptor() {
  ::protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalogCompare& AnalogCompare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorLogic_5ftest_2eproto::scc_info_AnalogCompare.base);
  return *internal_default_instance();
}


void AnalogCompare::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.AnalogCompare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rhs_) -
      reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  _internal_metadata_.Clear();
}

bool AnalogCompare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.AnalogCompare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .blox.Compare.AnalogOperator op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::blox::Compare_AnalogOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox.Compare.Result result = 2 [(.brewblox_test) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::blox::Compare_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 3 [(.nanopb_test) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 rhs = 4 [(.nanopb_test) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rhs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.AnalogCompare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.AnalogCompare)
  return false;
#undef DO_
}

void AnalogCompare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.AnalogCompare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.Compare.AnalogOperator op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // sint32 rhs = 4 [(.nanopb_test) = {
  if (this->rhs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->rhs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.AnalogCompare)
}

::google::protobuf::uint8* AnalogCompare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.AnalogCompare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.Compare.AnalogOperator op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // sint32 rhs = 4 [(.nanopb_test) = {
  if (this->rhs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->rhs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.AnalogCompare)
  return target;
}

size_t AnalogCompare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.AnalogCompare)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blox.Compare.AnalogOperator op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // sint32 rhs = 4 [(.nanopb_test) = {
  if (this->rhs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->rhs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogCompare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.AnalogCompare)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogCompare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalogCompare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.AnalogCompare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.AnalogCompare)
    MergeFrom(*source);
  }
}

void AnalogCompare::MergeFrom(const AnalogCompare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.AnalogCompare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rhs() != 0) {
    set_rhs(from.rhs());
  }
}

void AnalogCompare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.AnalogCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogCompare::CopyFrom(const AnalogCompare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.AnalogCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogCompare::IsInitialized() const {
  return true;
}

void AnalogCompare::Swap(AnalogCompare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalogCompare::InternalSwap(AnalogCompare* other) {
  using std::swap;
  swap(op_, other->op_);
  swap(result_, other->result_);
  swap(id_, other->id_);
  swap(rhs_, other->rhs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnalogCompare::GetMetadata() const {
  protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActuatorLogic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActuatorLogic::kTargetIdFieldNumber;
const int ActuatorLogic::kDrivenTargetIdFieldNumber;
const int ActuatorLogic::kEnabledFieldNumber;
const int ActuatorLogic::kResultFieldNumber;
const int ActuatorLogic::kExpressionFieldNumber;
const int ActuatorLogic::kDigitalFieldNumber;
const int ActuatorLogic::kAnalogFieldNumber;
const int ActuatorLogic::kErrorPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActuatorLogic::ActuatorLogic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorLogic_5ftest_2eproto::scc_info_ActuatorLogic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.ActuatorLogic)
}
ActuatorLogic::ActuatorLogic(const ActuatorLogic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      digital_(from.digital_),
      analog_(from.analog_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expression().size() > 0) {
    expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  ::memcpy(&targetid_, &from.targetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorpos_) -
    reinterpret_cast<char*>(&targetid_)) + sizeof(errorpos_));
  // @@protoc_insertion_point(copy_constructor:blox.ActuatorLogic)
}

void ActuatorLogic::SharedCtor() {
  expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorpos_) -
      reinterpret_cast<char*>(&targetid_)) + sizeof(errorpos_));
}

ActuatorLogic::~ActuatorLogic() {
  // @@protoc_insertion_point(destructor:blox.ActuatorLogic)
  SharedDtor();
}

void ActuatorLogic::SharedDtor() {
  expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActuatorLogic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActuatorLogic::descriptor() {
  ::protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActuatorLogic& ActuatorLogic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorLogic_5ftest_2eproto::scc_info_ActuatorLogic.base);
  return *internal_default_instance();
}


void ActuatorLogic::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.ActuatorLogic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digital_.Clear();
  analog_.Clear();
  expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorpos_) -
      reinterpret_cast<char*>(&targetid_)) + sizeof(errorpos_));
  _internal_metadata_.Clear();
}

bool ActuatorLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.ActuatorLogic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 targetId = 1 [(.nanopb_test) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drivenTargetId = 2 [(.nanopb_test) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &driventargetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox.Compare.Result result = 4 [(.brewblox_test) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::blox::Compare_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expression = 5 [(.nanopb_test) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expression()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expression().data(), static_cast<int>(this->expression().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blox.ActuatorLogic.expression"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_digital()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_analog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 errorPos = 8 [(.nanopb_test) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.ActuatorLogic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.ActuatorLogic)
  return false;
#undef DO_
}

void ActuatorLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.ActuatorLogic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 targetId = 1 [(.nanopb_test) = {
  if (this->targetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }

  // uint32 drivenTargetId = 2 [(.nanopb_test) = {
  if (this->driventargetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->driventargetid(), output);
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  // .blox.Compare.Result result = 4 [(.brewblox_test) = {
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // string expression = 5 [(.nanopb_test) = {
  if (this->expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox.ActuatorLogic.expression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->expression(), output);
  }

  // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->digital_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->digital(static_cast<int>(i)),
      output);
  }

  // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->analog_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->analog(static_cast<int>(i)),
      output);
  }

  // uint32 errorPos = 8 [(.nanopb_test) = {
  if (this->errorpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->errorpos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.ActuatorLogic)
}

::google::protobuf::uint8* ActuatorLogic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.ActuatorLogic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 targetId = 1 [(.nanopb_test) = {
  if (this->targetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }

  // uint32 drivenTargetId = 2 [(.nanopb_test) = {
  if (this->driventargetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->driventargetid(), target);
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }

  // .blox.Compare.Result result = 4 [(.brewblox_test) = {
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // string expression = 5 [(.nanopb_test) = {
  if (this->expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blox.ActuatorLogic.expression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->expression(), target);
  }

  // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->digital_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->digital(static_cast<int>(i)), deterministic, target);
  }

  // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->analog_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->analog(static_cast<int>(i)), deterministic, target);
  }

  // uint32 errorPos = 8 [(.nanopb_test) = {
  if (this->errorpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->errorpos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.ActuatorLogic)
  return target;
}

size_t ActuatorLogic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.ActuatorLogic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
  {
    unsigned int count = static_cast<unsigned int>(this->digital_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->digital(static_cast<int>(i)));
    }
  }

  // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
  {
    unsigned int count = static_cast<unsigned int>(this->analog_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->analog(static_cast<int>(i)));
    }
  }

  // string expression = 5 [(.nanopb_test) = {
  if (this->expression().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expression());
  }

  // uint32 targetId = 1 [(.nanopb_test) = {
  if (this->targetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetid());
  }

  // uint32 drivenTargetId = 2 [(.nanopb_test) = {
  if (this->driventargetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->driventargetid());
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // .blox.Compare.Result result = 4 [(.brewblox_test) = {
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // uint32 errorPos = 8 [(.nanopb_test) = {
  if (this->errorpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorpos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorLogic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.ActuatorLogic)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorLogic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActuatorLogic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.ActuatorLogic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.ActuatorLogic)
    MergeFrom(*source);
  }
}

void ActuatorLogic::MergeFrom(const ActuatorLogic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.ActuatorLogic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  digital_.MergeFrom(from.digital_);
  analog_.MergeFrom(from.analog_);
  if (from.expression().size() > 0) {

    expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  if (from.targetid() != 0) {
    set_targetid(from.targetid());
  }
  if (from.driventargetid() != 0) {
    set_driventargetid(from.driventargetid());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.errorpos() != 0) {
    set_errorpos(from.errorpos());
  }
}

void ActuatorLogic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.ActuatorLogic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorLogic::CopyFrom(const ActuatorLogic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.ActuatorLogic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorLogic::IsInitialized() const {
  return true;
}

void ActuatorLogic::Swap(ActuatorLogic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActuatorLogic::InternalSwap(ActuatorLogic* other) {
  using std::swap;
  CastToBase(&digital_)->InternalSwap(CastToBase(&other->digital_));
  CastToBase(&analog_)->InternalSwap(CastToBase(&other->analog_));
  expression_.Swap(&other->expression_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(targetid_, other->targetid_);
  swap(driventargetid_, other->driventargetid_);
  swap(enabled_, other->enabled_);
  swap(result_, other->result_);
  swap(errorpos_, other->errorpos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActuatorLogic::GetMetadata() const {
  protobuf_ActuatorLogic_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorLogic_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::Compare* Arena::CreateMaybeMessage< ::blox::Compare >(Arena* arena) {
  return Arena::CreateInternal< ::blox::Compare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::DigitalCompare* Arena::CreateMaybeMessage< ::blox::DigitalCompare >(Arena* arena) {
  return Arena::CreateInternal< ::blox::DigitalCompare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::AnalogCompare* Arena::CreateMaybeMessage< ::blox::AnalogCompare >(Arena* arena) {
  return Arena::CreateInternal< ::blox::AnalogCompare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::ActuatorLogic* Arena::CreateMaybeMessage< ::blox::ActuatorLogic >(Arena* arena) {
  return Arena::CreateInternal< ::blox::ActuatorLogic >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
