// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorLogic_test.proto

#include "ActuatorLogic_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr Compare::Compare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CompareDefaultTypeInternal {
  constexpr CompareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompareDefaultTypeInternal() {}
  union {
    Compare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompareDefaultTypeInternal _Compare_default_instance_;
constexpr DigitalCompare::DigitalCompare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(0)

  , result_(0)

  , id_(0u)
  , rhs_(0)
{}
struct DigitalCompareDefaultTypeInternal {
  constexpr DigitalCompareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalCompareDefaultTypeInternal() {}
  union {
    DigitalCompare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalCompareDefaultTypeInternal _DigitalCompare_default_instance_;
constexpr AnalogCompare::AnalogCompare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(0)

  , result_(0)

  , id_(0u)
  , rhs_(0){}
struct AnalogCompareDefaultTypeInternal {
  constexpr AnalogCompareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalogCompareDefaultTypeInternal() {}
  union {
    AnalogCompare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalogCompareDefaultTypeInternal _AnalogCompare_default_instance_;
constexpr ActuatorLogic::ActuatorLogic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digital_()
  , analog_()
  , expression_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , targetid_(0u)
  , driventargetid_(0u)
  , enabled_(false)
  , result_(0)

  , errorpos_(0u){}
struct ActuatorLogicDefaultTypeInternal {
  constexpr ActuatorLogicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActuatorLogicDefaultTypeInternal() {}
  union {
    ActuatorLogic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActuatorLogicDefaultTypeInternal _ActuatorLogic_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ActuatorLogic_5ftest_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ActuatorLogic_5ftest_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ActuatorLogic_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ActuatorLogic_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::Compare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::DigitalCompare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::DigitalCompare, op_),
  PROTOBUF_FIELD_OFFSET(::blox::DigitalCompare, result_),
  PROTOBUF_FIELD_OFFSET(::blox::DigitalCompare, id_),
  PROTOBUF_FIELD_OFFSET(::blox::DigitalCompare, rhs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::AnalogCompare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::AnalogCompare, op_),
  PROTOBUF_FIELD_OFFSET(::blox::AnalogCompare, result_),
  PROTOBUF_FIELD_OFFSET(::blox::AnalogCompare, id_),
  PROTOBUF_FIELD_OFFSET(::blox::AnalogCompare, rhs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, targetid_),
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, driventargetid_),
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, enabled_),
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, result_),
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, expression_),
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, digital_),
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, analog_),
  PROTOBUF_FIELD_OFFSET(::blox::ActuatorLogic, errorpos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Compare)},
  { 5, -1, sizeof(::blox::DigitalCompare)},
  { 14, -1, sizeof(::blox::AnalogCompare)},
  { 23, -1, sizeof(::blox::ActuatorLogic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_Compare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_DigitalCompare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_AnalogCompare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_ActuatorLogic_default_instance_),
};

const char descriptor_table_protodef_ActuatorLogic_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ActuatorLogic_test.proto\022\004blox\032\023brewbl"
  "ox_test.proto\032\021nanopb_test.proto\032\022IoArra"
  "y_test.proto\"\224\005\n\007Compare\"\313\003\n\006Result\022\020\n\014R"
  "ESULT_FALSE\020\000\022\017\n\013RESULT_TRUE\020\001\022\020\n\014RESULT"
  "_EMPTY\020\002\022\032\n\026RESULT_EMPTY_SUBSTRING\020\003\022\032\n\026"
  "RESULT_BLOCK_NOT_FOUND\020\004\022\035\n\031RESULT_INVAL"
  "ID_DIGITAL_OP\020\005\022\034\n\030RESULT_INVALID_ANALOG"
  "_OP\020\006\022$\n RESULT_UNDEFINED_DIGITAL_COMPAR"
  "E\020\010\022#\n\037RESULT_UNDEFINED_ANALOG_COMPARE\020\007"
  "\022\"\n\036RESULT_UNEXPECTED_OPEN_BRACKET\020\013\022#\n\037"
  "RESULT_UNEXPECTED_CLOSE_BRACKET\020\t\022\037\n\033RES"
  "ULT_UNEXPECTED_CHARACTER\020\014\022 \n\034RESULT_UNE"
  "XPECTED_COMPARISON\020\r\022\036\n\032RESULT_UNEXPECTE"
  "D_OPERATOR\020\016\022 \n\034RESULT_MISSING_CLOSE_BRA"
  "CKET\020\n\"a\n\017DigitalOperator\022\017\n\013OP_VALUE_IS"
  "\020\000\022\023\n\017OP_VALUE_IS_NOT\020\001\022\021\n\rOP_DESIRED_IS"
  "\020\n\022\025\n\021OP_DESIRED_IS_NOT\020\013\"X\n\016AnalogOpera"
  "tor\022\017\n\013OP_VALUE_LE\020\000\022\017\n\013OP_VALUE_GE\020\001\022\021\n"
  "\rOP_SETTING_LE\020\n\022\021\n\rOP_SETTING_GE\020\013\"\243\001\n\016"
  "DigitalCompare\022)\n\002op\030\001 \001(\0162\035.blox.Compar"
  "e.DigitalOperator\022,\n\006result\030\002 \001(\0162\024.blox"
  ".Compare.ResultB\006\212\265\030\002(\001\022\027\n\002id\030\003 \001(\rB\013\212\265\030"
  "\002\030\006\222\?\0028\020\022\037\n\003rhs\030\004 \001(\0162\022.blox.DigitalStat"
  "e\"\233\001\n\rAnalogCompare\022(\n\002op\030\001 \001(\0162\034.blox.C"
  "ompare.AnalogOperator\022,\n\006result\030\002 \001(\0162\024."
  "blox.Compare.ResultB\006\212\265\030\002(\001\022\027\n\002id\030\003 \001(\rB"
  "\013\212\265\030\002\030\001\222\?\0028\020\022\031\n\003rhs\030\004 \001(\021B\014\212\265\030\003\020\200 \222\?\0028 \""
  "\301\002\n\rActuatorLogic\022\035\n\010targetId\030\001 \001(\rB\013\212\265\030"
  "\002\030\006\222\?\0028\020\022/\n\016drivenTargetId\030\002 \001(\rB\027\212\265\030\002\030\006"
  "\222\?\0028\020\212\265\030\002@\001\212\265\030\002(\001\022\017\n\007enabled\030\003 \001(\010\0222\n\006re"
  "sult\030\004 \001(\0162\024.blox.Compare.ResultB\014\212\265\030\0020\001"
  "\212\265\030\002(\001\022\031\n\nexpression\030\005 \001(\tB\005\222\?\002p@\022,\n\007dig"
  "ital\030\006 \003(\0132\024.blox.DigitalCompareB\005\222\?\002\020\020\022"
  "*\n\006analog\030\007 \003(\0132\023.blox.AnalogCompareB\005\222\?"
  "\002\020\020\022\035\n\010errorPos\030\010 \001(\rB\013\212\265\030\002(\001\222\?\0028\010:\007\212\265\030\003"
  "\030\302\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ActuatorLogic_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ActuatorLogic_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorLogic_5ftest_2eproto = {
  false, false, 1411, descriptor_table_protodef_ActuatorLogic_5ftest_2eproto, "ActuatorLogic_test.proto", 
  &descriptor_table_ActuatorLogic_5ftest_2eproto_once, descriptor_table_ActuatorLogic_5ftest_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_ActuatorLogic_5ftest_2eproto::offsets,
  file_level_metadata_ActuatorLogic_5ftest_2eproto, file_level_enum_descriptors_ActuatorLogic_5ftest_2eproto, file_level_service_descriptors_ActuatorLogic_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ActuatorLogic_5ftest_2eproto_getter() {
  return &descriptor_table_ActuatorLogic_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ActuatorLogic_5ftest_2eproto(&descriptor_table_ActuatorLogic_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ActuatorLogic_5ftest_2eproto);
  return file_level_enum_descriptors_ActuatorLogic_5ftest_2eproto[0];
}
bool Compare_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Compare_Result Compare::RESULT_FALSE;
constexpr Compare_Result Compare::RESULT_TRUE;
constexpr Compare_Result Compare::RESULT_EMPTY;
constexpr Compare_Result Compare::RESULT_EMPTY_SUBSTRING;
constexpr Compare_Result Compare::RESULT_BLOCK_NOT_FOUND;
constexpr Compare_Result Compare::RESULT_INVALID_DIGITAL_OP;
constexpr Compare_Result Compare::RESULT_INVALID_ANALOG_OP;
constexpr Compare_Result Compare::RESULT_UNDEFINED_DIGITAL_COMPARE;
constexpr Compare_Result Compare::RESULT_UNDEFINED_ANALOG_COMPARE;
constexpr Compare_Result Compare::RESULT_UNEXPECTED_OPEN_BRACKET;
constexpr Compare_Result Compare::RESULT_UNEXPECTED_CLOSE_BRACKET;
constexpr Compare_Result Compare::RESULT_UNEXPECTED_CHARACTER;
constexpr Compare_Result Compare::RESULT_UNEXPECTED_COMPARISON;
constexpr Compare_Result Compare::RESULT_UNEXPECTED_OPERATOR;
constexpr Compare_Result Compare::RESULT_MISSING_CLOSE_BRACKET;
constexpr Compare_Result Compare::Result_MIN;
constexpr Compare_Result Compare::Result_MAX;
constexpr int Compare::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_DigitalOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ActuatorLogic_5ftest_2eproto);
  return file_level_enum_descriptors_ActuatorLogic_5ftest_2eproto[1];
}
bool Compare_DigitalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Compare_DigitalOperator Compare::OP_VALUE_IS;
constexpr Compare_DigitalOperator Compare::OP_VALUE_IS_NOT;
constexpr Compare_DigitalOperator Compare::OP_DESIRED_IS;
constexpr Compare_DigitalOperator Compare::OP_DESIRED_IS_NOT;
constexpr Compare_DigitalOperator Compare::DigitalOperator_MIN;
constexpr Compare_DigitalOperator Compare::DigitalOperator_MAX;
constexpr int Compare::DigitalOperator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_AnalogOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ActuatorLogic_5ftest_2eproto);
  return file_level_enum_descriptors_ActuatorLogic_5ftest_2eproto[2];
}
bool Compare_AnalogOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Compare_AnalogOperator Compare::OP_VALUE_LE;
constexpr Compare_AnalogOperator Compare::OP_VALUE_GE;
constexpr Compare_AnalogOperator Compare::OP_SETTING_LE;
constexpr Compare_AnalogOperator Compare::OP_SETTING_GE;
constexpr Compare_AnalogOperator Compare::AnalogOperator_MIN;
constexpr Compare_AnalogOperator Compare::AnalogOperator_MAX;
constexpr int Compare::AnalogOperator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Compare::_Internal {
 public:
};

Compare::Compare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.Compare)
}
Compare::Compare(const Compare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox.Compare)
}

inline void Compare::SharedCtor() {
}

Compare::~Compare() {
  // @@protoc_insertion_point(destructor:blox.Compare)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Compare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Compare::ArenaDtor(void* object) {
  Compare* _this = reinterpret_cast< Compare* >(object);
  (void)_this;
}
void Compare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Compare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Compare::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Compare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Compare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Compare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.Compare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Compare)
  return target;
}

size_t Compare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Compare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Compare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Compare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Compare::GetClassData() const { return &_class_data_; }

void Compare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Compare *>(to)->MergeFrom(
      static_cast<const Compare &>(from));
}


void Compare::MergeFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Compare::CopyFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compare::IsInitialized() const {
  return true;
}

void Compare::InternalSwap(Compare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Compare::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ActuatorLogic_5ftest_2eproto_getter, &descriptor_table_ActuatorLogic_5ftest_2eproto_once,
      file_level_metadata_ActuatorLogic_5ftest_2eproto[0]);
}

// ===================================================================

class DigitalCompare::_Internal {
 public:
};

DigitalCompare::DigitalCompare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.DigitalCompare)
}
DigitalCompare::DigitalCompare(const DigitalCompare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&rhs_) -
    reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  // @@protoc_insertion_point(copy_constructor:blox.DigitalCompare)
}

inline void DigitalCompare::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&op_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rhs_) -
    reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
}

DigitalCompare::~DigitalCompare() {
  // @@protoc_insertion_point(destructor:blox.DigitalCompare)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalCompare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigitalCompare::ArenaDtor(void* object) {
  DigitalCompare* _this = reinterpret_cast< DigitalCompare* >(object);
  (void)_this;
}
void DigitalCompare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalCompare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalCompare::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.DigitalCompare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rhs_) -
      reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalCompare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox.Compare.DigitalOperator op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::blox::Compare_DigitalOperator>(val));
        } else goto handle_unusual;
        continue;
      // .blox.Compare.Result result = 2 [(.brewblox_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::blox::Compare_Result>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.DigitalState rhs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rhs(static_cast<::blox::DigitalState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalCompare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.DigitalCompare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.Compare.DigitalOperator op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // .blox.DigitalState rhs = 4;
  if (this->_internal_rhs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rhs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.DigitalCompare)
  return target;
}

size_t DigitalCompare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.DigitalCompare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blox.Compare.DigitalOperator op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .blox.DigitalState rhs = 4;
  if (this->_internal_rhs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rhs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalCompare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalCompare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalCompare::GetClassData() const { return &_class_data_; }

void DigitalCompare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DigitalCompare *>(to)->MergeFrom(
      static_cast<const DigitalCompare &>(from));
}


void DigitalCompare::MergeFrom(const DigitalCompare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.DigitalCompare)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_rhs() != 0) {
    _internal_set_rhs(from._internal_rhs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalCompare::CopyFrom(const DigitalCompare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.DigitalCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalCompare::IsInitialized() const {
  return true;
}

void DigitalCompare::InternalSwap(DigitalCompare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalCompare, rhs_)
      + sizeof(DigitalCompare::rhs_)
      - PROTOBUF_FIELD_OFFSET(DigitalCompare, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalCompare::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ActuatorLogic_5ftest_2eproto_getter, &descriptor_table_ActuatorLogic_5ftest_2eproto_once,
      file_level_metadata_ActuatorLogic_5ftest_2eproto[1]);
}

// ===================================================================

class AnalogCompare::_Internal {
 public:
};

AnalogCompare::AnalogCompare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.AnalogCompare)
}
AnalogCompare::AnalogCompare(const AnalogCompare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&rhs_) -
    reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  // @@protoc_insertion_point(copy_constructor:blox.AnalogCompare)
}

inline void AnalogCompare::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&op_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rhs_) -
    reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
}

AnalogCompare::~AnalogCompare() {
  // @@protoc_insertion_point(destructor:blox.AnalogCompare)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnalogCompare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnalogCompare::ArenaDtor(void* object) {
  AnalogCompare* _this = reinterpret_cast< AnalogCompare* >(object);
  (void)_this;
}
void AnalogCompare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogCompare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalogCompare::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.AnalogCompare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rhs_) -
      reinterpret_cast<char*>(&op_)) + sizeof(rhs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogCompare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox.Compare.AnalogOperator op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::blox::Compare_AnalogOperator>(val));
        } else goto handle_unusual;
        continue;
      // .blox.Compare.Result result = 2 [(.brewblox_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::blox::Compare_Result>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 rhs = 4 [(.nanopb_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rhs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogCompare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.AnalogCompare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.Compare.AnalogOperator op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // sint32 rhs = 4 [(.nanopb_test) = {
  if (this->_internal_rhs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_rhs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.AnalogCompare)
  return target;
}

size_t AnalogCompare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.AnalogCompare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blox.Compare.AnalogOperator op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  // .blox.Compare.Result result = 2 [(.brewblox_test) = {
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // sint32 rhs = 4 [(.nanopb_test) = {
  if (this->_internal_rhs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_rhs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalogCompare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalogCompare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalogCompare::GetClassData() const { return &_class_data_; }

void AnalogCompare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnalogCompare *>(to)->MergeFrom(
      static_cast<const AnalogCompare &>(from));
}


void AnalogCompare::MergeFrom(const AnalogCompare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.AnalogCompare)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_rhs() != 0) {
    _internal_set_rhs(from._internal_rhs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogCompare::CopyFrom(const AnalogCompare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.AnalogCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogCompare::IsInitialized() const {
  return true;
}

void AnalogCompare::InternalSwap(AnalogCompare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogCompare, rhs_)
      + sizeof(AnalogCompare::rhs_)
      - PROTOBUF_FIELD_OFFSET(AnalogCompare, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogCompare::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ActuatorLogic_5ftest_2eproto_getter, &descriptor_table_ActuatorLogic_5ftest_2eproto_once,
      file_level_metadata_ActuatorLogic_5ftest_2eproto[2]);
}

// ===================================================================

class ActuatorLogic::_Internal {
 public:
};

ActuatorLogic::ActuatorLogic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  digital_(arena),
  analog_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.ActuatorLogic)
}
ActuatorLogic::ActuatorLogic(const ActuatorLogic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      digital_(from.digital_),
      analog_(from.analog_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expression().empty()) {
    expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expression(), 
      GetArenaForAllocation());
  }
  ::memcpy(&targetid_, &from.targetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorpos_) -
    reinterpret_cast<char*>(&targetid_)) + sizeof(errorpos_));
  // @@protoc_insertion_point(copy_constructor:blox.ActuatorLogic)
}

inline void ActuatorLogic::SharedCtor() {
expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&targetid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorpos_) -
    reinterpret_cast<char*>(&targetid_)) + sizeof(errorpos_));
}

ActuatorLogic::~ActuatorLogic() {
  // @@protoc_insertion_point(destructor:blox.ActuatorLogic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActuatorLogic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActuatorLogic::ArenaDtor(void* object) {
  ActuatorLogic* _this = reinterpret_cast< ActuatorLogic* >(object);
  (void)_this;
}
void ActuatorLogic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorLogic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActuatorLogic::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.ActuatorLogic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digital_.Clear();
  analog_.Clear();
  expression_.ClearToEmpty();
  ::memset(&targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorpos_) -
      reinterpret_cast<char*>(&targetid_)) + sizeof(errorpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorLogic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 targetId = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 drivenTargetId = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          driventargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.Compare.Result result = 4 [(.brewblox_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::blox::Compare_Result>(val));
        } else goto handle_unusual;
        continue;
      // string expression = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_expression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.ActuatorLogic.expression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_digital(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_analog(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 errorPos = 8 [(.nanopb_test) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          errorpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorLogic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.ActuatorLogic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 targetId = 1 [(.nanopb_test) = {
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_targetid(), target);
  }

  // uint32 drivenTargetId = 2 [(.nanopb_test) = {
  if (this->_internal_driventargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_driventargetid(), target);
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  // .blox.Compare.Result result = 4 [(.brewblox_test) = {
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // string expression = 5 [(.nanopb_test) = {
  if (!this->_internal_expression().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expression().data(), static_cast<int>(this->_internal_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.ActuatorLogic.expression");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_expression(), target);
  }

  // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_digital_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_digital(i), target, stream);
  }

  // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_analog_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_analog(i), target, stream);
  }

  // uint32 errorPos = 8 [(.nanopb_test) = {
  if (this->_internal_errorpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_errorpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.ActuatorLogic)
  return target;
}

size_t ActuatorLogic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.ActuatorLogic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.DigitalCompare digital = 6 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_digital_size();
  for (const auto& msg : this->digital_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .blox.AnalogCompare analog = 7 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_analog_size();
  for (const auto& msg : this->analog_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string expression = 5 [(.nanopb_test) = {
  if (!this->_internal_expression().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expression());
  }

  // uint32 targetId = 1 [(.nanopb_test) = {
  if (this->_internal_targetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_targetid());
  }

  // uint32 drivenTargetId = 2 [(.nanopb_test) = {
  if (this->_internal_driventargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_driventargetid());
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .blox.Compare.Result result = 4 [(.brewblox_test) = {
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // uint32 errorPos = 8 [(.nanopb_test) = {
  if (this->_internal_errorpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorpos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActuatorLogic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActuatorLogic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActuatorLogic::GetClassData() const { return &_class_data_; }

void ActuatorLogic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActuatorLogic *>(to)->MergeFrom(
      static_cast<const ActuatorLogic &>(from));
}


void ActuatorLogic::MergeFrom(const ActuatorLogic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.ActuatorLogic)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  digital_.MergeFrom(from.digital_);
  analog_.MergeFrom(from.analog_);
  if (!from._internal_expression().empty()) {
    _internal_set_expression(from._internal_expression());
  }
  if (from._internal_targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_driventargetid() != 0) {
    _internal_set_driventargetid(from._internal_driventargetid());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_errorpos() != 0) {
    _internal_set_errorpos(from._internal_errorpos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorLogic::CopyFrom(const ActuatorLogic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.ActuatorLogic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorLogic::IsInitialized() const {
  return true;
}

void ActuatorLogic::InternalSwap(ActuatorLogic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  digital_.InternalSwap(&other->digital_);
  analog_.InternalSwap(&other->analog_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &expression_, GetArenaForAllocation(),
      &other->expression_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActuatorLogic, errorpos_)
      + sizeof(ActuatorLogic::errorpos_)
      - PROTOBUF_FIELD_OFFSET(ActuatorLogic, targetid_)>(
          reinterpret_cast<char*>(&targetid_),
          reinterpret_cast<char*>(&other->targetid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorLogic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ActuatorLogic_5ftest_2eproto_getter, &descriptor_table_ActuatorLogic_5ftest_2eproto_once,
      file_level_metadata_ActuatorLogic_5ftest_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::Compare* Arena::CreateMaybeMessage< ::blox::Compare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::Compare >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::DigitalCompare* Arena::CreateMaybeMessage< ::blox::DigitalCompare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::DigitalCompare >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::AnalogCompare* Arena::CreateMaybeMessage< ::blox::AnalogCompare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::AnalogCompare >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::ActuatorLogic* Arena::CreateMaybeMessage< ::blox::ActuatorLogic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::ActuatorLogic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
