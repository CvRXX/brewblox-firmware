// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WiFiSettings_test.proto

#ifndef PROTOBUF_INCLUDED_WiFiSettings_5ftest_2eproto
#define PROTOBUF_INCLUDED_WiFiSettings_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_WiFiSettings_5ftest_2eproto 

namespace protobuf_WiFiSettings_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_WiFiSettings_5ftest_2eproto
namespace blox {
class WiFiSettings;
class WiFiSettingsDefaultTypeInternal;
extern WiFiSettingsDefaultTypeInternal _WiFiSettings_default_instance_;
}  // namespace blox
namespace google {
namespace protobuf {
template<> ::blox::WiFiSettings* Arena::CreateMaybeMessage<::blox::WiFiSettings>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox {

enum WiFiSettings_WlanSecurity {
  WiFiSettings_WlanSecurity_WLAN_SEC_UNSEC = 0,
  WiFiSettings_WlanSecurity_WLAN_SEC_WEP = 1,
  WiFiSettings_WlanSecurity_WLAN_SEC_WPA = 2,
  WiFiSettings_WlanSecurity_WLAN_SEC_WPA2 = 3,
  WiFiSettings_WlanSecurity_WLAN_SEC_WPA_ENTERPRISE = 4,
  WiFiSettings_WlanSecurity_WLAN_SEC_WPA2_ENTERPRISE = 5,
  WiFiSettings_WlanSecurity_WLAN_SEC_NOT_SET = 255,
  WiFiSettings_WlanSecurity_WiFiSettings_WlanSecurity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WiFiSettings_WlanSecurity_WiFiSettings_WlanSecurity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WiFiSettings_WlanSecurity_IsValid(int value);
const WiFiSettings_WlanSecurity WiFiSettings_WlanSecurity_WlanSecurity_MIN = WiFiSettings_WlanSecurity_WLAN_SEC_UNSEC;
const WiFiSettings_WlanSecurity WiFiSettings_WlanSecurity_WlanSecurity_MAX = WiFiSettings_WlanSecurity_WLAN_SEC_NOT_SET;
const int WiFiSettings_WlanSecurity_WlanSecurity_ARRAYSIZE = WiFiSettings_WlanSecurity_WlanSecurity_MAX + 1;

const ::google::protobuf::EnumDescriptor* WiFiSettings_WlanSecurity_descriptor();
inline const ::std::string& WiFiSettings_WlanSecurity_Name(WiFiSettings_WlanSecurity value) {
  return ::google::protobuf::internal::NameOfEnum(
    WiFiSettings_WlanSecurity_descriptor(), value);
}
inline bool WiFiSettings_WlanSecurity_Parse(
    const ::std::string& name, WiFiSettings_WlanSecurity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WiFiSettings_WlanSecurity>(
    WiFiSettings_WlanSecurity_descriptor(), name, value);
}
enum WiFiSettings_WlanCipher {
  WiFiSettings_WlanCipher_WLAN_CIPHER_NOT_SET = 0,
  WiFiSettings_WlanCipher_WLAN_CIPHER_AES = 1,
  WiFiSettings_WlanCipher_WLAN_CIPHER_TKIP = 2,
  WiFiSettings_WlanCipher_WLAN_CIPHER_AES_OR_TKIP = 3,
  WiFiSettings_WlanCipher_WiFiSettings_WlanCipher_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WiFiSettings_WlanCipher_WiFiSettings_WlanCipher_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WiFiSettings_WlanCipher_IsValid(int value);
const WiFiSettings_WlanCipher WiFiSettings_WlanCipher_WlanCipher_MIN = WiFiSettings_WlanCipher_WLAN_CIPHER_NOT_SET;
const WiFiSettings_WlanCipher WiFiSettings_WlanCipher_WlanCipher_MAX = WiFiSettings_WlanCipher_WLAN_CIPHER_AES_OR_TKIP;
const int WiFiSettings_WlanCipher_WlanCipher_ARRAYSIZE = WiFiSettings_WlanCipher_WlanCipher_MAX + 1;

const ::google::protobuf::EnumDescriptor* WiFiSettings_WlanCipher_descriptor();
inline const ::std::string& WiFiSettings_WlanCipher_Name(WiFiSettings_WlanCipher value) {
  return ::google::protobuf::internal::NameOfEnum(
    WiFiSettings_WlanCipher_descriptor(), value);
}
inline bool WiFiSettings_WlanCipher_Parse(
    const ::std::string& name, WiFiSettings_WlanCipher* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WiFiSettings_WlanCipher>(
    WiFiSettings_WlanCipher_descriptor(), name, value);
}
// ===================================================================

class WiFiSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.WiFiSettings) */ {
 public:
  WiFiSettings();
  virtual ~WiFiSettings();

  WiFiSettings(const WiFiSettings& from);

  inline WiFiSettings& operator=(const WiFiSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WiFiSettings(WiFiSettings&& from) noexcept
    : WiFiSettings() {
    *this = ::std::move(from);
  }

  inline WiFiSettings& operator=(WiFiSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WiFiSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WiFiSettings* internal_default_instance() {
    return reinterpret_cast<const WiFiSettings*>(
               &_WiFiSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WiFiSettings* other);
  friend void swap(WiFiSettings& a, WiFiSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WiFiSettings* New() const final {
    return CreateMaybeMessage<WiFiSettings>(NULL);
  }

  WiFiSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WiFiSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WiFiSettings& from);
  void MergeFrom(const WiFiSettings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WiFiSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WiFiSettings_WlanSecurity WlanSecurity;
  static const WlanSecurity WLAN_SEC_UNSEC =
    WiFiSettings_WlanSecurity_WLAN_SEC_UNSEC;
  static const WlanSecurity WLAN_SEC_WEP =
    WiFiSettings_WlanSecurity_WLAN_SEC_WEP;
  static const WlanSecurity WLAN_SEC_WPA =
    WiFiSettings_WlanSecurity_WLAN_SEC_WPA;
  static const WlanSecurity WLAN_SEC_WPA2 =
    WiFiSettings_WlanSecurity_WLAN_SEC_WPA2;
  static const WlanSecurity WLAN_SEC_WPA_ENTERPRISE =
    WiFiSettings_WlanSecurity_WLAN_SEC_WPA_ENTERPRISE;
  static const WlanSecurity WLAN_SEC_WPA2_ENTERPRISE =
    WiFiSettings_WlanSecurity_WLAN_SEC_WPA2_ENTERPRISE;
  static const WlanSecurity WLAN_SEC_NOT_SET =
    WiFiSettings_WlanSecurity_WLAN_SEC_NOT_SET;
  static inline bool WlanSecurity_IsValid(int value) {
    return WiFiSettings_WlanSecurity_IsValid(value);
  }
  static const WlanSecurity WlanSecurity_MIN =
    WiFiSettings_WlanSecurity_WlanSecurity_MIN;
  static const WlanSecurity WlanSecurity_MAX =
    WiFiSettings_WlanSecurity_WlanSecurity_MAX;
  static const int WlanSecurity_ARRAYSIZE =
    WiFiSettings_WlanSecurity_WlanSecurity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WlanSecurity_descriptor() {
    return WiFiSettings_WlanSecurity_descriptor();
  }
  static inline const ::std::string& WlanSecurity_Name(WlanSecurity value) {
    return WiFiSettings_WlanSecurity_Name(value);
  }
  static inline bool WlanSecurity_Parse(const ::std::string& name,
      WlanSecurity* value) {
    return WiFiSettings_WlanSecurity_Parse(name, value);
  }

  typedef WiFiSettings_WlanCipher WlanCipher;
  static const WlanCipher WLAN_CIPHER_NOT_SET =
    WiFiSettings_WlanCipher_WLAN_CIPHER_NOT_SET;
  static const WlanCipher WLAN_CIPHER_AES =
    WiFiSettings_WlanCipher_WLAN_CIPHER_AES;
  static const WlanCipher WLAN_CIPHER_TKIP =
    WiFiSettings_WlanCipher_WLAN_CIPHER_TKIP;
  static const WlanCipher WLAN_CIPHER_AES_OR_TKIP =
    WiFiSettings_WlanCipher_WLAN_CIPHER_AES_OR_TKIP;
  static inline bool WlanCipher_IsValid(int value) {
    return WiFiSettings_WlanCipher_IsValid(value);
  }
  static const WlanCipher WlanCipher_MIN =
    WiFiSettings_WlanCipher_WlanCipher_MIN;
  static const WlanCipher WlanCipher_MAX =
    WiFiSettings_WlanCipher_WlanCipher_MAX;
  static const int WlanCipher_ARRAYSIZE =
    WiFiSettings_WlanCipher_WlanCipher_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WlanCipher_descriptor() {
    return WiFiSettings_WlanCipher_descriptor();
  }
  static inline const ::std::string& WlanCipher_Name(WlanCipher value) {
    return WiFiSettings_WlanCipher_Name(value);
  }
  static inline bool WlanCipher_Parse(const ::std::string& name,
      WlanCipher* value) {
    return WiFiSettings_WlanCipher_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string ssid = 1 [(.nanopb_test) = {
  void clear_ssid();
  static const int kSsidFieldNumber = 1;
  const ::std::string& ssid() const;
  void set_ssid(const ::std::string& value);
  #if LANG_CXX11
  void set_ssid(::std::string&& value);
  #endif
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  ::std::string* mutable_ssid();
  ::std::string* release_ssid();
  void set_allocated_ssid(::std::string* ssid);

  // string password = 2 [(.nanopb_test) = {
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string ip = 6 [(.nanopb_test) = {
  void clear_ip();
  static const int kIpFieldNumber = 6;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // .blox.WiFiSettings.WlanSecurity security = 3;
  void clear_security();
  static const int kSecurityFieldNumber = 3;
  ::blox::WiFiSettings_WlanSecurity security() const;
  void set_security(::blox::WiFiSettings_WlanSecurity value);

  // .blox.WiFiSettings.WlanCipher cipher = 4;
  void clear_cipher();
  static const int kCipherFieldNumber = 4;
  ::blox::WiFiSettings_WlanCipher cipher() const;
  void set_cipher(::blox::WiFiSettings_WlanCipher value);

  // int32 signal = 5 [(.nanopb_test) = {
  void clear_signal();
  static const int kSignalFieldNumber = 5;
  ::google::protobuf::int32 signal() const;
  void set_signal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:blox.WiFiSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ssid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  int security_;
  int cipher_;
  ::google::protobuf::int32 signal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_WiFiSettings_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WiFiSettings

// string ssid = 1 [(.nanopb_test) = {
inline void WiFiSettings::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WiFiSettings::ssid() const {
  // @@protoc_insertion_point(field_get:blox.WiFiSettings.ssid)
  return ssid_.GetNoArena();
}
inline void WiFiSettings::set_ssid(const ::std::string& value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blox.WiFiSettings.ssid)
}
#if LANG_CXX11
inline void WiFiSettings::set_ssid(::std::string&& value) {
  
  ssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blox.WiFiSettings.ssid)
}
#endif
inline void WiFiSettings::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blox.WiFiSettings.ssid)
}
inline void WiFiSettings::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blox.WiFiSettings.ssid)
}
inline ::std::string* WiFiSettings::mutable_ssid() {
  
  // @@protoc_insertion_point(field_mutable:blox.WiFiSettings.ssid)
  return ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WiFiSettings::release_ssid() {
  // @@protoc_insertion_point(field_release:blox.WiFiSettings.ssid)
  
  return ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WiFiSettings::set_allocated_ssid(::std::string* ssid) {
  if (ssid != NULL) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:blox.WiFiSettings.ssid)
}

// string password = 2 [(.nanopb_test) = {
inline void WiFiSettings::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WiFiSettings::password() const {
  // @@protoc_insertion_point(field_get:blox.WiFiSettings.password)
  return password_.GetNoArena();
}
inline void WiFiSettings::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blox.WiFiSettings.password)
}
#if LANG_CXX11
inline void WiFiSettings::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blox.WiFiSettings.password)
}
#endif
inline void WiFiSettings::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blox.WiFiSettings.password)
}
inline void WiFiSettings::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blox.WiFiSettings.password)
}
inline ::std::string* WiFiSettings::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:blox.WiFiSettings.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WiFiSettings::release_password() {
  // @@protoc_insertion_point(field_release:blox.WiFiSettings.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WiFiSettings::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:blox.WiFiSettings.password)
}

// .blox.WiFiSettings.WlanSecurity security = 3;
inline void WiFiSettings::clear_security() {
  security_ = 0;
}
inline ::blox::WiFiSettings_WlanSecurity WiFiSettings::security() const {
  // @@protoc_insertion_point(field_get:blox.WiFiSettings.security)
  return static_cast< ::blox::WiFiSettings_WlanSecurity >(security_);
}
inline void WiFiSettings::set_security(::blox::WiFiSettings_WlanSecurity value) {
  
  security_ = value;
  // @@protoc_insertion_point(field_set:blox.WiFiSettings.security)
}

// .blox.WiFiSettings.WlanCipher cipher = 4;
inline void WiFiSettings::clear_cipher() {
  cipher_ = 0;
}
inline ::blox::WiFiSettings_WlanCipher WiFiSettings::cipher() const {
  // @@protoc_insertion_point(field_get:blox.WiFiSettings.cipher)
  return static_cast< ::blox::WiFiSettings_WlanCipher >(cipher_);
}
inline void WiFiSettings::set_cipher(::blox::WiFiSettings_WlanCipher value) {
  
  cipher_ = value;
  // @@protoc_insertion_point(field_set:blox.WiFiSettings.cipher)
}

// int32 signal = 5 [(.nanopb_test) = {
inline void WiFiSettings::clear_signal() {
  signal_ = 0;
}
inline ::google::protobuf::int32 WiFiSettings::signal() const {
  // @@protoc_insertion_point(field_get:blox.WiFiSettings.signal)
  return signal_;
}
inline void WiFiSettings::set_signal(::google::protobuf::int32 value) {
  
  signal_ = value;
  // @@protoc_insertion_point(field_set:blox.WiFiSettings.signal)
}

// string ip = 6 [(.nanopb_test) = {
inline void WiFiSettings::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WiFiSettings::ip() const {
  // @@protoc_insertion_point(field_get:blox.WiFiSettings.ip)
  return ip_.GetNoArena();
}
inline void WiFiSettings::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blox.WiFiSettings.ip)
}
#if LANG_CXX11
inline void WiFiSettings::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blox.WiFiSettings.ip)
}
#endif
inline void WiFiSettings::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blox.WiFiSettings.ip)
}
inline void WiFiSettings::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blox.WiFiSettings.ip)
}
inline ::std::string* WiFiSettings::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:blox.WiFiSettings.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WiFiSettings::release_ip() {
  // @@protoc_insertion_point(field_release:blox.WiFiSettings.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WiFiSettings::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:blox.WiFiSettings.ip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blox::WiFiSettings_WlanSecurity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::WiFiSettings_WlanSecurity>() {
  return ::blox::WiFiSettings_WlanSecurity_descriptor();
}
template <> struct is_proto_enum< ::blox::WiFiSettings_WlanCipher> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::WiFiSettings_WlanCipher>() {
  return ::blox::WiFiSettings_WlanCipher_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_WiFiSettings_5ftest_2eproto
