// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brewblox_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brewblox_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brewblox_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brewblox_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brewblox_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brewblox_5ftest_2eproto;
class BrewBlox_testFieldOptions;
struct BrewBlox_testFieldOptionsDefaultTypeInternal;
extern BrewBlox_testFieldOptionsDefaultTypeInternal _BrewBlox_testFieldOptions_default_instance_;
class BrewBlox_testMessageOptions;
struct BrewBlox_testMessageOptionsDefaultTypeInternal;
extern BrewBlox_testMessageOptionsDefaultTypeInternal _BrewBlox_testMessageOptions_default_instance_;
class BrewBlox_testTypes;
struct BrewBlox_testTypesDefaultTypeInternal;
extern BrewBlox_testTypesDefaultTypeInternal _BrewBlox_testTypes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BrewBlox_testFieldOptions* Arena::CreateMaybeMessage<::BrewBlox_testFieldOptions>(Arena*);
template<> ::BrewBlox_testMessageOptions* Arena::CreateMaybeMessage<::BrewBlox_testMessageOptions>(Arena*);
template<> ::BrewBlox_testTypes* Arena::CreateMaybeMessage<::BrewBlox_testTypes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum BrewBlox_testTypes_UnitType : int {
  BrewBlox_testTypes_UnitType_NotSet = 0,
  BrewBlox_testTypes_UnitType_Celsius = 1,
  BrewBlox_testTypes_UnitType_InverseCelsius = 2,
  BrewBlox_testTypes_UnitType_Second = 3,
  BrewBlox_testTypes_UnitType_Minute = 4,
  BrewBlox_testTypes_UnitType_Hour = 5,
  BrewBlox_testTypes_UnitType_DeltaCelsius = 6,
  BrewBlox_testTypes_UnitType_DeltaCelsiusPerSecond = 7,
  BrewBlox_testTypes_UnitType_DeltaCelsiusPerMinute = 8,
  BrewBlox_testTypes_UnitType_DeltaCelsiusPerHour = 9,
  BrewBlox_testTypes_UnitType_DeltaCelsiusMultSecond = 10,
  BrewBlox_testTypes_UnitType_DeltaCelsiusMultMinute = 11,
  BrewBlox_testTypes_UnitType_DeltaCelsiusMultHour = 12
};
bool BrewBlox_testTypes_UnitType_IsValid(int value);
constexpr BrewBlox_testTypes_UnitType BrewBlox_testTypes_UnitType_UnitType_MIN = BrewBlox_testTypes_UnitType_NotSet;
constexpr BrewBlox_testTypes_UnitType BrewBlox_testTypes_UnitType_UnitType_MAX = BrewBlox_testTypes_UnitType_DeltaCelsiusMultHour;
constexpr int BrewBlox_testTypes_UnitType_UnitType_ARRAYSIZE = BrewBlox_testTypes_UnitType_UnitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrewBlox_testTypes_UnitType_descriptor();
template<typename T>
inline const std::string& BrewBlox_testTypes_UnitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BrewBlox_testTypes_UnitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BrewBlox_testTypes_UnitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BrewBlox_testTypes_UnitType_descriptor(), enum_t_value);
}
inline bool BrewBlox_testTypes_UnitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BrewBlox_testTypes_UnitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BrewBlox_testTypes_UnitType>(
    BrewBlox_testTypes_UnitType_descriptor(), name, value);
}
enum BrewBlox_testTypes_BlockType : int {
  BrewBlox_testTypes_BlockType_Invalid = 0,
  BrewBlox_testTypes_BlockType_ProcessValueInterface = 1,
  BrewBlox_testTypes_BlockType_TempSensorInterface = 2,
  BrewBlox_testTypes_BlockType_SetpointSensorPairInterface = 4,
  BrewBlox_testTypes_BlockType_ActuatorAnalogInterface = 5,
  BrewBlox_testTypes_BlockType_ActuatorDigitalInterface = 6,
  BrewBlox_testTypes_BlockType_BalancerInterface = 7,
  BrewBlox_testTypes_BlockType_MutexInterface = 8,
  BrewBlox_testTypes_BlockType_OneWireDeviceInterface = 9,
  BrewBlox_testTypes_BlockType_IoArrayInterface = 10,
  BrewBlox_testTypes_BlockType_DS2408Interface = 11,
  BrewBlox_testTypes_BlockType_OneWireBusInterface = 12,
  BrewBlox_testTypes_BlockType_IoModuleInterface = 13,
  BrewBlox_testTypes_BlockType_OneWireDeviceBlockInterface = 14,
  BrewBlox_testTypes_BlockType_Any = 255,
  BrewBlox_testTypes_BlockType_SysInfo = 256,
  BrewBlox_testTypes_BlockType_Ticks = 257,
  BrewBlox_testTypes_BlockType_OneWireBus = 258,
  BrewBlox_testTypes_BlockType_BoardPins = 259,
  BrewBlox_testTypes_BlockType_TempSensorMock = 301,
  BrewBlox_testTypes_BlockType_TempSensorOneWire = 302,
  BrewBlox_testTypes_BlockType_SetpointSensorPair = 303,
  BrewBlox_testTypes_BlockType_Pid = 304,
  BrewBlox_testTypes_BlockType_ActuatorAnalogMock = 305,
  BrewBlox_testTypes_BlockType_ActuatorPin = 306,
  BrewBlox_testTypes_BlockType_ActuatorPwm = 307,
  BrewBlox_testTypes_BlockType_ActuatorOffset = 308,
  BrewBlox_testTypes_BlockType_Balancer = 309,
  BrewBlox_testTypes_BlockType_Mutex = 310,
  BrewBlox_testTypes_BlockType_SetpointProfile = 311,
  BrewBlox_testTypes_BlockType_WiFiSettings = 312,
  BrewBlox_testTypes_BlockType_TouchSettings = 313,
  BrewBlox_testTypes_BlockType_DisplaySettings = 314,
  BrewBlox_testTypes_BlockType_DS2413 = 315,
  BrewBlox_testTypes_BlockType_ActuatorOneWire = 316,
  BrewBlox_testTypes_BlockType_DS2408 = 317,
  BrewBlox_testTypes_BlockType_DigitalActuator = 318,
  BrewBlox_testTypes_BlockType_Spark3Pins = 319,
  BrewBlox_testTypes_BlockType_Spark2Pins = 320,
  BrewBlox_testTypes_BlockType_MotorValve = 321,
  BrewBlox_testTypes_BlockType_ActuatorLogic = 322,
  BrewBlox_testTypes_BlockType_MockPins = 323,
  BrewBlox_testTypes_BlockType_TempSensorCombi = 324,
  BrewBlox_testTypes_BlockType_OneWireGpioModule = 325
};
bool BrewBlox_testTypes_BlockType_IsValid(int value);
constexpr BrewBlox_testTypes_BlockType BrewBlox_testTypes_BlockType_BlockType_MIN = BrewBlox_testTypes_BlockType_Invalid;
constexpr BrewBlox_testTypes_BlockType BrewBlox_testTypes_BlockType_BlockType_MAX = BrewBlox_testTypes_BlockType_OneWireGpioModule;
constexpr int BrewBlox_testTypes_BlockType_BlockType_ARRAYSIZE = BrewBlox_testTypes_BlockType_BlockType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrewBlox_testTypes_BlockType_descriptor();
template<typename T>
inline const std::string& BrewBlox_testTypes_BlockType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BrewBlox_testTypes_BlockType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BrewBlox_testTypes_BlockType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BrewBlox_testTypes_BlockType_descriptor(), enum_t_value);
}
inline bool BrewBlox_testTypes_BlockType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BrewBlox_testTypes_BlockType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BrewBlox_testTypes_BlockType>(
    BrewBlox_testTypes_BlockType_descriptor(), name, value);
}
// ===================================================================

class BrewBlox_testTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BrewBlox_testTypes) */ {
 public:
  inline BrewBlox_testTypes() : BrewBlox_testTypes(nullptr) {}
  ~BrewBlox_testTypes() override;
  explicit constexpr BrewBlox_testTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrewBlox_testTypes(const BrewBlox_testTypes& from);
  BrewBlox_testTypes(BrewBlox_testTypes&& from) noexcept
    : BrewBlox_testTypes() {
    *this = ::std::move(from);
  }

  inline BrewBlox_testTypes& operator=(const BrewBlox_testTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrewBlox_testTypes& operator=(BrewBlox_testTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrewBlox_testTypes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrewBlox_testTypes* internal_default_instance() {
    return reinterpret_cast<const BrewBlox_testTypes*>(
               &_BrewBlox_testTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BrewBlox_testTypes& a, BrewBlox_testTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(BrewBlox_testTypes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrewBlox_testTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrewBlox_testTypes* New() const final {
    return new BrewBlox_testTypes();
  }

  BrewBlox_testTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrewBlox_testTypes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrewBlox_testTypes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrewBlox_testTypes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrewBlox_testTypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BrewBlox_testTypes";
  }
  protected:
  explicit BrewBlox_testTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BrewBlox_testTypes_UnitType UnitType;
  static constexpr UnitType NotSet =
    BrewBlox_testTypes_UnitType_NotSet;
  static constexpr UnitType Celsius =
    BrewBlox_testTypes_UnitType_Celsius;
  static constexpr UnitType InverseCelsius =
    BrewBlox_testTypes_UnitType_InverseCelsius;
  static constexpr UnitType Second =
    BrewBlox_testTypes_UnitType_Second;
  static constexpr UnitType Minute =
    BrewBlox_testTypes_UnitType_Minute;
  static constexpr UnitType Hour =
    BrewBlox_testTypes_UnitType_Hour;
  static constexpr UnitType DeltaCelsius =
    BrewBlox_testTypes_UnitType_DeltaCelsius;
  static constexpr UnitType DeltaCelsiusPerSecond =
    BrewBlox_testTypes_UnitType_DeltaCelsiusPerSecond;
  static constexpr UnitType DeltaCelsiusPerMinute =
    BrewBlox_testTypes_UnitType_DeltaCelsiusPerMinute;
  static constexpr UnitType DeltaCelsiusPerHour =
    BrewBlox_testTypes_UnitType_DeltaCelsiusPerHour;
  static constexpr UnitType DeltaCelsiusMultSecond =
    BrewBlox_testTypes_UnitType_DeltaCelsiusMultSecond;
  static constexpr UnitType DeltaCelsiusMultMinute =
    BrewBlox_testTypes_UnitType_DeltaCelsiusMultMinute;
  static constexpr UnitType DeltaCelsiusMultHour =
    BrewBlox_testTypes_UnitType_DeltaCelsiusMultHour;
  static inline bool UnitType_IsValid(int value) {
    return BrewBlox_testTypes_UnitType_IsValid(value);
  }
  static constexpr UnitType UnitType_MIN =
    BrewBlox_testTypes_UnitType_UnitType_MIN;
  static constexpr UnitType UnitType_MAX =
    BrewBlox_testTypes_UnitType_UnitType_MAX;
  static constexpr int UnitType_ARRAYSIZE =
    BrewBlox_testTypes_UnitType_UnitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UnitType_descriptor() {
    return BrewBlox_testTypes_UnitType_descriptor();
  }
  template<typename T>
  static inline const std::string& UnitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UnitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UnitType_Name.");
    return BrewBlox_testTypes_UnitType_Name(enum_t_value);
  }
  static inline bool UnitType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UnitType* value) {
    return BrewBlox_testTypes_UnitType_Parse(name, value);
  }

  typedef BrewBlox_testTypes_BlockType BlockType;
  static constexpr BlockType Invalid =
    BrewBlox_testTypes_BlockType_Invalid;
  static constexpr BlockType ProcessValueInterface =
    BrewBlox_testTypes_BlockType_ProcessValueInterface;
  static constexpr BlockType TempSensorInterface =
    BrewBlox_testTypes_BlockType_TempSensorInterface;
  static constexpr BlockType SetpointSensorPairInterface =
    BrewBlox_testTypes_BlockType_SetpointSensorPairInterface;
  static constexpr BlockType ActuatorAnalogInterface =
    BrewBlox_testTypes_BlockType_ActuatorAnalogInterface;
  static constexpr BlockType ActuatorDigitalInterface =
    BrewBlox_testTypes_BlockType_ActuatorDigitalInterface;
  static constexpr BlockType BalancerInterface =
    BrewBlox_testTypes_BlockType_BalancerInterface;
  static constexpr BlockType MutexInterface =
    BrewBlox_testTypes_BlockType_MutexInterface;
  static constexpr BlockType OneWireDeviceInterface =
    BrewBlox_testTypes_BlockType_OneWireDeviceInterface;
  static constexpr BlockType IoArrayInterface =
    BrewBlox_testTypes_BlockType_IoArrayInterface;
  static constexpr BlockType DS2408Interface =
    BrewBlox_testTypes_BlockType_DS2408Interface;
  static constexpr BlockType OneWireBusInterface =
    BrewBlox_testTypes_BlockType_OneWireBusInterface;
  static constexpr BlockType IoModuleInterface =
    BrewBlox_testTypes_BlockType_IoModuleInterface;
  static constexpr BlockType OneWireDeviceBlockInterface =
    BrewBlox_testTypes_BlockType_OneWireDeviceBlockInterface;
  static constexpr BlockType Any =
    BrewBlox_testTypes_BlockType_Any;
  static constexpr BlockType SysInfo =
    BrewBlox_testTypes_BlockType_SysInfo;
  static constexpr BlockType Ticks =
    BrewBlox_testTypes_BlockType_Ticks;
  static constexpr BlockType OneWireBus =
    BrewBlox_testTypes_BlockType_OneWireBus;
  static constexpr BlockType BoardPins =
    BrewBlox_testTypes_BlockType_BoardPins;
  static constexpr BlockType TempSensorMock =
    BrewBlox_testTypes_BlockType_TempSensorMock;
  static constexpr BlockType TempSensorOneWire =
    BrewBlox_testTypes_BlockType_TempSensorOneWire;
  static constexpr BlockType SetpointSensorPair =
    BrewBlox_testTypes_BlockType_SetpointSensorPair;
  static constexpr BlockType Pid =
    BrewBlox_testTypes_BlockType_Pid;
  static constexpr BlockType ActuatorAnalogMock =
    BrewBlox_testTypes_BlockType_ActuatorAnalogMock;
  static constexpr BlockType ActuatorPin =
    BrewBlox_testTypes_BlockType_ActuatorPin;
  static constexpr BlockType ActuatorPwm =
    BrewBlox_testTypes_BlockType_ActuatorPwm;
  static constexpr BlockType ActuatorOffset =
    BrewBlox_testTypes_BlockType_ActuatorOffset;
  static constexpr BlockType Balancer =
    BrewBlox_testTypes_BlockType_Balancer;
  static constexpr BlockType Mutex =
    BrewBlox_testTypes_BlockType_Mutex;
  static constexpr BlockType SetpointProfile =
    BrewBlox_testTypes_BlockType_SetpointProfile;
  static constexpr BlockType WiFiSettings =
    BrewBlox_testTypes_BlockType_WiFiSettings;
  static constexpr BlockType TouchSettings =
    BrewBlox_testTypes_BlockType_TouchSettings;
  static constexpr BlockType DisplaySettings =
    BrewBlox_testTypes_BlockType_DisplaySettings;
  static constexpr BlockType DS2413 =
    BrewBlox_testTypes_BlockType_DS2413;
  static constexpr BlockType ActuatorOneWire =
    BrewBlox_testTypes_BlockType_ActuatorOneWire;
  static constexpr BlockType DS2408 =
    BrewBlox_testTypes_BlockType_DS2408;
  static constexpr BlockType DigitalActuator =
    BrewBlox_testTypes_BlockType_DigitalActuator;
  static constexpr BlockType Spark3Pins =
    BrewBlox_testTypes_BlockType_Spark3Pins;
  static constexpr BlockType Spark2Pins =
    BrewBlox_testTypes_BlockType_Spark2Pins;
  static constexpr BlockType MotorValve =
    BrewBlox_testTypes_BlockType_MotorValve;
  static constexpr BlockType ActuatorLogic =
    BrewBlox_testTypes_BlockType_ActuatorLogic;
  static constexpr BlockType MockPins =
    BrewBlox_testTypes_BlockType_MockPins;
  static constexpr BlockType TempSensorCombi =
    BrewBlox_testTypes_BlockType_TempSensorCombi;
  static constexpr BlockType OneWireGpioModule =
    BrewBlox_testTypes_BlockType_OneWireGpioModule;
  static inline bool BlockType_IsValid(int value) {
    return BrewBlox_testTypes_BlockType_IsValid(value);
  }
  static constexpr BlockType BlockType_MIN =
    BrewBlox_testTypes_BlockType_BlockType_MIN;
  static constexpr BlockType BlockType_MAX =
    BrewBlox_testTypes_BlockType_BlockType_MAX;
  static constexpr int BlockType_ARRAYSIZE =
    BrewBlox_testTypes_BlockType_BlockType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BlockType_descriptor() {
    return BrewBlox_testTypes_BlockType_descriptor();
  }
  template<typename T>
  static inline const std::string& BlockType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BlockType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BlockType_Name.");
    return BrewBlox_testTypes_BlockType_Name(enum_t_value);
  }
  static inline bool BlockType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BlockType* value) {
    return BrewBlox_testTypes_BlockType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BrewBlox_testTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_brewblox_5ftest_2eproto;
};
// -------------------------------------------------------------------

class BrewBlox_testMessageOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BrewBlox_testMessageOptions) */ {
 public:
  inline BrewBlox_testMessageOptions() : BrewBlox_testMessageOptions(nullptr) {}
  ~BrewBlox_testMessageOptions() override;
  explicit constexpr BrewBlox_testMessageOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrewBlox_testMessageOptions(const BrewBlox_testMessageOptions& from);
  BrewBlox_testMessageOptions(BrewBlox_testMessageOptions&& from) noexcept
    : BrewBlox_testMessageOptions() {
    *this = ::std::move(from);
  }

  inline BrewBlox_testMessageOptions& operator=(const BrewBlox_testMessageOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrewBlox_testMessageOptions& operator=(BrewBlox_testMessageOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrewBlox_testMessageOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrewBlox_testMessageOptions* internal_default_instance() {
    return reinterpret_cast<const BrewBlox_testMessageOptions*>(
               &_BrewBlox_testMessageOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BrewBlox_testMessageOptions& a, BrewBlox_testMessageOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(BrewBlox_testMessageOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrewBlox_testMessageOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrewBlox_testMessageOptions* New() const final {
    return new BrewBlox_testMessageOptions();
  }

  BrewBlox_testMessageOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrewBlox_testMessageOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrewBlox_testMessageOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrewBlox_testMessageOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrewBlox_testMessageOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BrewBlox_testMessageOptions";
  }
  protected:
  explicit BrewBlox_testMessageOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImplFieldNumber = 9,
    kObjtypeFieldNumber = 3,
  };
  // repeated .BrewBlox_testTypes.BlockType impl = 9 [(.nanopb_test) = {
  int impl_size() const;
  private:
  int _internal_impl_size() const;
  public:
  void clear_impl();
  private:
  ::BrewBlox_testTypes_BlockType _internal_impl(int index) const;
  void _internal_add_impl(::BrewBlox_testTypes_BlockType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_impl();
  public:
  ::BrewBlox_testTypes_BlockType impl(int index) const;
  void set_impl(int index, ::BrewBlox_testTypes_BlockType value);
  void add_impl(::BrewBlox_testTypes_BlockType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& impl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_impl();

  // optional .BrewBlox_testTypes.BlockType objtype = 3;
  bool has_objtype() const;
  private:
  bool _internal_has_objtype() const;
  public:
  void clear_objtype();
  ::BrewBlox_testTypes_BlockType objtype() const;
  void set_objtype(::BrewBlox_testTypes_BlockType value);
  private:
  ::BrewBlox_testTypes_BlockType _internal_objtype() const;
  void _internal_set_objtype(::BrewBlox_testTypes_BlockType value);
  public:

  // @@protoc_insertion_point(class_scope:BrewBlox_testMessageOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> impl_;
  int objtype_;
  friend struct ::TableStruct_brewblox_5ftest_2eproto;
};
// -------------------------------------------------------------------

class BrewBlox_testFieldOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BrewBlox_testFieldOptions) */ {
 public:
  inline BrewBlox_testFieldOptions() : BrewBlox_testFieldOptions(nullptr) {}
  ~BrewBlox_testFieldOptions() override;
  explicit constexpr BrewBlox_testFieldOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrewBlox_testFieldOptions(const BrewBlox_testFieldOptions& from);
  BrewBlox_testFieldOptions(BrewBlox_testFieldOptions&& from) noexcept
    : BrewBlox_testFieldOptions() {
    *this = ::std::move(from);
  }

  inline BrewBlox_testFieldOptions& operator=(const BrewBlox_testFieldOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrewBlox_testFieldOptions& operator=(BrewBlox_testFieldOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrewBlox_testFieldOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrewBlox_testFieldOptions* internal_default_instance() {
    return reinterpret_cast<const BrewBlox_testFieldOptions*>(
               &_BrewBlox_testFieldOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BrewBlox_testFieldOptions& a, BrewBlox_testFieldOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(BrewBlox_testFieldOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrewBlox_testFieldOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrewBlox_testFieldOptions* New() const final {
    return new BrewBlox_testFieldOptions();
  }

  BrewBlox_testFieldOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrewBlox_testFieldOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrewBlox_testFieldOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrewBlox_testFieldOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrewBlox_testFieldOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BrewBlox_testFieldOptions";
  }
  protected:
  explicit BrewBlox_testFieldOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
    kScaleFieldNumber = 2,
    kObjtypeFieldNumber = 3,
    kHexedFieldNumber = 4,
    kReadonlyFieldNumber = 5,
    kLoggedFieldNumber = 6,
    kHexstrFieldNumber = 7,
    kDrivenFieldNumber = 8,
    kIgnoredFieldNumber = 9,
  };
  // optional .BrewBlox_testTypes.UnitType unit = 1;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  ::BrewBlox_testTypes_UnitType unit() const;
  void set_unit(::BrewBlox_testTypes_UnitType value);
  private:
  ::BrewBlox_testTypes_UnitType _internal_unit() const;
  void _internal_set_unit(::BrewBlox_testTypes_UnitType value);
  public:

  // optional uint32 scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .BrewBlox_testTypes.BlockType objtype = 3;
  bool has_objtype() const;
  private:
  bool _internal_has_objtype() const;
  public:
  void clear_objtype();
  ::BrewBlox_testTypes_BlockType objtype() const;
  void set_objtype(::BrewBlox_testTypes_BlockType value);
  private:
  ::BrewBlox_testTypes_BlockType _internal_objtype() const;
  void _internal_set_objtype(::BrewBlox_testTypes_BlockType value);
  public:

  // optional bool hexed = 4;
  bool has_hexed() const;
  private:
  bool _internal_has_hexed() const;
  public:
  void clear_hexed();
  bool hexed() const;
  void set_hexed(bool value);
  private:
  bool _internal_hexed() const;
  void _internal_set_hexed(bool value);
  public:

  // optional bool readonly = 5;
  bool has_readonly() const;
  private:
  bool _internal_has_readonly() const;
  public:
  void clear_readonly();
  bool readonly() const;
  void set_readonly(bool value);
  private:
  bool _internal_readonly() const;
  void _internal_set_readonly(bool value);
  public:

  // optional bool logged = 6;
  bool has_logged() const;
  private:
  bool _internal_has_logged() const;
  public:
  void clear_logged();
  bool logged() const;
  void set_logged(bool value);
  private:
  bool _internal_logged() const;
  void _internal_set_logged(bool value);
  public:

  // optional bool hexstr = 7;
  bool has_hexstr() const;
  private:
  bool _internal_has_hexstr() const;
  public:
  void clear_hexstr();
  bool hexstr() const;
  void set_hexstr(bool value);
  private:
  bool _internal_hexstr() const;
  void _internal_set_hexstr(bool value);
  public:

  // optional bool driven = 8;
  bool has_driven() const;
  private:
  bool _internal_has_driven() const;
  public:
  void clear_driven();
  bool driven() const;
  void set_driven(bool value);
  private:
  bool _internal_driven() const;
  void _internal_set_driven(bool value);
  public:

  // optional bool ignored = 9;
  bool has_ignored() const;
  private:
  bool _internal_has_ignored() const;
  public:
  void clear_ignored();
  bool ignored() const;
  void set_ignored(bool value);
  private:
  bool _internal_ignored() const;
  void _internal_set_ignored(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BrewBlox_testFieldOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int unit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scale_;
  int objtype_;
  bool hexed_;
  bool readonly_;
  bool logged_;
  bool hexstr_;
  bool driven_;
  bool ignored_;
  friend struct ::TableStruct_brewblox_5ftest_2eproto;
};
// ===================================================================

static const int kBrewbloxTestFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::BrewBlox_testFieldOptions >, 11, false >
  brewblox_test;
static const int kBrewbloxTestMsgFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::BrewBlox_testMessageOptions >, 11, false >
  brewblox_test_msg;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrewBlox_testTypes

// -------------------------------------------------------------------

// BrewBlox_testMessageOptions

// optional .BrewBlox_testTypes.BlockType objtype = 3;
inline bool BrewBlox_testMessageOptions::_internal_has_objtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BrewBlox_testMessageOptions::has_objtype() const {
  return _internal_has_objtype();
}
inline void BrewBlox_testMessageOptions::clear_objtype() {
  objtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::BrewBlox_testTypes_BlockType BrewBlox_testMessageOptions::_internal_objtype() const {
  return static_cast< ::BrewBlox_testTypes_BlockType >(objtype_);
}
inline ::BrewBlox_testTypes_BlockType BrewBlox_testMessageOptions::objtype() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testMessageOptions.objtype)
  return _internal_objtype();
}
inline void BrewBlox_testMessageOptions::_internal_set_objtype(::BrewBlox_testTypes_BlockType value) {
  assert(::BrewBlox_testTypes_BlockType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  objtype_ = value;
}
inline void BrewBlox_testMessageOptions::set_objtype(::BrewBlox_testTypes_BlockType value) {
  _internal_set_objtype(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testMessageOptions.objtype)
}

// repeated .BrewBlox_testTypes.BlockType impl = 9 [(.nanopb_test) = {
inline int BrewBlox_testMessageOptions::_internal_impl_size() const {
  return impl_.size();
}
inline int BrewBlox_testMessageOptions::impl_size() const {
  return _internal_impl_size();
}
inline void BrewBlox_testMessageOptions::clear_impl() {
  impl_.Clear();
}
inline ::BrewBlox_testTypes_BlockType BrewBlox_testMessageOptions::_internal_impl(int index) const {
  return static_cast< ::BrewBlox_testTypes_BlockType >(impl_.Get(index));
}
inline ::BrewBlox_testTypes_BlockType BrewBlox_testMessageOptions::impl(int index) const {
  // @@protoc_insertion_point(field_get:BrewBlox_testMessageOptions.impl)
  return _internal_impl(index);
}
inline void BrewBlox_testMessageOptions::set_impl(int index, ::BrewBlox_testTypes_BlockType value) {
  assert(::BrewBlox_testTypes_BlockType_IsValid(value));
  impl_.Set(index, value);
  // @@protoc_insertion_point(field_set:BrewBlox_testMessageOptions.impl)
}
inline void BrewBlox_testMessageOptions::_internal_add_impl(::BrewBlox_testTypes_BlockType value) {
  assert(::BrewBlox_testTypes_BlockType_IsValid(value));
  impl_.Add(value);
}
inline void BrewBlox_testMessageOptions::add_impl(::BrewBlox_testTypes_BlockType value) {
  _internal_add_impl(value);
  // @@protoc_insertion_point(field_add:BrewBlox_testMessageOptions.impl)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BrewBlox_testMessageOptions::impl() const {
  // @@protoc_insertion_point(field_list:BrewBlox_testMessageOptions.impl)
  return impl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BrewBlox_testMessageOptions::_internal_mutable_impl() {
  return &impl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BrewBlox_testMessageOptions::mutable_impl() {
  // @@protoc_insertion_point(field_mutable_list:BrewBlox_testMessageOptions.impl)
  return _internal_mutable_impl();
}

// -------------------------------------------------------------------

// BrewBlox_testFieldOptions

// optional .BrewBlox_testTypes.UnitType unit = 1;
inline bool BrewBlox_testFieldOptions::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_unit() const {
  return _internal_has_unit();
}
inline void BrewBlox_testFieldOptions::clear_unit() {
  unit_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::BrewBlox_testTypes_UnitType BrewBlox_testFieldOptions::_internal_unit() const {
  return static_cast< ::BrewBlox_testTypes_UnitType >(unit_);
}
inline ::BrewBlox_testTypes_UnitType BrewBlox_testFieldOptions::unit() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.unit)
  return _internal_unit();
}
inline void BrewBlox_testFieldOptions::_internal_set_unit(::BrewBlox_testTypes_UnitType value) {
  assert(::BrewBlox_testTypes_UnitType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  unit_ = value;
}
inline void BrewBlox_testFieldOptions::set_unit(::BrewBlox_testTypes_UnitType value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.unit)
}

// optional uint32 scale = 2;
inline bool BrewBlox_testFieldOptions::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_scale() const {
  return _internal_has_scale();
}
inline void BrewBlox_testFieldOptions::clear_scale() {
  scale_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BrewBlox_testFieldOptions::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BrewBlox_testFieldOptions::scale() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.scale)
  return _internal_scale();
}
inline void BrewBlox_testFieldOptions::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void BrewBlox_testFieldOptions::set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.scale)
}

// optional .BrewBlox_testTypes.BlockType objtype = 3;
inline bool BrewBlox_testFieldOptions::_internal_has_objtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_objtype() const {
  return _internal_has_objtype();
}
inline void BrewBlox_testFieldOptions::clear_objtype() {
  objtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::BrewBlox_testTypes_BlockType BrewBlox_testFieldOptions::_internal_objtype() const {
  return static_cast< ::BrewBlox_testTypes_BlockType >(objtype_);
}
inline ::BrewBlox_testTypes_BlockType BrewBlox_testFieldOptions::objtype() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.objtype)
  return _internal_objtype();
}
inline void BrewBlox_testFieldOptions::_internal_set_objtype(::BrewBlox_testTypes_BlockType value) {
  assert(::BrewBlox_testTypes_BlockType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  objtype_ = value;
}
inline void BrewBlox_testFieldOptions::set_objtype(::BrewBlox_testTypes_BlockType value) {
  _internal_set_objtype(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.objtype)
}

// optional bool hexed = 4;
inline bool BrewBlox_testFieldOptions::_internal_has_hexed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_hexed() const {
  return _internal_has_hexed();
}
inline void BrewBlox_testFieldOptions::clear_hexed() {
  hexed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool BrewBlox_testFieldOptions::_internal_hexed() const {
  return hexed_;
}
inline bool BrewBlox_testFieldOptions::hexed() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.hexed)
  return _internal_hexed();
}
inline void BrewBlox_testFieldOptions::_internal_set_hexed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hexed_ = value;
}
inline void BrewBlox_testFieldOptions::set_hexed(bool value) {
  _internal_set_hexed(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.hexed)
}

// optional bool readonly = 5;
inline bool BrewBlox_testFieldOptions::_internal_has_readonly() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_readonly() const {
  return _internal_has_readonly();
}
inline void BrewBlox_testFieldOptions::clear_readonly() {
  readonly_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool BrewBlox_testFieldOptions::_internal_readonly() const {
  return readonly_;
}
inline bool BrewBlox_testFieldOptions::readonly() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.readonly)
  return _internal_readonly();
}
inline void BrewBlox_testFieldOptions::_internal_set_readonly(bool value) {
  _has_bits_[0] |= 0x00000010u;
  readonly_ = value;
}
inline void BrewBlox_testFieldOptions::set_readonly(bool value) {
  _internal_set_readonly(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.readonly)
}

// optional bool logged = 6;
inline bool BrewBlox_testFieldOptions::_internal_has_logged() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_logged() const {
  return _internal_has_logged();
}
inline void BrewBlox_testFieldOptions::clear_logged() {
  logged_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BrewBlox_testFieldOptions::_internal_logged() const {
  return logged_;
}
inline bool BrewBlox_testFieldOptions::logged() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.logged)
  return _internal_logged();
}
inline void BrewBlox_testFieldOptions::_internal_set_logged(bool value) {
  _has_bits_[0] |= 0x00000020u;
  logged_ = value;
}
inline void BrewBlox_testFieldOptions::set_logged(bool value) {
  _internal_set_logged(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.logged)
}

// optional bool hexstr = 7;
inline bool BrewBlox_testFieldOptions::_internal_has_hexstr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_hexstr() const {
  return _internal_has_hexstr();
}
inline void BrewBlox_testFieldOptions::clear_hexstr() {
  hexstr_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BrewBlox_testFieldOptions::_internal_hexstr() const {
  return hexstr_;
}
inline bool BrewBlox_testFieldOptions::hexstr() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.hexstr)
  return _internal_hexstr();
}
inline void BrewBlox_testFieldOptions::_internal_set_hexstr(bool value) {
  _has_bits_[0] |= 0x00000040u;
  hexstr_ = value;
}
inline void BrewBlox_testFieldOptions::set_hexstr(bool value) {
  _internal_set_hexstr(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.hexstr)
}

// optional bool driven = 8;
inline bool BrewBlox_testFieldOptions::_internal_has_driven() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_driven() const {
  return _internal_has_driven();
}
inline void BrewBlox_testFieldOptions::clear_driven() {
  driven_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool BrewBlox_testFieldOptions::_internal_driven() const {
  return driven_;
}
inline bool BrewBlox_testFieldOptions::driven() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.driven)
  return _internal_driven();
}
inline void BrewBlox_testFieldOptions::_internal_set_driven(bool value) {
  _has_bits_[0] |= 0x00000080u;
  driven_ = value;
}
inline void BrewBlox_testFieldOptions::set_driven(bool value) {
  _internal_set_driven(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.driven)
}

// optional bool ignored = 9;
inline bool BrewBlox_testFieldOptions::_internal_has_ignored() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BrewBlox_testFieldOptions::has_ignored() const {
  return _internal_has_ignored();
}
inline void BrewBlox_testFieldOptions::clear_ignored() {
  ignored_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool BrewBlox_testFieldOptions::_internal_ignored() const {
  return ignored_;
}
inline bool BrewBlox_testFieldOptions::ignored() const {
  // @@protoc_insertion_point(field_get:BrewBlox_testFieldOptions.ignored)
  return _internal_ignored();
}
inline void BrewBlox_testFieldOptions::_internal_set_ignored(bool value) {
  _has_bits_[0] |= 0x00000100u;
  ignored_ = value;
}
inline void BrewBlox_testFieldOptions::set_ignored(bool value) {
  _internal_set_ignored(value);
  // @@protoc_insertion_point(field_set:BrewBlox_testFieldOptions.ignored)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BrewBlox_testTypes_UnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BrewBlox_testTypes_UnitType>() {
  return ::BrewBlox_testTypes_UnitType_descriptor();
}
template <> struct is_proto_enum< ::BrewBlox_testTypes_BlockType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BrewBlox_testTypes_BlockType>() {
  return ::BrewBlox_testTypes_BlockType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brewblox_5ftest_2eproto
