// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TouchSettings_test.proto

#include "TouchSettings_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr TouchSettings::TouchSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : calibrated_(0)

  , xoffset_(0)
  , yoffset_(0)
  , xbitsperpixelx16_(0u)
  , ybitsperpixelx16_(0u){}
struct TouchSettingsDefaultTypeInternal {
  constexpr TouchSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TouchSettingsDefaultTypeInternal() {}
  union {
    TouchSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TouchSettingsDefaultTypeInternal _TouchSettings_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TouchSettings_5ftest_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TouchSettings_5ftest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TouchSettings_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TouchSettings_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::TouchSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::TouchSettings, calibrated_),
  PROTOBUF_FIELD_OFFSET(::blox::TouchSettings, xoffset_),
  PROTOBUF_FIELD_OFFSET(::blox::TouchSettings, yoffset_),
  PROTOBUF_FIELD_OFFSET(::blox::TouchSettings, xbitsperpixelx16_),
  PROTOBUF_FIELD_OFFSET(::blox::TouchSettings, ybitsperpixelx16_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::TouchSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_TouchSettings_default_instance_),
};

const char descriptor_table_protodef_TouchSettings_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TouchSettings_test.proto\022\004blox\032\023brewbl"
  "ox_test.proto\032\021nanopb_test.proto\"\207\002\n\rTou"
  "chSettings\0222\n\ncalibrated\030\001 \001(\0162\036.blox.To"
  "uchSettings.Calibrated\022\026\n\007xOffset\030\002 \001(\005B"
  "\005\222\?\0028\020\022\026\n\007yOffset\030\003 \001(\005B\005\222\?\0028\020\022\037\n\020xBitsP"
  "erPixelX16\030\004 \001(\rB\005\222\?\0028\020\022\037\n\020yBitsPerPixel"
  "X16\030\005 \001(\rB\005\222\?\0028\020\"G\n\nCalibrated\022\021\n\rCALIBR"
  "ATED_NO\020\000\022\022\n\016CALIBRATED_YES\020\001\022\022\n\016CALIBRA"
  "TED_NEW\020\002:\007\212\265\030\003\030\271\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TouchSettings_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TouchSettings_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TouchSettings_5ftest_2eproto = {
  false, false, 346, descriptor_table_protodef_TouchSettings_5ftest_2eproto, "TouchSettings_test.proto", 
  &descriptor_table_TouchSettings_5ftest_2eproto_once, descriptor_table_TouchSettings_5ftest_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_TouchSettings_5ftest_2eproto::offsets,
  file_level_metadata_TouchSettings_5ftest_2eproto, file_level_enum_descriptors_TouchSettings_5ftest_2eproto, file_level_service_descriptors_TouchSettings_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TouchSettings_5ftest_2eproto_getter() {
  return &descriptor_table_TouchSettings_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TouchSettings_5ftest_2eproto(&descriptor_table_TouchSettings_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TouchSettings_Calibrated_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TouchSettings_5ftest_2eproto);
  return file_level_enum_descriptors_TouchSettings_5ftest_2eproto[0];
}
bool TouchSettings_Calibrated_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TouchSettings_Calibrated TouchSettings::CALIBRATED_NO;
constexpr TouchSettings_Calibrated TouchSettings::CALIBRATED_YES;
constexpr TouchSettings_Calibrated TouchSettings::CALIBRATED_NEW;
constexpr TouchSettings_Calibrated TouchSettings::Calibrated_MIN;
constexpr TouchSettings_Calibrated TouchSettings::Calibrated_MAX;
constexpr int TouchSettings::Calibrated_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TouchSettings::_Internal {
 public:
};

TouchSettings::TouchSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.TouchSettings)
}
TouchSettings::TouchSettings(const TouchSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&calibrated_, &from.calibrated_,
    static_cast<size_t>(reinterpret_cast<char*>(&ybitsperpixelx16_) -
    reinterpret_cast<char*>(&calibrated_)) + sizeof(ybitsperpixelx16_));
  // @@protoc_insertion_point(copy_constructor:blox.TouchSettings)
}

inline void TouchSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&calibrated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ybitsperpixelx16_) -
    reinterpret_cast<char*>(&calibrated_)) + sizeof(ybitsperpixelx16_));
}

TouchSettings::~TouchSettings() {
  // @@protoc_insertion_point(destructor:blox.TouchSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TouchSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TouchSettings::ArenaDtor(void* object) {
  TouchSettings* _this = reinterpret_cast< TouchSettings* >(object);
  (void)_this;
}
void TouchSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TouchSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TouchSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.TouchSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&calibrated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ybitsperpixelx16_) -
      reinterpret_cast<char*>(&calibrated_)) + sizeof(ybitsperpixelx16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TouchSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox.TouchSettings.Calibrated calibrated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_calibrated(static_cast<::blox::TouchSettings_Calibrated>(val));
        } else goto handle_unusual;
        continue;
      // int32 xOffset = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yOffset = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          yoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 xBitsPerPixelX16 = 4 [(.nanopb_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xbitsperpixelx16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 yBitsPerPixelX16 = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ybitsperpixelx16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TouchSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.TouchSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.TouchSettings.Calibrated calibrated = 1;
  if (this->_internal_calibrated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_calibrated(), target);
  }

  // int32 xOffset = 2 [(.nanopb_test) = {
  if (this->_internal_xoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xoffset(), target);
  }

  // int32 yOffset = 3 [(.nanopb_test) = {
  if (this->_internal_yoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_yoffset(), target);
  }

  // uint32 xBitsPerPixelX16 = 4 [(.nanopb_test) = {
  if (this->_internal_xbitsperpixelx16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xbitsperpixelx16(), target);
  }

  // uint32 yBitsPerPixelX16 = 5 [(.nanopb_test) = {
  if (this->_internal_ybitsperpixelx16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ybitsperpixelx16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.TouchSettings)
  return target;
}

size_t TouchSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.TouchSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blox.TouchSettings.Calibrated calibrated = 1;
  if (this->_internal_calibrated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_calibrated());
  }

  // int32 xOffset = 2 [(.nanopb_test) = {
  if (this->_internal_xoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xoffset());
  }

  // int32 yOffset = 3 [(.nanopb_test) = {
  if (this->_internal_yoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yoffset());
  }

  // uint32 xBitsPerPixelX16 = 4 [(.nanopb_test) = {
  if (this->_internal_xbitsperpixelx16() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_xbitsperpixelx16());
  }

  // uint32 yBitsPerPixelX16 = 5 [(.nanopb_test) = {
  if (this->_internal_ybitsperpixelx16() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ybitsperpixelx16());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TouchSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TouchSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TouchSettings::GetClassData() const { return &_class_data_; }

void TouchSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TouchSettings *>(to)->MergeFrom(
      static_cast<const TouchSettings &>(from));
}


void TouchSettings::MergeFrom(const TouchSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.TouchSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_calibrated() != 0) {
    _internal_set_calibrated(from._internal_calibrated());
  }
  if (from._internal_xoffset() != 0) {
    _internal_set_xoffset(from._internal_xoffset());
  }
  if (from._internal_yoffset() != 0) {
    _internal_set_yoffset(from._internal_yoffset());
  }
  if (from._internal_xbitsperpixelx16() != 0) {
    _internal_set_xbitsperpixelx16(from._internal_xbitsperpixelx16());
  }
  if (from._internal_ybitsperpixelx16() != 0) {
    _internal_set_ybitsperpixelx16(from._internal_ybitsperpixelx16());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TouchSettings::CopyFrom(const TouchSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.TouchSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchSettings::IsInitialized() const {
  return true;
}

void TouchSettings::InternalSwap(TouchSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TouchSettings, ybitsperpixelx16_)
      + sizeof(TouchSettings::ybitsperpixelx16_)
      - PROTOBUF_FIELD_OFFSET(TouchSettings, calibrated_)>(
          reinterpret_cast<char*>(&calibrated_),
          reinterpret_cast<char*>(&other->calibrated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TouchSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TouchSettings_5ftest_2eproto_getter, &descriptor_table_TouchSettings_5ftest_2eproto_once,
      file_level_metadata_TouchSettings_5ftest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::TouchSettings* Arena::CreateMaybeMessage< ::blox::TouchSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::TouchSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
