// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Spark3Pins_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Spark3Pins_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Spark3Pins_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Spark3Pins_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Spark3Pins_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Spark3Pins_5ftest_2eproto;
namespace blox {
class Spark3Pins;
struct Spark3PinsDefaultTypeInternal;
extern Spark3PinsDefaultTypeInternal _Spark3Pins_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::Spark3Pins* Arena::CreateMaybeMessage<::blox::Spark3Pins>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

enum Spark3ChannelIds : int {
  SPARK3_NO_PIN = 0,
  SPARK3_CHAN_TOP1 = 1,
  SPARK3_CHAN_TOP2 = 2,
  SPARK3_CHAN_TOP3 = 3,
  SPARK3_CHAN_BOTTOM1 = 4,
  SPARK3_CHAN_BOTTOM2 = 5,
  Spark3ChannelIds_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Spark3ChannelIds_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Spark3ChannelIds_IsValid(int value);
constexpr Spark3ChannelIds Spark3ChannelIds_MIN = SPARK3_NO_PIN;
constexpr Spark3ChannelIds Spark3ChannelIds_MAX = SPARK3_CHAN_BOTTOM2;
constexpr int Spark3ChannelIds_ARRAYSIZE = Spark3ChannelIds_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Spark3ChannelIds_descriptor();
template<typename T>
inline const std::string& Spark3ChannelIds_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Spark3ChannelIds>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Spark3ChannelIds_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Spark3ChannelIds_descriptor(), enum_t_value);
}
inline bool Spark3ChannelIds_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Spark3ChannelIds* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Spark3ChannelIds>(
    Spark3ChannelIds_descriptor(), name, value);
}
// ===================================================================

class Spark3Pins final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.Spark3Pins) */ {
 public:
  inline Spark3Pins() : Spark3Pins(nullptr) {}
  ~Spark3Pins() override;
  explicit constexpr Spark3Pins(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Spark3Pins(const Spark3Pins& from);
  Spark3Pins(Spark3Pins&& from) noexcept
    : Spark3Pins() {
    *this = ::std::move(from);
  }

  inline Spark3Pins& operator=(const Spark3Pins& from) {
    CopyFrom(from);
    return *this;
  }
  inline Spark3Pins& operator=(Spark3Pins&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Spark3Pins& default_instance() {
    return *internal_default_instance();
  }
  static inline const Spark3Pins* internal_default_instance() {
    return reinterpret_cast<const Spark3Pins*>(
               &_Spark3Pins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Spark3Pins& a, Spark3Pins& b) {
    a.Swap(&b);
  }
  inline void Swap(Spark3Pins* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Spark3Pins* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Spark3Pins* New() const final {
    return new Spark3Pins();
  }

  Spark3Pins* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Spark3Pins>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Spark3Pins& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Spark3Pins& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Spark3Pins* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.Spark3Pins";
  }
  protected:
  explicit Spark3Pins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 8,
    kEnableIoSupply5VFieldNumber = 2,
    kEnableIoSupply12VFieldNumber = 3,
    kSoundAlarmFieldNumber = 5,
    kVoltage5FieldNumber = 6,
    kVoltage12FieldNumber = 7,
  };
  // repeated .blox.IoChannel channels = 8 [(.nanopb_test) = {
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::blox::IoChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >*
      mutable_channels();
  private:
  const ::blox::IoChannel& _internal_channels(int index) const;
  ::blox::IoChannel* _internal_add_channels();
  public:
  const ::blox::IoChannel& channels(int index) const;
  ::blox::IoChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >&
      channels() const;

  // bool enableIoSupply5V = 2;
  void clear_enableiosupply5v();
  bool enableiosupply5v() const;
  void set_enableiosupply5v(bool value);
  private:
  bool _internal_enableiosupply5v() const;
  void _internal_set_enableiosupply5v(bool value);
  public:

  // bool enableIoSupply12V = 3;
  void clear_enableiosupply12v();
  bool enableiosupply12v() const;
  void set_enableiosupply12v(bool value);
  private:
  bool _internal_enableiosupply12v() const;
  void _internal_set_enableiosupply12v(bool value);
  public:

  // bool soundAlarm = 5;
  void clear_soundalarm();
  bool soundalarm() const;
  void set_soundalarm(bool value);
  private:
  bool _internal_soundalarm() const;
  void _internal_set_soundalarm(bool value);
  public:

  // uint32 voltage5 = 6 [(.nanopb_test) = {
  void clear_voltage5();
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage5() const;
  void set_voltage5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voltage5() const;
  void _internal_set_voltage5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 voltage12 = 7 [(.nanopb_test) = {
  void clear_voltage12();
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage12() const;
  void set_voltage12(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voltage12() const;
  void _internal_set_voltage12(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox.Spark3Pins)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel > channels_;
  bool enableiosupply5v_;
  bool enableiosupply12v_;
  bool soundalarm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage12_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Spark3Pins_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Spark3Pins

// bool enableIoSupply5V = 2;
inline void Spark3Pins::clear_enableiosupply5v() {
  enableiosupply5v_ = false;
}
inline bool Spark3Pins::_internal_enableiosupply5v() const {
  return enableiosupply5v_;
}
inline bool Spark3Pins::enableiosupply5v() const {
  // @@protoc_insertion_point(field_get:blox.Spark3Pins.enableIoSupply5V)
  return _internal_enableiosupply5v();
}
inline void Spark3Pins::_internal_set_enableiosupply5v(bool value) {
  
  enableiosupply5v_ = value;
}
inline void Spark3Pins::set_enableiosupply5v(bool value) {
  _internal_set_enableiosupply5v(value);
  // @@protoc_insertion_point(field_set:blox.Spark3Pins.enableIoSupply5V)
}

// bool enableIoSupply12V = 3;
inline void Spark3Pins::clear_enableiosupply12v() {
  enableiosupply12v_ = false;
}
inline bool Spark3Pins::_internal_enableiosupply12v() const {
  return enableiosupply12v_;
}
inline bool Spark3Pins::enableiosupply12v() const {
  // @@protoc_insertion_point(field_get:blox.Spark3Pins.enableIoSupply12V)
  return _internal_enableiosupply12v();
}
inline void Spark3Pins::_internal_set_enableiosupply12v(bool value) {
  
  enableiosupply12v_ = value;
}
inline void Spark3Pins::set_enableiosupply12v(bool value) {
  _internal_set_enableiosupply12v(value);
  // @@protoc_insertion_point(field_set:blox.Spark3Pins.enableIoSupply12V)
}

// bool soundAlarm = 5;
inline void Spark3Pins::clear_soundalarm() {
  soundalarm_ = false;
}
inline bool Spark3Pins::_internal_soundalarm() const {
  return soundalarm_;
}
inline bool Spark3Pins::soundalarm() const {
  // @@protoc_insertion_point(field_get:blox.Spark3Pins.soundAlarm)
  return _internal_soundalarm();
}
inline void Spark3Pins::_internal_set_soundalarm(bool value) {
  
  soundalarm_ = value;
}
inline void Spark3Pins::set_soundalarm(bool value) {
  _internal_set_soundalarm(value);
  // @@protoc_insertion_point(field_set:blox.Spark3Pins.soundAlarm)
}

// uint32 voltage5 = 6 [(.nanopb_test) = {
inline void Spark3Pins::clear_voltage5() {
  voltage5_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Spark3Pins::_internal_voltage5() const {
  return voltage5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Spark3Pins::voltage5() const {
  // @@protoc_insertion_point(field_get:blox.Spark3Pins.voltage5)
  return _internal_voltage5();
}
inline void Spark3Pins::_internal_set_voltage5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  voltage5_ = value;
}
inline void Spark3Pins::set_voltage5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_voltage5(value);
  // @@protoc_insertion_point(field_set:blox.Spark3Pins.voltage5)
}

// uint32 voltage12 = 7 [(.nanopb_test) = {
inline void Spark3Pins::clear_voltage12() {
  voltage12_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Spark3Pins::_internal_voltage12() const {
  return voltage12_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Spark3Pins::voltage12() const {
  // @@protoc_insertion_point(field_get:blox.Spark3Pins.voltage12)
  return _internal_voltage12();
}
inline void Spark3Pins::_internal_set_voltage12(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  voltage12_ = value;
}
inline void Spark3Pins::set_voltage12(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_voltage12(value);
  // @@protoc_insertion_point(field_set:blox.Spark3Pins.voltage12)
}

// repeated .blox.IoChannel channels = 8 [(.nanopb_test) = {
inline int Spark3Pins::_internal_channels_size() const {
  return channels_.size();
}
inline int Spark3Pins::channels_size() const {
  return _internal_channels_size();
}
inline ::blox::IoChannel* Spark3Pins::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:blox.Spark3Pins.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >*
Spark3Pins::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:blox.Spark3Pins.channels)
  return &channels_;
}
inline const ::blox::IoChannel& Spark3Pins::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::blox::IoChannel& Spark3Pins::channels(int index) const {
  // @@protoc_insertion_point(field_get:blox.Spark3Pins.channels)
  return _internal_channels(index);
}
inline ::blox::IoChannel* Spark3Pins::_internal_add_channels() {
  return channels_.Add();
}
inline ::blox::IoChannel* Spark3Pins::add_channels() {
  ::blox::IoChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:blox.Spark3Pins.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >&
Spark3Pins::channels() const {
  // @@protoc_insertion_point(field_list:blox.Spark3Pins.channels)
  return channels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox::Spark3ChannelIds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Spark3ChannelIds>() {
  return ::blox::Spark3ChannelIds_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Spark3Pins_5ftest_2eproto
