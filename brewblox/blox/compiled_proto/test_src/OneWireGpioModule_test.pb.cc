// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneWireGpioModule_test.proto

#include "OneWireGpioModule_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr GpioChannel::GpioChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , config_(0)

  , pins_(0u)
  , whenactive_(0u)
  , wheninactive_(0u)
  , pwmduty_(0u){}
struct GpioChannelDefaultTypeInternal {
  constexpr GpioChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpioChannelDefaultTypeInternal() {}
  union {
    GpioChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpioChannelDefaultTypeInternal _GpioChannel_default_instance_;
constexpr OneWireGpioModule::OneWireGpioModule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , moduleposition_(0u)
  , status_(0u)
  , drive_(0u)
  , overcurrent_(0u)
  , openload_(0u){}
struct OneWireGpioModuleDefaultTypeInternal {
  constexpr OneWireGpioModuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OneWireGpioModuleDefaultTypeInternal() {}
  union {
    OneWireGpioModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OneWireGpioModuleDefaultTypeInternal _OneWireGpioModule_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OneWireGpioModule_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OneWireGpioModule_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OneWireGpioModule_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::GpioChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::GpioChannel, id_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioChannel, config_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioChannel, pins_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioChannel, whenactive_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioChannel, wheninactive_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioChannel, pwmduty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, channels_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, moduleposition_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, status_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, drive_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, overcurrent_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, openload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::GpioChannel)},
  { 11, -1, sizeof(::blox::OneWireGpioModule)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_GpioChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_OneWireGpioModule_default_instance_),
};

const char descriptor_table_protodef_OneWireGpioModule_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034OneWireGpioModule_test.proto\022\004blox\032\023br"
  "ewblox_test.proto\032\021nanopb_test.proto\032\022Io"
  "Array_test.proto\"\252\001\n\013GpioChannel\022\021\n\002id\030\001"
  " \001(\rB\005\222\?\0028\010\022#\n\006config\030\002 \001(\0162\023.blox.Chann"
  "elConfig\022\023\n\004pins\030\003 \001(\rB\005\222\?\0028\020\022\031\n\nwhenAct"
  "ive\030\004 \001(\rB\005\222\?\0028\020\022\033\n\014whenInactive\030\005 \001(\rB\005"
  "\222\?\0028\020\022\026\n\007pwmDuty\030\006 \001(\rB\005\222\?\0028\010\"\355\001\n\021OneWir"
  "eGpioModule\022*\n\010channels\030\001 \003(\0132\021.blox.Gpi"
  "oChannelB\005\222\?\002\020\010\022\035\n\016modulePosition\030\002 \001(\rB"
  "\005\222\?\0028\010\022\033\n\006status\030\003 \001(\rB\013\212\265\030\002(\001\222\?\0028\010\022\032\n\005d"
  "rive\030\004 \001(\rB\013\212\265\030\002(\001\222\?\0028\020\022 \n\013overCurrent\030\005"
  " \001(\rB\013\212\265\030\002(\001\222\?\0028\020\022\035\n\010openLoad\030\006 \001(\rB\013\212\265\030"
  "\002(\001\222\?\0028\020:\023\212\265\030\003\030\305\002\212\265\030\002H\n\212\265\030\002H\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OneWireGpioModule_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OneWireGpioModule_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OneWireGpioModule_5ftest_2eproto = {
  false, false, 517, descriptor_table_protodef_OneWireGpioModule_5ftest_2eproto, "OneWireGpioModule_test.proto", 
  &descriptor_table_OneWireGpioModule_5ftest_2eproto_once, descriptor_table_OneWireGpioModule_5ftest_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_OneWireGpioModule_5ftest_2eproto::offsets,
  file_level_metadata_OneWireGpioModule_5ftest_2eproto, file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto, file_level_service_descriptors_OneWireGpioModule_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_OneWireGpioModule_5ftest_2eproto_getter() {
  return &descriptor_table_OneWireGpioModule_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_OneWireGpioModule_5ftest_2eproto(&descriptor_table_OneWireGpioModule_5ftest_2eproto);
namespace blox {

// ===================================================================

class GpioChannel::_Internal {
 public:
};

GpioChannel::GpioChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.GpioChannel)
}
GpioChannel::GpioChannel(const GpioChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pwmduty_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pwmduty_));
  // @@protoc_insertion_point(copy_constructor:blox.GpioChannel)
}

inline void GpioChannel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pwmduty_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pwmduty_));
}

GpioChannel::~GpioChannel() {
  // @@protoc_insertion_point(destructor:blox.GpioChannel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GpioChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpioChannel::ArenaDtor(void* object) {
  GpioChannel* _this = reinterpret_cast< GpioChannel* >(object);
  (void)_this;
}
void GpioChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpioChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.GpioChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pwmduty_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pwmduty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.ChannelConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_config(static_cast<::blox::ChannelConfig>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pins = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 whenActive = 4 [(.nanopb_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          whenactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 whenInactive = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wheninactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pwmDuty = 6 [(.nanopb_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pwmduty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.GpioChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .blox.ChannelConfig config = 2;
  if (this->_internal_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_config(), target);
  }

  // uint32 pins = 3 [(.nanopb_test) = {
  if (this->_internal_pins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pins(), target);
  }

  // uint32 whenActive = 4 [(.nanopb_test) = {
  if (this->_internal_whenactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_whenactive(), target);
  }

  // uint32 whenInactive = 5 [(.nanopb_test) = {
  if (this->_internal_wheninactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_wheninactive(), target);
  }

  // uint32 pwmDuty = 6 [(.nanopb_test) = {
  if (this->_internal_pwmduty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pwmduty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.GpioChannel)
  return target;
}

size_t GpioChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.GpioChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .blox.ChannelConfig config = 2;
  if (this->_internal_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_config());
  }

  // uint32 pins = 3 [(.nanopb_test) = {
  if (this->_internal_pins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pins());
  }

  // uint32 whenActive = 4 [(.nanopb_test) = {
  if (this->_internal_whenactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_whenactive());
  }

  // uint32 whenInactive = 5 [(.nanopb_test) = {
  if (this->_internal_wheninactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wheninactive());
  }

  // uint32 pwmDuty = 6 [(.nanopb_test) = {
  if (this->_internal_pwmduty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pwmduty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpioChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpioChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpioChannel::GetClassData() const { return &_class_data_; }

void GpioChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GpioChannel *>(to)->MergeFrom(
      static_cast<const GpioChannel &>(from));
}


void GpioChannel::MergeFrom(const GpioChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.GpioChannel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_config() != 0) {
    _internal_set_config(from._internal_config());
  }
  if (from._internal_pins() != 0) {
    _internal_set_pins(from._internal_pins());
  }
  if (from._internal_whenactive() != 0) {
    _internal_set_whenactive(from._internal_whenactive());
  }
  if (from._internal_wheninactive() != 0) {
    _internal_set_wheninactive(from._internal_wheninactive());
  }
  if (from._internal_pwmduty() != 0) {
    _internal_set_pwmduty(from._internal_pwmduty());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpioChannel::CopyFrom(const GpioChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.GpioChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioChannel::IsInitialized() const {
  return true;
}

void GpioChannel::InternalSwap(GpioChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioChannel, pwmduty_)
      + sizeof(GpioChannel::pwmduty_)
      - PROTOBUF_FIELD_OFFSET(GpioChannel, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioChannel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_OneWireGpioModule_5ftest_2eproto_getter, &descriptor_table_OneWireGpioModule_5ftest_2eproto_once,
      file_level_metadata_OneWireGpioModule_5ftest_2eproto[0]);
}

// ===================================================================

class OneWireGpioModule::_Internal {
 public:
};

OneWireGpioModule::OneWireGpioModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.OneWireGpioModule)
}
OneWireGpioModule::OneWireGpioModule(const OneWireGpioModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&moduleposition_, &from.moduleposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&openload_) -
    reinterpret_cast<char*>(&moduleposition_)) + sizeof(openload_));
  // @@protoc_insertion_point(copy_constructor:blox.OneWireGpioModule)
}

inline void OneWireGpioModule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&moduleposition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&openload_) -
    reinterpret_cast<char*>(&moduleposition_)) + sizeof(openload_));
}

OneWireGpioModule::~OneWireGpioModule() {
  // @@protoc_insertion_point(destructor:blox.OneWireGpioModule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OneWireGpioModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OneWireGpioModule::ArenaDtor(void* object) {
  OneWireGpioModule* _this = reinterpret_cast< OneWireGpioModule* >(object);
  (void)_this;
}
void OneWireGpioModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OneWireGpioModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneWireGpioModule::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.OneWireGpioModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  ::memset(&moduleposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openload_) -
      reinterpret_cast<char*>(&moduleposition_)) + sizeof(openload_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneWireGpioModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox.GpioChannel channels = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 modulePosition = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          moduleposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 drive = 4 [(.nanopb_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          drive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 overCurrent = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          overcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 openLoad = 6 [(.nanopb_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          openload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneWireGpioModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.OneWireGpioModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.GpioChannel channels = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  // uint32 modulePosition = 2 [(.nanopb_test) = {
  if (this->_internal_moduleposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moduleposition(), target);
  }

  // uint32 status = 3 [(.nanopb_test) = {
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  // uint32 drive = 4 [(.nanopb_test) = {
  if (this->_internal_drive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_drive(), target);
  }

  // uint32 overCurrent = 5 [(.nanopb_test) = {
  if (this->_internal_overcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_overcurrent(), target);
  }

  // uint32 openLoad = 6 [(.nanopb_test) = {
  if (this->_internal_openload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_openload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.OneWireGpioModule)
  return target;
}

size_t OneWireGpioModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.OneWireGpioModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.GpioChannel channels = 1 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 modulePosition = 2 [(.nanopb_test) = {
  if (this->_internal_moduleposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moduleposition());
  }

  // uint32 status = 3 [(.nanopb_test) = {
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  // uint32 drive = 4 [(.nanopb_test) = {
  if (this->_internal_drive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drive());
  }

  // uint32 overCurrent = 5 [(.nanopb_test) = {
  if (this->_internal_overcurrent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_overcurrent());
  }

  // uint32 openLoad = 6 [(.nanopb_test) = {
  if (this->_internal_openload() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_openload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneWireGpioModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneWireGpioModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneWireGpioModule::GetClassData() const { return &_class_data_; }

void OneWireGpioModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OneWireGpioModule *>(to)->MergeFrom(
      static_cast<const OneWireGpioModule &>(from));
}


void OneWireGpioModule::MergeFrom(const OneWireGpioModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.OneWireGpioModule)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_moduleposition() != 0) {
    _internal_set_moduleposition(from._internal_moduleposition());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_drive() != 0) {
    _internal_set_drive(from._internal_drive());
  }
  if (from._internal_overcurrent() != 0) {
    _internal_set_overcurrent(from._internal_overcurrent());
  }
  if (from._internal_openload() != 0) {
    _internal_set_openload(from._internal_openload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneWireGpioModule::CopyFrom(const OneWireGpioModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.OneWireGpioModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneWireGpioModule::IsInitialized() const {
  return true;
}

void OneWireGpioModule::InternalSwap(OneWireGpioModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneWireGpioModule, openload_)
      + sizeof(OneWireGpioModule::openload_)
      - PROTOBUF_FIELD_OFFSET(OneWireGpioModule, moduleposition_)>(
          reinterpret_cast<char*>(&moduleposition_),
          reinterpret_cast<char*>(&other->moduleposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OneWireGpioModule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_OneWireGpioModule_5ftest_2eproto_getter, &descriptor_table_OneWireGpioModule_5ftest_2eproto_once,
      file_level_metadata_OneWireGpioModule_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::GpioChannel* Arena::CreateMaybeMessage< ::blox::GpioChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::GpioChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::OneWireGpioModule* Arena::CreateMaybeMessage< ::blox::OneWireGpioModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::OneWireGpioModule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
