// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneWireGpioModule_test.proto

#include "OneWireGpioModule_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr GpioModuleChannel::GpioModuleChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , devicetype_(0)

  , pinsmask_(0u)
  , width_(0u){}
struct GpioModuleChannelDefaultTypeInternal {
  constexpr GpioModuleChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpioModuleChannelDefaultTypeInternal() {}
  union {
    GpioModuleChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpioModuleChannelDefaultTypeInternal _GpioModuleChannel_default_instance_;
constexpr OneWireGpioModule::OneWireGpioModule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , moduleposition_(0u)
  , modulestatus_(0u)
  , pullupdesired_(0u)
  , pullupstatus_(0u)
  , pullupwhenactive_(0u)
  , pullupwheninactive_(0u)
  , pulldowndesired_(0u)
  , pulldownstatus_(0u)
  , pulldownwhenactive_(0u)
  , pulldownwheninactive_(0u)
  , overcurrent_(0u)
  , openload_(0u)
  , useexternalpower_(false)
  , modulestatusclear_(0u){}
struct OneWireGpioModuleDefaultTypeInternal {
  constexpr OneWireGpioModuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OneWireGpioModuleDefaultTypeInternal() {}
  union {
    OneWireGpioModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OneWireGpioModuleDefaultTypeInternal _OneWireGpioModule_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OneWireGpioModule_5ftest_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OneWireGpioModule_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OneWireGpioModule_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::GpioModuleChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::GpioModuleChannel, id_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioModuleChannel, devicetype_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioModuleChannel, pinsmask_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioModuleChannel, width_),
  PROTOBUF_FIELD_OFFSET(::blox::GpioModuleChannel, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, channels_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, moduleposition_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, modulestatus_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pullupdesired_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pullupstatus_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pullupwhenactive_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pullupwheninactive_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pulldowndesired_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pulldownstatus_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pulldownwhenactive_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, pulldownwheninactive_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, overcurrent_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, openload_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, useexternalpower_),
  PROTOBUF_FIELD_OFFSET(::blox::OneWireGpioModule, modulestatusclear_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::GpioModuleChannel)},
  { 10, -1, sizeof(::blox::OneWireGpioModule)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_GpioModuleChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_OneWireGpioModule_default_instance_),
};

const char descriptor_table_protodef_OneWireGpioModule_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034OneWireGpioModule_test.proto\022\004blox\032\023br"
  "ewblox_test.proto\032\021nanopb_test.proto\"\232\001\n"
  "\021GpioModuleChannel\022\021\n\002id\030\001 \001(\rB\005\222\?\0028\010\022(\n"
  "\ndeviceType\030\002 \001(\0162\024.blox.GpioDeviceType\022"
  "\035\n\010pinsMask\030\003 \001(\rB\013\222\?\0028\010\212\265\030\002P\001\022\024\n\005width\030"
  "\004 \001(\rB\005\222\?\0028\010\022\023\n\004name\030\005 \001(\tB\005\222\?\002\010 \"\221\005\n\021On"
  "eWireGpioModule\0220\n\010channels\030\001 \003(\0132\027.blox"
  ".GpioModuleChannelB\005\222\?\002\020\010\022\035\n\016modulePosit"
  "ion\030\002 \001(\rB\005\222\?\0028\010\022!\n\014moduleStatus\030\003 \001(\rB\013"
  "\222\?\0028\010\212\265\030\002P\001\022(\n\rpullUpDesired\030\004 \001(\rB\021\212\265\030\002"
  "(\001\222\?\0028\010\212\265\030\002P\001\022\'\n\014pullUpStatus\030\005 \001(\rB\021\212\265\030"
  "\002(\001\222\?\0028\010\212\265\030\002P\001\022+\n\020pullUpWhenActive\030\006 \001(\r"
  "B\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022-\n\022pullUpWhenInactiv"
  "e\030\007 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022*\n\017pullDownDe"
  "sired\030\010 \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022)\n\016pullDo"
  "wnStatus\030\t \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001\022-\n\022pul"
  "lDownWhenActive\030\n \001(\rB\021\212\265\030\002(\001\222\?\0028\010\212\265\030\002P\001"
  "\022/\n\024pullDownWhenInactive\030\013 \001(\rB\021\212\265\030\002(\001\222\?"
  "\0028\010\212\265\030\002P\001\022&\n\013overCurrent\030\014 \001(\rB\021\212\265\030\002(\001\222\?"
  "\0028\010\212\265\030\002P\001\022#\n\010openLoad\030\r \001(\rB\021\212\265\030\002(\001\222\?\0028\010"
  "\212\265\030\002P\001\022\030\n\020useExternalPower\030\016 \001(\010\022&\n\021modu"
  "leStatusClear\030  \001(\rB\013\222\?\0028\010\212\265\030\002P\001:\023\212\265\030\003\030\305"
  "\002\212\265\030\002H\n\212\265\030\002H\014*\225\005\n\016GpioDeviceType\022\021\n\rGPIO"
  "_DEV_NONE\020\000\022\023\n\017GPIO_DEV_SSR_2P\020\001\022\023\n\017GPIO"
  "_DEV_SSR_1P\020\002\022 \n\034GPIO_DEV_MECHANICAL_REL"
  "AY_2P\020\003\022*\n&GPIO_DEV_MECHANICAL_RELAY_1P_"
  "HIGH_SIDE\020\004\022)\n%GPIO_DEV_MECHANICAL_RELAY"
  "_1P_LOW_SIDE\020\005\022\024\n\020GPIO_DEV_COIL_2P\020\006\022\"\n\036"
  "GPIO_DEV_COIL_2P_BIDIRECTIONAL\020\007\022\036\n\032GPIO"
  "_DEV_COIL_1P_HIGH_SIDE\020\010\022\035\n\031GPIO_DEV_COI"
  "L_1P_LOW_SIDE\020\t\022\025\n\021GPIO_DEV_MOTOR_2P\020\n\022#"
  "\n\037GPIO_DEV_MOTOR_2P_BIDIRECTIONAL\020\013\022\037\n\033G"
  "PIO_DEV_MOTOR_1P_HIGH_SIDE\020\014\022\036\n\032GPIO_DEV"
  "_MOTOR_1P_LOW_SIDE\020\r\022\033\n\027GPIO_DEV_LOAD_DE"
  "TECT_2P\020\016\022%\n!GPIO_DEV_LOAD_DETECT_1P_PUL"
  "L_DOWN\020\017\022#\n\037GPIO_DEV_LOAD_DETECT_1P_PULL"
  "_UP\020\020\022\025\n\021GPIO_DEV_POWER_1P\020\021\022!\n\035GPIO_DEV"
  "_POWER_1P_LOAD_DETECT\020\022\022\023\n\017GPIO_DEV_GND_"
  "1P\020\023\022\037\n\033GPIO_DEV_GND_1P_LOAD_DETECT\020\024*\212\002"
  "\n\016GpioErrorFlags\022\021\n\rGPIO_ERR_NONE\020\000\022\033\n\027G"
  "PIO_ERR_POWER_ON_RESET\020\001\022\030\n\024GPIO_ERR_OVE"
  "RVOLTAGE\020\002\022\031\n\025GPIO_ERR_UNDERVOLTAGE\020\004\022\030\n"
  "\024GPIO_ERR_OVERCURRENT\020\010\022\026\n\022GPIO_ERR_OPEN"
  "_LOAD\020\020\022$\n GPIO_ERR_OVERTEMPERATURE_WARN"
  "ING\020 \022\"\n\036GPIO_ERR_OVERTEMPERATURE_ERROR\020"
  "@\022\027\n\022GPIO_ERR_SPI_ERROR\020\200\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OneWireGpioModule_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OneWireGpioModule_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OneWireGpioModule_5ftest_2eproto = {
  false, false, 1834, descriptor_table_protodef_OneWireGpioModule_5ftest_2eproto, "OneWireGpioModule_test.proto", 
  &descriptor_table_OneWireGpioModule_5ftest_2eproto_once, descriptor_table_OneWireGpioModule_5ftest_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_OneWireGpioModule_5ftest_2eproto::offsets,
  file_level_metadata_OneWireGpioModule_5ftest_2eproto, file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto, file_level_service_descriptors_OneWireGpioModule_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_OneWireGpioModule_5ftest_2eproto_getter() {
  return &descriptor_table_OneWireGpioModule_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_OneWireGpioModule_5ftest_2eproto(&descriptor_table_OneWireGpioModule_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OneWireGpioModule_5ftest_2eproto);
  return file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto[0];
}
bool GpioDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioErrorFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OneWireGpioModule_5ftest_2eproto);
  return file_level_enum_descriptors_OneWireGpioModule_5ftest_2eproto[1];
}
bool GpioErrorFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GpioModuleChannel::_Internal {
 public:
};

GpioModuleChannel::GpioModuleChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.GpioModuleChannel)
}
GpioModuleChannel::GpioModuleChannel(const GpioModuleChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&id_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:blox.GpioModuleChannel)
}

inline void GpioModuleChannel::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&id_)) + sizeof(width_));
}

GpioModuleChannel::~GpioModuleChannel() {
  // @@protoc_insertion_point(destructor:blox.GpioModuleChannel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GpioModuleChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GpioModuleChannel::ArenaDtor(void* object) {
  GpioModuleChannel* _this = reinterpret_cast< GpioModuleChannel* >(object);
  (void)_this;
}
void GpioModuleChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioModuleChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpioModuleChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.GpioModuleChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&id_)) + sizeof(width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioModuleChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.GpioDeviceType deviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::blox::GpioDeviceType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pinsMask = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pinsmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 4 [(.nanopb_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.GpioModuleChannel.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioModuleChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.GpioModuleChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .blox.GpioDeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_devicetype(), target);
  }

  // uint32 pinsMask = 3 [(.nanopb_test) = {
  if (this->_internal_pinsmask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pinsmask(), target);
  }

  // uint32 width = 4 [(.nanopb_test) = {
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // string name = 5 [(.nanopb_test) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.GpioModuleChannel.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.GpioModuleChannel)
  return target;
}

size_t GpioModuleChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.GpioModuleChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5 [(.nanopb_test) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .blox.GpioDeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  // uint32 pinsMask = 3 [(.nanopb_test) = {
  if (this->_internal_pinsmask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pinsmask());
  }

  // uint32 width = 4 [(.nanopb_test) = {
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpioModuleChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpioModuleChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpioModuleChannel::GetClassData() const { return &_class_data_; }

void GpioModuleChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GpioModuleChannel *>(to)->MergeFrom(
      static_cast<const GpioModuleChannel &>(from));
}


void GpioModuleChannel::MergeFrom(const GpioModuleChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.GpioModuleChannel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
  if (from._internal_pinsmask() != 0) {
    _internal_set_pinsmask(from._internal_pinsmask());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpioModuleChannel::CopyFrom(const GpioModuleChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.GpioModuleChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioModuleChannel::IsInitialized() const {
  return true;
}

void GpioModuleChannel::InternalSwap(GpioModuleChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioModuleChannel, width_)
      + sizeof(GpioModuleChannel::width_)
      - PROTOBUF_FIELD_OFFSET(GpioModuleChannel, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioModuleChannel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_OneWireGpioModule_5ftest_2eproto_getter, &descriptor_table_OneWireGpioModule_5ftest_2eproto_once,
      file_level_metadata_OneWireGpioModule_5ftest_2eproto[0]);
}

// ===================================================================

class OneWireGpioModule::_Internal {
 public:
};

OneWireGpioModule::OneWireGpioModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.OneWireGpioModule)
}
OneWireGpioModule::OneWireGpioModule(const OneWireGpioModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&moduleposition_, &from.moduleposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&modulestatusclear_) -
    reinterpret_cast<char*>(&moduleposition_)) + sizeof(modulestatusclear_));
  // @@protoc_insertion_point(copy_constructor:blox.OneWireGpioModule)
}

inline void OneWireGpioModule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&moduleposition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modulestatusclear_) -
    reinterpret_cast<char*>(&moduleposition_)) + sizeof(modulestatusclear_));
}

OneWireGpioModule::~OneWireGpioModule() {
  // @@protoc_insertion_point(destructor:blox.OneWireGpioModule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OneWireGpioModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OneWireGpioModule::ArenaDtor(void* object) {
  OneWireGpioModule* _this = reinterpret_cast< OneWireGpioModule* >(object);
  (void)_this;
}
void OneWireGpioModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OneWireGpioModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneWireGpioModule::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.OneWireGpioModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  ::memset(&moduleposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modulestatusclear_) -
      reinterpret_cast<char*>(&moduleposition_)) + sizeof(modulestatusclear_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneWireGpioModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blox.GpioModuleChannel channels = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 modulePosition = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          moduleposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 moduleStatus = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          modulestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullUpDesired = 4 [(.nanopb_test) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pullupdesired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullUpStatus = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pullupstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullUpWhenActive = 6 [(.nanopb_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pullupwhenactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullUpWhenInactive = 7 [(.nanopb_test) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pullupwheninactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullDownDesired = 8 [(.nanopb_test) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pulldowndesired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullDownStatus = 9 [(.nanopb_test) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pulldownstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullDownWhenActive = 10 [(.nanopb_test) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pulldownwhenactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pullDownWhenInactive = 11 [(.nanopb_test) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pulldownwheninactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 overCurrent = 12 [(.nanopb_test) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          overcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 openLoad = 13 [(.nanopb_test) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          openload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useExternalPower = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          useexternalpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 moduleStatusClear = 32 [(.nanopb_test) = {
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          modulestatusclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneWireGpioModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.OneWireGpioModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.GpioModuleChannel channels = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  // uint32 modulePosition = 2 [(.nanopb_test) = {
  if (this->_internal_moduleposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moduleposition(), target);
  }

  // uint32 moduleStatus = 3 [(.nanopb_test) = {
  if (this->_internal_modulestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modulestatus(), target);
  }

  // uint32 pullUpDesired = 4 [(.nanopb_test) = {
  if (this->_internal_pullupdesired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pullupdesired(), target);
  }

  // uint32 pullUpStatus = 5 [(.nanopb_test) = {
  if (this->_internal_pullupstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pullupstatus(), target);
  }

  // uint32 pullUpWhenActive = 6 [(.nanopb_test) = {
  if (this->_internal_pullupwhenactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pullupwhenactive(), target);
  }

  // uint32 pullUpWhenInactive = 7 [(.nanopb_test) = {
  if (this->_internal_pullupwheninactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pullupwheninactive(), target);
  }

  // uint32 pullDownDesired = 8 [(.nanopb_test) = {
  if (this->_internal_pulldowndesired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pulldowndesired(), target);
  }

  // uint32 pullDownStatus = 9 [(.nanopb_test) = {
  if (this->_internal_pulldownstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pulldownstatus(), target);
  }

  // uint32 pullDownWhenActive = 10 [(.nanopb_test) = {
  if (this->_internal_pulldownwhenactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pulldownwhenactive(), target);
  }

  // uint32 pullDownWhenInactive = 11 [(.nanopb_test) = {
  if (this->_internal_pulldownwheninactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_pulldownwheninactive(), target);
  }

  // uint32 overCurrent = 12 [(.nanopb_test) = {
  if (this->_internal_overcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_overcurrent(), target);
  }

  // uint32 openLoad = 13 [(.nanopb_test) = {
  if (this->_internal_openload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_openload(), target);
  }

  // bool useExternalPower = 14;
  if (this->_internal_useexternalpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_useexternalpower(), target);
  }

  // uint32 moduleStatusClear = 32 [(.nanopb_test) = {
  if (this->_internal_modulestatusclear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_modulestatusclear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.OneWireGpioModule)
  return target;
}

size_t OneWireGpioModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.OneWireGpioModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.GpioModuleChannel channels = 1 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 modulePosition = 2 [(.nanopb_test) = {
  if (this->_internal_moduleposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moduleposition());
  }

  // uint32 moduleStatus = 3 [(.nanopb_test) = {
  if (this->_internal_modulestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_modulestatus());
  }

  // uint32 pullUpDesired = 4 [(.nanopb_test) = {
  if (this->_internal_pullupdesired() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pullupdesired());
  }

  // uint32 pullUpStatus = 5 [(.nanopb_test) = {
  if (this->_internal_pullupstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pullupstatus());
  }

  // uint32 pullUpWhenActive = 6 [(.nanopb_test) = {
  if (this->_internal_pullupwhenactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pullupwhenactive());
  }

  // uint32 pullUpWhenInactive = 7 [(.nanopb_test) = {
  if (this->_internal_pullupwheninactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pullupwheninactive());
  }

  // uint32 pullDownDesired = 8 [(.nanopb_test) = {
  if (this->_internal_pulldowndesired() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pulldowndesired());
  }

  // uint32 pullDownStatus = 9 [(.nanopb_test) = {
  if (this->_internal_pulldownstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pulldownstatus());
  }

  // uint32 pullDownWhenActive = 10 [(.nanopb_test) = {
  if (this->_internal_pulldownwhenactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pulldownwhenactive());
  }

  // uint32 pullDownWhenInactive = 11 [(.nanopb_test) = {
  if (this->_internal_pulldownwheninactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pulldownwheninactive());
  }

  // uint32 overCurrent = 12 [(.nanopb_test) = {
  if (this->_internal_overcurrent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_overcurrent());
  }

  // uint32 openLoad = 13 [(.nanopb_test) = {
  if (this->_internal_openload() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_openload());
  }

  // bool useExternalPower = 14;
  if (this->_internal_useexternalpower() != 0) {
    total_size += 1 + 1;
  }

  // uint32 moduleStatusClear = 32 [(.nanopb_test) = {
  if (this->_internal_modulestatusclear() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_modulestatusclear());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneWireGpioModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneWireGpioModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneWireGpioModule::GetClassData() const { return &_class_data_; }

void OneWireGpioModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OneWireGpioModule *>(to)->MergeFrom(
      static_cast<const OneWireGpioModule &>(from));
}


void OneWireGpioModule::MergeFrom(const OneWireGpioModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.OneWireGpioModule)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_moduleposition() != 0) {
    _internal_set_moduleposition(from._internal_moduleposition());
  }
  if (from._internal_modulestatus() != 0) {
    _internal_set_modulestatus(from._internal_modulestatus());
  }
  if (from._internal_pullupdesired() != 0) {
    _internal_set_pullupdesired(from._internal_pullupdesired());
  }
  if (from._internal_pullupstatus() != 0) {
    _internal_set_pullupstatus(from._internal_pullupstatus());
  }
  if (from._internal_pullupwhenactive() != 0) {
    _internal_set_pullupwhenactive(from._internal_pullupwhenactive());
  }
  if (from._internal_pullupwheninactive() != 0) {
    _internal_set_pullupwheninactive(from._internal_pullupwheninactive());
  }
  if (from._internal_pulldowndesired() != 0) {
    _internal_set_pulldowndesired(from._internal_pulldowndesired());
  }
  if (from._internal_pulldownstatus() != 0) {
    _internal_set_pulldownstatus(from._internal_pulldownstatus());
  }
  if (from._internal_pulldownwhenactive() != 0) {
    _internal_set_pulldownwhenactive(from._internal_pulldownwhenactive());
  }
  if (from._internal_pulldownwheninactive() != 0) {
    _internal_set_pulldownwheninactive(from._internal_pulldownwheninactive());
  }
  if (from._internal_overcurrent() != 0) {
    _internal_set_overcurrent(from._internal_overcurrent());
  }
  if (from._internal_openload() != 0) {
    _internal_set_openload(from._internal_openload());
  }
  if (from._internal_useexternalpower() != 0) {
    _internal_set_useexternalpower(from._internal_useexternalpower());
  }
  if (from._internal_modulestatusclear() != 0) {
    _internal_set_modulestatusclear(from._internal_modulestatusclear());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneWireGpioModule::CopyFrom(const OneWireGpioModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.OneWireGpioModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneWireGpioModule::IsInitialized() const {
  return true;
}

void OneWireGpioModule::InternalSwap(OneWireGpioModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneWireGpioModule, modulestatusclear_)
      + sizeof(OneWireGpioModule::modulestatusclear_)
      - PROTOBUF_FIELD_OFFSET(OneWireGpioModule, moduleposition_)>(
          reinterpret_cast<char*>(&moduleposition_),
          reinterpret_cast<char*>(&other->moduleposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OneWireGpioModule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_OneWireGpioModule_5ftest_2eproto_getter, &descriptor_table_OneWireGpioModule_5ftest_2eproto_once,
      file_level_metadata_OneWireGpioModule_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::GpioModuleChannel* Arena::CreateMaybeMessage< ::blox::GpioModuleChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::GpioModuleChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::OneWireGpioModule* Arena::CreateMaybeMessage< ::blox::OneWireGpioModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::OneWireGpioModule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
