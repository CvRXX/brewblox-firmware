// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SysInfo_test.proto

#include "SysInfo_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr Trace::Trace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(0)

  , id_(0u)
  , type_(0u){}
struct TraceDefaultTypeInternal {
  constexpr TraceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TraceDefaultTypeInternal() {}
  union {
    Trace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TraceDefaultTypeInternal _Trace_default_instance_;
constexpr SysInfo::SysInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trace_()
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocolversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , releasedate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocoldate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_(0)

  , command_(0)
{}
struct SysInfoDefaultTypeInternal {
  constexpr SysInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SysInfoDefaultTypeInternal() {}
  union {
    SysInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SysInfoDefaultTypeInternal _SysInfo_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SysInfo_5ftest_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SysInfo_5ftest_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SysInfo_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SysInfo_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::Trace, action_),
  PROTOBUF_FIELD_OFFSET(::blox::Trace, id_),
  PROTOBUF_FIELD_OFFSET(::blox::Trace, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, deviceid_),
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, version_),
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, protocolversion_),
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, releasedate_),
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, protocoldate_),
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, command_),
  PROTOBUF_FIELD_OFFSET(::blox::SysInfo, trace_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Trace)},
  { 8, -1, sizeof(::blox::SysInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_Trace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_SysInfo_default_instance_),
};

const char descriptor_table_protodef_SysInfo_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022SysInfo_test.proto\022\004blox\032\023brewblox_tes"
  "t.proto\032\021nanopb_test.proto\"\352\005\n\005Trace\022\"\n\006"
  "action\030\001 \001(\0162\022.blox.Trace.Action\022\021\n\002id\030\002"
  " \001(\rB\005\222\?\0028\020\022\023\n\004type\030\003 \001(\rB\005\222\?\0028\020\"\224\005\n\006Act"
  "ion\022\010\n\004NONE\020\000\022\017\n\013READ_OBJECT\020\001\022\020\n\014WRITE_"
  "OBJECT\020\002\022\021\n\rCREATE_OBJECT\020\003\022\021\n\rDELETE_OB"
  "JECT\020\004\022\027\n\023LIST_ACTIVE_OBJECTS\020\005\022\026\n\022READ_"
  "STORED_OBJECT\020\006\022\027\n\023LIST_STORED_OBJECTS\020\007"
  "\022\021\n\rCLEAR_OBJECTS\020\010\022\n\n\006REBOOT\020\t\022\021\n\rFACTO"
  "RY_RESET\020\n\022\033\n\027LIST_COMPATIBLE_OBJECTS\020\013\022"
  "\030\n\024DISCOVER_NEW_OBJECTS\020\014\022\024\n\020CONSTRUCT_O"
  "BJECT\020\024\022\023\n\017DESTRUCT_OBJECT\020\025\022\026\n\022STREAM_F"
  "ROM_OBJECT\020\026\022\024\n\020STREAM_TO_OBJECT\020\027\022\021\n\rUP"
  "DATE_OBJECT\020\030\022\022\n\016PERSIST_OBJECT\020\031\022\026\n\022LOA"
  "D_STORED_OBJECT\020\032\022\022\n\016UPDATE_OBJECTS\020\033\022\026\n"
  "\022UPDATE_CONNECTIONS\020\034\022\022\n\016UPDATE_DISPLAY\020"
  "e\022\020\n\014SYSTEM_TASKS\020f\022\027\n\023MANAGE_CONNECTIVI"
  "TY\020g\022\016\n\nMDNS_START\020h\022\020\n\014MDNS_PROCESS\020i\022\016"
  "\n\nHTTP_START\020j\022\r\n\tHTTP_STOP\020k\022\021\n\rHTTP_RE"
  "SPONSE\020l\022\020\n\014WIFI_CONNECT\020m\022\033\n\027FIRMWARE_U"
  "PDATE_STARTED\020n\"\236\004\n\007SysInfo\022(\n\010deviceId\030"
  "\001 \001(\014B\026\212\265\030\002(\001\222\?\002\010\014\222\?\002x\001\212\265\030\0028\001\022\034\n\007version"
  "\030\002 \001(\tB\013\212\265\030\002(\001\222\?\002\010\014\0220\n\010platform\030\003 \001(\0162\026."
  "blox.SysInfo.PlatformB\006\212\265\030\002(\001\022$\n\017protoco"
  "lVersion\030\007 \001(\tB\013\212\265\030\002(\001\222\?\002\010\014\022 \n\013releaseDa"
  "te\030\010 \001(\tB\013\212\265\030\002(\001\222\?\002\010\014\022!\n\014protocolDate\030\t "
  "\001(\tB\013\212\265\030\002(\001\222\?\002\010\014\022-\n\007command\030\n \001(\0162\034.blox"
  ".SysInfo.SysInfoCommand\022\'\n\005trace\030\013 \003(\0132\013"
  ".blox.TraceB\013\212\265\030\002(\001\222\?\002\020\n\"X\n\010Platform\022\024\n\020"
  "PLATFORM_UNKNOWN\020\000\022\020\n\014PLATFORM_GCC\020\003\022\023\n\017"
  "PLATFORM_PHOTON\020\006\022\017\n\013PLATFORM_P1\020\010\"s\n\016Sy"
  "sInfoCommand\022\020\n\014SYS_CMD_NONE\020\000\022\026\n\022SYS_CM"
  "D_TRACE_READ\020\001\022\030\n\024SYS_CMD_TRACE_RESUME\020\002"
  "\022\035\n\031SYS_CMD_TRACE_READ_RESUME\020\003:\007\212\265\030\003\030\200\002"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SysInfo_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SysInfo_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SysInfo_5ftest_2eproto = {
  false, false, 1368, descriptor_table_protodef_SysInfo_5ftest_2eproto, "SysInfo_test.proto", 
  &descriptor_table_SysInfo_5ftest_2eproto_once, descriptor_table_SysInfo_5ftest_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_SysInfo_5ftest_2eproto::offsets,
  file_level_metadata_SysInfo_5ftest_2eproto, file_level_enum_descriptors_SysInfo_5ftest_2eproto, file_level_service_descriptors_SysInfo_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_SysInfo_5ftest_2eproto_getter() {
  return &descriptor_table_SysInfo_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SysInfo_5ftest_2eproto(&descriptor_table_SysInfo_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trace_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SysInfo_5ftest_2eproto);
  return file_level_enum_descriptors_SysInfo_5ftest_2eproto[0];
}
bool Trace_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Trace_Action Trace::NONE;
constexpr Trace_Action Trace::READ_OBJECT;
constexpr Trace_Action Trace::WRITE_OBJECT;
constexpr Trace_Action Trace::CREATE_OBJECT;
constexpr Trace_Action Trace::DELETE_OBJECT;
constexpr Trace_Action Trace::LIST_ACTIVE_OBJECTS;
constexpr Trace_Action Trace::READ_STORED_OBJECT;
constexpr Trace_Action Trace::LIST_STORED_OBJECTS;
constexpr Trace_Action Trace::CLEAR_OBJECTS;
constexpr Trace_Action Trace::REBOOT;
constexpr Trace_Action Trace::FACTORY_RESET;
constexpr Trace_Action Trace::LIST_COMPATIBLE_OBJECTS;
constexpr Trace_Action Trace::DISCOVER_NEW_OBJECTS;
constexpr Trace_Action Trace::CONSTRUCT_OBJECT;
constexpr Trace_Action Trace::DESTRUCT_OBJECT;
constexpr Trace_Action Trace::STREAM_FROM_OBJECT;
constexpr Trace_Action Trace::STREAM_TO_OBJECT;
constexpr Trace_Action Trace::UPDATE_OBJECT;
constexpr Trace_Action Trace::PERSIST_OBJECT;
constexpr Trace_Action Trace::LOAD_STORED_OBJECT;
constexpr Trace_Action Trace::UPDATE_OBJECTS;
constexpr Trace_Action Trace::UPDATE_CONNECTIONS;
constexpr Trace_Action Trace::UPDATE_DISPLAY;
constexpr Trace_Action Trace::SYSTEM_TASKS;
constexpr Trace_Action Trace::MANAGE_CONNECTIVITY;
constexpr Trace_Action Trace::MDNS_START;
constexpr Trace_Action Trace::MDNS_PROCESS;
constexpr Trace_Action Trace::HTTP_START;
constexpr Trace_Action Trace::HTTP_STOP;
constexpr Trace_Action Trace::HTTP_RESPONSE;
constexpr Trace_Action Trace::WIFI_CONNECT;
constexpr Trace_Action Trace::FIRMWARE_UPDATE_STARTED;
constexpr Trace_Action Trace::Action_MIN;
constexpr Trace_Action Trace::Action_MAX;
constexpr int Trace::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SysInfo_Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SysInfo_5ftest_2eproto);
  return file_level_enum_descriptors_SysInfo_5ftest_2eproto[1];
}
bool SysInfo_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 6:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SysInfo_Platform SysInfo::PLATFORM_UNKNOWN;
constexpr SysInfo_Platform SysInfo::PLATFORM_GCC;
constexpr SysInfo_Platform SysInfo::PLATFORM_PHOTON;
constexpr SysInfo_Platform SysInfo::PLATFORM_P1;
constexpr SysInfo_Platform SysInfo::Platform_MIN;
constexpr SysInfo_Platform SysInfo::Platform_MAX;
constexpr int SysInfo::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SysInfo_SysInfoCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SysInfo_5ftest_2eproto);
  return file_level_enum_descriptors_SysInfo_5ftest_2eproto[2];
}
bool SysInfo_SysInfoCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SysInfo_SysInfoCommand SysInfo::SYS_CMD_NONE;
constexpr SysInfo_SysInfoCommand SysInfo::SYS_CMD_TRACE_READ;
constexpr SysInfo_SysInfoCommand SysInfo::SYS_CMD_TRACE_RESUME;
constexpr SysInfo_SysInfoCommand SysInfo::SYS_CMD_TRACE_READ_RESUME;
constexpr SysInfo_SysInfoCommand SysInfo::SysInfoCommand_MIN;
constexpr SysInfo_SysInfoCommand SysInfo::SysInfoCommand_MAX;
constexpr int SysInfo::SysInfoCommand_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Trace::_Internal {
 public:
};

Trace::Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.Trace)
}
Trace::Trace(const Trace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&action_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:blox.Trace)
}

inline void Trace::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&action_)) + sizeof(type_));
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:blox.Trace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Trace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Trace::ArenaDtor(void* object) {
  Trace* _this = reinterpret_cast< Trace* >(object);
  (void)_this;
}
void Trace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&action_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox.Trace.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::blox::Trace_Action>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3 [(.nanopb_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.Trace.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // uint32 id = 2 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // uint32 type = 3 [(.nanopb_test) = {
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Trace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blox.Trace.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 id = 2 [(.nanopb_test) = {
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 type = 3 [(.nanopb_test) = {
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trace::GetClassData() const { return &_class_data_; }

void Trace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Trace *>(to)->MergeFrom(
      static_cast<const Trace &>(from));
}


void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  return true;
}

void Trace::InternalSwap(Trace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trace, type_)
      + sizeof(Trace::type_)
      - PROTOBUF_FIELD_OFFSET(Trace, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SysInfo_5ftest_2eproto_getter, &descriptor_table_SysInfo_5ftest_2eproto_once,
      file_level_metadata_SysInfo_5ftest_2eproto[0]);
}

// ===================================================================

class SysInfo::_Internal {
 public:
};

SysInfo::SysInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trace_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.SysInfo)
}
SysInfo::SysInfo(const SysInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trace_(from.trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  protocolversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocolversion().empty()) {
    protocolversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocolversion(), 
      GetArenaForAllocation());
  }
  releasedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_releasedate().empty()) {
    releasedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_releasedate(), 
      GetArenaForAllocation());
  }
  protocoldate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocoldate().empty()) {
    protocoldate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocoldate(), 
      GetArenaForAllocation());
  }
  ::memcpy(&platform_, &from.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:blox.SysInfo)
}

inline void SysInfo::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
protocolversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
releasedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
protocoldate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&platform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(command_));
}

SysInfo::~SysInfo() {
  // @@protoc_insertion_point(destructor:blox.SysInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SysInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocolversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  releasedate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocoldate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SysInfo::ArenaDtor(void* object) {
  SysInfo* _this = reinterpret_cast< SysInfo* >(object);
  (void)_this;
}
void SysInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SysInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SysInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.SysInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_.Clear();
  deviceid_.ClearToEmpty();
  version_.ClearToEmpty();
  protocolversion_.ClearToEmpty();
  releasedate_.ClearToEmpty();
  protocoldate_.ClearToEmpty();
  ::memset(&platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&platform_)) + sizeof(command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes deviceId = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.SysInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.SysInfo.Platform platform = 3 [(.brewblox_test) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::blox::SysInfo_Platform>(val));
        } else goto handle_unusual;
        continue;
      // string protocolVersion = 7 [(.nanopb_test) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_protocolversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.SysInfo.protocolVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string releaseDate = 8 [(.nanopb_test) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_releasedate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.SysInfo.releaseDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocolDate = 9 [(.nanopb_test) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_protocoldate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.SysInfo.protocolDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.SysInfo.SysInfoCommand command = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::blox::SysInfo_SysInfoCommand>(val));
        } else goto handle_unusual;
        continue;
      // repeated .blox.Trace trace = 11 [(.nanopb_test) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SysInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.SysInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1 [(.nanopb_test) = {
  if (!this->_internal_deviceid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // string version = 2 [(.nanopb_test) = {
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.SysInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // .blox.SysInfo.Platform platform = 3 [(.brewblox_test) = {
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_platform(), target);
  }

  // string protocolVersion = 7 [(.nanopb_test) = {
  if (!this->_internal_protocolversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocolversion().data(), static_cast<int>(this->_internal_protocolversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.SysInfo.protocolVersion");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_protocolversion(), target);
  }

  // string releaseDate = 8 [(.nanopb_test) = {
  if (!this->_internal_releasedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_releasedate().data(), static_cast<int>(this->_internal_releasedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.SysInfo.releaseDate");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_releasedate(), target);
  }

  // string protocolDate = 9 [(.nanopb_test) = {
  if (!this->_internal_protocoldate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocoldate().data(), static_cast<int>(this->_internal_protocoldate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.SysInfo.protocolDate");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_protocoldate(), target);
  }

  // .blox.SysInfo.SysInfoCommand command = 10;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_command(), target);
  }

  // repeated .blox.Trace trace = 11 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_trace(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.SysInfo)
  return target;
}

size_t SysInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.SysInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.Trace trace = 11 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_trace_size();
  for (const auto& msg : this->trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes deviceId = 1 [(.nanopb_test) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceid());
  }

  // string version = 2 [(.nanopb_test) = {
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string protocolVersion = 7 [(.nanopb_test) = {
  if (!this->_internal_protocolversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocolversion());
  }

  // string releaseDate = 8 [(.nanopb_test) = {
  if (!this->_internal_releasedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_releasedate());
  }

  // string protocolDate = 9 [(.nanopb_test) = {
  if (!this->_internal_protocoldate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocoldate());
  }

  // .blox.SysInfo.Platform platform = 3 [(.brewblox_test) = {
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
  }

  // .blox.SysInfo.SysInfoCommand command = 10;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SysInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysInfo::GetClassData() const { return &_class_data_; }

void SysInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SysInfo *>(to)->MergeFrom(
      static_cast<const SysInfo &>(from));
}


void SysInfo::MergeFrom(const SysInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.SysInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_.MergeFrom(from.trace_);
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_protocolversion().empty()) {
    _internal_set_protocolversion(from._internal_protocolversion());
  }
  if (!from._internal_releasedate().empty()) {
    _internal_set_releasedate(from._internal_releasedate());
  }
  if (!from._internal_protocoldate().empty()) {
    _internal_set_protocoldate(from._internal_protocoldate());
  }
  if (from._internal_platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysInfo::CopyFrom(const SysInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.SysInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysInfo::IsInitialized() const {
  return true;
}

void SysInfo::InternalSwap(SysInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  trace_.InternalSwap(&other->trace_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, GetArenaForAllocation(),
      &other->deviceid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocolversion_, GetArenaForAllocation(),
      &other->protocolversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &releasedate_, GetArenaForAllocation(),
      &other->releasedate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocoldate_, GetArenaForAllocation(),
      &other->protocoldate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysInfo, command_)
      + sizeof(SysInfo::command_)
      - PROTOBUF_FIELD_OFFSET(SysInfo, platform_)>(
          reinterpret_cast<char*>(&platform_),
          reinterpret_cast<char*>(&other->platform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SysInfo_5ftest_2eproto_getter, &descriptor_table_SysInfo_5ftest_2eproto_once,
      file_level_metadata_SysInfo_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::Trace* Arena::CreateMaybeMessage< ::blox::Trace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::Trace >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::SysInfo* Arena::CreateMaybeMessage< ::blox::SysInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::SysInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
