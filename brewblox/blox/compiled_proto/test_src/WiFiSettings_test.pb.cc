// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WiFiSettings_test.proto

#include "WiFiSettings_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr WiFiSettings::WiFiSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , security_(0)

  , cipher_(0)

  , signal_(0){}
struct WiFiSettingsDefaultTypeInternal {
  constexpr WiFiSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WiFiSettingsDefaultTypeInternal() {}
  union {
    WiFiSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WiFiSettingsDefaultTypeInternal _WiFiSettings_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_WiFiSettings_5ftest_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_WiFiSettings_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_WiFiSettings_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_WiFiSettings_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::WiFiSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::WiFiSettings, ssid_),
  PROTOBUF_FIELD_OFFSET(::blox::WiFiSettings, password_),
  PROTOBUF_FIELD_OFFSET(::blox::WiFiSettings, security_),
  PROTOBUF_FIELD_OFFSET(::blox::WiFiSettings, cipher_),
  PROTOBUF_FIELD_OFFSET(::blox::WiFiSettings, signal_),
  PROTOBUF_FIELD_OFFSET(::blox::WiFiSettings, ip_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::WiFiSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_WiFiSettings_default_instance_),
};

const char descriptor_table_protodef_WiFiSettings_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027WiFiSettings_test.proto\022\004blox\032\023brewblo"
  "x_test.proto\032\021nanopb_test.proto\"\205\004\n\014WiFi"
  "Settings\022\023\n\004ssid\030\001 \001(\tB\005\222\?\002\010!\022\027\n\010passwor"
  "d\030\002 \001(\tB\005\222\?\002\010@\0221\n\010security\030\003 \001(\0162\037.blox."
  "WiFiSettings.WlanSecurity\022-\n\006cipher\030\004 \001("
  "\0162\035.blox.WiFiSettings.WlanCipher\022!\n\006sign"
  "al\030\005 \001(\005B\021\212\265\030\002(\001\212\265\030\0020\001\222\?\0028\010\022\034\n\002ip\030\006 \001(\tB"
  "\020\212\265\030\002(\001\222\?\002\010\020\222\?\002x\001\"\253\001\n\014WlanSecurity\022\022\n\016WL"
  "AN_SEC_UNSEC\020\000\022\020\n\014WLAN_SEC_WEP\020\001\022\020\n\014WLAN"
  "_SEC_WPA\020\002\022\021\n\rWLAN_SEC_WPA2\020\003\022\033\n\027WLAN_SE"
  "C_WPA_ENTERPRISE\020\004\022\034\n\030WLAN_SEC_WPA2_ENTE"
  "RPRISE\020\005\022\025\n\020WLAN_SEC_NOT_SET\020\377\001\"m\n\nWlanC"
  "ipher\022\027\n\023WLAN_CIPHER_NOT_SET\020\000\022\023\n\017WLAN_C"
  "IPHER_AES\020\001\022\024\n\020WLAN_CIPHER_TKIP\020\002\022\033\n\027WLA"
  "N_CIPHER_AES_OR_TKIP\020\003:\007\212\265\030\003\030\270\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_WiFiSettings_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_WiFiSettings_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WiFiSettings_5ftest_2eproto = {
  false, false, 599, descriptor_table_protodef_WiFiSettings_5ftest_2eproto, "WiFiSettings_test.proto", 
  &descriptor_table_WiFiSettings_5ftest_2eproto_once, descriptor_table_WiFiSettings_5ftest_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_WiFiSettings_5ftest_2eproto::offsets,
  file_level_metadata_WiFiSettings_5ftest_2eproto, file_level_enum_descriptors_WiFiSettings_5ftest_2eproto, file_level_service_descriptors_WiFiSettings_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_WiFiSettings_5ftest_2eproto_getter() {
  return &descriptor_table_WiFiSettings_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_WiFiSettings_5ftest_2eproto(&descriptor_table_WiFiSettings_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiFiSettings_WlanSecurity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WiFiSettings_5ftest_2eproto);
  return file_level_enum_descriptors_WiFiSettings_5ftest_2eproto[0];
}
bool WiFiSettings_WlanSecurity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 255:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WiFiSettings_WlanSecurity WiFiSettings::WLAN_SEC_UNSEC;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WLAN_SEC_WEP;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WLAN_SEC_WPA;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WLAN_SEC_WPA2;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WLAN_SEC_WPA_ENTERPRISE;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WLAN_SEC_WPA2_ENTERPRISE;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WLAN_SEC_NOT_SET;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WlanSecurity_MIN;
constexpr WiFiSettings_WlanSecurity WiFiSettings::WlanSecurity_MAX;
constexpr int WiFiSettings::WlanSecurity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiFiSettings_WlanCipher_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WiFiSettings_5ftest_2eproto);
  return file_level_enum_descriptors_WiFiSettings_5ftest_2eproto[1];
}
bool WiFiSettings_WlanCipher_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WiFiSettings_WlanCipher WiFiSettings::WLAN_CIPHER_NOT_SET;
constexpr WiFiSettings_WlanCipher WiFiSettings::WLAN_CIPHER_AES;
constexpr WiFiSettings_WlanCipher WiFiSettings::WLAN_CIPHER_TKIP;
constexpr WiFiSettings_WlanCipher WiFiSettings::WLAN_CIPHER_AES_OR_TKIP;
constexpr WiFiSettings_WlanCipher WiFiSettings::WlanCipher_MIN;
constexpr WiFiSettings_WlanCipher WiFiSettings::WlanCipher_MAX;
constexpr int WiFiSettings::WlanCipher_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class WiFiSettings::_Internal {
 public:
};

WiFiSettings::WiFiSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.WiFiSettings)
}
WiFiSettings::WiFiSettings(const WiFiSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&security_, &from.security_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_) -
    reinterpret_cast<char*>(&security_)) + sizeof(signal_));
  // @@protoc_insertion_point(copy_constructor:blox.WiFiSettings)
}

inline void WiFiSettings::SharedCtor() {
ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signal_) -
    reinterpret_cast<char*>(&security_)) + sizeof(signal_));
}

WiFiSettings::~WiFiSettings() {
  // @@protoc_insertion_point(destructor:blox.WiFiSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WiFiSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WiFiSettings::ArenaDtor(void* object) {
  WiFiSettings* _this = reinterpret_cast< WiFiSettings* >(object);
  (void)_this;
}
void WiFiSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WiFiSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WiFiSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.WiFiSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  password_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&security_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_) -
      reinterpret_cast<char*>(&security_)) + sizeof(signal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WiFiSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1 [(.nanopb_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.WiFiSettings.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2 [(.nanopb_test) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.WiFiSettings.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.WiFiSettings.WlanSecurity security = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_security(static_cast<::blox::WiFiSettings_WlanSecurity>(val));
        } else goto handle_unusual;
        continue;
      // .blox.WiFiSettings.WlanCipher cipher = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cipher(static_cast<::blox::WiFiSettings_WlanCipher>(val));
        } else goto handle_unusual;
        continue;
      // int32 signal = 5 [(.nanopb_test) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 6 [(.nanopb_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blox.WiFiSettings.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WiFiSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.WiFiSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1 [(.nanopb_test) = {
  if (!this->_internal_ssid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.WiFiSettings.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string password = 2 [(.nanopb_test) = {
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.WiFiSettings.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .blox.WiFiSettings.WlanSecurity security = 3;
  if (this->_internal_security() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_security(), target);
  }

  // .blox.WiFiSettings.WlanCipher cipher = 4;
  if (this->_internal_cipher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cipher(), target);
  }

  // int32 signal = 5 [(.nanopb_test) = {
  if (this->_internal_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_signal(), target);
  }

  // string ip = 6 [(.nanopb_test) = {
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blox.WiFiSettings.ip");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.WiFiSettings)
  return target;
}

size_t WiFiSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.WiFiSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1 [(.nanopb_test) = {
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string password = 2 [(.nanopb_test) = {
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string ip = 6 [(.nanopb_test) = {
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .blox.WiFiSettings.WlanSecurity security = 3;
  if (this->_internal_security() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_security());
  }

  // .blox.WiFiSettings.WlanCipher cipher = 4;
  if (this->_internal_cipher() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cipher());
  }

  // int32 signal = 5 [(.nanopb_test) = {
  if (this->_internal_signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_signal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WiFiSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WiFiSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WiFiSettings::GetClassData() const { return &_class_data_; }

void WiFiSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WiFiSettings *>(to)->MergeFrom(
      static_cast<const WiFiSettings &>(from));
}


void WiFiSettings::MergeFrom(const WiFiSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.WiFiSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_security() != 0) {
    _internal_set_security(from._internal_security());
  }
  if (from._internal_cipher() != 0) {
    _internal_set_cipher(from._internal_cipher());
  }
  if (from._internal_signal() != 0) {
    _internal_set_signal(from._internal_signal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WiFiSettings::CopyFrom(const WiFiSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.WiFiSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WiFiSettings::IsInitialized() const {
  return true;
}

void WiFiSettings::InternalSwap(WiFiSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ssid_, GetArenaForAllocation(),
      &other->ssid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, GetArenaForAllocation(),
      &other->password_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WiFiSettings, signal_)
      + sizeof(WiFiSettings::signal_)
      - PROTOBUF_FIELD_OFFSET(WiFiSettings, security_)>(
          reinterpret_cast<char*>(&security_),
          reinterpret_cast<char*>(&other->security_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WiFiSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_WiFiSettings_5ftest_2eproto_getter, &descriptor_table_WiFiSettings_5ftest_2eproto_once,
      file_level_metadata_WiFiSettings_5ftest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::WiFiSettings* Arena::CreateMaybeMessage< ::blox::WiFiSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::WiFiSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
