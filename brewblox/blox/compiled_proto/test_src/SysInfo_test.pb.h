// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SysInfo_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SysInfo_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SysInfo_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SysInfo_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SysInfo_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SysInfo_5ftest_2eproto;
namespace blox_test {
namespace SysInfo {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Trace;
class TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
}  // namespace SysInfo
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> ::blox_test::SysInfo::Block* Arena::CreateMaybeMessage<::blox_test::SysInfo::Block>(Arena*);
template<> ::blox_test::SysInfo::Trace* Arena::CreateMaybeMessage<::blox_test::SysInfo::Trace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox_test {
namespace SysInfo {

enum Trace_Action : int {
  Trace_Action_NONE = 0,
  Trace_Action_READ_OBJECT = 1,
  Trace_Action_WRITE_OBJECT = 2,
  Trace_Action_CREATE_OBJECT = 3,
  Trace_Action_DELETE_OBJECT = 4,
  Trace_Action_LIST_ACTIVE_OBJECTS = 5,
  Trace_Action_READ_STORED_OBJECT = 6,
  Trace_Action_LIST_STORED_OBJECTS = 7,
  Trace_Action_CLEAR_OBJECTS = 8,
  Trace_Action_REBOOT = 9,
  Trace_Action_FACTORY_RESET = 10,
  Trace_Action_LIST_COMPATIBLE_OBJECTS = 11,
  Trace_Action_DISCOVER_NEW_OBJECTS = 12,
  Trace_Action_CONSTRUCT_OBJECT = 20,
  Trace_Action_DESTRUCT_OBJECT = 21,
  Trace_Action_STREAM_FROM_OBJECT = 22,
  Trace_Action_STREAM_TO_OBJECT = 23,
  Trace_Action_UPDATE_OBJECT = 24,
  Trace_Action_PERSIST_OBJECT = 25,
  Trace_Action_LOAD_STORED_OBJECT = 26,
  Trace_Action_UPDATE_OBJECTS = 27,
  Trace_Action_UPDATE_CONNECTIONS = 28,
  Trace_Action_UPDATE_DISPLAY = 101,
  Trace_Action_SYSTEM_TASKS = 102,
  Trace_Action_MANAGE_CONNECTIVITY = 103,
  Trace_Action_MDNS_START = 104,
  Trace_Action_MDNS_PROCESS = 105,
  Trace_Action_HTTP_START = 106,
  Trace_Action_HTTP_STOP = 107,
  Trace_Action_HTTP_RESPONSE = 108,
  Trace_Action_WIFI_CONNECT = 109,
  Trace_Action_FIRMWARE_UPDATE_STARTED = 110,
  Trace_Action_Trace_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Trace_Action_Trace_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Trace_Action_IsValid(int value);
constexpr Trace_Action Trace_Action_Action_MIN = Trace_Action_NONE;
constexpr Trace_Action Trace_Action_Action_MAX = Trace_Action_FIRMWARE_UPDATE_STARTED;
constexpr int Trace_Action_Action_ARRAYSIZE = Trace_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trace_Action_descriptor();
template<typename T>
inline const std::string& Trace_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Trace_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Trace_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Trace_Action_descriptor(), enum_t_value);
}
inline bool Trace_Action_Parse(
    const std::string& name, Trace_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Trace_Action>(
    Trace_Action_descriptor(), name, value);
}
enum Platform : int {
  PLATFORM_UNKNOWN = 0,
  PLATFORM_GCC = 3,
  PLATFORM_PHOTON = 6,
  PLATFORM_P1 = 8,
  Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Platform_IsValid(int value);
constexpr Platform Platform_MIN = PLATFORM_UNKNOWN;
constexpr Platform Platform_MAX = PLATFORM_P1;
constexpr int Platform_ARRAYSIZE = Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor();
template<typename T>
inline const std::string& Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Platform_descriptor(), enum_t_value);
}
inline bool Platform_Parse(
    const std::string& name, Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Platform>(
    Platform_descriptor(), name, value);
}
enum Command : int {
  SYS_CMD_NONE = 0,
  SYS_CMD_TRACE_READ = 1,
  SYS_CMD_TRACE_RESUME = 2,
  SYS_CMD_TRACE_READ_RESUME = 3,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Command_IsValid(int value);
constexpr Command Command_MIN = SYS_CMD_NONE;
constexpr Command Command_MAX = SYS_CMD_TRACE_READ_RESUME;
constexpr int Command_ARRAYSIZE = Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor();
template<typename T>
inline const std::string& Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_descriptor(), enum_t_value);
}
inline bool Command_Parse(
    const std::string& name, Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
// ===================================================================

class Trace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.SysInfo.Trace) */ {
 public:
  inline Trace() : Trace(nullptr) {};
  virtual ~Trace();

  Trace(const Trace& from);
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trace& operator=(Trace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }
  inline void Swap(Trace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trace* New() const final {
    return CreateMaybeMessage<Trace>(nullptr);
  }

  Trace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trace& from);
  void MergeFrom(const Trace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.SysInfo.Trace";
  }
  protected:
  explicit Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SysInfo_5ftest_2eproto);
    return ::descriptor_table_SysInfo_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trace_Action Action;
  static constexpr Action NONE =
    Trace_Action_NONE;
  static constexpr Action READ_OBJECT =
    Trace_Action_READ_OBJECT;
  static constexpr Action WRITE_OBJECT =
    Trace_Action_WRITE_OBJECT;
  static constexpr Action CREATE_OBJECT =
    Trace_Action_CREATE_OBJECT;
  static constexpr Action DELETE_OBJECT =
    Trace_Action_DELETE_OBJECT;
  static constexpr Action LIST_ACTIVE_OBJECTS =
    Trace_Action_LIST_ACTIVE_OBJECTS;
  static constexpr Action READ_STORED_OBJECT =
    Trace_Action_READ_STORED_OBJECT;
  static constexpr Action LIST_STORED_OBJECTS =
    Trace_Action_LIST_STORED_OBJECTS;
  static constexpr Action CLEAR_OBJECTS =
    Trace_Action_CLEAR_OBJECTS;
  static constexpr Action REBOOT =
    Trace_Action_REBOOT;
  static constexpr Action FACTORY_RESET =
    Trace_Action_FACTORY_RESET;
  static constexpr Action LIST_COMPATIBLE_OBJECTS =
    Trace_Action_LIST_COMPATIBLE_OBJECTS;
  static constexpr Action DISCOVER_NEW_OBJECTS =
    Trace_Action_DISCOVER_NEW_OBJECTS;
  static constexpr Action CONSTRUCT_OBJECT =
    Trace_Action_CONSTRUCT_OBJECT;
  static constexpr Action DESTRUCT_OBJECT =
    Trace_Action_DESTRUCT_OBJECT;
  static constexpr Action STREAM_FROM_OBJECT =
    Trace_Action_STREAM_FROM_OBJECT;
  static constexpr Action STREAM_TO_OBJECT =
    Trace_Action_STREAM_TO_OBJECT;
  static constexpr Action UPDATE_OBJECT =
    Trace_Action_UPDATE_OBJECT;
  static constexpr Action PERSIST_OBJECT =
    Trace_Action_PERSIST_OBJECT;
  static constexpr Action LOAD_STORED_OBJECT =
    Trace_Action_LOAD_STORED_OBJECT;
  static constexpr Action UPDATE_OBJECTS =
    Trace_Action_UPDATE_OBJECTS;
  static constexpr Action UPDATE_CONNECTIONS =
    Trace_Action_UPDATE_CONNECTIONS;
  static constexpr Action UPDATE_DISPLAY =
    Trace_Action_UPDATE_DISPLAY;
  static constexpr Action SYSTEM_TASKS =
    Trace_Action_SYSTEM_TASKS;
  static constexpr Action MANAGE_CONNECTIVITY =
    Trace_Action_MANAGE_CONNECTIVITY;
  static constexpr Action MDNS_START =
    Trace_Action_MDNS_START;
  static constexpr Action MDNS_PROCESS =
    Trace_Action_MDNS_PROCESS;
  static constexpr Action HTTP_START =
    Trace_Action_HTTP_START;
  static constexpr Action HTTP_STOP =
    Trace_Action_HTTP_STOP;
  static constexpr Action HTTP_RESPONSE =
    Trace_Action_HTTP_RESPONSE;
  static constexpr Action WIFI_CONNECT =
    Trace_Action_WIFI_CONNECT;
  static constexpr Action FIRMWARE_UPDATE_STARTED =
    Trace_Action_FIRMWARE_UPDATE_STARTED;
  static inline bool Action_IsValid(int value) {
    return Trace_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    Trace_Action_Action_MIN;
  static constexpr Action Action_MAX =
    Trace_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    Trace_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return Trace_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return Trace_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return Trace_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // .blox_test.SysInfo.Trace.Action action = 1;
  void clear_action();
  ::blox_test::SysInfo::Trace_Action action() const;
  void set_action(::blox_test::SysInfo::Trace_Action value);
  private:
  ::blox_test::SysInfo::Trace_Action _internal_action() const;
  void _internal_set_action(::blox_test::SysInfo::Trace_Action value);
  public:

  // uint32 id = 2 [(.nanopb) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 3 [(.nanopb) = {
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.SysInfo.Trace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SysInfo_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox_test.SysInfo.Block) */ {
 public:
  inline Block() : Block(nullptr) {};
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox_test.SysInfo.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SysInfo_5ftest_2eproto);
    return ::descriptor_table_SysInfo_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceFieldNumber = 11,
    kDeviceIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kProtocolVersionFieldNumber = 7,
    kReleaseDateFieldNumber = 8,
    kProtocolDateFieldNumber = 9,
    kPlatformFieldNumber = 3,
    kCommandFieldNumber = 10,
  };
  // repeated .blox_test.SysInfo.Trace trace = 11 [(.nanopb) = {
  int trace_size() const;
  private:
  int _internal_trace_size() const;
  public:
  void clear_trace();
  ::blox_test::SysInfo::Trace* mutable_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::SysInfo::Trace >*
      mutable_trace();
  private:
  const ::blox_test::SysInfo::Trace& _internal_trace(int index) const;
  ::blox_test::SysInfo::Trace* _internal_add_trace();
  public:
  const ::blox_test::SysInfo::Trace& trace(int index) const;
  ::blox_test::SysInfo::Trace* add_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::SysInfo::Trace >&
      trace() const;

  // bytes deviceId = 1 [(.nanopb) = {
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deviceid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deviceid(
      std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string version = 2 [(.nanopb) = {
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string protocolVersion = 7 [(.nanopb) = {
  void clear_protocolversion();
  const std::string& protocolversion() const;
  void set_protocolversion(const std::string& value);
  void set_protocolversion(std::string&& value);
  void set_protocolversion(const char* value);
  void set_protocolversion(const char* value, size_t size);
  std::string* mutable_protocolversion();
  std::string* release_protocolversion();
  void set_allocated_protocolversion(std::string* protocolversion);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocolversion();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocolversion(
      std::string* protocolversion);
  private:
  const std::string& _internal_protocolversion() const;
  void _internal_set_protocolversion(const std::string& value);
  std::string* _internal_mutable_protocolversion();
  public:

  // string releaseDate = 8 [(.nanopb) = {
  void clear_releasedate();
  const std::string& releasedate() const;
  void set_releasedate(const std::string& value);
  void set_releasedate(std::string&& value);
  void set_releasedate(const char* value);
  void set_releasedate(const char* value, size_t size);
  std::string* mutable_releasedate();
  std::string* release_releasedate();
  void set_allocated_releasedate(std::string* releasedate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_releasedate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_releasedate(
      std::string* releasedate);
  private:
  const std::string& _internal_releasedate() const;
  void _internal_set_releasedate(const std::string& value);
  std::string* _internal_mutable_releasedate();
  public:

  // string protocolDate = 9 [(.nanopb) = {
  void clear_protocoldate();
  const std::string& protocoldate() const;
  void set_protocoldate(const std::string& value);
  void set_protocoldate(std::string&& value);
  void set_protocoldate(const char* value);
  void set_protocoldate(const char* value, size_t size);
  std::string* mutable_protocoldate();
  std::string* release_protocoldate();
  void set_allocated_protocoldate(std::string* protocoldate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocoldate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocoldate(
      std::string* protocoldate);
  private:
  const std::string& _internal_protocoldate() const;
  void _internal_set_protocoldate(const std::string& value);
  std::string* _internal_mutable_protocoldate();
  public:

  // .blox_test.SysInfo.Platform platform = 3 [(.brewblox.field) = {
  void clear_platform();
  ::blox_test::SysInfo::Platform platform() const;
  void set_platform(::blox_test::SysInfo::Platform value);
  private:
  ::blox_test::SysInfo::Platform _internal_platform() const;
  void _internal_set_platform(::blox_test::SysInfo::Platform value);
  public:

  // .blox_test.SysInfo.Command command = 10;
  void clear_command();
  ::blox_test::SysInfo::Command command() const;
  void set_command(::blox_test::SysInfo::Command value);
  private:
  ::blox_test::SysInfo::Command _internal_command() const;
  void _internal_set_command(::blox_test::SysInfo::Command value);
  public:

  // @@protoc_insertion_point(class_scope:blox_test.SysInfo.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::SysInfo::Trace > trace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocolversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr releasedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocoldate_;
  int platform_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SysInfo_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trace

// .blox_test.SysInfo.Trace.Action action = 1;
inline void Trace::clear_action() {
  action_ = 0;
}
inline ::blox_test::SysInfo::Trace_Action Trace::_internal_action() const {
  return static_cast< ::blox_test::SysInfo::Trace_Action >(action_);
}
inline ::blox_test::SysInfo::Trace_Action Trace::action() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Trace.action)
  return _internal_action();
}
inline void Trace::_internal_set_action(::blox_test::SysInfo::Trace_Action value) {
  
  action_ = value;
}
inline void Trace::set_action(::blox_test::SysInfo::Trace_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Trace.action)
}

// uint32 id = 2 [(.nanopb) = {
inline void Trace::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trace::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trace::id() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Trace.id)
  return _internal_id();
}
inline void Trace::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Trace::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Trace.id)
}

// uint32 type = 3 [(.nanopb) = {
inline void Trace::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trace::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trace::type() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Trace.type)
  return _internal_type();
}
inline void Trace::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Trace::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Trace.type)
}

// -------------------------------------------------------------------

// Block

// bytes deviceId = 1 [(.nanopb) = {
inline void Block::clear_deviceid() {
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::deviceid() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.deviceId)
  return _internal_deviceid();
}
inline void Block::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Block.deviceId)
}
inline std::string* Block::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:blox_test.SysInfo.Block.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& Block::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void Block::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.SysInfo.Block.deviceId)
}
inline void Block::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.SysInfo.Block.deviceId)
}
inline void Block::set_deviceid(const void* value,
    size_t size) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.SysInfo.Block.deviceId)
}
inline std::string* Block::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_deviceid() {
  // @@protoc_insertion_point(field_release:blox_test.SysInfo.Block.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.SysInfo.Block.deviceId)
}
inline std::string* Block::unsafe_arena_release_deviceid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.SysInfo.Block.deviceId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deviceid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_deviceid(
    std::string* deviceid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deviceid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.SysInfo.Block.deviceId)
}

// string version = 2 [(.nanopb) = {
inline void Block::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::version() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.version)
  return _internal_version();
}
inline void Block::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Block.version)
}
inline std::string* Block::mutable_version() {
  // @@protoc_insertion_point(field_mutable:blox_test.SysInfo.Block.version)
  return _internal_mutable_version();
}
inline const std::string& Block::_internal_version() const {
  return version_.Get();
}
inline void Block::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.SysInfo.Block.version)
}
inline void Block::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.SysInfo.Block.version)
}
inline void Block::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.SysInfo.Block.version)
}
inline std::string* Block::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_version() {
  // @@protoc_insertion_point(field_release:blox_test.SysInfo.Block.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.SysInfo.Block.version)
}
inline std::string* Block::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.SysInfo.Block.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.SysInfo.Block.version)
}

// .blox_test.SysInfo.Platform platform = 3 [(.brewblox.field) = {
inline void Block::clear_platform() {
  platform_ = 0;
}
inline ::blox_test::SysInfo::Platform Block::_internal_platform() const {
  return static_cast< ::blox_test::SysInfo::Platform >(platform_);
}
inline ::blox_test::SysInfo::Platform Block::platform() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.platform)
  return _internal_platform();
}
inline void Block::_internal_set_platform(::blox_test::SysInfo::Platform value) {
  
  platform_ = value;
}
inline void Block::set_platform(::blox_test::SysInfo::Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Block.platform)
}

// string protocolVersion = 7 [(.nanopb) = {
inline void Block::clear_protocolversion() {
  protocolversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::protocolversion() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.protocolVersion)
  return _internal_protocolversion();
}
inline void Block::set_protocolversion(const std::string& value) {
  _internal_set_protocolversion(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Block.protocolVersion)
}
inline std::string* Block::mutable_protocolversion() {
  // @@protoc_insertion_point(field_mutable:blox_test.SysInfo.Block.protocolVersion)
  return _internal_mutable_protocolversion();
}
inline const std::string& Block::_internal_protocolversion() const {
  return protocolversion_.Get();
}
inline void Block::_internal_set_protocolversion(const std::string& value) {
  
  protocolversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_protocolversion(std::string&& value) {
  
  protocolversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.SysInfo.Block.protocolVersion)
}
inline void Block::set_protocolversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocolversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.SysInfo.Block.protocolVersion)
}
inline void Block::set_protocolversion(const char* value,
    size_t size) {
  
  protocolversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.SysInfo.Block.protocolVersion)
}
inline std::string* Block::_internal_mutable_protocolversion() {
  
  return protocolversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_protocolversion() {
  // @@protoc_insertion_point(field_release:blox_test.SysInfo.Block.protocolVersion)
  return protocolversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_protocolversion(std::string* protocolversion) {
  if (protocolversion != nullptr) {
    
  } else {
    
  }
  protocolversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocolversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.SysInfo.Block.protocolVersion)
}
inline std::string* Block::unsafe_arena_release_protocolversion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.SysInfo.Block.protocolVersion)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocolversion_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_protocolversion(
    std::string* protocolversion) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocolversion != nullptr) {
    
  } else {
    
  }
  protocolversion_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocolversion, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.SysInfo.Block.protocolVersion)
}

// string releaseDate = 8 [(.nanopb) = {
inline void Block::clear_releasedate() {
  releasedate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::releasedate() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.releaseDate)
  return _internal_releasedate();
}
inline void Block::set_releasedate(const std::string& value) {
  _internal_set_releasedate(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Block.releaseDate)
}
inline std::string* Block::mutable_releasedate() {
  // @@protoc_insertion_point(field_mutable:blox_test.SysInfo.Block.releaseDate)
  return _internal_mutable_releasedate();
}
inline const std::string& Block::_internal_releasedate() const {
  return releasedate_.Get();
}
inline void Block::_internal_set_releasedate(const std::string& value) {
  
  releasedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_releasedate(std::string&& value) {
  
  releasedate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.SysInfo.Block.releaseDate)
}
inline void Block::set_releasedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  releasedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.SysInfo.Block.releaseDate)
}
inline void Block::set_releasedate(const char* value,
    size_t size) {
  
  releasedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.SysInfo.Block.releaseDate)
}
inline std::string* Block::_internal_mutable_releasedate() {
  
  return releasedate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_releasedate() {
  // @@protoc_insertion_point(field_release:blox_test.SysInfo.Block.releaseDate)
  return releasedate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_releasedate(std::string* releasedate) {
  if (releasedate != nullptr) {
    
  } else {
    
  }
  releasedate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), releasedate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.SysInfo.Block.releaseDate)
}
inline std::string* Block::unsafe_arena_release_releasedate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.SysInfo.Block.releaseDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return releasedate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_releasedate(
    std::string* releasedate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (releasedate != nullptr) {
    
  } else {
    
  }
  releasedate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      releasedate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.SysInfo.Block.releaseDate)
}

// string protocolDate = 9 [(.nanopb) = {
inline void Block::clear_protocoldate() {
  protocoldate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Block::protocoldate() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.protocolDate)
  return _internal_protocoldate();
}
inline void Block::set_protocoldate(const std::string& value) {
  _internal_set_protocoldate(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Block.protocolDate)
}
inline std::string* Block::mutable_protocoldate() {
  // @@protoc_insertion_point(field_mutable:blox_test.SysInfo.Block.protocolDate)
  return _internal_mutable_protocoldate();
}
inline const std::string& Block::_internal_protocoldate() const {
  return protocoldate_.Get();
}
inline void Block::_internal_set_protocoldate(const std::string& value) {
  
  protocoldate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_protocoldate(std::string&& value) {
  
  protocoldate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blox_test.SysInfo.Block.protocolDate)
}
inline void Block::set_protocoldate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocoldate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blox_test.SysInfo.Block.protocolDate)
}
inline void Block::set_protocoldate(const char* value,
    size_t size) {
  
  protocoldate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blox_test.SysInfo.Block.protocolDate)
}
inline std::string* Block::_internal_mutable_protocoldate() {
  
  return protocoldate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_protocoldate() {
  // @@protoc_insertion_point(field_release:blox_test.SysInfo.Block.protocolDate)
  return protocoldate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_protocoldate(std::string* protocoldate) {
  if (protocoldate != nullptr) {
    
  } else {
    
  }
  protocoldate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocoldate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blox_test.SysInfo.Block.protocolDate)
}
inline std::string* Block::unsafe_arena_release_protocoldate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blox_test.SysInfo.Block.protocolDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocoldate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_protocoldate(
    std::string* protocoldate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocoldate != nullptr) {
    
  } else {
    
  }
  protocoldate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocoldate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox_test.SysInfo.Block.protocolDate)
}

// .blox_test.SysInfo.Command command = 10;
inline void Block::clear_command() {
  command_ = 0;
}
inline ::blox_test::SysInfo::Command Block::_internal_command() const {
  return static_cast< ::blox_test::SysInfo::Command >(command_);
}
inline ::blox_test::SysInfo::Command Block::command() const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.command)
  return _internal_command();
}
inline void Block::_internal_set_command(::blox_test::SysInfo::Command value) {
  
  command_ = value;
}
inline void Block::set_command(::blox_test::SysInfo::Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:blox_test.SysInfo.Block.command)
}

// repeated .blox_test.SysInfo.Trace trace = 11 [(.nanopb) = {
inline int Block::_internal_trace_size() const {
  return trace_.size();
}
inline int Block::trace_size() const {
  return _internal_trace_size();
}
inline void Block::clear_trace() {
  trace_.Clear();
}
inline ::blox_test::SysInfo::Trace* Block::mutable_trace(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.SysInfo.Block.trace)
  return trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::SysInfo::Trace >*
Block::mutable_trace() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.SysInfo.Block.trace)
  return &trace_;
}
inline const ::blox_test::SysInfo::Trace& Block::_internal_trace(int index) const {
  return trace_.Get(index);
}
inline const ::blox_test::SysInfo::Trace& Block::trace(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.SysInfo.Block.trace)
  return _internal_trace(index);
}
inline ::blox_test::SysInfo::Trace* Block::_internal_add_trace() {
  return trace_.Add();
}
inline ::blox_test::SysInfo::Trace* Block::add_trace() {
  // @@protoc_insertion_point(field_add:blox_test.SysInfo.Block.trace)
  return _internal_add_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox_test::SysInfo::Trace >&
Block::trace() const {
  // @@protoc_insertion_point(field_list:blox_test.SysInfo.Block.trace)
  return trace_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SysInfo
}  // namespace blox_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox_test::SysInfo::Trace_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::SysInfo::Trace_Action>() {
  return ::blox_test::SysInfo::Trace_Action_descriptor();
}
template <> struct is_proto_enum< ::blox_test::SysInfo::Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::SysInfo::Platform>() {
  return ::blox_test::SysInfo::Platform_descriptor();
}
template <> struct is_proto_enum< ::blox_test::SysInfo::Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::SysInfo::Command>() {
  return ::blox_test::SysInfo::Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SysInfo_5ftest_2eproto
