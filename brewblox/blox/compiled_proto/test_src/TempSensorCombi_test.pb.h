// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempSensorCombi_test.proto

#ifndef PROTOBUF_INCLUDED_TempSensorCombi_5ftest_2eproto
#define PROTOBUF_INCLUDED_TempSensorCombi_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_TempSensorCombi_5ftest_2eproto 

namespace protobuf_TempSensorCombi_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_TempSensorCombi_5ftest_2eproto
namespace blox {
class TempSensorCombi;
class TempSensorCombiDefaultTypeInternal;
extern TempSensorCombiDefaultTypeInternal _TempSensorCombi_default_instance_;
}  // namespace blox
namespace google {
namespace protobuf {
template<> ::blox::TempSensorCombi* Arena::CreateMaybeMessage<::blox::TempSensorCombi>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox {

enum SensorCombiFunc {
  SENSOR_COMBI_FUNC_AVG = 0,
  SENSOR_COMBI_FUNC_MIN = 1,
  SENSOR_COMBI_FUNC_MAX = 2,
  SensorCombiFunc_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SensorCombiFunc_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SensorCombiFunc_IsValid(int value);
const SensorCombiFunc SensorCombiFunc_MIN = SENSOR_COMBI_FUNC_AVG;
const SensorCombiFunc SensorCombiFunc_MAX = SENSOR_COMBI_FUNC_MAX;
const int SensorCombiFunc_ARRAYSIZE = SensorCombiFunc_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorCombiFunc_descriptor();
inline const ::std::string& SensorCombiFunc_Name(SensorCombiFunc value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorCombiFunc_descriptor(), value);
}
inline bool SensorCombiFunc_Parse(
    const ::std::string& name, SensorCombiFunc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorCombiFunc>(
    SensorCombiFunc_descriptor(), name, value);
}
// ===================================================================

class TempSensorCombi : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.TempSensorCombi) */ {
 public:
  TempSensorCombi();
  virtual ~TempSensorCombi();

  TempSensorCombi(const TempSensorCombi& from);

  inline TempSensorCombi& operator=(const TempSensorCombi& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TempSensorCombi(TempSensorCombi&& from) noexcept
    : TempSensorCombi() {
    *this = ::std::move(from);
  }

  inline TempSensorCombi& operator=(TempSensorCombi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TempSensorCombi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TempSensorCombi* internal_default_instance() {
    return reinterpret_cast<const TempSensorCombi*>(
               &_TempSensorCombi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TempSensorCombi* other);
  friend void swap(TempSensorCombi& a, TempSensorCombi& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TempSensorCombi* New() const final {
    return CreateMaybeMessage<TempSensorCombi>(NULL);
  }

  TempSensorCombi* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TempSensorCombi>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TempSensorCombi& from);
  void MergeFrom(const TempSensorCombi& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TempSensorCombi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 sensors = 3 [(.nanopb_test) = {
  int sensors_size() const;
  void clear_sensors();
  static const int kSensorsFieldNumber = 3;
  ::google::protobuf::uint32 sensors(int index) const;
  void set_sensors(int index, ::google::protobuf::uint32 value);
  void add_sensors(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sensors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sensors();

  // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
  int strippedfields_size() const;
  void clear_strippedfields();
  static const int kStrippedFieldsFieldNumber = 99;
  ::google::protobuf::uint32 strippedfields(int index) const;
  void set_strippedfields(int index, ::google::protobuf::uint32 value);
  void add_strippedfields(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      strippedfields() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_strippedfields();

  // sint32 value = 1 [(.nanopb_test) = {
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // .blox.SensorCombiFunc combineFunc = 2;
  void clear_combinefunc();
  static const int kCombineFuncFieldNumber = 2;
  ::blox::SensorCombiFunc combinefunc() const;
  void set_combinefunc(::blox::SensorCombiFunc value);

  // @@protoc_insertion_point(class_scope:blox.TempSensorCombi)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sensors_;
  mutable int _sensors_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > strippedfields_;
  mutable int _strippedfields_cached_byte_size_;
  ::google::protobuf::int32 value_;
  int combinefunc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TempSensorCombi_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TempSensorCombi

// sint32 value = 1 [(.nanopb_test) = {
inline void TempSensorCombi::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 TempSensorCombi::value() const {
  // @@protoc_insertion_point(field_get:blox.TempSensorCombi.value)
  return value_;
}
inline void TempSensorCombi::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:blox.TempSensorCombi.value)
}

// .blox.SensorCombiFunc combineFunc = 2;
inline void TempSensorCombi::clear_combinefunc() {
  combinefunc_ = 0;
}
inline ::blox::SensorCombiFunc TempSensorCombi::combinefunc() const {
  // @@protoc_insertion_point(field_get:blox.TempSensorCombi.combineFunc)
  return static_cast< ::blox::SensorCombiFunc >(combinefunc_);
}
inline void TempSensorCombi::set_combinefunc(::blox::SensorCombiFunc value) {
  
  combinefunc_ = value;
  // @@protoc_insertion_point(field_set:blox.TempSensorCombi.combineFunc)
}

// repeated uint32 sensors = 3 [(.nanopb_test) = {
inline int TempSensorCombi::sensors_size() const {
  return sensors_.size();
}
inline void TempSensorCombi::clear_sensors() {
  sensors_.Clear();
}
inline ::google::protobuf::uint32 TempSensorCombi::sensors(int index) const {
  // @@protoc_insertion_point(field_get:blox.TempSensorCombi.sensors)
  return sensors_.Get(index);
}
inline void TempSensorCombi::set_sensors(int index, ::google::protobuf::uint32 value) {
  sensors_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox.TempSensorCombi.sensors)
}
inline void TempSensorCombi::add_sensors(::google::protobuf::uint32 value) {
  sensors_.Add(value);
  // @@protoc_insertion_point(field_add:blox.TempSensorCombi.sensors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TempSensorCombi::sensors() const {
  // @@protoc_insertion_point(field_list:blox.TempSensorCombi.sensors)
  return sensors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TempSensorCombi::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:blox.TempSensorCombi.sensors)
  return &sensors_;
}

// repeated uint32 strippedFields = 99 [(.nanopb_test) = {
inline int TempSensorCombi::strippedfields_size() const {
  return strippedfields_.size();
}
inline void TempSensorCombi::clear_strippedfields() {
  strippedfields_.Clear();
}
inline ::google::protobuf::uint32 TempSensorCombi::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox.TempSensorCombi.strippedFields)
  return strippedfields_.Get(index);
}
inline void TempSensorCombi::set_strippedfields(int index, ::google::protobuf::uint32 value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox.TempSensorCombi.strippedFields)
}
inline void TempSensorCombi::add_strippedfields(::google::protobuf::uint32 value) {
  strippedfields_.Add(value);
  // @@protoc_insertion_point(field_add:blox.TempSensorCombi.strippedFields)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TempSensorCombi::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox.TempSensorCombi.strippedFields)
  return strippedfields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TempSensorCombi::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox.TempSensorCombi.strippedFields)
  return &strippedfields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blox::SensorCombiFunc> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::SensorCombiFunc>() {
  return ::blox::SensorCombiFunc_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_TempSensorCombi_5ftest_2eproto
