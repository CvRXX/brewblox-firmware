// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Spark2Pins_test.proto

#ifndef PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto
#define PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Spark2Pins_5ftest_2eproto 

namespace protobuf_Spark2Pins_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Spark2Pins_5ftest_2eproto
namespace blox {
class Spark2Pins;
class Spark2PinsDefaultTypeInternal;
extern Spark2PinsDefaultTypeInternal _Spark2Pins_default_instance_;
}  // namespace blox
namespace google {
namespace protobuf {
template<> ::blox::Spark2Pins* Arena::CreateMaybeMessage<::blox::Spark2Pins>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox {

enum Spark2Pins_Hardware {
  Spark2Pins_Hardware_HW_UNKNOWN = 0,
  Spark2Pins_Hardware_HW_SPARK1 = 1,
  Spark2Pins_Hardware_HW_SPARK2 = 2,
  Spark2Pins_Hardware_Spark2Pins_Hardware_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Spark2Pins_Hardware_Spark2Pins_Hardware_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Spark2Pins_Hardware_IsValid(int value);
const Spark2Pins_Hardware Spark2Pins_Hardware_Hardware_MIN = Spark2Pins_Hardware_HW_UNKNOWN;
const Spark2Pins_Hardware Spark2Pins_Hardware_Hardware_MAX = Spark2Pins_Hardware_HW_SPARK2;
const int Spark2Pins_Hardware_Hardware_ARRAYSIZE = Spark2Pins_Hardware_Hardware_MAX + 1;

const ::google::protobuf::EnumDescriptor* Spark2Pins_Hardware_descriptor();
inline const ::std::string& Spark2Pins_Hardware_Name(Spark2Pins_Hardware value) {
  return ::google::protobuf::internal::NameOfEnum(
    Spark2Pins_Hardware_descriptor(), value);
}
inline bool Spark2Pins_Hardware_Parse(
    const ::std::string& name, Spark2Pins_Hardware* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Spark2Pins_Hardware>(
    Spark2Pins_Hardware_descriptor(), name, value);
}
enum Spark2ChannelIds {
  SPARK2_CHAN_NONE = 0,
  SPARK2_CHAN_BOTTOM1 = 1,
  SPARK2_CHAN_BOTTOM2 = 2,
  SPARK2_CHAN_BOTTOM3 = 3,
  SPARK2_CHAN_BOTTOM0 = 4,
  Spark2ChannelIds_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Spark2ChannelIds_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Spark2ChannelIds_IsValid(int value);
const Spark2ChannelIds Spark2ChannelIds_MIN = SPARK2_CHAN_NONE;
const Spark2ChannelIds Spark2ChannelIds_MAX = SPARK2_CHAN_BOTTOM0;
const int Spark2ChannelIds_ARRAYSIZE = Spark2ChannelIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* Spark2ChannelIds_descriptor();
inline const ::std::string& Spark2ChannelIds_Name(Spark2ChannelIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    Spark2ChannelIds_descriptor(), value);
}
inline bool Spark2ChannelIds_Parse(
    const ::std::string& name, Spark2ChannelIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Spark2ChannelIds>(
    Spark2ChannelIds_descriptor(), name, value);
}
// ===================================================================

class Spark2Pins : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox.Spark2Pins) */ {
 public:
  Spark2Pins();
  virtual ~Spark2Pins();

  Spark2Pins(const Spark2Pins& from);

  inline Spark2Pins& operator=(const Spark2Pins& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Spark2Pins(Spark2Pins&& from) noexcept
    : Spark2Pins() {
    *this = ::std::move(from);
  }

  inline Spark2Pins& operator=(Spark2Pins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Spark2Pins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Spark2Pins* internal_default_instance() {
    return reinterpret_cast<const Spark2Pins*>(
               &_Spark2Pins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Spark2Pins* other);
  friend void swap(Spark2Pins& a, Spark2Pins& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Spark2Pins* New() const final {
    return CreateMaybeMessage<Spark2Pins>(NULL);
  }

  Spark2Pins* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Spark2Pins>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Spark2Pins& from);
  void MergeFrom(const Spark2Pins& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Spark2Pins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Spark2Pins_Hardware Hardware;
  static const Hardware HW_UNKNOWN =
    Spark2Pins_Hardware_HW_UNKNOWN;
  static const Hardware HW_SPARK1 =
    Spark2Pins_Hardware_HW_SPARK1;
  static const Hardware HW_SPARK2 =
    Spark2Pins_Hardware_HW_SPARK2;
  static inline bool Hardware_IsValid(int value) {
    return Spark2Pins_Hardware_IsValid(value);
  }
  static const Hardware Hardware_MIN =
    Spark2Pins_Hardware_Hardware_MIN;
  static const Hardware Hardware_MAX =
    Spark2Pins_Hardware_Hardware_MAX;
  static const int Hardware_ARRAYSIZE =
    Spark2Pins_Hardware_Hardware_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Hardware_descriptor() {
    return Spark2Pins_Hardware_descriptor();
  }
  static inline const ::std::string& Hardware_Name(Hardware value) {
    return Spark2Pins_Hardware_Name(value);
  }
  static inline bool Hardware_Parse(const ::std::string& name,
      Hardware* value) {
    return Spark2Pins_Hardware_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .blox.IoChannel channels = 9 [(.nanopb_test) = {
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 9;
  ::blox::IoChannel* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::blox::IoChannel >*
      mutable_channels();
  const ::blox::IoChannel& channels(int index) const;
  ::blox::IoChannel* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::blox::IoChannel >&
      channels() const;

  // bool soundAlarm = 5;
  void clear_soundalarm();
  static const int kSoundAlarmFieldNumber = 5;
  bool soundalarm() const;
  void set_soundalarm(bool value);

  // .blox.Spark2Pins.Hardware hardware = 8 [(.brewblox_test) = {
  void clear_hardware();
  static const int kHardwareFieldNumber = 8;
  ::blox::Spark2Pins_Hardware hardware() const;
  void set_hardware(::blox::Spark2Pins_Hardware value);

  // @@protoc_insertion_point(class_scope:blox.Spark2Pins)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::blox::IoChannel > channels_;
  bool soundalarm_;
  int hardware_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Spark2Pins_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Spark2Pins

// bool soundAlarm = 5;
inline void Spark2Pins::clear_soundalarm() {
  soundalarm_ = false;
}
inline bool Spark2Pins::soundalarm() const {
  // @@protoc_insertion_point(field_get:blox.Spark2Pins.soundAlarm)
  return soundalarm_;
}
inline void Spark2Pins::set_soundalarm(bool value) {
  
  soundalarm_ = value;
  // @@protoc_insertion_point(field_set:blox.Spark2Pins.soundAlarm)
}

// .blox.Spark2Pins.Hardware hardware = 8 [(.brewblox_test) = {
inline void Spark2Pins::clear_hardware() {
  hardware_ = 0;
}
inline ::blox::Spark2Pins_Hardware Spark2Pins::hardware() const {
  // @@protoc_insertion_point(field_get:blox.Spark2Pins.hardware)
  return static_cast< ::blox::Spark2Pins_Hardware >(hardware_);
}
inline void Spark2Pins::set_hardware(::blox::Spark2Pins_Hardware value) {
  
  hardware_ = value;
  // @@protoc_insertion_point(field_set:blox.Spark2Pins.hardware)
}

// repeated .blox.IoChannel channels = 9 [(.nanopb_test) = {
inline int Spark2Pins::channels_size() const {
  return channels_.size();
}
inline ::blox::IoChannel* Spark2Pins::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:blox.Spark2Pins.channels)
  return channels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::blox::IoChannel >*
Spark2Pins::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:blox.Spark2Pins.channels)
  return &channels_;
}
inline const ::blox::IoChannel& Spark2Pins::channels(int index) const {
  // @@protoc_insertion_point(field_get:blox.Spark2Pins.channels)
  return channels_.Get(index);
}
inline ::blox::IoChannel* Spark2Pins::add_channels() {
  // @@protoc_insertion_point(field_add:blox.Spark2Pins.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blox::IoChannel >&
Spark2Pins::channels() const {
  // @@protoc_insertion_point(field_list:blox.Spark2Pins.channels)
  return channels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blox::Spark2Pins_Hardware> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Spark2Pins_Hardware>() {
  return ::blox::Spark2Pins_Hardware_descriptor();
}
template <> struct is_proto_enum< ::blox::Spark2ChannelIds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Spark2ChannelIds>() {
  return ::blox::Spark2ChannelIds_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto
