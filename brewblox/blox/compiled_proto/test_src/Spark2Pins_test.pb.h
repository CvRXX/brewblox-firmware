// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Spark2Pins_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Spark2Pins_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Spark2Pins_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Spark2Pins_5ftest_2eproto;
namespace blox {
class Spark2Pins;
struct Spark2PinsDefaultTypeInternal;
extern Spark2PinsDefaultTypeInternal _Spark2Pins_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::Spark2Pins* Arena::CreateMaybeMessage<::blox::Spark2Pins>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

enum Spark2Pins_Hardware : int {
  Spark2Pins_Hardware_HW_UNKNOWN = 0,
  Spark2Pins_Hardware_HW_SPARK1 = 1,
  Spark2Pins_Hardware_HW_SPARK2 = 2,
  Spark2Pins_Hardware_Spark2Pins_Hardware_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Spark2Pins_Hardware_Spark2Pins_Hardware_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Spark2Pins_Hardware_IsValid(int value);
constexpr Spark2Pins_Hardware Spark2Pins_Hardware_Hardware_MIN = Spark2Pins_Hardware_HW_UNKNOWN;
constexpr Spark2Pins_Hardware Spark2Pins_Hardware_Hardware_MAX = Spark2Pins_Hardware_HW_SPARK2;
constexpr int Spark2Pins_Hardware_Hardware_ARRAYSIZE = Spark2Pins_Hardware_Hardware_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Spark2Pins_Hardware_descriptor();
template<typename T>
inline const std::string& Spark2Pins_Hardware_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Spark2Pins_Hardware>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Spark2Pins_Hardware_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Spark2Pins_Hardware_descriptor(), enum_t_value);
}
inline bool Spark2Pins_Hardware_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Spark2Pins_Hardware* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Spark2Pins_Hardware>(
    Spark2Pins_Hardware_descriptor(), name, value);
}
enum Spark2ChannelIds : int {
  SPARK2_CHAN_NONE = 0,
  SPARK2_CHAN_BOTTOM1 = 1,
  SPARK2_CHAN_BOTTOM2 = 2,
  SPARK2_CHAN_BOTTOM3 = 3,
  SPARK2_CHAN_BOTTOM0 = 4,
  Spark2ChannelIds_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Spark2ChannelIds_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Spark2ChannelIds_IsValid(int value);
constexpr Spark2ChannelIds Spark2ChannelIds_MIN = SPARK2_CHAN_NONE;
constexpr Spark2ChannelIds Spark2ChannelIds_MAX = SPARK2_CHAN_BOTTOM0;
constexpr int Spark2ChannelIds_ARRAYSIZE = Spark2ChannelIds_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Spark2ChannelIds_descriptor();
template<typename T>
inline const std::string& Spark2ChannelIds_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Spark2ChannelIds>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Spark2ChannelIds_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Spark2ChannelIds_descriptor(), enum_t_value);
}
inline bool Spark2ChannelIds_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Spark2ChannelIds* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Spark2ChannelIds>(
    Spark2ChannelIds_descriptor(), name, value);
}
// ===================================================================

class Spark2Pins final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.Spark2Pins) */ {
 public:
  inline Spark2Pins() : Spark2Pins(nullptr) {}
  ~Spark2Pins() override;
  explicit constexpr Spark2Pins(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Spark2Pins(const Spark2Pins& from);
  Spark2Pins(Spark2Pins&& from) noexcept
    : Spark2Pins() {
    *this = ::std::move(from);
  }

  inline Spark2Pins& operator=(const Spark2Pins& from) {
    CopyFrom(from);
    return *this;
  }
  inline Spark2Pins& operator=(Spark2Pins&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Spark2Pins& default_instance() {
    return *internal_default_instance();
  }
  static inline const Spark2Pins* internal_default_instance() {
    return reinterpret_cast<const Spark2Pins*>(
               &_Spark2Pins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Spark2Pins& a, Spark2Pins& b) {
    a.Swap(&b);
  }
  inline void Swap(Spark2Pins* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Spark2Pins* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Spark2Pins* New() const final {
    return new Spark2Pins();
  }

  Spark2Pins* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Spark2Pins>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Spark2Pins& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Spark2Pins& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Spark2Pins* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.Spark2Pins";
  }
  protected:
  explicit Spark2Pins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Spark2Pins_Hardware Hardware;
  static constexpr Hardware HW_UNKNOWN =
    Spark2Pins_Hardware_HW_UNKNOWN;
  static constexpr Hardware HW_SPARK1 =
    Spark2Pins_Hardware_HW_SPARK1;
  static constexpr Hardware HW_SPARK2 =
    Spark2Pins_Hardware_HW_SPARK2;
  static inline bool Hardware_IsValid(int value) {
    return Spark2Pins_Hardware_IsValid(value);
  }
  static constexpr Hardware Hardware_MIN =
    Spark2Pins_Hardware_Hardware_MIN;
  static constexpr Hardware Hardware_MAX =
    Spark2Pins_Hardware_Hardware_MAX;
  static constexpr int Hardware_ARRAYSIZE =
    Spark2Pins_Hardware_Hardware_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Hardware_descriptor() {
    return Spark2Pins_Hardware_descriptor();
  }
  template<typename T>
  static inline const std::string& Hardware_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Hardware>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Hardware_Name.");
    return Spark2Pins_Hardware_Name(enum_t_value);
  }
  static inline bool Hardware_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Hardware* value) {
    return Spark2Pins_Hardware_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 9,
    kHardwareFieldNumber = 8,
    kSoundAlarmFieldNumber = 5,
    kPinsFieldNumber = 90,
  };
  // repeated .blox.IoChannel channels = 9 [(.nanopb_test) = {
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::blox::IoChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >*
      mutable_channels();
  private:
  const ::blox::IoChannel& _internal_channels(int index) const;
  ::blox::IoChannel* _internal_add_channels();
  public:
  const ::blox::IoChannel& channels(int index) const;
  ::blox::IoChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >&
      channels() const;

  // .blox.Spark2Pins.Hardware hardware = 8 [(.brewblox_test) = {
  void clear_hardware();
  ::blox::Spark2Pins_Hardware hardware() const;
  void set_hardware(::blox::Spark2Pins_Hardware value);
  private:
  ::blox::Spark2Pins_Hardware _internal_hardware() const;
  void _internal_set_hardware(::blox::Spark2Pins_Hardware value);
  public:

  // bool soundAlarm = 5;
  void clear_soundalarm();
  bool soundalarm() const;
  void set_soundalarm(bool value);
  private:
  bool _internal_soundalarm() const;
  void _internal_set_soundalarm(bool value);
  public:

  // bool pins = 90 [(.nanopb_test) = {
  void clear_pins();
  bool pins() const;
  void set_pins(bool value);
  private:
  bool _internal_pins() const;
  void _internal_set_pins(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blox.Spark2Pins)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel > channels_;
  int hardware_;
  bool soundalarm_;
  bool pins_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Spark2Pins_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Spark2Pins

// bool soundAlarm = 5;
inline void Spark2Pins::clear_soundalarm() {
  soundalarm_ = false;
}
inline bool Spark2Pins::_internal_soundalarm() const {
  return soundalarm_;
}
inline bool Spark2Pins::soundalarm() const {
  // @@protoc_insertion_point(field_get:blox.Spark2Pins.soundAlarm)
  return _internal_soundalarm();
}
inline void Spark2Pins::_internal_set_soundalarm(bool value) {
  
  soundalarm_ = value;
}
inline void Spark2Pins::set_soundalarm(bool value) {
  _internal_set_soundalarm(value);
  // @@protoc_insertion_point(field_set:blox.Spark2Pins.soundAlarm)
}

// .blox.Spark2Pins.Hardware hardware = 8 [(.brewblox_test) = {
inline void Spark2Pins::clear_hardware() {
  hardware_ = 0;
}
inline ::blox::Spark2Pins_Hardware Spark2Pins::_internal_hardware() const {
  return static_cast< ::blox::Spark2Pins_Hardware >(hardware_);
}
inline ::blox::Spark2Pins_Hardware Spark2Pins::hardware() const {
  // @@protoc_insertion_point(field_get:blox.Spark2Pins.hardware)
  return _internal_hardware();
}
inline void Spark2Pins::_internal_set_hardware(::blox::Spark2Pins_Hardware value) {
  
  hardware_ = value;
}
inline void Spark2Pins::set_hardware(::blox::Spark2Pins_Hardware value) {
  _internal_set_hardware(value);
  // @@protoc_insertion_point(field_set:blox.Spark2Pins.hardware)
}

// repeated .blox.IoChannel channels = 9 [(.nanopb_test) = {
inline int Spark2Pins::_internal_channels_size() const {
  return channels_.size();
}
inline int Spark2Pins::channels_size() const {
  return _internal_channels_size();
}
inline ::blox::IoChannel* Spark2Pins::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:blox.Spark2Pins.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >*
Spark2Pins::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:blox.Spark2Pins.channels)
  return &channels_;
}
inline const ::blox::IoChannel& Spark2Pins::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::blox::IoChannel& Spark2Pins::channels(int index) const {
  // @@protoc_insertion_point(field_get:blox.Spark2Pins.channels)
  return _internal_channels(index);
}
inline ::blox::IoChannel* Spark2Pins::_internal_add_channels() {
  return channels_.Add();
}
inline ::blox::IoChannel* Spark2Pins::add_channels() {
  ::blox::IoChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:blox.Spark2Pins.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blox::IoChannel >&
Spark2Pins::channels() const {
  // @@protoc_insertion_point(field_list:blox.Spark2Pins.channels)
  return channels_;
}

// bool pins = 90 [(.nanopb_test) = {
inline void Spark2Pins::clear_pins() {
  pins_ = false;
}
inline bool Spark2Pins::_internal_pins() const {
  return pins_;
}
inline bool Spark2Pins::pins() const {
  // @@protoc_insertion_point(field_get:blox.Spark2Pins.pins)
  return _internal_pins();
}
inline void Spark2Pins::_internal_set_pins(bool value) {
  
  pins_ = value;
}
inline void Spark2Pins::set_pins(bool value) {
  _internal_set_pins(value);
  // @@protoc_insertion_point(field_set:blox.Spark2Pins.pins)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blox::Spark2Pins_Hardware> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Spark2Pins_Hardware>() {
  return ::blox::Spark2Pins_Hardware_descriptor();
}
template <> struct is_proto_enum< ::blox::Spark2ChannelIds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::Spark2ChannelIds>() {
  return ::blox::Spark2ChannelIds_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto
