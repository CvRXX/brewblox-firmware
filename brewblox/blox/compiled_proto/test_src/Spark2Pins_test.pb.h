// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Spark2Pins_test.proto

#ifndef PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto
#define PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Spark2Pins_5ftest_2eproto 

namespace protobuf_Spark2Pins_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Spark2Pins_5ftest_2eproto
namespace blox_test {
namespace Spark2Pins {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace Spark2Pins
}  // namespace blox_test
namespace google {
namespace protobuf {
template<> ::blox_test::Spark2Pins::Block* Arena::CreateMaybeMessage<::blox_test::Spark2Pins::Block>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blox_test {
namespace Spark2Pins {

enum ChannelId {
  SPARK2_CHAN_NONE = 0,
  SPARK2_CHAN_BOTTOM1 = 1,
  SPARK2_CHAN_BOTTOM2 = 2,
  SPARK2_CHAN_BOTTOM3 = 3,
  SPARK2_CHAN_BOTTOM0 = 4,
  ChannelId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChannelId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChannelId_IsValid(int value);
const ChannelId ChannelId_MIN = SPARK2_CHAN_NONE;
const ChannelId ChannelId_MAX = SPARK2_CHAN_BOTTOM0;
const int ChannelId_ARRAYSIZE = ChannelId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelId_descriptor();
inline const ::std::string& ChannelId_Name(ChannelId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelId_descriptor(), value);
}
inline bool ChannelId_Parse(
    const ::std::string& name, ChannelId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelId>(
    ChannelId_descriptor(), name, value);
}
enum Hardware {
  HW_UNKNOWN = 0,
  HW_SPARK1 = 1,
  HW_SPARK2 = 2,
  Hardware_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Hardware_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Hardware_IsValid(int value);
const Hardware Hardware_MIN = HW_UNKNOWN;
const Hardware Hardware_MAX = HW_SPARK2;
const int Hardware_ARRAYSIZE = Hardware_MAX + 1;

const ::google::protobuf::EnumDescriptor* Hardware_descriptor();
inline const ::std::string& Hardware_Name(Hardware value) {
  return ::google::protobuf::internal::NameOfEnum(
    Hardware_descriptor(), value);
}
inline bool Hardware_Parse(
    const ::std::string& name, Hardware* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hardware>(
    Hardware_descriptor(), name, value);
}
// ===================================================================

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blox_test.Spark2Pins.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blox_test.IoArray.IoChannel channels = 9 [(.nanopb) = {
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 9;
  ::blox_test::IoArray::IoChannel* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::blox_test::IoArray::IoChannel >*
      mutable_channels();
  const ::blox_test::IoArray::IoChannel& channels(int index) const;
  ::blox_test::IoArray::IoChannel* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::blox_test::IoArray::IoChannel >&
      channels() const;

  // .blox_test.Spark2Pins.Hardware hardware = 8 [(.brewblox.field) = {
  void clear_hardware();
  static const int kHardwareFieldNumber = 8;
  ::blox_test::Spark2Pins::Hardware hardware() const;
  void set_hardware(::blox_test::Spark2Pins::Hardware value);

  // bool soundAlarm = 5;
  void clear_soundalarm();
  static const int kSoundAlarmFieldNumber = 5;
  bool soundalarm() const;
  void set_soundalarm(bool value);

  // bool pins = 90 [(.nanopb) = {
  void clear_pins();
  static const int kPinsFieldNumber = 90;
  bool pins() const;
  void set_pins(bool value);

  // @@protoc_insertion_point(class_scope:blox_test.Spark2Pins.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::blox_test::IoArray::IoChannel > channels_;
  int hardware_;
  bool soundalarm_;
  bool pins_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Spark2Pins_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// bool soundAlarm = 5;
inline void Block::clear_soundalarm() {
  soundalarm_ = false;
}
inline bool Block::soundalarm() const {
  // @@protoc_insertion_point(field_get:blox_test.Spark2Pins.Block.soundAlarm)
  return soundalarm_;
}
inline void Block::set_soundalarm(bool value) {
  
  soundalarm_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Spark2Pins.Block.soundAlarm)
}

// .blox_test.Spark2Pins.Hardware hardware = 8 [(.brewblox.field) = {
inline void Block::clear_hardware() {
  hardware_ = 0;
}
inline ::blox_test::Spark2Pins::Hardware Block::hardware() const {
  // @@protoc_insertion_point(field_get:blox_test.Spark2Pins.Block.hardware)
  return static_cast< ::blox_test::Spark2Pins::Hardware >(hardware_);
}
inline void Block::set_hardware(::blox_test::Spark2Pins::Hardware value) {
  
  hardware_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Spark2Pins.Block.hardware)
}

// repeated .blox_test.IoArray.IoChannel channels = 9 [(.nanopb) = {
inline int Block::channels_size() const {
  return channels_.size();
}
inline ::blox_test::IoArray::IoChannel* Block::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:blox_test.Spark2Pins.Block.channels)
  return channels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::blox_test::IoArray::IoChannel >*
Block::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:blox_test.Spark2Pins.Block.channels)
  return &channels_;
}
inline const ::blox_test::IoArray::IoChannel& Block::channels(int index) const {
  // @@protoc_insertion_point(field_get:blox_test.Spark2Pins.Block.channels)
  return channels_.Get(index);
}
inline ::blox_test::IoArray::IoChannel* Block::add_channels() {
  // @@protoc_insertion_point(field_add:blox_test.Spark2Pins.Block.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blox_test::IoArray::IoChannel >&
Block::channels() const {
  // @@protoc_insertion_point(field_list:blox_test.Spark2Pins.Block.channels)
  return channels_;
}

// bool pins = 90 [(.nanopb) = {
inline void Block::clear_pins() {
  pins_ = false;
}
inline bool Block::pins() const {
  // @@protoc_insertion_point(field_get:blox_test.Spark2Pins.Block.pins)
  return pins_;
}
inline void Block::set_pins(bool value) {
  
  pins_ = value;
  // @@protoc_insertion_point(field_set:blox_test.Spark2Pins.Block.pins)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Spark2Pins
}  // namespace blox_test

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blox_test::Spark2Pins::ChannelId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::Spark2Pins::ChannelId>() {
  return ::blox_test::Spark2Pins::ChannelId_descriptor();
}
template <> struct is_proto_enum< ::blox_test::Spark2Pins::Hardware> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox_test::Spark2Pins::Hardware>() {
  return ::blox_test::Spark2Pins::Hardware_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Spark2Pins_5ftest_2eproto
