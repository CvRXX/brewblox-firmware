// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DigitalActuator_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DigitalActuator_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DigitalActuator_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brewblox_test.pb.h"
#include "nanopb_test.pb.h"
#include "DigitalConstraints_test.pb.h"
#include "IoArray_test.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DigitalActuator_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DigitalActuator_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DigitalActuator_5ftest_2eproto;
namespace blox {
class DigitalActuator;
struct DigitalActuatorDefaultTypeInternal;
extern DigitalActuatorDefaultTypeInternal _DigitalActuator_default_instance_;
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> ::blox::DigitalActuator* Arena::CreateMaybeMessage<::blox::DigitalActuator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blox {

// ===================================================================

class DigitalActuator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blox.DigitalActuator) */ {
 public:
  inline DigitalActuator() : DigitalActuator(nullptr) {}
  ~DigitalActuator() override;
  explicit constexpr DigitalActuator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalActuator(const DigitalActuator& from);
  DigitalActuator(DigitalActuator&& from) noexcept
    : DigitalActuator() {
    *this = ::std::move(from);
  }

  inline DigitalActuator& operator=(const DigitalActuator& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalActuator& operator=(DigitalActuator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalActuator& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalActuator* internal_default_instance() {
    return reinterpret_cast<const DigitalActuator*>(
               &_DigitalActuator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DigitalActuator& a, DigitalActuator& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalActuator* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalActuator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalActuator* New() const final {
    return new DigitalActuator();
  }

  DigitalActuator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalActuator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalActuator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DigitalActuator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalActuator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blox.DigitalActuator";
  }
  protected:
  explicit DigitalActuator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrippedFieldsFieldNumber = 99,
    kConstrainedByFieldNumber = 5,
    kHwDeviceFieldNumber = 1,
    kChannelFieldNumber = 2,
    kStateFieldNumber = 3,
    kInvertFieldNumber = 4,
    kDesiredStateFieldNumber = 6,
  };
  // repeated uint32 strippedFields = 99 [(.nanopb_test) = {
  int strippedfields_size() const;
  private:
  int _internal_strippedfields_size() const;
  public:
  void clear_strippedfields();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strippedfields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_strippedfields() const;
  void _internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_strippedfields();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 strippedfields(int index) const;
  void set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      strippedfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_strippedfields();

  // .blox.DigitalConstraints constrainedBy = 5;
  bool has_constrainedby() const;
  private:
  bool _internal_has_constrainedby() const;
  public:
  void clear_constrainedby();
  const ::blox::DigitalConstraints& constrainedby() const;
  PROTOBUF_MUST_USE_RESULT ::blox::DigitalConstraints* release_constrainedby();
  ::blox::DigitalConstraints* mutable_constrainedby();
  void set_allocated_constrainedby(::blox::DigitalConstraints* constrainedby);
  private:
  const ::blox::DigitalConstraints& _internal_constrainedby() const;
  ::blox::DigitalConstraints* _internal_mutable_constrainedby();
  public:
  void unsafe_arena_set_allocated_constrainedby(
      ::blox::DigitalConstraints* constrainedby);
  ::blox::DigitalConstraints* unsafe_arena_release_constrainedby();

  // uint32 hwDevice = 1 [(.nanopb_test) = {
  void clear_hwdevice();
  ::PROTOBUF_NAMESPACE_ID::uint32 hwdevice() const;
  void set_hwdevice(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hwdevice() const;
  void _internal_set_hwdevice(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 channel = 2 [(.nanopb_test) = {
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .blox.DigitalState state = 3 [(.brewblox_test) = {
  void clear_state();
  ::blox::DigitalState state() const;
  void set_state(::blox::DigitalState value);
  private:
  ::blox::DigitalState _internal_state() const;
  void _internal_set_state(::blox::DigitalState value);
  public:

  // bool invert = 4;
  void clear_invert();
  bool invert() const;
  void set_invert(bool value);
  private:
  bool _internal_invert() const;
  void _internal_set_invert(bool value);
  public:

  // .blox.DigitalState desiredState = 6 [(.brewblox_test) = {
  void clear_desiredstate();
  ::blox::DigitalState desiredstate() const;
  void set_desiredstate(::blox::DigitalState value);
  private:
  ::blox::DigitalState _internal_desiredstate() const;
  void _internal_set_desiredstate(::blox::DigitalState value);
  public:

  // @@protoc_insertion_point(class_scope:blox.DigitalActuator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > strippedfields_;
  mutable std::atomic<int> _strippedfields_cached_byte_size_;
  ::blox::DigitalConstraints* constrainedby_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hwdevice_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  int state_;
  bool invert_;
  int desiredstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalActuator_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DigitalActuator

// uint32 hwDevice = 1 [(.nanopb_test) = {
inline void DigitalActuator::clear_hwdevice() {
  hwdevice_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalActuator::_internal_hwdevice() const {
  return hwdevice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalActuator::hwdevice() const {
  // @@protoc_insertion_point(field_get:blox.DigitalActuator.hwDevice)
  return _internal_hwdevice();
}
inline void DigitalActuator::_internal_set_hwdevice(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hwdevice_ = value;
}
inline void DigitalActuator::set_hwdevice(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hwdevice(value);
  // @@protoc_insertion_point(field_set:blox.DigitalActuator.hwDevice)
}

// uint32 channel = 2 [(.nanopb_test) = {
inline void DigitalActuator::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalActuator::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalActuator::channel() const {
  // @@protoc_insertion_point(field_get:blox.DigitalActuator.channel)
  return _internal_channel();
}
inline void DigitalActuator::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void DigitalActuator::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:blox.DigitalActuator.channel)
}

// .blox.DigitalState state = 3 [(.brewblox_test) = {
inline void DigitalActuator::clear_state() {
  state_ = 0;
}
inline ::blox::DigitalState DigitalActuator::_internal_state() const {
  return static_cast< ::blox::DigitalState >(state_);
}
inline ::blox::DigitalState DigitalActuator::state() const {
  // @@protoc_insertion_point(field_get:blox.DigitalActuator.state)
  return _internal_state();
}
inline void DigitalActuator::_internal_set_state(::blox::DigitalState value) {
  
  state_ = value;
}
inline void DigitalActuator::set_state(::blox::DigitalState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:blox.DigitalActuator.state)
}

// bool invert = 4;
inline void DigitalActuator::clear_invert() {
  invert_ = false;
}
inline bool DigitalActuator::_internal_invert() const {
  return invert_;
}
inline bool DigitalActuator::invert() const {
  // @@protoc_insertion_point(field_get:blox.DigitalActuator.invert)
  return _internal_invert();
}
inline void DigitalActuator::_internal_set_invert(bool value) {
  
  invert_ = value;
}
inline void DigitalActuator::set_invert(bool value) {
  _internal_set_invert(value);
  // @@protoc_insertion_point(field_set:blox.DigitalActuator.invert)
}

// .blox.DigitalConstraints constrainedBy = 5;
inline bool DigitalActuator::_internal_has_constrainedby() const {
  return this != internal_default_instance() && constrainedby_ != nullptr;
}
inline bool DigitalActuator::has_constrainedby() const {
  return _internal_has_constrainedby();
}
inline const ::blox::DigitalConstraints& DigitalActuator::_internal_constrainedby() const {
  const ::blox::DigitalConstraints* p = constrainedby_;
  return p != nullptr ? *p : reinterpret_cast<const ::blox::DigitalConstraints&>(
      ::blox::_DigitalConstraints_default_instance_);
}
inline const ::blox::DigitalConstraints& DigitalActuator::constrainedby() const {
  // @@protoc_insertion_point(field_get:blox.DigitalActuator.constrainedBy)
  return _internal_constrainedby();
}
inline void DigitalActuator::unsafe_arena_set_allocated_constrainedby(
    ::blox::DigitalConstraints* constrainedby) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  constrainedby_ = constrainedby;
  if (constrainedby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blox.DigitalActuator.constrainedBy)
}
inline ::blox::DigitalConstraints* DigitalActuator::release_constrainedby() {
  
  ::blox::DigitalConstraints* temp = constrainedby_;
  constrainedby_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blox::DigitalConstraints* DigitalActuator::unsafe_arena_release_constrainedby() {
  // @@protoc_insertion_point(field_release:blox.DigitalActuator.constrainedBy)
  
  ::blox::DigitalConstraints* temp = constrainedby_;
  constrainedby_ = nullptr;
  return temp;
}
inline ::blox::DigitalConstraints* DigitalActuator::_internal_mutable_constrainedby() {
  
  if (constrainedby_ == nullptr) {
    auto* p = CreateMaybeMessage<::blox::DigitalConstraints>(GetArenaForAllocation());
    constrainedby_ = p;
  }
  return constrainedby_;
}
inline ::blox::DigitalConstraints* DigitalActuator::mutable_constrainedby() {
  ::blox::DigitalConstraints* _msg = _internal_mutable_constrainedby();
  // @@protoc_insertion_point(field_mutable:blox.DigitalActuator.constrainedBy)
  return _msg;
}
inline void DigitalActuator::set_allocated_constrainedby(::blox::DigitalConstraints* constrainedby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby_);
  }
  if (constrainedby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constrainedby));
    if (message_arena != submessage_arena) {
      constrainedby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constrainedby, submessage_arena);
    }
    
  } else {
    
  }
  constrainedby_ = constrainedby;
  // @@protoc_insertion_point(field_set_allocated:blox.DigitalActuator.constrainedBy)
}

// .blox.DigitalState desiredState = 6 [(.brewblox_test) = {
inline void DigitalActuator::clear_desiredstate() {
  desiredstate_ = 0;
}
inline ::blox::DigitalState DigitalActuator::_internal_desiredstate() const {
  return static_cast< ::blox::DigitalState >(desiredstate_);
}
inline ::blox::DigitalState DigitalActuator::desiredstate() const {
  // @@protoc_insertion_point(field_get:blox.DigitalActuator.desiredState)
  return _internal_desiredstate();
}
inline void DigitalActuator::_internal_set_desiredstate(::blox::DigitalState value) {
  
  desiredstate_ = value;
}
inline void DigitalActuator::set_desiredstate(::blox::DigitalState value) {
  _internal_set_desiredstate(value);
  // @@protoc_insertion_point(field_set:blox.DigitalActuator.desiredState)
}

// repeated uint32 strippedFields = 99 [(.nanopb_test) = {
inline int DigitalActuator::_internal_strippedfields_size() const {
  return strippedfields_.size();
}
inline int DigitalActuator::strippedfields_size() const {
  return _internal_strippedfields_size();
}
inline void DigitalActuator::clear_strippedfields() {
  strippedfields_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalActuator::_internal_strippedfields(int index) const {
  return strippedfields_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalActuator::strippedfields(int index) const {
  // @@protoc_insertion_point(field_get:blox.DigitalActuator.strippedFields)
  return _internal_strippedfields(index);
}
inline void DigitalActuator::set_strippedfields(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Set(index, value);
  // @@protoc_insertion_point(field_set:blox.DigitalActuator.strippedFields)
}
inline void DigitalActuator::_internal_add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strippedfields_.Add(value);
}
inline void DigitalActuator::add_strippedfields(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_strippedfields(value);
  // @@protoc_insertion_point(field_add:blox.DigitalActuator.strippedFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DigitalActuator::_internal_strippedfields() const {
  return strippedfields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DigitalActuator::strippedfields() const {
  // @@protoc_insertion_point(field_list:blox.DigitalActuator.strippedFields)
  return _internal_strippedfields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DigitalActuator::_internal_mutable_strippedfields() {
  return &strippedfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DigitalActuator::mutable_strippedfields() {
  // @@protoc_insertion_point(field_mutable_list:blox.DigitalActuator.strippedFields)
  return _internal_mutable_strippedfields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blox

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DigitalActuator_5ftest_2eproto
