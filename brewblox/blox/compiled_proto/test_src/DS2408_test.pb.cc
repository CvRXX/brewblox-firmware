// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS2408_test.proto

#include "DS2408_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blox {
constexpr DS2408IoPin::DS2408IoPin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DS2408IoPinDefaultTypeInternal {
  constexpr DS2408IoPinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DS2408IoPinDefaultTypeInternal() {}
  union {
    DS2408IoPin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DS2408IoPinDefaultTypeInternal _DS2408IoPin_default_instance_;
constexpr DS2408::DS2408(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pins_()
  , address_(uint64_t{0u})
  , onewirebusid_(0u)
  , connected_(false)
  , connectmode_(0)
{}
struct DS2408DefaultTypeInternal {
  constexpr DS2408DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DS2408DefaultTypeInternal() {}
  union {
    DS2408 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DS2408DefaultTypeInternal _DS2408_default_instance_;
}  // namespace blox
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DS2408_5ftest_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DS2408_5ftest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DS2408_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DS2408_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::DS2408IoPin, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox::DS2408IoPin, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::blox::DS2408IoPin, Pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox::DS2408, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox::DS2408, address_),
  PROTOBUF_FIELD_OFFSET(::blox::DS2408, connected_),
  PROTOBUF_FIELD_OFFSET(::blox::DS2408, pins_),
  PROTOBUF_FIELD_OFFSET(::blox::DS2408, connectmode_),
  PROTOBUF_FIELD_OFFSET(::blox::DS2408, onewirebusid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::DS2408IoPin)},
  { 14, -1, sizeof(::blox::DS2408)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_DS2408IoPin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox::_DS2408_default_instance_),
};

const char descriptor_table_protodef_DS2408_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021DS2408_test.proto\022\004blox\032\023brewblox_test"
  ".proto\032\021nanopb_test.proto\032\022IoArray_test."
  "proto\"\204\002\n\013DS2408IoPin\022\034\n\001A\030\001 \001(\0132\017.blox."
  "IoChannelH\000\022\034\n\001B\030\002 \001(\0132\017.blox.IoChannelH"
  "\000\022\034\n\001C\030\003 \001(\0132\017.blox.IoChannelH\000\022\034\n\001D\030\004 \001"
  "(\0132\017.blox.IoChannelH\000\022\034\n\001E\030\005 \001(\0132\017.blox."
  "IoChannelH\000\022\034\n\001F\030\006 \001(\0132\017.blox.IoChannelH"
  "\000\022\034\n\001G\030\007 \001(\0132\017.blox.IoChannelH\000\022\034\n\001H\030\010 \001"
  "(\0132\017.blox.IoChannelH\000B\005\n\003Pin\"\241\002\n\006DS2408\022"
  "\027\n\007address\030\001 \001(\006B\006\212\265\030\002 \001\022\031\n\tconnected\030\006 "
  "\001(\010B\006\212\265\030\002(\001\0221\n\004pins\030\007 \003(\0132\021.blox.DS2408I"
  "oPinB\020\222\?\002\020\010\222\?\002x\001\212\265\030\002(\001\0220\n\013connectMode\030\t "
  "\001(\0162\033.blox.DS2408.PinConnectMode\022(\n\014oneW"
  "ireBusId\030\n \001(\rB\022\212\265\030\003\030\202\002\222\?\0028\020\212\265\030\002(\001\"9\n\016Pi"
  "nConnectMode\022\021\n\rCONNECT_VALVE\020\000\022\024\n\020CONNE"
  "CT_ACTUATOR\020\001:\031\212\265\030\003\030\275\002\212\265\030\002H\n\212\265\030\002H\013\212\265\030\002H\t"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DS2408_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DS2408_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DS2408_5ftest_2eproto = {
  false, false, 648, descriptor_table_protodef_DS2408_5ftest_2eproto, "DS2408_test.proto", 
  &descriptor_table_DS2408_5ftest_2eproto_once, descriptor_table_DS2408_5ftest_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_DS2408_5ftest_2eproto::offsets,
  file_level_metadata_DS2408_5ftest_2eproto, file_level_enum_descriptors_DS2408_5ftest_2eproto, file_level_service_descriptors_DS2408_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DS2408_5ftest_2eproto_getter() {
  return &descriptor_table_DS2408_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DS2408_5ftest_2eproto(&descriptor_table_DS2408_5ftest_2eproto);
namespace blox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DS2408_PinConnectMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DS2408_5ftest_2eproto);
  return file_level_enum_descriptors_DS2408_5ftest_2eproto[0];
}
bool DS2408_PinConnectMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DS2408_PinConnectMode DS2408::CONNECT_VALVE;
constexpr DS2408_PinConnectMode DS2408::CONNECT_ACTUATOR;
constexpr DS2408_PinConnectMode DS2408::PinConnectMode_MIN;
constexpr DS2408_PinConnectMode DS2408::PinConnectMode_MAX;
constexpr int DS2408::PinConnectMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DS2408IoPin::_Internal {
 public:
  static const ::blox::IoChannel& a(const DS2408IoPin* msg);
  static const ::blox::IoChannel& b(const DS2408IoPin* msg);
  static const ::blox::IoChannel& c(const DS2408IoPin* msg);
  static const ::blox::IoChannel& d(const DS2408IoPin* msg);
  static const ::blox::IoChannel& e(const DS2408IoPin* msg);
  static const ::blox::IoChannel& f(const DS2408IoPin* msg);
  static const ::blox::IoChannel& g(const DS2408IoPin* msg);
  static const ::blox::IoChannel& h(const DS2408IoPin* msg);
};

const ::blox::IoChannel&
DS2408IoPin::_Internal::a(const DS2408IoPin* msg) {
  return *msg->Pin_.a_;
}
const ::blox::IoChannel&
DS2408IoPin::_Internal::b(const DS2408IoPin* msg) {
  return *msg->Pin_.b_;
}
const ::blox::IoChannel&
DS2408IoPin::_Internal::c(const DS2408IoPin* msg) {
  return *msg->Pin_.c_;
}
const ::blox::IoChannel&
DS2408IoPin::_Internal::d(const DS2408IoPin* msg) {
  return *msg->Pin_.d_;
}
const ::blox::IoChannel&
DS2408IoPin::_Internal::e(const DS2408IoPin* msg) {
  return *msg->Pin_.e_;
}
const ::blox::IoChannel&
DS2408IoPin::_Internal::f(const DS2408IoPin* msg) {
  return *msg->Pin_.f_;
}
const ::blox::IoChannel&
DS2408IoPin::_Internal::g(const DS2408IoPin* msg) {
  return *msg->Pin_.g_;
}
const ::blox::IoChannel&
DS2408IoPin::_Internal::h(const DS2408IoPin* msg) {
  return *msg->Pin_.h_;
}
void DS2408IoPin::set_allocated_a(::blox::IoChannel* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a));
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    set_has_a();
    Pin_.a_ = a;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.A)
}
void DS2408IoPin::clear_a() {
  if (_internal_has_a()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.a_;
    }
    clear_has_Pin();
  }
}
void DS2408IoPin::set_allocated_b(::blox::IoChannel* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b));
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    set_has_b();
    Pin_.b_ = b;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.B)
}
void DS2408IoPin::clear_b() {
  if (_internal_has_b()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.b_;
    }
    clear_has_Pin();
  }
}
void DS2408IoPin::set_allocated_c(::blox::IoChannel* c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(c));
    if (message_arena != submessage_arena) {
      c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c, submessage_arena);
    }
    set_has_c();
    Pin_.c_ = c;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.C)
}
void DS2408IoPin::clear_c() {
  if (_internal_has_c()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.c_;
    }
    clear_has_Pin();
  }
}
void DS2408IoPin::set_allocated_d(::blox::IoChannel* d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d));
    if (message_arena != submessage_arena) {
      d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, d, submessage_arena);
    }
    set_has_d();
    Pin_.d_ = d;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.D)
}
void DS2408IoPin::clear_d() {
  if (_internal_has_d()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.d_;
    }
    clear_has_Pin();
  }
}
void DS2408IoPin::set_allocated_e(::blox::IoChannel* e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e));
    if (message_arena != submessage_arena) {
      e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    set_has_e();
    Pin_.e_ = e;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.E)
}
void DS2408IoPin::clear_e() {
  if (_internal_has_e()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.e_;
    }
    clear_has_Pin();
  }
}
void DS2408IoPin::set_allocated_f(::blox::IoChannel* f) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (f) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f));
    if (message_arena != submessage_arena) {
      f = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f, submessage_arena);
    }
    set_has_f();
    Pin_.f_ = f;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.F)
}
void DS2408IoPin::clear_f() {
  if (_internal_has_f()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.f_;
    }
    clear_has_Pin();
  }
}
void DS2408IoPin::set_allocated_g(::blox::IoChannel* g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g));
    if (message_arena != submessage_arena) {
      g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g, submessage_arena);
    }
    set_has_g();
    Pin_.g_ = g;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.G)
}
void DS2408IoPin::clear_g() {
  if (_internal_has_g()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.g_;
    }
    clear_has_Pin();
  }
}
void DS2408IoPin::set_allocated_h(::blox::IoChannel* h) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Pin();
  if (h) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(h));
    if (message_arena != submessage_arena) {
      h = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, h, submessage_arena);
    }
    set_has_h();
    Pin_.h_ = h;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.DS2408IoPin.H)
}
void DS2408IoPin::clear_h() {
  if (_internal_has_h()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Pin_.h_;
    }
    clear_has_Pin();
  }
}
DS2408IoPin::DS2408IoPin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.DS2408IoPin)
}
DS2408IoPin::DS2408IoPin(const DS2408IoPin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Pin();
  switch (from.Pin_case()) {
    case kA: {
      _internal_mutable_a()->::blox::IoChannel::MergeFrom(from._internal_a());
      break;
    }
    case kB: {
      _internal_mutable_b()->::blox::IoChannel::MergeFrom(from._internal_b());
      break;
    }
    case kC: {
      _internal_mutable_c()->::blox::IoChannel::MergeFrom(from._internal_c());
      break;
    }
    case kD: {
      _internal_mutable_d()->::blox::IoChannel::MergeFrom(from._internal_d());
      break;
    }
    case kE: {
      _internal_mutable_e()->::blox::IoChannel::MergeFrom(from._internal_e());
      break;
    }
    case kF: {
      _internal_mutable_f()->::blox::IoChannel::MergeFrom(from._internal_f());
      break;
    }
    case kG: {
      _internal_mutable_g()->::blox::IoChannel::MergeFrom(from._internal_g());
      break;
    }
    case kH: {
      _internal_mutable_h()->::blox::IoChannel::MergeFrom(from._internal_h());
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox.DS2408IoPin)
}

inline void DS2408IoPin::SharedCtor() {
clear_has_Pin();
}

DS2408IoPin::~DS2408IoPin() {
  // @@protoc_insertion_point(destructor:blox.DS2408IoPin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DS2408IoPin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Pin()) {
    clear_Pin();
  }
}

void DS2408IoPin::ArenaDtor(void* object) {
  DS2408IoPin* _this = reinterpret_cast< DS2408IoPin* >(object);
  (void)_this;
}
void DS2408IoPin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DS2408IoPin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DS2408IoPin::clear_Pin() {
// @@protoc_insertion_point(one_of_clear_start:blox.DS2408IoPin)
  switch (Pin_case()) {
    case kA: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.a_;
      }
      break;
    }
    case kB: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.b_;
      }
      break;
    }
    case kC: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.c_;
      }
      break;
    }
    case kD: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.d_;
      }
      break;
    }
    case kE: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.e_;
      }
      break;
    }
    case kF: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.f_;
      }
      break;
    }
    case kG: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.g_;
      }
      break;
    }
    case kH: {
      if (GetArenaForAllocation() == nullptr) {
        delete Pin_.h_;
      }
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PIN_NOT_SET;
}


void DS2408IoPin::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.DS2408IoPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Pin();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DS2408IoPin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blox.IoChannel A = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel B = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel C = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel D = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel E = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel F = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel G = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_g(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox.IoChannel H = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_h(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DS2408IoPin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.DS2408IoPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blox.IoChannel A = 1;
  if (_internal_has_a()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::a(this), target, stream);
  }

  // .blox.IoChannel B = 2;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::b(this), target, stream);
  }

  // .blox.IoChannel C = 3;
  if (_internal_has_c()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::c(this), target, stream);
  }

  // .blox.IoChannel D = 4;
  if (_internal_has_d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::d(this), target, stream);
  }

  // .blox.IoChannel E = 5;
  if (_internal_has_e()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::e(this), target, stream);
  }

  // .blox.IoChannel F = 6;
  if (_internal_has_f()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f(this), target, stream);
  }

  // .blox.IoChannel G = 7;
  if (_internal_has_g()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::g(this), target, stream);
  }

  // .blox.IoChannel H = 8;
  if (_internal_has_h()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::h(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.DS2408IoPin)
  return target;
}

size_t DS2408IoPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.DS2408IoPin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Pin_case()) {
    // .blox.IoChannel A = 1;
    case kA: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.a_);
      break;
    }
    // .blox.IoChannel B = 2;
    case kB: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.b_);
      break;
    }
    // .blox.IoChannel C = 3;
    case kC: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.c_);
      break;
    }
    // .blox.IoChannel D = 4;
    case kD: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.d_);
      break;
    }
    // .blox.IoChannel E = 5;
    case kE: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.e_);
      break;
    }
    // .blox.IoChannel F = 6;
    case kF: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.f_);
      break;
    }
    // .blox.IoChannel G = 7;
    case kG: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.g_);
      break;
    }
    // .blox.IoChannel H = 8;
    case kH: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Pin_.h_);
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DS2408IoPin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DS2408IoPin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DS2408IoPin::GetClassData() const { return &_class_data_; }

void DS2408IoPin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DS2408IoPin *>(to)->MergeFrom(
      static_cast<const DS2408IoPin &>(from));
}


void DS2408IoPin::MergeFrom(const DS2408IoPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.DS2408IoPin)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Pin_case()) {
    case kA: {
      _internal_mutable_a()->::blox::IoChannel::MergeFrom(from._internal_a());
      break;
    }
    case kB: {
      _internal_mutable_b()->::blox::IoChannel::MergeFrom(from._internal_b());
      break;
    }
    case kC: {
      _internal_mutable_c()->::blox::IoChannel::MergeFrom(from._internal_c());
      break;
    }
    case kD: {
      _internal_mutable_d()->::blox::IoChannel::MergeFrom(from._internal_d());
      break;
    }
    case kE: {
      _internal_mutable_e()->::blox::IoChannel::MergeFrom(from._internal_e());
      break;
    }
    case kF: {
      _internal_mutable_f()->::blox::IoChannel::MergeFrom(from._internal_f());
      break;
    }
    case kG: {
      _internal_mutable_g()->::blox::IoChannel::MergeFrom(from._internal_g());
      break;
    }
    case kH: {
      _internal_mutable_h()->::blox::IoChannel::MergeFrom(from._internal_h());
      break;
    }
    case PIN_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DS2408IoPin::CopyFrom(const DS2408IoPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.DS2408IoPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS2408IoPin::IsInitialized() const {
  return true;
}

void DS2408IoPin::InternalSwap(DS2408IoPin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Pin_, other->Pin_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DS2408IoPin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DS2408_5ftest_2eproto_getter, &descriptor_table_DS2408_5ftest_2eproto_once,
      file_level_metadata_DS2408_5ftest_2eproto[0]);
}

// ===================================================================

class DS2408::_Internal {
 public:
};

DS2408::DS2408(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blox.DS2408)
}
DS2408::DS2408(const DS2408& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pins_(from.pins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&connectmode_) -
    reinterpret_cast<char*>(&address_)) + sizeof(connectmode_));
  // @@protoc_insertion_point(copy_constructor:blox.DS2408)
}

inline void DS2408::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connectmode_) -
    reinterpret_cast<char*>(&address_)) + sizeof(connectmode_));
}

DS2408::~DS2408() {
  // @@protoc_insertion_point(destructor:blox.DS2408)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DS2408::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DS2408::ArenaDtor(void* object) {
  DS2408* _this = reinterpret_cast< DS2408* >(object);
  (void)_this;
}
void DS2408::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DS2408::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DS2408::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.DS2408)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pins_.Clear();
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectmode_) -
      reinterpret_cast<char*>(&address_)) + sizeof(connectmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DS2408::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 address = 1 [(.brewblox_test) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // bool connected = 6 [(.brewblox_test) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .blox.DS2408IoPin pins = 7 [(.nanopb_test) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .blox.DS2408.PinConnectMode connectMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectmode(static_cast<::blox::DS2408_PinConnectMode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 oneWireBusId = 10 [(.nanopb_test) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          onewirebusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DS2408::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox.DS2408)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 address = 1 [(.brewblox_test) = {
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_address(), target);
  }

  // bool connected = 6 [(.brewblox_test) = {
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_connected(), target);
  }

  // repeated .blox.DS2408IoPin pins = 7 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_pins(i), target, stream);
  }

  // .blox.DS2408.PinConnectMode connectMode = 9;
  if (this->_internal_connectmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_connectmode(), target);
  }

  // uint32 oneWireBusId = 10 [(.nanopb_test) = {
  if (this->_internal_onewirebusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_onewirebusid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.DS2408)
  return target;
}

size_t DS2408::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.DS2408)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox.DS2408IoPin pins = 7 [(.nanopb_test) = {
  total_size += 1UL * this->_internal_pins_size();
  for (const auto& msg : this->pins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 address = 1 [(.brewblox_test) = {
  if (this->_internal_address() != 0) {
    total_size += 1 + 8;
  }

  // uint32 oneWireBusId = 10 [(.nanopb_test) = {
  if (this->_internal_onewirebusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_onewirebusid());
  }

  // bool connected = 6 [(.brewblox_test) = {
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  // .blox.DS2408.PinConnectMode connectMode = 9;
  if (this->_internal_connectmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DS2408::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DS2408::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DS2408::GetClassData() const { return &_class_data_; }

void DS2408::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DS2408 *>(to)->MergeFrom(
      static_cast<const DS2408 &>(from));
}


void DS2408::MergeFrom(const DS2408& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.DS2408)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pins_.MergeFrom(from.pins_);
  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_onewirebusid() != 0) {
    _internal_set_onewirebusid(from._internal_onewirebusid());
  }
  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  if (from._internal_connectmode() != 0) {
    _internal_set_connectmode(from._internal_connectmode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DS2408::CopyFrom(const DS2408& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.DS2408)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS2408::IsInitialized() const {
  return true;
}

void DS2408::InternalSwap(DS2408* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pins_.InternalSwap(&other->pins_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DS2408, connectmode_)
      + sizeof(DS2408::connectmode_)
      - PROTOBUF_FIELD_OFFSET(DS2408, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DS2408::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DS2408_5ftest_2eproto_getter, &descriptor_table_DS2408_5ftest_2eproto_once,
      file_level_metadata_DS2408_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox::DS2408IoPin* Arena::CreateMaybeMessage< ::blox::DS2408IoPin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::DS2408IoPin >(arena);
}
template<> PROTOBUF_NOINLINE ::blox::DS2408* Arena::CreateMaybeMessage< ::blox::DS2408 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox::DS2408 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
