// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS2408_test.proto

#include "DS2408_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_IoArray_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IoChannel_IoArray_5ftest_2eproto;
namespace blox_test {
namespace DS2408 {
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
}  // namespace DS2408
}  // namespace blox_test
static void InitDefaultsscc_info_Block_DS2408_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::DS2408::_Block_default_instance_;
    new (ptr) ::blox_test::DS2408::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::DS2408::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Block_DS2408_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Block_DS2408_5ftest_2eproto}, {
      &scc_info_IoChannel_IoArray_5ftest_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DS2408_5ftest_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DS2408_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DS2408_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DS2408_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::DS2408::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox_test::DS2408::Block, address_),
  PROTOBUF_FIELD_OFFSET(::blox_test::DS2408::Block, connected_),
  PROTOBUF_FIELD_OFFSET(::blox_test::DS2408::Block, connectmode_),
  PROTOBUF_FIELD_OFFSET(::blox_test::DS2408::Block, onewirebusid_),
  PROTOBUF_FIELD_OFFSET(::blox_test::DS2408::Block, channels_),
  PROTOBUF_FIELD_OFFSET(::blox_test::DS2408::Block, pins_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox_test::DS2408::Block)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::DS2408::_Block_default_instance_),
};

const char descriptor_table_protodef_DS2408_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021DS2408_test.proto\022\020blox_test.DS2408\032\023b"
  "rewblox_test.proto\032\021nanopb_test.proto\032\022I"
  "oArray_test.proto\"\217\002\n\005Block\022\027\n\007address\030\001"
  " \001(\006B\006\212\265\030\002 \001\022\031\n\tconnected\030\006 \001(\010B\006\212\265\030\002(\001\022"
  "5\n\013connectMode\030\t \001(\0162 .blox_test.DS2408."
  "PinConnectMode\022(\n\014oneWireBusId\030\n \001(\rB\022\212\265"
  "\030\003\030\202\002\222\?\0028\020\212\265\030\002(\001\022;\n\010channels\030\013 \003(\0132\034.blo"
  "x_test.IoArray.IoChannelB\013\222\?\002\020\010\212\265\030\002(\001\022\031\n"
  "\004pins\030Z \001(\010B\013\212\265\030\002H\001\222\?\002\030\003:\031\212\265\030\003\030\275\002\212\265\030\002H\n\212"
  "\265\030\002H\013\212\265\030\002H\t*\374\001\n\tChannelId\022\024\n\020DS2408_CHAN"
  "_NONE\020\000\022\021\n\rDS2408_CHAN_A\020\001\022\021\n\rDS2408_CHA"
  "N_B\020\002\022\021\n\rDS2408_CHAN_C\020\003\022\021\n\rDS2408_CHAN_"
  "D\020\004\022\021\n\rDS2408_CHAN_E\020\005\022\021\n\rDS2408_CHAN_F\020"
  "\006\022\021\n\rDS2408_CHAN_G\020\007\022\021\n\rDS2408_CHAN_H\020\010\022"
  "\025\n\021DS2408_VALVE_NONE\020\000\022\022\n\016DS2408_VALVE_A"
  "\020\005\022\022\n\016DS2408_VALVE_B\020\001\032\002\020\001*9\n\016PinConnect"
  "Mode\022\021\n\rCONNECT_VALVE\020\000\022\024\n\020CONNECT_ACTUA"
  "TOR\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DS2408_5ftest_2eproto_deps[3] = {
  &::descriptor_table_IoArray_5ftest_2eproto,
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DS2408_5ftest_2eproto_sccs[1] = {
  &scc_info_Block_DS2408_5ftest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DS2408_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DS2408_5ftest_2eproto = {
  false, false, descriptor_table_protodef_DS2408_5ftest_2eproto, "DS2408_test.proto", 693,
  &descriptor_table_DS2408_5ftest_2eproto_once, descriptor_table_DS2408_5ftest_2eproto_sccs, descriptor_table_DS2408_5ftest_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_DS2408_5ftest_2eproto::offsets,
  file_level_metadata_DS2408_5ftest_2eproto, 1, file_level_enum_descriptors_DS2408_5ftest_2eproto, file_level_service_descriptors_DS2408_5ftest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DS2408_5ftest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DS2408_5ftest_2eproto)), true);
namespace blox_test {
namespace DS2408 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DS2408_5ftest_2eproto);
  return file_level_enum_descriptors_DS2408_5ftest_2eproto[0];
}
bool ChannelId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PinConnectMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DS2408_5ftest_2eproto);
  return file_level_enum_descriptors_DS2408_5ftest_2eproto[1];
}
bool PinConnectMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Block::InitAsDefaultInstance() {
}
class Block::_Internal {
 public:
};

void Block::clear_channels() {
  channels_.Clear();
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.DS2408.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&onewirebusid_) -
    reinterpret_cast<char*>(&address_)) + sizeof(onewirebusid_));
  // @@protoc_insertion_point(copy_constructor:blox_test.DS2408.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_DS2408_5ftest_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onewirebusid_) -
      reinterpret_cast<char*>(&address_)) + sizeof(onewirebusid_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:blox_test.DS2408.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_DS2408_5ftest_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.DS2408.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onewirebusid_) -
      reinterpret_cast<char*>(&address_)) + sizeof(onewirebusid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 address = 1 [(.brewblox.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // bool connected = 6 [(.brewblox.field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox_test.DS2408.PinConnectMode connectMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectmode(static_cast<::blox_test::DS2408::PinConnectMode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 oneWireBusId = 10 [(.nanopb) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          onewirebusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .blox_test.IoArray.IoChannel channels = 11 [(.nanopb) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // bool pins = 90 [(.nanopb) = {
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          pins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.DS2408.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 address = 1 [(.brewblox.field) = {
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_address(), target);
  }

  // bool connected = 6 [(.brewblox.field) = {
  if (this->connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_connected(), target);
  }

  // .blox_test.DS2408.PinConnectMode connectMode = 9;
  if (this->connectmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_connectmode(), target);
  }

  // uint32 oneWireBusId = 10 [(.nanopb) = {
  if (this->onewirebusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_onewirebusid(), target);
  }

  // repeated .blox_test.IoArray.IoChannel channels = 11 [(.nanopb) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_channels(i), target, stream);
  }

  // bool pins = 90 [(.nanopb) = {
  if (this->pins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(90, this->_internal_pins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.DS2408.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.DS2408.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox_test.IoArray.IoChannel channels = 11 [(.nanopb) = {
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 address = 1 [(.brewblox.field) = {
  if (this->address() != 0) {
    total_size += 1 + 8;
  }

  // bool connected = 6 [(.brewblox.field) = {
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  // bool pins = 90 [(.nanopb) = {
  if (this->pins() != 0) {
    total_size += 2 + 1;
  }

  // .blox_test.DS2408.PinConnectMode connectMode = 9;
  if (this->connectmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectmode());
  }

  // uint32 oneWireBusId = 10 [(.nanopb) = {
  if (this->onewirebusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_onewirebusid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.DS2408.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.DS2408.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.DS2408.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.DS2408.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  if (from.pins() != 0) {
    _internal_set_pins(from._internal_pins());
  }
  if (from.connectmode() != 0) {
    _internal_set_connectmode(from._internal_connectmode());
  }
  if (from.onewirebusid() != 0) {
    _internal_set_onewirebusid(from._internal_onewirebusid());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.DS2408.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.DS2408.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, onewirebusid_)
      + sizeof(Block::onewirebusid_)
      - PROTOBUF_FIELD_OFFSET(Block, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DS2408
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::DS2408::Block* Arena::CreateMaybeMessage< ::blox_test::DS2408::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::DS2408::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
