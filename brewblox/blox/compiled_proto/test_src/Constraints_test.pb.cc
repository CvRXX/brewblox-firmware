// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Constraints_test.proto

#include "Constraints_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Constraints_5ftest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Constraints_5ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Balanced;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Constraints_5ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Mutexed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Constraints_5ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalogConstraint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Constraints_5ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DigitalConstraint;
}  // namespace protobuf_Constraints_5ftest_2eproto
namespace blox {
namespace Constraints {
class BalancedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Balanced>
      _instance;
} _Balanced_default_instance_;
class MutexedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mutexed>
      _instance;
} _Mutexed_default_instance_;
class AnalogConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalogConstraint>
      _instance;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  const ::blox::Constraints::Balanced* balanced_;
} _AnalogConstraint_default_instance_;
class AnalogConstraintsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalogConstraints>
      _instance;
} _AnalogConstraints_default_instance_;
class DigitalConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DigitalConstraint>
      _instance;
  ::google::protobuf::uint32 minoff_;
  ::google::protobuf::uint32 minon_;
  const ::blox::Constraints::Mutexed* mutexed_;
  ::google::protobuf::uint32 delayedoff_;
  ::google::protobuf::uint32 delayedon_;
  ::google::protobuf::uint32 mutex_;
} _DigitalConstraint_default_instance_;
class DigitalConstraintsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DigitalConstraints>
      _instance;
} _DigitalConstraints_default_instance_;
}  // namespace Constraints
}  // namespace blox
namespace protobuf_Constraints_5ftest_2eproto {
static void InitDefaultsBalanced() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::Constraints::_Balanced_default_instance_;
    new (ptr) ::blox::Constraints::Balanced();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::Constraints::Balanced::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Balanced =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBalanced}, {}};

static void InitDefaultsMutexed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::Constraints::_Mutexed_default_instance_;
    new (ptr) ::blox::Constraints::Mutexed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::Constraints::Mutexed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mutexed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMutexed}, {}};

static void InitDefaultsAnalogConstraint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::Constraints::_AnalogConstraint_default_instance_;
    new (ptr) ::blox::Constraints::AnalogConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::Constraints::AnalogConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalogConstraint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalogConstraint}, {
      &protobuf_Constraints_5ftest_2eproto::scc_info_Balanced.base,}};

static void InitDefaultsAnalogConstraints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::Constraints::_AnalogConstraints_default_instance_;
    new (ptr) ::blox::Constraints::AnalogConstraints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::Constraints::AnalogConstraints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalogConstraints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalogConstraints}, {
      &protobuf_Constraints_5ftest_2eproto::scc_info_AnalogConstraint.base,}};

static void InitDefaultsDigitalConstraint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::Constraints::_DigitalConstraint_default_instance_;
    new (ptr) ::blox::Constraints::DigitalConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::Constraints::DigitalConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DigitalConstraint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDigitalConstraint}, {
      &protobuf_Constraints_5ftest_2eproto::scc_info_Mutexed.base,}};

static void InitDefaultsDigitalConstraints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox::Constraints::_DigitalConstraints_default_instance_;
    new (ptr) ::blox::Constraints::DigitalConstraints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox::Constraints::DigitalConstraints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DigitalConstraints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDigitalConstraints}, {
      &protobuf_Constraints_5ftest_2eproto::scc_info_DigitalConstraint.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Balanced.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mutexed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalogConstraint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalogConstraints.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DigitalConstraint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DigitalConstraints.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Balanced, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Balanced, balancerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Balanced, granted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Balanced, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Mutexed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Mutexed, mutexid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Mutexed, extraholdtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Mutexed, hascustomholdtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::Mutexed, haslock_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::AnalogConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::AnalogConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::blox::Constraints::AnalogConstraintDefaultTypeInternal, min_),
  offsetof(::blox::Constraints::AnalogConstraintDefaultTypeInternal, max_),
  offsetof(::blox::Constraints::AnalogConstraintDefaultTypeInternal, balanced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::AnalogConstraint, limiting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::AnalogConstraint, constraint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::AnalogConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::AnalogConstraints, constraints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::DigitalConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::DigitalConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::blox::Constraints::DigitalConstraintDefaultTypeInternal, minoff_),
  offsetof(::blox::Constraints::DigitalConstraintDefaultTypeInternal, minon_),
  offsetof(::blox::Constraints::DigitalConstraintDefaultTypeInternal, mutexed_),
  offsetof(::blox::Constraints::DigitalConstraintDefaultTypeInternal, delayedoff_),
  offsetof(::blox::Constraints::DigitalConstraintDefaultTypeInternal, delayedon_),
  offsetof(::blox::Constraints::DigitalConstraintDefaultTypeInternal, mutex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::DigitalConstraint, limiting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::DigitalConstraint, remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::DigitalConstraint, constraint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::DigitalConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::blox::Constraints::DigitalConstraints, constraints_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox::Constraints::Balanced)},
  { 8, -1, sizeof(::blox::Constraints::Mutexed)},
  { 17, -1, sizeof(::blox::Constraints::AnalogConstraint)},
  { 27, -1, sizeof(::blox::Constraints::AnalogConstraints)},
  { 33, -1, sizeof(::blox::Constraints::DigitalConstraint)},
  { 47, -1, sizeof(::blox::Constraints::DigitalConstraints)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::Constraints::_Balanced_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::Constraints::_Mutexed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::Constraints::_AnalogConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::Constraints::_AnalogConstraints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::Constraints::_DigitalConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::blox::Constraints::_DigitalConstraints_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Constraints_test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026Constraints_test.proto\022\020blox.Constrain"
      "ts\032\023brewblox_test.proto\032\021nanopb_test.pro"
      "to\"d\n\010Balanced\022\037\n\nbalancerId\030\001 \001(\rB\013\212\265\030\002"
      "\030\007\222\?\0028\020\022\036\n\007granted\030\002 \001(\rB\r\212\265\030\003\020\200 \212\265\030\002(\001\022"
      "\027\n\002id\030\003 \001(\rB\013\212\265\030\002(\001\222\?\0028\010\"\206\001\n\007Mutexed\022\034\n\007"
      "mutexId\030\001 \001(\rB\013\212\265\030\002\030\010\222\?\0028\020\022)\n\rextraHoldT"
      "ime\030\002 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 \022\031\n\021hasCust"
      "omHoldTime\030\003 \001(\010\022\027\n\007hasLock\030\004 \001(\010B\006\212\265\030\002("
      "\001\"\244\001\n\020AnalogConstraint\022\033\n\003min\030\001 \001(\021B\014\212\265\030"
      "\003\020\200 \222\?\0028 H\000\022\033\n\003max\030\002 \001(\021B\014\212\265\030\003\020\200 \222\?\0028 H\000"
      "\022.\n\010balanced\030\003 \001(\0132\032.blox.Constraints.Ba"
      "lancedH\000\022\030\n\010limiting\030d \001(\010B\006\212\265\030\002(\001B\014\n\nco"
      "nstraint\"S\n\021AnalogConstraints\022>\n\013constra"
      "ints\030\001 \003(\0132\".blox.Constraints.AnalogCons"
      "traintB\005\222\?\002\020\010\"\327\002\n\021DigitalConstraint\022$\n\006m"
      "inOff\030\001 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022#\n\005min"
      "On\030\002 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022,\n\007mutexe"
      "d\030\004 \001(\0132\031.blox.Constraints.MutexedH\000\022(\n\n"
      "delayedOff\030\005 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022\'"
      "\n\tdelayedOn\030\006 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022"
      "\034\n\005mutex\030\003 \001(\rB\013\212\265\030\002\030\010\222\?\0028\020H\000\022\035\n\010limitin"
      "g\030d \001(\rB\013\212\265\030\002H\001\222\?\002\030\003\022+\n\tremaining\030e \001(\rB"
      "\030\212\265\030\002\010\003\212\265\030\003\020\350\007\212\265\030\002(\001\222\?\0028 B\014\n\nconstraint\""
      "U\n\022DigitalConstraints\022\?\n\013constraints\030\001 \003"
      "(\0132#.blox.Constraints.DigitalConstraintB"
      "\005\222\?\002\020\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1014);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Constraints_test.proto", &protobuf_RegisterTypes);
  ::protobuf_brewblox_5ftest_2eproto::AddDescriptors();
  ::protobuf_nanopb_5ftest_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Constraints_5ftest_2eproto
namespace blox {
namespace Constraints {

// ===================================================================

void Balanced::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Balanced::kBalancerIdFieldNumber;
const int Balanced::kGrantedFieldNumber;
const int Balanced::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Balanced::Balanced()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Constraints_5ftest_2eproto::scc_info_Balanced.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.Constraints.Balanced)
}
Balanced::Balanced(const Balanced& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&balancerid_, &from.balancerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:blox.Constraints.Balanced)
}

void Balanced::SharedCtor() {
  ::memset(&balancerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
}

Balanced::~Balanced() {
  // @@protoc_insertion_point(destructor:blox.Constraints.Balanced)
  SharedDtor();
}

void Balanced::SharedDtor() {
}

void Balanced::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Balanced::descriptor() {
  ::protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Balanced& Balanced::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Constraints_5ftest_2eproto::scc_info_Balanced.base);
  return *internal_default_instance();
}


void Balanced::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Constraints.Balanced)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&balancerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool Balanced::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.Constraints.Balanced)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 balancerId = 1 [(.nanopb_test) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balancerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 granted = 2 [(.brewblox_test) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 3 [(.nanopb_test) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.Constraints.Balanced)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.Constraints.Balanced)
  return false;
#undef DO_
}

void Balanced::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.Constraints.Balanced)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 balancerId = 1 [(.nanopb_test) = {
  if (this->balancerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->balancerid(), output);
  }

  // uint32 granted = 2 [(.brewblox_test) = {
  if (this->granted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->granted(), output);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.Constraints.Balanced)
}

::google::protobuf::uint8* Balanced::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.Constraints.Balanced)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 balancerId = 1 [(.nanopb_test) = {
  if (this->balancerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->balancerid(), target);
  }

  // uint32 granted = 2 [(.brewblox_test) = {
  if (this->granted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->granted(), target);
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Constraints.Balanced)
  return target;
}

size_t Balanced::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Constraints.Balanced)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 balancerId = 1 [(.nanopb_test) = {
  if (this->balancerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->balancerid());
  }

  // uint32 granted = 2 [(.brewblox_test) = {
  if (this->granted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->granted());
  }

  // uint32 id = 3 [(.nanopb_test) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Balanced::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.Constraints.Balanced)
  GOOGLE_DCHECK_NE(&from, this);
  const Balanced* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Balanced>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.Constraints.Balanced)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.Constraints.Balanced)
    MergeFrom(*source);
  }
}

void Balanced::MergeFrom(const Balanced& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Constraints.Balanced)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.balancerid() != 0) {
    set_balancerid(from.balancerid());
  }
  if (from.granted() != 0) {
    set_granted(from.granted());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Balanced::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.Constraints.Balanced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balanced::CopyFrom(const Balanced& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Constraints.Balanced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balanced::IsInitialized() const {
  return true;
}

void Balanced::Swap(Balanced* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Balanced::InternalSwap(Balanced* other) {
  using std::swap;
  swap(balancerid_, other->balancerid_);
  swap(granted_, other->granted_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Balanced::GetMetadata() const {
  protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mutexed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutexed::kMutexIdFieldNumber;
const int Mutexed::kExtraHoldTimeFieldNumber;
const int Mutexed::kHasCustomHoldTimeFieldNumber;
const int Mutexed::kHasLockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutexed::Mutexed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Constraints_5ftest_2eproto::scc_info_Mutexed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.Constraints.Mutexed)
}
Mutexed::Mutexed(const Mutexed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mutexid_, &from.mutexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&haslock_) -
    reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
  // @@protoc_insertion_point(copy_constructor:blox.Constraints.Mutexed)
}

void Mutexed::SharedCtor() {
  ::memset(&mutexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&haslock_) -
      reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
}

Mutexed::~Mutexed() {
  // @@protoc_insertion_point(destructor:blox.Constraints.Mutexed)
  SharedDtor();
}

void Mutexed::SharedDtor() {
}

void Mutexed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mutexed::descriptor() {
  ::protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mutexed& Mutexed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Constraints_5ftest_2eproto::scc_info_Mutexed.base);
  return *internal_default_instance();
}


void Mutexed::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Constraints.Mutexed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mutexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&haslock_) -
      reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
  _internal_metadata_.Clear();
}

bool Mutexed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.Constraints.Mutexed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mutexId = 1 [(.nanopb_test) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mutexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 extraHoldTime = 2 [(.nanopb_test) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraholdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasCustomHoldTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascustomholdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasLock = 4 [(.brewblox_test) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haslock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.Constraints.Mutexed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.Constraints.Mutexed)
  return false;
#undef DO_
}

void Mutexed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.Constraints.Mutexed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mutexId = 1 [(.nanopb_test) = {
  if (this->mutexid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mutexid(), output);
  }

  // uint32 extraHoldTime = 2 [(.nanopb_test) = {
  if (this->extraholdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->extraholdtime(), output);
  }

  // bool hasCustomHoldTime = 3;
  if (this->hascustomholdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hascustomholdtime(), output);
  }

  // bool hasLock = 4 [(.brewblox_test) = {
  if (this->haslock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->haslock(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.Constraints.Mutexed)
}

::google::protobuf::uint8* Mutexed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.Constraints.Mutexed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mutexId = 1 [(.nanopb_test) = {
  if (this->mutexid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mutexid(), target);
  }

  // uint32 extraHoldTime = 2 [(.nanopb_test) = {
  if (this->extraholdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->extraholdtime(), target);
  }

  // bool hasCustomHoldTime = 3;
  if (this->hascustomholdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hascustomholdtime(), target);
  }

  // bool hasLock = 4 [(.brewblox_test) = {
  if (this->haslock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->haslock(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Constraints.Mutexed)
  return target;
}

size_t Mutexed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Constraints.Mutexed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 mutexId = 1 [(.nanopb_test) = {
  if (this->mutexid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mutexid());
  }

  // uint32 extraHoldTime = 2 [(.nanopb_test) = {
  if (this->extraholdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extraholdtime());
  }

  // bool hasCustomHoldTime = 3;
  if (this->hascustomholdtime() != 0) {
    total_size += 1 + 1;
  }

  // bool hasLock = 4 [(.brewblox_test) = {
  if (this->haslock() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mutexed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.Constraints.Mutexed)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutexed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutexed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.Constraints.Mutexed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.Constraints.Mutexed)
    MergeFrom(*source);
  }
}

void Mutexed::MergeFrom(const Mutexed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Constraints.Mutexed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mutexid() != 0) {
    set_mutexid(from.mutexid());
  }
  if (from.extraholdtime() != 0) {
    set_extraholdtime(from.extraholdtime());
  }
  if (from.hascustomholdtime() != 0) {
    set_hascustomholdtime(from.hascustomholdtime());
  }
  if (from.haslock() != 0) {
    set_haslock(from.haslock());
  }
}

void Mutexed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.Constraints.Mutexed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutexed::CopyFrom(const Mutexed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Constraints.Mutexed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutexed::IsInitialized() const {
  return true;
}

void Mutexed::Swap(Mutexed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutexed::InternalSwap(Mutexed* other) {
  using std::swap;
  swap(mutexid_, other->mutexid_);
  swap(extraholdtime_, other->extraholdtime_);
  swap(hascustomholdtime_, other->hascustomholdtime_);
  swap(haslock_, other->haslock_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mutexed::GetMetadata() const {
  protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalogConstraint::InitAsDefaultInstance() {
  ::blox::Constraints::_AnalogConstraint_default_instance_.min_ = 0;
  ::blox::Constraints::_AnalogConstraint_default_instance_.max_ = 0;
  ::blox::Constraints::_AnalogConstraint_default_instance_.balanced_ = const_cast< ::blox::Constraints::Balanced*>(
      ::blox::Constraints::Balanced::internal_default_instance());
}
void AnalogConstraint::set_allocated_balanced(::blox::Constraints::Balanced* balanced) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_constraint();
  if (balanced) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      balanced = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, balanced, submessage_arena);
    }
    set_has_balanced();
    constraint_.balanced_ = balanced;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.Constraints.AnalogConstraint.balanced)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalogConstraint::kMinFieldNumber;
const int AnalogConstraint::kMaxFieldNumber;
const int AnalogConstraint::kBalancedFieldNumber;
const int AnalogConstraint::kLimitingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalogConstraint::AnalogConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Constraints_5ftest_2eproto::scc_info_AnalogConstraint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.Constraints.AnalogConstraint)
}
AnalogConstraint::AnalogConstraint(const AnalogConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limiting_ = from.limiting_;
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kMin: {
      set_min(from.min());
      break;
    }
    case kMax: {
      set_max(from.max());
      break;
    }
    case kBalanced: {
      mutable_balanced()->::blox::Constraints::Balanced::MergeFrom(from.balanced());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox.Constraints.AnalogConstraint)
}

void AnalogConstraint::SharedCtor() {
  limiting_ = false;
  clear_has_constraint();
}

AnalogConstraint::~AnalogConstraint() {
  // @@protoc_insertion_point(destructor:blox.Constraints.AnalogConstraint)
  SharedDtor();
}

void AnalogConstraint::SharedDtor() {
  if (has_constraint()) {
    clear_constraint();
  }
}

void AnalogConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnalogConstraint::descriptor() {
  ::protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalogConstraint& AnalogConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Constraints_5ftest_2eproto::scc_info_AnalogConstraint.base);
  return *internal_default_instance();
}


void AnalogConstraint::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:blox.Constraints.AnalogConstraint)
  switch (constraint_case()) {
    case kMin: {
      // No need to clear
      break;
    }
    case kMax: {
      // No need to clear
      break;
    }
    case kBalanced: {
      delete constraint_.balanced_;
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void AnalogConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Constraints.AnalogConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limiting_ = false;
  clear_constraint();
  _internal_metadata_.Clear();
}

bool AnalogConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.Constraints.AnalogConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 min = 1 [(.nanopb_test) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &constraint_.min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 max = 2 [(.nanopb_test) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &constraint_.max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox.Constraints.Balanced balanced = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_balanced()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool limiting = 100 [(.brewblox_test) = {
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limiting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.Constraints.AnalogConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.Constraints.AnalogConstraint)
  return false;
#undef DO_
}

void AnalogConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.Constraints.AnalogConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 min = 1 [(.nanopb_test) = {
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->min(), output);
  }

  // sint32 max = 2 [(.nanopb_test) = {
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->max(), output);
  }

  // .blox.Constraints.Balanced balanced = 3;
  if (has_balanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_balanced(), output);
  }

  // bool limiting = 100 [(.brewblox_test) = {
  if (this->limiting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->limiting(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.Constraints.AnalogConstraint)
}

::google::protobuf::uint8* AnalogConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.Constraints.AnalogConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 min = 1 [(.nanopb_test) = {
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->min(), target);
  }

  // sint32 max = 2 [(.nanopb_test) = {
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->max(), target);
  }

  // .blox.Constraints.Balanced balanced = 3;
  if (has_balanced()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_balanced(), deterministic, target);
  }

  // bool limiting = 100 [(.brewblox_test) = {
  if (this->limiting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->limiting(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Constraints.AnalogConstraint)
  return target;
}

size_t AnalogConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Constraints.AnalogConstraint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool limiting = 100 [(.brewblox_test) = {
  if (this->limiting() != 0) {
    total_size += 2 + 1;
  }

  switch (constraint_case()) {
    // sint32 min = 1 [(.nanopb_test) = {
    case kMin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->min());
      break;
    }
    // sint32 max = 2 [(.nanopb_test) = {
    case kMax: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->max());
      break;
    }
    // .blox.Constraints.Balanced balanced = 3;
    case kBalanced: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *constraint_.balanced_);
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.Constraints.AnalogConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalogConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.Constraints.AnalogConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.Constraints.AnalogConstraint)
    MergeFrom(*source);
  }
}

void AnalogConstraint::MergeFrom(const AnalogConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Constraints.AnalogConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limiting() != 0) {
    set_limiting(from.limiting());
  }
  switch (from.constraint_case()) {
    case kMin: {
      set_min(from.min());
      break;
    }
    case kMax: {
      set_max(from.max());
      break;
    }
    case kBalanced: {
      mutable_balanced()->::blox::Constraints::Balanced::MergeFrom(from.balanced());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
}

void AnalogConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.Constraints.AnalogConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogConstraint::CopyFrom(const AnalogConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Constraints.AnalogConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogConstraint::IsInitialized() const {
  return true;
}

void AnalogConstraint::Swap(AnalogConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalogConstraint::InternalSwap(AnalogConstraint* other) {
  using std::swap;
  swap(limiting_, other->limiting_);
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnalogConstraint::GetMetadata() const {
  protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalogConstraints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalogConstraints::kConstraintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalogConstraints::AnalogConstraints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Constraints_5ftest_2eproto::scc_info_AnalogConstraints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.Constraints.AnalogConstraints)
}
AnalogConstraints::AnalogConstraints(const AnalogConstraints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox.Constraints.AnalogConstraints)
}

void AnalogConstraints::SharedCtor() {
}

AnalogConstraints::~AnalogConstraints() {
  // @@protoc_insertion_point(destructor:blox.Constraints.AnalogConstraints)
  SharedDtor();
}

void AnalogConstraints::SharedDtor() {
}

void AnalogConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnalogConstraints::descriptor() {
  ::protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalogConstraints& AnalogConstraints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Constraints_5ftest_2eproto::scc_info_AnalogConstraints.base);
  return *internal_default_instance();
}


void AnalogConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Constraints.AnalogConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear();
}

bool AnalogConstraints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.Constraints.AnalogConstraints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .blox.Constraints.AnalogConstraint constraints = 1 [(.nanopb_test) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.Constraints.AnalogConstraints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.Constraints.AnalogConstraints)
  return false;
#undef DO_
}

void AnalogConstraints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.Constraints.AnalogConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.Constraints.AnalogConstraint constraints = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->constraints(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.Constraints.AnalogConstraints)
}

::google::protobuf::uint8* AnalogConstraints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.Constraints.AnalogConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.Constraints.AnalogConstraint constraints = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->constraints(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Constraints.AnalogConstraints)
  return target;
}

size_t AnalogConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Constraints.AnalogConstraints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .blox.Constraints.AnalogConstraint constraints = 1 [(.nanopb_test) = {
  {
    unsigned int count = static_cast<unsigned int>(this->constraints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->constraints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogConstraints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.Constraints.AnalogConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogConstraints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalogConstraints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.Constraints.AnalogConstraints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.Constraints.AnalogConstraints)
    MergeFrom(*source);
  }
}

void AnalogConstraints::MergeFrom(const AnalogConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Constraints.AnalogConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
}

void AnalogConstraints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.Constraints.AnalogConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogConstraints::CopyFrom(const AnalogConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Constraints.AnalogConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogConstraints::IsInitialized() const {
  return true;
}

void AnalogConstraints::Swap(AnalogConstraints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalogConstraints::InternalSwap(AnalogConstraints* other) {
  using std::swap;
  CastToBase(&constraints_)->InternalSwap(CastToBase(&other->constraints_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnalogConstraints::GetMetadata() const {
  protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DigitalConstraint::InitAsDefaultInstance() {
  ::blox::Constraints::_DigitalConstraint_default_instance_.minoff_ = 0u;
  ::blox::Constraints::_DigitalConstraint_default_instance_.minon_ = 0u;
  ::blox::Constraints::_DigitalConstraint_default_instance_.mutexed_ = const_cast< ::blox::Constraints::Mutexed*>(
      ::blox::Constraints::Mutexed::internal_default_instance());
  ::blox::Constraints::_DigitalConstraint_default_instance_.delayedoff_ = 0u;
  ::blox::Constraints::_DigitalConstraint_default_instance_.delayedon_ = 0u;
  ::blox::Constraints::_DigitalConstraint_default_instance_.mutex_ = 0u;
}
void DigitalConstraint::set_allocated_mutexed(::blox::Constraints::Mutexed* mutexed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_constraint();
  if (mutexed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mutexed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mutexed, submessage_arena);
    }
    set_has_mutexed();
    constraint_.mutexed_ = mutexed;
  }
  // @@protoc_insertion_point(field_set_allocated:blox.Constraints.DigitalConstraint.mutexed)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigitalConstraint::kMinOffFieldNumber;
const int DigitalConstraint::kMinOnFieldNumber;
const int DigitalConstraint::kMutexedFieldNumber;
const int DigitalConstraint::kDelayedOffFieldNumber;
const int DigitalConstraint::kDelayedOnFieldNumber;
const int DigitalConstraint::kMutexFieldNumber;
const int DigitalConstraint::kLimitingFieldNumber;
const int DigitalConstraint::kRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigitalConstraint::DigitalConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Constraints_5ftest_2eproto::scc_info_DigitalConstraint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.Constraints.DigitalConstraint)
}
DigitalConstraint::DigitalConstraint(const DigitalConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limiting_, &from.limiting_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_) -
    reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kMinOff: {
      set_minoff(from.minoff());
      break;
    }
    case kMinOn: {
      set_minon(from.minon());
      break;
    }
    case kMutexed: {
      mutable_mutexed()->::blox::Constraints::Mutexed::MergeFrom(from.mutexed());
      break;
    }
    case kDelayedOff: {
      set_delayedoff(from.delayedoff());
      break;
    }
    case kDelayedOn: {
      set_delayedon(from.delayedon());
      break;
    }
    case kMutex: {
      set_mutex(from.mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox.Constraints.DigitalConstraint)
}

void DigitalConstraint::SharedCtor() {
  ::memset(&limiting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_has_constraint();
}

DigitalConstraint::~DigitalConstraint() {
  // @@protoc_insertion_point(destructor:blox.Constraints.DigitalConstraint)
  SharedDtor();
}

void DigitalConstraint::SharedDtor() {
  if (has_constraint()) {
    clear_constraint();
  }
}

void DigitalConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DigitalConstraint::descriptor() {
  ::protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DigitalConstraint& DigitalConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Constraints_5ftest_2eproto::scc_info_DigitalConstraint.base);
  return *internal_default_instance();
}


void DigitalConstraint::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:blox.Constraints.DigitalConstraint)
  switch (constraint_case()) {
    case kMinOff: {
      // No need to clear
      break;
    }
    case kMinOn: {
      // No need to clear
      break;
    }
    case kMutexed: {
      delete constraint_.mutexed_;
      break;
    }
    case kDelayedOff: {
      // No need to clear
      break;
    }
    case kDelayedOn: {
      // No need to clear
      break;
    }
    case kMutex: {
      // No need to clear
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void DigitalConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Constraints.DigitalConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limiting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_constraint();
  _internal_metadata_.Clear();
}

bool DigitalConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.Constraints.DigitalConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 minOff = 1 [(.nanopb_test) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constraint_.minoff_)));
          set_has_minoff();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minOn = 2 [(.nanopb_test) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constraint_.minon_)));
          set_has_minon();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mutex = 3 [(.nanopb_test) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constraint_.mutex_)));
          set_has_mutex();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blox.Constraints.Mutexed mutexed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mutexed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 delayedOff = 5 [(.nanopb_test) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constraint_.delayedoff_)));
          set_has_delayedoff();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 delayedOn = 6 [(.nanopb_test) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constraint_.delayedon_)));
          set_has_delayedon();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limiting = 100 [(.nanopb_test) = {
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limiting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remaining = 101 [(.nanopb_test) = {
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.Constraints.DigitalConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.Constraints.DigitalConstraint)
  return false;
#undef DO_
}

void DigitalConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.Constraints.DigitalConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 minOff = 1 [(.nanopb_test) = {
  if (has_minoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->minoff(), output);
  }

  // uint32 minOn = 2 [(.nanopb_test) = {
  if (has_minon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minon(), output);
  }

  // uint32 mutex = 3 [(.nanopb_test) = {
  if (has_mutex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mutex(), output);
  }

  // .blox.Constraints.Mutexed mutexed = 4;
  if (has_mutexed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_mutexed(), output);
  }

  // uint32 delayedOff = 5 [(.nanopb_test) = {
  if (has_delayedoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delayedoff(), output);
  }

  // uint32 delayedOn = 6 [(.nanopb_test) = {
  if (has_delayedon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delayedon(), output);
  }

  // uint32 limiting = 100 [(.nanopb_test) = {
  if (this->limiting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->limiting(), output);
  }

  // uint32 remaining = 101 [(.nanopb_test) = {
  if (this->remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(101, this->remaining(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.Constraints.DigitalConstraint)
}

::google::protobuf::uint8* DigitalConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.Constraints.DigitalConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 minOff = 1 [(.nanopb_test) = {
  if (has_minoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->minoff(), target);
  }

  // uint32 minOn = 2 [(.nanopb_test) = {
  if (has_minon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minon(), target);
  }

  // uint32 mutex = 3 [(.nanopb_test) = {
  if (has_mutex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mutex(), target);
  }

  // .blox.Constraints.Mutexed mutexed = 4;
  if (has_mutexed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_mutexed(), deterministic, target);
  }

  // uint32 delayedOff = 5 [(.nanopb_test) = {
  if (has_delayedoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delayedoff(), target);
  }

  // uint32 delayedOn = 6 [(.nanopb_test) = {
  if (has_delayedon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delayedon(), target);
  }

  // uint32 limiting = 100 [(.nanopb_test) = {
  if (this->limiting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->limiting(), target);
  }

  // uint32 remaining = 101 [(.nanopb_test) = {
  if (this->remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(101, this->remaining(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Constraints.DigitalConstraint)
  return target;
}

size_t DigitalConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Constraints.DigitalConstraint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 limiting = 100 [(.nanopb_test) = {
  if (this->limiting() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limiting());
  }

  // uint32 remaining = 101 [(.nanopb_test) = {
  if (this->remaining() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining());
  }

  switch (constraint_case()) {
    // uint32 minOff = 1 [(.nanopb_test) = {
    case kMinOff: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minoff());
      break;
    }
    // uint32 minOn = 2 [(.nanopb_test) = {
    case kMinOn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minon());
      break;
    }
    // .blox.Constraints.Mutexed mutexed = 4;
    case kMutexed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *constraint_.mutexed_);
      break;
    }
    // uint32 delayedOff = 5 [(.nanopb_test) = {
    case kDelayedOff: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delayedoff());
      break;
    }
    // uint32 delayedOn = 6 [(.nanopb_test) = {
    case kDelayedOn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delayedon());
      break;
    }
    // uint32 mutex = 3 [(.nanopb_test) = {
    case kMutex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.Constraints.DigitalConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigitalConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.Constraints.DigitalConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.Constraints.DigitalConstraint)
    MergeFrom(*source);
  }
}

void DigitalConstraint::MergeFrom(const DigitalConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Constraints.DigitalConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limiting() != 0) {
    set_limiting(from.limiting());
  }
  if (from.remaining() != 0) {
    set_remaining(from.remaining());
  }
  switch (from.constraint_case()) {
    case kMinOff: {
      set_minoff(from.minoff());
      break;
    }
    case kMinOn: {
      set_minon(from.minon());
      break;
    }
    case kMutexed: {
      mutable_mutexed()->::blox::Constraints::Mutexed::MergeFrom(from.mutexed());
      break;
    }
    case kDelayedOff: {
      set_delayedoff(from.delayedoff());
      break;
    }
    case kDelayedOn: {
      set_delayedon(from.delayedon());
      break;
    }
    case kMutex: {
      set_mutex(from.mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
}

void DigitalConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.Constraints.DigitalConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalConstraint::CopyFrom(const DigitalConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Constraints.DigitalConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalConstraint::IsInitialized() const {
  return true;
}

void DigitalConstraint::Swap(DigitalConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigitalConstraint::InternalSwap(DigitalConstraint* other) {
  using std::swap;
  swap(limiting_, other->limiting_);
  swap(remaining_, other->remaining_);
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DigitalConstraint::GetMetadata() const {
  protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DigitalConstraints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigitalConstraints::kConstraintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigitalConstraints::DigitalConstraints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Constraints_5ftest_2eproto::scc_info_DigitalConstraints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:blox.Constraints.DigitalConstraints)
}
DigitalConstraints::DigitalConstraints(const DigitalConstraints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox.Constraints.DigitalConstraints)
}

void DigitalConstraints::SharedCtor() {
}

DigitalConstraints::~DigitalConstraints() {
  // @@protoc_insertion_point(destructor:blox.Constraints.DigitalConstraints)
  SharedDtor();
}

void DigitalConstraints::SharedDtor() {
}

void DigitalConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DigitalConstraints::descriptor() {
  ::protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DigitalConstraints& DigitalConstraints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Constraints_5ftest_2eproto::scc_info_DigitalConstraints.base);
  return *internal_default_instance();
}


void DigitalConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:blox.Constraints.DigitalConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear();
}

bool DigitalConstraints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blox.Constraints.DigitalConstraints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .blox.Constraints.DigitalConstraint constraints = 1 [(.nanopb_test) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blox.Constraints.DigitalConstraints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blox.Constraints.DigitalConstraints)
  return false;
#undef DO_
}

void DigitalConstraints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blox.Constraints.DigitalConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.Constraints.DigitalConstraint constraints = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->constraints(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blox.Constraints.DigitalConstraints)
}

::google::protobuf::uint8* DigitalConstraints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blox.Constraints.DigitalConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox.Constraints.DigitalConstraint constraints = 1 [(.nanopb_test) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->constraints(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox.Constraints.DigitalConstraints)
  return target;
}

size_t DigitalConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox.Constraints.DigitalConstraints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .blox.Constraints.DigitalConstraint constraints = 1 [(.nanopb_test) = {
  {
    unsigned int count = static_cast<unsigned int>(this->constraints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->constraints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalConstraints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox.Constraints.DigitalConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalConstraints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigitalConstraints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox.Constraints.DigitalConstraints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox.Constraints.DigitalConstraints)
    MergeFrom(*source);
  }
}

void DigitalConstraints::MergeFrom(const DigitalConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox.Constraints.DigitalConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
}

void DigitalConstraints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox.Constraints.DigitalConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalConstraints::CopyFrom(const DigitalConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox.Constraints.DigitalConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalConstraints::IsInitialized() const {
  return true;
}

void DigitalConstraints::Swap(DigitalConstraints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigitalConstraints::InternalSwap(DigitalConstraints* other) {
  using std::swap;
  CastToBase(&constraints_)->InternalSwap(CastToBase(&other->constraints_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DigitalConstraints::GetMetadata() const {
  protobuf_Constraints_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Constraints_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Constraints
}  // namespace blox
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::Constraints::Balanced* Arena::CreateMaybeMessage< ::blox::Constraints::Balanced >(Arena* arena) {
  return Arena::CreateInternal< ::blox::Constraints::Balanced >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::Constraints::Mutexed* Arena::CreateMaybeMessage< ::blox::Constraints::Mutexed >(Arena* arena) {
  return Arena::CreateInternal< ::blox::Constraints::Mutexed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::Constraints::AnalogConstraint* Arena::CreateMaybeMessage< ::blox::Constraints::AnalogConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::blox::Constraints::AnalogConstraint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::Constraints::AnalogConstraints* Arena::CreateMaybeMessage< ::blox::Constraints::AnalogConstraints >(Arena* arena) {
  return Arena::CreateInternal< ::blox::Constraints::AnalogConstraints >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::Constraints::DigitalConstraint* Arena::CreateMaybeMessage< ::blox::Constraints::DigitalConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::blox::Constraints::DigitalConstraint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::blox::Constraints::DigitalConstraints* Arena::CreateMaybeMessage< ::blox::Constraints::DigitalConstraints >(Arena* arena) {
  return Arena::CreateInternal< ::blox::Constraints::DigitalConstraints >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
