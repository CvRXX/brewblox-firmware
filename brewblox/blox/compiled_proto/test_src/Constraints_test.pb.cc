// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Constraints_test.proto

#include "Constraints_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Constraints_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnalogConstraint_Constraints_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Constraints_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Balanced_Constraints_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Constraints_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalConstraint_Constraints_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Constraints_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mutexed_Constraints_5ftest_2eproto;
namespace blox_test {
namespace Constraints {
class BalancedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Balanced> _instance;
} _Balanced_default_instance_;
class MutexedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mutexed> _instance;
} _Mutexed_default_instance_;
class AnalogConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogConstraint> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 min_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  const ::blox_test::Constraints::Balanced* balanced_;
} _AnalogConstraint_default_instance_;
class AnalogConstraintsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogConstraints> _instance;
} _AnalogConstraints_default_instance_;
class DigitalConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalConstraint> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 minoff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minon_;
  const ::blox_test::Constraints::Mutexed* mutexed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delayedoff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delayedon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mutex_;
} _DigitalConstraint_default_instance_;
class DigitalConstraintsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalConstraints> _instance;
} _DigitalConstraints_default_instance_;
}  // namespace Constraints
}  // namespace blox_test
static void InitDefaultsscc_info_AnalogConstraint_Constraints_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::Constraints::_AnalogConstraint_default_instance_;
    new (ptr) ::blox_test::Constraints::AnalogConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::Constraints::AnalogConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnalogConstraint_Constraints_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnalogConstraint_Constraints_5ftest_2eproto}, {
      &scc_info_Balanced_Constraints_5ftest_2eproto.base,}};

static void InitDefaultsscc_info_AnalogConstraints_Constraints_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::Constraints::_AnalogConstraints_default_instance_;
    new (ptr) ::blox_test::Constraints::AnalogConstraints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::Constraints::AnalogConstraints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnalogConstraints_Constraints_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnalogConstraints_Constraints_5ftest_2eproto}, {
      &scc_info_AnalogConstraint_Constraints_5ftest_2eproto.base,}};

static void InitDefaultsscc_info_Balanced_Constraints_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::Constraints::_Balanced_default_instance_;
    new (ptr) ::blox_test::Constraints::Balanced();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::Constraints::Balanced::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Balanced_Constraints_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Balanced_Constraints_5ftest_2eproto}, {}};

static void InitDefaultsscc_info_DigitalConstraint_Constraints_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::Constraints::_DigitalConstraint_default_instance_;
    new (ptr) ::blox_test::Constraints::DigitalConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::Constraints::DigitalConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalConstraint_Constraints_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DigitalConstraint_Constraints_5ftest_2eproto}, {
      &scc_info_Mutexed_Constraints_5ftest_2eproto.base,}};

static void InitDefaultsscc_info_DigitalConstraints_Constraints_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::Constraints::_DigitalConstraints_default_instance_;
    new (ptr) ::blox_test::Constraints::DigitalConstraints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::Constraints::DigitalConstraints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalConstraints_Constraints_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DigitalConstraints_Constraints_5ftest_2eproto}, {
      &scc_info_DigitalConstraint_Constraints_5ftest_2eproto.base,}};

static void InitDefaultsscc_info_Mutexed_Constraints_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blox_test::Constraints::_Mutexed_default_instance_;
    new (ptr) ::blox_test::Constraints::Mutexed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blox_test::Constraints::Mutexed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mutexed_Constraints_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mutexed_Constraints_5ftest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Constraints_5ftest_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Constraints_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Constraints_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Constraints_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Balanced, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Balanced, balancerid_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Balanced, granted_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Balanced, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Mutexed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Mutexed, mutexid_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Mutexed, extraholdtime_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Mutexed, hascustomholdtime_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::Mutexed, haslock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::AnalogConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::AnalogConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::blox_test::Constraints::AnalogConstraintDefaultTypeInternal, min_),
  offsetof(::blox_test::Constraints::AnalogConstraintDefaultTypeInternal, max_),
  offsetof(::blox_test::Constraints::AnalogConstraintDefaultTypeInternal, balanced_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::AnalogConstraint, limiting_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::AnalogConstraint, constraint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::AnalogConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::AnalogConstraints, constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::DigitalConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::DigitalConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::blox_test::Constraints::DigitalConstraintDefaultTypeInternal, minoff_),
  offsetof(::blox_test::Constraints::DigitalConstraintDefaultTypeInternal, minon_),
  offsetof(::blox_test::Constraints::DigitalConstraintDefaultTypeInternal, mutexed_),
  offsetof(::blox_test::Constraints::DigitalConstraintDefaultTypeInternal, delayedoff_),
  offsetof(::blox_test::Constraints::DigitalConstraintDefaultTypeInternal, delayedon_),
  offsetof(::blox_test::Constraints::DigitalConstraintDefaultTypeInternal, mutex_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::DigitalConstraint, limiting_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::DigitalConstraint, remaining_),
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::DigitalConstraint, constraint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::DigitalConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blox_test::Constraints::DigitalConstraints, constraints_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blox_test::Constraints::Balanced)},
  { 8, -1, sizeof(::blox_test::Constraints::Mutexed)},
  { 17, -1, sizeof(::blox_test::Constraints::AnalogConstraint)},
  { 27, -1, sizeof(::blox_test::Constraints::AnalogConstraints)},
  { 33, -1, sizeof(::blox_test::Constraints::DigitalConstraint)},
  { 47, -1, sizeof(::blox_test::Constraints::DigitalConstraints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::Constraints::_Balanced_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::Constraints::_Mutexed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::Constraints::_AnalogConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::Constraints::_AnalogConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::Constraints::_DigitalConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blox_test::Constraints::_DigitalConstraints_default_instance_),
};

const char descriptor_table_protodef_Constraints_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026Constraints_test.proto\022\025blox_test.Cons"
  "traints\032\023brewblox_test.proto\032\021nanopb_tes"
  "t.proto\"d\n\010Balanced\022\037\n\nbalancerId\030\001 \001(\rB"
  "\013\212\265\030\002\030\007\222\?\0028\020\022\036\n\007granted\030\002 \001(\rB\r\212\265\030\003\020\200 \212\265"
  "\030\002(\001\022\027\n\002id\030\003 \001(\rB\013\212\265\030\002(\001\222\?\0028\010\"\206\001\n\007Mutexe"
  "d\022\034\n\007mutexId\030\001 \001(\rB\013\212\265\030\002\030\010\222\?\0028\020\022)\n\rextra"
  "HoldTime\030\002 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 \022\031\n\021ha"
  "sCustomHoldTime\030\003 \001(\010\022\027\n\007hasLock\030\004 \001(\010B\006"
  "\212\265\030\002(\001\"\251\001\n\020AnalogConstraint\022\033\n\003min\030\001 \001(\021"
  "B\014\212\265\030\003\020\200 \222\?\0028 H\000\022\033\n\003max\030\002 \001(\021B\014\212\265\030\003\020\200 \222\?"
  "\0028 H\000\0223\n\010balanced\030\003 \001(\0132\037.blox_test.Cons"
  "traints.BalancedH\000\022\030\n\010limiting\030d \001(\010B\006\212\265"
  "\030\002(\001B\014\n\nconstraint\"X\n\021AnalogConstraints\022"
  "C\n\013constraints\030\001 \003(\0132\'.blox_test.Constra"
  "ints.AnalogConstraintB\005\222\?\002\020\010\"\334\002\n\021Digital"
  "Constraint\022$\n\006minOff\030\001 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350"
  "\007\222\?\0028 H\000\022#\n\005minOn\030\002 \001(\rB\022\212\265\030\002\010\003\212\265\030\003\020\350\007\222\?"
  "\0028 H\000\0221\n\007mutexed\030\004 \001(\0132\036.blox_test.Const"
  "raints.MutexedH\000\022(\n\ndelayedOff\030\005 \001(\rB\022\212\265"
  "\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022\'\n\tdelayedOn\030\006 \001(\rB\022\212"
  "\265\030\002\010\003\212\265\030\003\020\350\007\222\?\0028 H\000\022\034\n\005mutex\030\003 \001(\rB\013\212\265\030\002"
  "\030\010\222\?\0028\020H\000\022\035\n\010limiting\030d \001(\rB\013\212\265\030\002H\001\222\?\002\030\003"
  "\022+\n\tremaining\030e \001(\rB\030\212\265\030\002\010\003\212\265\030\003\020\350\007\212\265\030\002(\001"
  "\222\?\0028 B\014\n\nconstraint\"Z\n\022DigitalConstraint"
  "s\022D\n\013constraints\030\001 \003(\0132(.blox_test.Const"
  "raints.DigitalConstraintB\005\222\?\002\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Constraints_5ftest_2eproto_deps[2] = {
  &::descriptor_table_brewblox_5ftest_2eproto,
  &::descriptor_table_nanopb_5ftest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Constraints_5ftest_2eproto_sccs[6] = {
  &scc_info_AnalogConstraint_Constraints_5ftest_2eproto.base,
  &scc_info_AnalogConstraints_Constraints_5ftest_2eproto.base,
  &scc_info_Balanced_Constraints_5ftest_2eproto.base,
  &scc_info_DigitalConstraint_Constraints_5ftest_2eproto.base,
  &scc_info_DigitalConstraints_Constraints_5ftest_2eproto.base,
  &scc_info_Mutexed_Constraints_5ftest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Constraints_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Constraints_5ftest_2eproto = {
  false, false, descriptor_table_protodef_Constraints_5ftest_2eproto, "Constraints_test.proto", 1039,
  &descriptor_table_Constraints_5ftest_2eproto_once, descriptor_table_Constraints_5ftest_2eproto_sccs, descriptor_table_Constraints_5ftest_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_Constraints_5ftest_2eproto::offsets,
  file_level_metadata_Constraints_5ftest_2eproto, 6, file_level_enum_descriptors_Constraints_5ftest_2eproto, file_level_service_descriptors_Constraints_5ftest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Constraints_5ftest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Constraints_5ftest_2eproto)), true);
namespace blox_test {
namespace Constraints {

// ===================================================================

void Balanced::InitAsDefaultInstance() {
}
class Balanced::_Internal {
 public:
};

Balanced::Balanced(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.Constraints.Balanced)
}
Balanced::Balanced(const Balanced& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&balancerid_, &from.balancerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Constraints.Balanced)
}

void Balanced::SharedCtor() {
  ::memset(&balancerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
}

Balanced::~Balanced() {
  // @@protoc_insertion_point(destructor:blox_test.Constraints.Balanced)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Balanced::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Balanced::ArenaDtor(void* object) {
  Balanced* _this = reinterpret_cast< Balanced* >(object);
  (void)_this;
}
void Balanced::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balanced::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Balanced& Balanced::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Balanced_Constraints_5ftest_2eproto.base);
  return *internal_default_instance();
}


void Balanced::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Constraints.Balanced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&balancerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&balancerid_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balanced::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 balancerId = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          balancerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 granted = 2 [(.brewblox.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Balanced::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Constraints.Balanced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 balancerId = 1 [(.nanopb) = {
  if (this->balancerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_balancerid(), target);
  }

  // uint32 granted = 2 [(.brewblox.field) = {
  if (this->granted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_granted(), target);
  }

  // uint32 id = 3 [(.nanopb) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Constraints.Balanced)
  return target;
}

size_t Balanced::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Constraints.Balanced)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 balancerId = 1 [(.nanopb) = {
  if (this->balancerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_balancerid());
  }

  // uint32 granted = 2 [(.brewblox.field) = {
  if (this->granted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_granted());
  }

  // uint32 id = 3 [(.nanopb) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Balanced::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.Constraints.Balanced)
  GOOGLE_DCHECK_NE(&from, this);
  const Balanced* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Balanced>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.Constraints.Balanced)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.Constraints.Balanced)
    MergeFrom(*source);
  }
}

void Balanced::MergeFrom(const Balanced& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Constraints.Balanced)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.balancerid() != 0) {
    _internal_set_balancerid(from._internal_balancerid());
  }
  if (from.granted() != 0) {
    _internal_set_granted(from._internal_granted());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Balanced::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.Constraints.Balanced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balanced::CopyFrom(const Balanced& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Constraints.Balanced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balanced::IsInitialized() const {
  return true;
}

void Balanced::InternalSwap(Balanced* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Balanced, id_)
      + sizeof(Balanced::id_)
      - PROTOBUF_FIELD_OFFSET(Balanced, balancerid_)>(
          reinterpret_cast<char*>(&balancerid_),
          reinterpret_cast<char*>(&other->balancerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Balanced::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mutexed::InitAsDefaultInstance() {
}
class Mutexed::_Internal {
 public:
};

Mutexed::Mutexed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.Constraints.Mutexed)
}
Mutexed::Mutexed(const Mutexed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mutexid_, &from.mutexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&haslock_) -
    reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
  // @@protoc_insertion_point(copy_constructor:blox_test.Constraints.Mutexed)
}

void Mutexed::SharedCtor() {
  ::memset(&mutexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&haslock_) -
      reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
}

Mutexed::~Mutexed() {
  // @@protoc_insertion_point(destructor:blox_test.Constraints.Mutexed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mutexed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mutexed::ArenaDtor(void* object) {
  Mutexed* _this = reinterpret_cast< Mutexed* >(object);
  (void)_this;
}
void Mutexed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mutexed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mutexed& Mutexed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mutexed_Constraints_5ftest_2eproto.base);
  return *internal_default_instance();
}


void Mutexed::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Constraints.Mutexed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mutexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&haslock_) -
      reinterpret_cast<char*>(&mutexid_)) + sizeof(haslock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mutexed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mutexId = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mutexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 extraHoldTime = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          extraholdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasCustomHoldTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hascustomholdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasLock = 4 [(.brewblox.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          haslock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mutexed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Constraints.Mutexed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mutexId = 1 [(.nanopb) = {
  if (this->mutexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mutexid(), target);
  }

  // uint32 extraHoldTime = 2 [(.nanopb) = {
  if (this->extraholdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extraholdtime(), target);
  }

  // bool hasCustomHoldTime = 3;
  if (this->hascustomholdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hascustomholdtime(), target);
  }

  // bool hasLock = 4 [(.brewblox.field) = {
  if (this->haslock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_haslock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Constraints.Mutexed)
  return target;
}

size_t Mutexed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Constraints.Mutexed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mutexId = 1 [(.nanopb) = {
  if (this->mutexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mutexid());
  }

  // uint32 extraHoldTime = 2 [(.nanopb) = {
  if (this->extraholdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extraholdtime());
  }

  // bool hasCustomHoldTime = 3;
  if (this->hascustomholdtime() != 0) {
    total_size += 1 + 1;
  }

  // bool hasLock = 4 [(.brewblox.field) = {
  if (this->haslock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mutexed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.Constraints.Mutexed)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutexed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mutexed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.Constraints.Mutexed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.Constraints.Mutexed)
    MergeFrom(*source);
  }
}

void Mutexed::MergeFrom(const Mutexed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Constraints.Mutexed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mutexid() != 0) {
    _internal_set_mutexid(from._internal_mutexid());
  }
  if (from.extraholdtime() != 0) {
    _internal_set_extraholdtime(from._internal_extraholdtime());
  }
  if (from.hascustomholdtime() != 0) {
    _internal_set_hascustomholdtime(from._internal_hascustomholdtime());
  }
  if (from.haslock() != 0) {
    _internal_set_haslock(from._internal_haslock());
  }
}

void Mutexed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.Constraints.Mutexed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutexed::CopyFrom(const Mutexed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Constraints.Mutexed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutexed::IsInitialized() const {
  return true;
}

void Mutexed::InternalSwap(Mutexed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mutexed, haslock_)
      + sizeof(Mutexed::haslock_)
      - PROTOBUF_FIELD_OFFSET(Mutexed, mutexid_)>(
          reinterpret_cast<char*>(&mutexid_),
          reinterpret_cast<char*>(&other->mutexid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mutexed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogConstraint::InitAsDefaultInstance() {
  ::blox_test::Constraints::_AnalogConstraint_default_instance_.min_ = 0;
  ::blox_test::Constraints::_AnalogConstraint_default_instance_.max_ = 0;
  ::blox_test::Constraints::_AnalogConstraint_default_instance_.balanced_ = const_cast< ::blox_test::Constraints::Balanced*>(
      ::blox_test::Constraints::Balanced::internal_default_instance());
}
class AnalogConstraint::_Internal {
 public:
  static const ::blox_test::Constraints::Balanced& balanced(const AnalogConstraint* msg);
};

const ::blox_test::Constraints::Balanced&
AnalogConstraint::_Internal::balanced(const AnalogConstraint* msg) {
  return *msg->constraint_.balanced_;
}
void AnalogConstraint::set_allocated_balanced(::blox_test::Constraints::Balanced* balanced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (balanced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(balanced);
    if (message_arena != submessage_arena) {
      balanced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balanced, submessage_arena);
    }
    set_has_balanced();
    constraint_.balanced_ = balanced;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Constraints.AnalogConstraint.balanced)
}
AnalogConstraint::AnalogConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.Constraints.AnalogConstraint)
}
AnalogConstraint::AnalogConstraint(const AnalogConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limiting_ = from.limiting_;
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kMin: {
      _internal_set_min(from._internal_min());
      break;
    }
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kBalanced: {
      _internal_mutable_balanced()->::blox_test::Constraints::Balanced::MergeFrom(from._internal_balanced());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox_test.Constraints.AnalogConstraint)
}

void AnalogConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogConstraint_Constraints_5ftest_2eproto.base);
  limiting_ = false;
  clear_has_constraint();
}

AnalogConstraint::~AnalogConstraint() {
  // @@protoc_insertion_point(destructor:blox_test.Constraints.AnalogConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_constraint()) {
    clear_constraint();
  }
}

void AnalogConstraint::ArenaDtor(void* object) {
  AnalogConstraint* _this = reinterpret_cast< AnalogConstraint* >(object);
  (void)_this;
}
void AnalogConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogConstraint& AnalogConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogConstraint_Constraints_5ftest_2eproto.base);
  return *internal_default_instance();
}


void AnalogConstraint::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:blox_test.Constraints.AnalogConstraint)
  switch (constraint_case()) {
    case kMin: {
      // No need to clear
      break;
    }
    case kMax: {
      // No need to clear
      break;
    }
    case kBalanced: {
      if (GetArena() == nullptr) {
        delete constraint_.balanced_;
      }
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void AnalogConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Constraints.AnalogConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limiting_ = false;
  clear_constraint();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 min = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 max = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox_test.Constraints.Balanced balanced = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_balanced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool limiting = 100 [(.brewblox.field) = {
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Constraints.AnalogConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 min = 1 [(.nanopb) = {
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_min(), target);
  }

  // sint32 max = 2 [(.nanopb) = {
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_max(), target);
  }

  // .blox_test.Constraints.Balanced balanced = 3;
  if (_internal_has_balanced()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::balanced(this), target, stream);
  }

  // bool limiting = 100 [(.brewblox.field) = {
  if (this->limiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_limiting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Constraints.AnalogConstraint)
  return target;
}

size_t AnalogConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Constraints.AnalogConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool limiting = 100 [(.brewblox.field) = {
  if (this->limiting() != 0) {
    total_size += 2 + 1;
  }

  switch (constraint_case()) {
    // sint32 min = 1 [(.nanopb) = {
    case kMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_min());
      break;
    }
    // sint32 max = 2 [(.nanopb) = {
    case kMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_max());
      break;
    }
    // .blox_test.Constraints.Balanced balanced = 3;
    case kBalanced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.balanced_);
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.Constraints.AnalogConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.Constraints.AnalogConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.Constraints.AnalogConstraint)
    MergeFrom(*source);
  }
}

void AnalogConstraint::MergeFrom(const AnalogConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Constraints.AnalogConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limiting() != 0) {
    _internal_set_limiting(from._internal_limiting());
  }
  switch (from.constraint_case()) {
    case kMin: {
      _internal_set_min(from._internal_min());
      break;
    }
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kBalanced: {
      _internal_mutable_balanced()->::blox_test::Constraints::Balanced::MergeFrom(from._internal_balanced());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
}

void AnalogConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.Constraints.AnalogConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogConstraint::CopyFrom(const AnalogConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Constraints.AnalogConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogConstraint::IsInitialized() const {
  return true;
}

void AnalogConstraint::InternalSwap(AnalogConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(limiting_, other->limiting_);
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogConstraints::InitAsDefaultInstance() {
}
class AnalogConstraints::_Internal {
 public:
};

AnalogConstraints::AnalogConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  constraints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.Constraints.AnalogConstraints)
}
AnalogConstraints::AnalogConstraints(const AnalogConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox_test.Constraints.AnalogConstraints)
}

void AnalogConstraints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogConstraints_Constraints_5ftest_2eproto.base);
}

AnalogConstraints::~AnalogConstraints() {
  // @@protoc_insertion_point(destructor:blox_test.Constraints.AnalogConstraints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnalogConstraints::ArenaDtor(void* object) {
  AnalogConstraints* _this = reinterpret_cast< AnalogConstraints* >(object);
  (void)_this;
}
void AnalogConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogConstraints& AnalogConstraints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogConstraints_Constraints_5ftest_2eproto.base);
  return *internal_default_instance();
}


void AnalogConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Constraints.AnalogConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .blox_test.Constraints.AnalogConstraint constraints = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogConstraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Constraints.AnalogConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox_test.Constraints.AnalogConstraint constraints = 1 [(.nanopb) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_constraints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Constraints.AnalogConstraints)
  return target;
}

size_t AnalogConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Constraints.AnalogConstraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox_test.Constraints.AnalogConstraint constraints = 1 [(.nanopb) = {
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogConstraints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.Constraints.AnalogConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogConstraints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogConstraints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.Constraints.AnalogConstraints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.Constraints.AnalogConstraints)
    MergeFrom(*source);
  }
}

void AnalogConstraints::MergeFrom(const AnalogConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Constraints.AnalogConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
}

void AnalogConstraints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.Constraints.AnalogConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogConstraints::CopyFrom(const AnalogConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Constraints.AnalogConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogConstraints::IsInitialized() const {
  return true;
}

void AnalogConstraints::InternalSwap(AnalogConstraints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  constraints_.InternalSwap(&other->constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogConstraints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitalConstraint::InitAsDefaultInstance() {
  ::blox_test::Constraints::_DigitalConstraint_default_instance_.minoff_ = 0u;
  ::blox_test::Constraints::_DigitalConstraint_default_instance_.minon_ = 0u;
  ::blox_test::Constraints::_DigitalConstraint_default_instance_.mutexed_ = const_cast< ::blox_test::Constraints::Mutexed*>(
      ::blox_test::Constraints::Mutexed::internal_default_instance());
  ::blox_test::Constraints::_DigitalConstraint_default_instance_.delayedoff_ = 0u;
  ::blox_test::Constraints::_DigitalConstraint_default_instance_.delayedon_ = 0u;
  ::blox_test::Constraints::_DigitalConstraint_default_instance_.mutex_ = 0u;
}
class DigitalConstraint::_Internal {
 public:
  static const ::blox_test::Constraints::Mutexed& mutexed(const DigitalConstraint* msg);
};

const ::blox_test::Constraints::Mutexed&
DigitalConstraint::_Internal::mutexed(const DigitalConstraint* msg) {
  return *msg->constraint_.mutexed_;
}
void DigitalConstraint::set_allocated_mutexed(::blox_test::Constraints::Mutexed* mutexed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (mutexed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mutexed);
    if (message_arena != submessage_arena) {
      mutexed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutexed, submessage_arena);
    }
    set_has_mutexed();
    constraint_.mutexed_ = mutexed;
  }
  // @@protoc_insertion_point(field_set_allocated:blox_test.Constraints.DigitalConstraint.mutexed)
}
DigitalConstraint::DigitalConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.Constraints.DigitalConstraint)
}
DigitalConstraint::DigitalConstraint(const DigitalConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&limiting_, &from.limiting_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_) -
    reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kMinOff: {
      _internal_set_minoff(from._internal_minoff());
      break;
    }
    case kMinOn: {
      _internal_set_minon(from._internal_minon());
      break;
    }
    case kMutexed: {
      _internal_mutable_mutexed()->::blox_test::Constraints::Mutexed::MergeFrom(from._internal_mutexed());
      break;
    }
    case kDelayedOff: {
      _internal_set_delayedoff(from._internal_delayedoff());
      break;
    }
    case kDelayedOn: {
      _internal_set_delayedon(from._internal_delayedon());
      break;
    }
    case kMutex: {
      _internal_set_mutex(from._internal_mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:blox_test.Constraints.DigitalConstraint)
}

void DigitalConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalConstraint_Constraints_5ftest_2eproto.base);
  ::memset(&limiting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_has_constraint();
}

DigitalConstraint::~DigitalConstraint() {
  // @@protoc_insertion_point(destructor:blox_test.Constraints.DigitalConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_constraint()) {
    clear_constraint();
  }
}

void DigitalConstraint::ArenaDtor(void* object) {
  DigitalConstraint* _this = reinterpret_cast< DigitalConstraint* >(object);
  (void)_this;
}
void DigitalConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalConstraint& DigitalConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalConstraint_Constraints_5ftest_2eproto.base);
  return *internal_default_instance();
}


void DigitalConstraint::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:blox_test.Constraints.DigitalConstraint)
  switch (constraint_case()) {
    case kMinOff: {
      // No need to clear
      break;
    }
    case kMinOn: {
      // No need to clear
      break;
    }
    case kMutexed: {
      if (GetArena() == nullptr) {
        delete constraint_.mutexed_;
      }
      break;
    }
    case kDelayedOff: {
      // No need to clear
      break;
    }
    case kDelayedOn: {
      // No need to clear
      break;
    }
    case kMutex: {
      // No need to clear
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void DigitalConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Constraints.DigitalConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limiting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&limiting_)) + sizeof(remaining_));
  clear_constraint();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 minOff = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_minoff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minOn = 2 [(.nanopb) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_minon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mutex = 3 [(.nanopb) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_mutex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blox_test.Constraints.Mutexed mutexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutexed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delayedOff = 5 [(.nanopb) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_delayedoff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delayedOn = 6 [(.nanopb) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_delayedon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limiting = 100 [(.nanopb) = {
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remaining = 101 [(.nanopb) = {
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Constraints.DigitalConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 minOff = 1 [(.nanopb) = {
  if (_internal_has_minoff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_minoff(), target);
  }

  // uint32 minOn = 2 [(.nanopb) = {
  if (_internal_has_minon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minon(), target);
  }

  // uint32 mutex = 3 [(.nanopb) = {
  if (_internal_has_mutex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mutex(), target);
  }

  // .blox_test.Constraints.Mutexed mutexed = 4;
  if (_internal_has_mutexed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mutexed(this), target, stream);
  }

  // uint32 delayedOff = 5 [(.nanopb) = {
  if (_internal_has_delayedoff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_delayedoff(), target);
  }

  // uint32 delayedOn = 6 [(.nanopb) = {
  if (_internal_has_delayedon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_delayedon(), target);
  }

  // uint32 limiting = 100 [(.nanopb) = {
  if (this->limiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(100, this->_internal_limiting(), target);
  }

  // uint32 remaining = 101 [(.nanopb) = {
  if (this->remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(101, this->_internal_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Constraints.DigitalConstraint)
  return target;
}

size_t DigitalConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Constraints.DigitalConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limiting = 100 [(.nanopb) = {
  if (this->limiting() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limiting());
  }

  // uint32 remaining = 101 [(.nanopb) = {
  if (this->remaining() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remaining());
  }

  switch (constraint_case()) {
    // uint32 minOff = 1 [(.nanopb) = {
    case kMinOff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minoff());
      break;
    }
    // uint32 minOn = 2 [(.nanopb) = {
    case kMinOn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minon());
      break;
    }
    // .blox_test.Constraints.Mutexed mutexed = 4;
    case kMutexed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.mutexed_);
      break;
    }
    // uint32 delayedOff = 5 [(.nanopb) = {
    case kDelayedOff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delayedoff());
      break;
    }
    // uint32 delayedOn = 6 [(.nanopb) = {
    case kDelayedOn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delayedon());
      break;
    }
    // uint32 mutex = 3 [(.nanopb) = {
    case kMutex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.Constraints.DigitalConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.Constraints.DigitalConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.Constraints.DigitalConstraint)
    MergeFrom(*source);
  }
}

void DigitalConstraint::MergeFrom(const DigitalConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Constraints.DigitalConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limiting() != 0) {
    _internal_set_limiting(from._internal_limiting());
  }
  if (from.remaining() != 0) {
    _internal_set_remaining(from._internal_remaining());
  }
  switch (from.constraint_case()) {
    case kMinOff: {
      _internal_set_minoff(from._internal_minoff());
      break;
    }
    case kMinOn: {
      _internal_set_minon(from._internal_minon());
      break;
    }
    case kMutexed: {
      _internal_mutable_mutexed()->::blox_test::Constraints::Mutexed::MergeFrom(from._internal_mutexed());
      break;
    }
    case kDelayedOff: {
      _internal_set_delayedoff(from._internal_delayedoff());
      break;
    }
    case kDelayedOn: {
      _internal_set_delayedon(from._internal_delayedon());
      break;
    }
    case kMutex: {
      _internal_set_mutex(from._internal_mutex());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
}

void DigitalConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.Constraints.DigitalConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalConstraint::CopyFrom(const DigitalConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Constraints.DigitalConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalConstraint::IsInitialized() const {
  return true;
}

void DigitalConstraint::InternalSwap(DigitalConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalConstraint, remaining_)
      + sizeof(DigitalConstraint::remaining_)
      - PROTOBUF_FIELD_OFFSET(DigitalConstraint, limiting_)>(
          reinterpret_cast<char*>(&limiting_),
          reinterpret_cast<char*>(&other->limiting_));
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitalConstraints::InitAsDefaultInstance() {
}
class DigitalConstraints::_Internal {
 public:
};

DigitalConstraints::DigitalConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  constraints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blox_test.Constraints.DigitalConstraints)
}
DigitalConstraints::DigitalConstraints(const DigitalConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blox_test.Constraints.DigitalConstraints)
}

void DigitalConstraints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalConstraints_Constraints_5ftest_2eproto.base);
}

DigitalConstraints::~DigitalConstraints() {
  // @@protoc_insertion_point(destructor:blox_test.Constraints.DigitalConstraints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DigitalConstraints::ArenaDtor(void* object) {
  DigitalConstraints* _this = reinterpret_cast< DigitalConstraints* >(object);
  (void)_this;
}
void DigitalConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalConstraints& DigitalConstraints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalConstraints_Constraints_5ftest_2eproto.base);
  return *internal_default_instance();
}


void DigitalConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:blox_test.Constraints.DigitalConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .blox_test.Constraints.DigitalConstraint constraints = 1 [(.nanopb) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalConstraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blox_test.Constraints.DigitalConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blox_test.Constraints.DigitalConstraint constraints = 1 [(.nanopb) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_constraints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blox_test.Constraints.DigitalConstraints)
  return target;
}

size_t DigitalConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blox_test.Constraints.DigitalConstraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blox_test.Constraints.DigitalConstraint constraints = 1 [(.nanopb) = {
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalConstraints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blox_test.Constraints.DigitalConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalConstraints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalConstraints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blox_test.Constraints.DigitalConstraints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blox_test.Constraints.DigitalConstraints)
    MergeFrom(*source);
  }
}

void DigitalConstraints::MergeFrom(const DigitalConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blox_test.Constraints.DigitalConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
}

void DigitalConstraints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blox_test.Constraints.DigitalConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalConstraints::CopyFrom(const DigitalConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blox_test.Constraints.DigitalConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalConstraints::IsInitialized() const {
  return true;
}

void DigitalConstraints::InternalSwap(DigitalConstraints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  constraints_.InternalSwap(&other->constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalConstraints::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Constraints
}  // namespace blox_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blox_test::Constraints::Balanced* Arena::CreateMaybeMessage< ::blox_test::Constraints::Balanced >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Constraints::Balanced >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Constraints::Mutexed* Arena::CreateMaybeMessage< ::blox_test::Constraints::Mutexed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Constraints::Mutexed >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Constraints::AnalogConstraint* Arena::CreateMaybeMessage< ::blox_test::Constraints::AnalogConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Constraints::AnalogConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Constraints::AnalogConstraints* Arena::CreateMaybeMessage< ::blox_test::Constraints::AnalogConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Constraints::AnalogConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Constraints::DigitalConstraint* Arena::CreateMaybeMessage< ::blox_test::Constraints::DigitalConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Constraints::DigitalConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::blox_test::Constraints::DigitalConstraints* Arena::CreateMaybeMessage< ::blox_test::Constraints::DigitalConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blox_test::Constraints::DigitalConstraints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
